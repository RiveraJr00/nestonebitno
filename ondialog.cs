public OnDialogResponse( playerid, dialogid, response, listitem, inputtext[])
{
    if(strfind(inputtext, "%", true) != -1 || strfind(inputtext, "#", true) != -1)
	{
        SCM( playerid, CRVENA, "Uneli ste format koji server ne podrzava!");
		return 1;
	}

	if( dialogid != dialog_CHPIN && PlayerInfo[ playerid ][ xCHPin ] != 0 && ChPinUnesen[ playerid ] == false ){
		SendCHProtectMessage( playerid, "Ne mozete ovo jer niste potvrdili login vasim CH Pinom!" );
		return 0;
	}
	////////////////////////////////////////////////////////////////////////////

	CurrentDialogID[ playerid ] = -1;

	if( dialogid == dialog_LOGIN ) {

	    if( !response ) return Kick( playerid );
		if( response ) {

			for( new i = 0; i < 13; i ++) {

  				PlayerTextDrawHide(playerid, loginside[playerid][i]);

			}


		    new hash_pass[ 65 ];
    		SHA256_PassHash( inputtext, ImeIgraca( playerid ), hash_pass, sizeof hash_pass );

			if( !strcmp( hash_pass, PlayerInfo[ playerid ][ xLozinka ], false ) && !isnull( inputtext ) ) {

			    strmid( accountRealPass[ playerid ], inputtext, 0, strlen( inputtext ), 255 );

				new q[ 256 ];
				mysql_format(_dbConnector, q, sizeof(q), "SELECT users.*, IFNULL(org_members.org_id, 0) AS `org_id`, org_members.memb_rank, org_members.memb_type \
														  FROM users LEFT JOIN org_members ON  users.user_id = org_members.memb_sqlID \
														  WHERE users.p_name = '%e' LIMIT 1", ImeIgraca( playerid ) );
				mysql_tquery(_dbConnector, q, "OnAccountLoad", "i", playerid );

			}
			else {
			    if( PokusajLogina[ playerid ] == MAX_POKUSAJ_LOGINA - 1 ) {
					format( globalstring, sizeof( globalstring ), "Uneli ste krivu lozinku %d puta i dobili kick!", MAX_POKUSAJ_LOGINA );
				    SCM( playerid, CRVENA, globalstring);
				    Kick( playerid );
				    return true;
				}
		    	PokusajLogina[ playerid ]++;
				SendClientMessageEx( playerid, CRVENA, "Pogresna lozinka. Pokusaj %d/%d!", PokusajLogina[ playerid ], MAX_POKUSAJ_LOGINA );
				new sDStrg[ 512 ];
				format( sDStrg, sizeof( sDStrg ), "Sada se mozete ulogovati upisivanjem vase lozinke u\n\
						polje ispod. Imate 60 sekundi da se logirate, \n\
						u protivnom cete biti izbaceni.\n\n\
						Imate %d pokusaja upisavanja lozinke, ukoliko \n\
						je svaki put upisete pogresno, takoder cete biti izbaceni!\n\n\
						Ako zelite odustati, mozete izabrati 'Odustani',\n\
						ako zelite nastaviti, nakon upisivanja lozinke izaberite\n\
						'Potvrdi'." , MAX_POKUSAJ_LOGINA );
			    SPD( playerid, dialog_LOGIN, DSP, D_NASLOV, sDStrg, D_ODABERI, D_ODUSTANI );
			}
		}
		return true;
	}
	else if( dialogid == dialog_REGISTER ) {
		if(RegistracijaStep[playerid] == 1)
		{
			if( !response ) return Kick( playerid );
			if( response ) {
				if( !IsValidPassword( playerid, inputtext ) ) {
			    	SPD( playerid, dialog_REGISTER, DSI, "Registracija",
					"Unesite vasu zeljenu lozinku.\n\
					"col_red"Lozinka mora imati:\n\
					- Najmanje 6 znakova\n\
					- Najmanje jedno veliko slovo\n\
					- Najmanje jedan broj\n\
					- Najmanje jedan specijalan znak ( !, #, $, /, (, ;, itd. )\n\
					Primjer: "col_white"Croherze123!",
					"Registruj", "Izlaz");
					return 1;
				}
				else {
					for( new i = 0; i < 13; i ++) {


  					PlayerTextDrawHide(playerid, loginside[playerid][i]);

					}

					for( new i = 0; i < 4; i ++) {

				  		PlayerTextDrawShow( playerid, logingore[playerid][i] );
					}
					PlayerTextDrawShow( playerid, logingore[playerid][5]);
	    			SHA256_PassHash( inputtext, ImeIgraca( playerid ), PlayerInfo[ playerid ][ xLozinka ], 65 );
					strmid( accountRealPass[ playerid ], inputtext, 0, strlen( inputtext ), 255 );
					SendInfoMessage( playerid, "Vasa lozinka glasi: %s", inputtext);
					RegistracijaStep[ playerid ] = 2;
					SPD( playerid, dialog_chosesex, DSL, ""col_server"Registracija - "col_white"Koji je vas spol?", "Musko\nZensko", "Odabir", "Izadji" );

			    
		    	}
			}
		}
	}
	//FACTORY
	if(dialogid == DIALOG_KUPI_FABRIKU)
    {
        if(response) 
        {
            new factoryid = GetPVarInt(playerid, "BuyingFactoryID");

            
            if(GetClosestFactory(playerid) != factoryid)
            {
                return SendClientMessage(playerid, 0xFF0000FF, "Odmaknuli ste se od fabrike.");
            }

            
            if(FactoryInfo[factoryid][fabOwnerGangID] != -1)
            {
                return SendClientMessage(playerid, 0xFF0000FF, "Ova fabrika je upravo kupljena.");
            }

                       

			new pGangID = PlayerInfo[playerid][xClan];

            new gangMoney = 10000000; // Privremena vrijednost za testiranje, promjeniti u stvarno stanje sefa mafije/bande
            new factoryPrice = 5000000;

            if(gangMoney < factoryPrice)
            {
                new str[128];
                format(str, sizeof(str), "Vasa banda nema dovoljno novca u sefu! Potrebno: $%d", factoryPrice);
                return SendClientMessage(playerid, 0xFF0000FF, str);
            }

            // Skini novac i postavi vlasnika
			//SKINI NOVAC IZ SEFA BANDE 

            FactoryInfo[factoryid][fabOwnerGangID] = pGangID; 

            // Update u bazi podataka
            new query[256];
            mysql_format(_dbConnector, query, sizeof(query), "UPDATE `factories` SET `owner_gang_id` = %d WHERE `id` = %d", pGangID, FactoryInfo[factoryid][fabID]);
            mysql_tquery(_dbConnector, query, "", "");

            CreateFactoryObjects(factoryid);
			CreateDefaultBarrelsForFactory(factoryid);
			LoadAllBarrels();

            
            SendClientMessage(playerid, 0x00FF00FF, "Cestitamo! Vasa banda je uspjesno kupila laboratoriju.");
        }
        return 1;
    }
	else if(dialogid == DIALOG_FABRIKA_MENI)
    {
        if(!response) return 1; 

        new factoryid = GetPVarInt(playerid, "CurrentFactoryID");
        new IsGangLeader = PlayerInfo[playerid][xLider]; 
        

        switch(listitem)
        {
            case 0: // Naruci listove koke
            {
                if(!IsGangLeader) return SendClientMessage(playerid, 0xFF0000FF, "Samo lider moze narucivati sirovine.");
                if(FactoryInfo[factoryid][fabNaruceniListovi] == 1) return SendClientMessage(playerid, 0xFF0000FF, "Posiljka listova je vec na putu.");

                
                new gangMoney = 10000000; //dodati provjeru koliko banda ima para u sefu
                new price = 200000;

                if(gangMoney < price)
                {
                    new str[128];
                    format(str, sizeof(str), "Banda nema dovoljno novca u sefu! Potrebno: $%d", price);
                    return SendClientMessage(playerid, 0xFF0000FF, str);
                }

				
                // oduzeti pare iz sefa bande
                FactoryInfo[factoryid][fabNaruceniListovi] = 1;

                // Update baze
                new query[256];
                mysql_format(_dbConnector, query, sizeof(query), "UPDATE `factories` SET `naruceni_listovi` = 1 WHERE `id` = %d", FactoryInfo[factoryid][fabID]);
                mysql_tquery(_dbConnector, query, "", "");

                // Pokreni tajmer za dostavu (15 minuta = 900000 ms) stavljeno 20 sec sad radi testiranja
                SetTimerEx("OnLeavesDelivered", 20000, false, "i", factoryid);
                SendClientMessage(playerid, 0x00FF00FF, "Narucili ste 1000 listova koke. Posiljka stize za 15 minuta na napusteni aerodrom u Las Venturasu.");
            }
            case 1: // Naruči aceton
            {
                if(!IsGangLeader) return SendClientMessage(playerid, 0xFF0000FF, "Samo lider moze narucivati sirovine.");
                
                // Ovdje bi isla provjera za limit (max 5 buradi u 1 satu), za sada je pojednostavljeno
                
                
                new gangMoney = 10000000;// isto zamjeniti sa stanjem sefa u bandi
                new price = 50000;

                if(gangMoney < price) return SendClientMessage(playerid, 0xFF0000FF, "Banda nema dovoljno novca u sefu za bure acetona.");

                // uzeti pare iz sefa bande
                FactoryInfo[factoryid][fabSefAceton]++; // Dodajemo jedno bure

                // Update baze
                new query[256];
                mysql_format(_dbConnector, query, sizeof(query), "UPDATE `factories` SET `sef_aceton` = `sef_aceton` + 1 WHERE `id` = %d", FactoryInfo[factoryid][fabID]);
                mysql_tquery(_dbConnector, query, "", "");

                SendClientMessage(playerid, 0x00FF00FF, "Kupili ste 1 bure acetona. Automatski je dostavljeno u magacin fabrike.");
            }
            case 2: // Nadogradnje
            {
                new dialogText[512], tmpStr[128];
				new v_cost = GetVentilationUpgradeCost(FactoryInfo[factoryid][fabLevelVentilacija]);
				new p_cost = GetSpaceUpgradeCost(FactoryInfo[factoryid][fabLevelProstor]);
				new a_cost = GetAcetoneUpgradeCost(FactoryInfo[factoryid][fabLevelAceton]);

				// Opcija za Ventilaciju
				if(v_cost > 0) format(tmpStr, sizeof(tmpStr), "Ventilacija (Lvl %d -> %d) - $%d\n", FactoryInfo[factoryid][fabLevelVentilacija], FactoryInfo[factoryid][fabLevelVentilacija]+1, v_cost);
				else format(tmpStr, sizeof(tmpStr), "Ventilacija (MAX Level)\n");
				strcat(dialogText, tmpStr);

				// Opcija za Prostor
				if(p_cost > 0) format(tmpStr, sizeof(tmpStr), "Prostor (Lvl %d -> %d) - $%d\n", FactoryInfo[factoryid][fabLevelProstor], FactoryInfo[factoryid][fabLevelProstor]+1, p_cost);
				else format(tmpStr, sizeof(tmpStr), "Prostor (MAX Level)\n");
				strcat(dialogText, tmpStr);

				// Opcija za Aceton burad
				if(a_cost > 0) format(tmpStr, sizeof(tmpStr), "Burad za aceton (Lvl %d -> %d) - $%d", FactoryInfo[factoryid][fabLevelAceton], FactoryInfo[factoryid][fabLevelAceton]+1, a_cost);
				else format(tmpStr, sizeof(tmpStr), "Burad za aceton (MAX Level)");
				strcat(dialogText, tmpStr);

				ShowPlayerDialog(playerid, DIALOG_NADOGRADNJE, DIALOG_STYLE_LIST, "Nadogradnje", dialogText, "Kupi", "Nazad");
            }
            case 3: // Stanje magacina i informacije
            {
                // Prikaži info dijalog
                new infoText[512];
                format(infoText, sizeof(infoText),
                    "Vlasnik: %s\n\
                    Level Ventilacije: %d\n\
                    Level Prostora (Burad za benzin): %d\n\
                    Level Buradi za aceton: %d\n\n\
                    {FFFF00}--- Stanje Magacina ---\n\
                    {FFFFFF}Listovi Koke: {00FF00}%d kom\n\
                    {FFFFFF}Aceton: {00FF00}%d buradi\n\
                    {FFFFFF}Gotov Kokain: {00FF00}%d g",
                    "Ime Bande", // zamjeniti ovo kasnije sa imenom bande
                    FactoryInfo[factoryid][fabLevelVentilacija],
                    FactoryInfo[factoryid][fabLevelProstor],
                    FactoryInfo[factoryid][fabLevelAceton],
                    FactoryInfo[factoryid][fabSefListovi],
                    FactoryInfo[factoryid][fabSefAceton],
                    FactoryInfo[factoryid][fabSefKokain]
                );
                ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacije o Laboratoriji", infoText, "Uredu", "");
            }
        }
        return 1;
    }
	else if(dialogid == DIALOG_NADOGRADNJE)
{
    if(!response) 
    {
        return 1;
    }

    new factoryid = GetPVarInt(playerid, "CurrentFactoryID");
    // Pretpostavka da tvoj PlayerInfo sadrži 'xLider' ili sličnu varijablu
    new IsGangLeader = PlayerInfo[playerid][xLider];
    
    if(!IsGangLeader) return SendClientMessage(playerid, 0xFF0000FF, "Samo lider moze kupovati nadogradnje.");

    // Pretpostavka da imaš funkciju za provjeru i oduzimanje novca iz sefa
    // new gangMoney = GetGangSafeMoney(FactoryInfo[factoryid][fabOwnerGangID]);
    new gangMoney = 20000000; // Privremena vrijednost, zamijeni je pravom funkcijom
    new price = 0;
    new query[256];
    new bool:refreshDialog = true;

    switch(listitem)
    {
        case 0: // Nadogradnja Ventilacije
        {
            price = GetVentilationUpgradeCost(FactoryInfo[factoryid][fabLevelVentilacija]);
            if(price == 0) return SendClientMessage(playerid, 0xFFFF00FF, "Ventilacija je vec na maksimalnom nivou."), refreshDialog = false;
            if(gangMoney < price) return SendClientMessage(playerid, 0xFF0000FF, "Banda nema dovoljno novca u sefu za ovu nadogradnju.");

            // Oduzmi novac iz sefa
            

            FactoryInfo[factoryid][fabLevelVentilacija]++;
            mysql_format(_dbConnector, query, sizeof(query), "UPDATE `factories` SET `level_ventilacija` = %d WHERE `id` = %d", FactoryInfo[factoryid][fabLevelVentilacija], FactoryInfo[factoryid][fabID]);
            mysql_tquery(_dbConnector, query, "", "");
            SendClientMessage(playerid, 0x00FF00FF, "Uspjesno ste kupili nadogradnju za ventilaciju!");
        }
        case 1: // Nadogradnja Prostora (Burad za benzin)
        {
            price = GetSpaceUpgradeCost(FactoryInfo[factoryid][fabLevelProstor]);
            if(price == 0) return SendClientMessage(playerid, 0xFFFF00FF, "Prostor je vec na maksimalnom nivou."), refreshDialog = false;
            if(gangMoney < price) return SendClientMessage(playerid, 0xFF0000FF, "Banda nema dovoljno novca za ovu nadogradnju.");
            
            // Oduzimanje novca iz sefa
            

            FactoryInfo[factoryid][fabLevelProstor]++;
            mysql_format(_dbConnector, query, sizeof(query), "UPDATE `factories` SET `level_prostor` = %d WHERE `id` = %d", FactoryInfo[factoryid][fabLevelProstor], FactoryInfo[factoryid][fabID]);
            mysql_tquery(_dbConnector, query, "", "");

            // Kreiranje novih buradi u bazi
            new db_factory_id = FactoryInfo[factoryid][fabID];
            for(new i = 0; i < 2; i++)
            {
                mysql_format(_dbConnector, query, sizeof(query), "INSERT INTO `factory_barrels` (factory_id, barrel_type) VALUES (%d, 1)", db_factory_id);
                mysql_tquery(_dbConnector, query, "", "");
            }
            LoadAllBarrels(); // Osvježavanje liste buradi u skripti
            SendClientMessage(playerid, 0x00FF00FF, "Nadogradnja kupljena! Dobili ste 2 nova mjesta za burad za benzin.");
        }
        case 2: // Nadogradnja Buradi za Aceton
        {
            price = GetAcetoneUpgradeCost(FactoryInfo[factoryid][fabLevelAceton]);
            if(price == 0) return SendClientMessage(playerid, 0xFFFF00FF, "Burad za aceton su vec na maksimalnom nivou."), refreshDialog = false;
            if(gangMoney < price) return SendClientMessage(playerid, 0xFF0000FF, "Banda nema dovoljno novca za ovu nadogradnju.");

            // Oduzimanje novca iz sefa
            

            FactoryInfo[factoryid][fabLevelAceton]++;
            mysql_format(_dbConnector, query, sizeof(query), "UPDATE `factories` SET `level_aceton` = %d WHERE `id` = %d", FactoryInfo[factoryid][fabLevelAceton], FactoryInfo[factoryid][fabID]);
            mysql_tquery(_dbConnector, query, "", "");

         
            new db_factory_id = FactoryInfo[factoryid][fabID];
            for(new i = 0; i < 2; i++)
            {
                mysql_format(_dbConnector, query, sizeof(query), "INSERT INTO `factory_barrels` (factory_id, barrel_type) VALUES (%d, 2)", db_factory_id);
                mysql_tquery(_dbConnector, query, "", "");
            }
            LoadAllBarrels(); 
            SendClientMessage(playerid, 0x00FF00FF, "Nadogradnja kupljena! Dobili ste 2 nova mjesta za burad za aceton.");
        }
    }

    if(refreshDialog)
    {
        OnDialogResponse(playerid, DIALOG_FABRIKA_MENI, 1, 2, "");
    }
    return 1;
	}
	else if( dialogid == dialog_COUNTRY ) {
		if(RegistracijaStep[playerid] == 3)
		{
		    if( !response ) return Kick( playerid );
			if( response ) {
			    switch( listitem ) {

				 	case 0: {
				 		PlayerTextDrawHide( playerid, logingore[playerid][5]);
			    		PlayerTextDrawShow( playerid, logingore[playerid][4]);
				 	    PlayerInfo[ playerid ][ xDrzava ] = 3;
				 	    SendInfoMessage( playerid, "Odabrali ste Srbiju kao drzavu odakle dolazite.");
				 	    RegistracijaStep[ playerid ] = 4;
				 	    SPD( playerid, dialog_AGE, DSI, ""col_server"Registracija - "col_white"Godine", "U prazni prostor ispod unesite vase godine\nMinimalno 12 maximalno 70", "Unos", "Izadji" );
				 	}
				 	case 1: {
				 		PlayerTextDrawHide( playerid, logingore[playerid][5]);
			    		PlayerTextDrawShow( playerid, logingore[playerid][4]);
				 	    PlayerInfo[ playerid ][ xDrzava ] = 2;
					    SendInfoMessage( playerid, "Odabrali ste Hrvatsku kao drzavu odakle dolazite.");
					    RegistracijaStep[ playerid ] = 4;
				 	    SPD( playerid, dialog_AGE, DSI, ""col_server"Registracija - "col_white"Godine", "U prazni prostor ispod unesite vase godine\nMinimalno 12 maximalno 70", "Unos", "Izadji" );
				 	}
				 	case 2: {
				 		PlayerTextDrawHide( playerid, logingore[playerid][5]);
			    		PlayerTextDrawShow( playerid, logingore[playerid][4]);
				 	    PlayerInfo[ playerid ][ xDrzava ] = 1;
					    SendInfoMessage( playerid, "Odabrali ste Makedoniju kao drzavu odakle dolazite.");
					    RegistracijaStep[ playerid ] = 4;
				 	    SPD( playerid, dialog_AGE, DSI, ""col_server"Registracija - "col_white"Godine", "U prazni prostor ispod unesite vase godine\nMinimalno 12 maximalno 70", "Unos", "Izadji" );
				 	}
				 	case 3: {
				 		PlayerTextDrawHide( playerid, logingore[playerid][5]);
			    		PlayerTextDrawShow( playerid, logingore[playerid][4]);
				 	    PlayerInfo[ playerid ][ xDrzava ] = 4;
					    SendInfoMessage( playerid, "Odabrali ste Crnu Goru kao drzavu odakle dolazite.");
					    RegistracijaStep[ playerid ] = 4;
				 	    SPD( playerid, dialog_AGE, DSI, ""col_server"Registracija - "col_white"Godine", "U prazni prostor ispod unesite vase godine\nMinimalno 12 maximalno 70", "Unos", "Izadji" );
				 	}
				 	case 4: {
				 		PlayerTextDrawHide( playerid, logingore[playerid][5]);
			    		PlayerTextDrawShow( playerid, logingore[playerid][4]);
				 	    PlayerInfo[ playerid ][ xDrzava ] = 5;
				 	    SendInfoMessage( playerid, "Odabrali ste Bosnu i Hercegovinu kao drzavu odakle dolazite.");
				 	    RegistracijaStep[ playerid ] = 4;
				 	    SPD( playerid, dialog_AGE, DSI, ""col_server"Registracija - "col_white"Godine", "U prazni prostor ispod unesite vase godine\nMinimalno 12 maximalno 70", "Unos", "Izadji" );
				 	}
				 	case 5: {
				 		PlayerTextDrawHide( playerid, logingore[playerid][5]);
			    		PlayerTextDrawShow( playerid, logingore[playerid][4]);
				 	    PlayerInfo[ playerid ][ xDrzava ] = 6;
					    SendInfoMessage( playerid, "Odabrali ste Ostalo kao drzavu odakle dolazite.");
					    RegistracijaStep[ playerid ] = 4;
				 	    SPD( playerid, dialog_AGE, DSI, ""col_server"Registracija - "col_white"Godine", "U prazni prostor ispod unesite vase godine\nMinimalno 12 maximalno 70", "Unos", "Izadji" );
				 	}
				}
			}
		}
	}
	else if( dialogid == dialog_chosesex ) {
		if(RegistracijaStep[playerid] == 2)
		{
			if( !response ) return Kick( playerid );
			if( response ) {
			    switch( listitem ) {
					case 0: {

				        PlayerInfo[ playerid ][ xPol ] = 1;
				        PlayerInfo[ playerid ][ xSkin ] = 23;
						RegSex[ playerid ] = 1;
						chose_skin[ playerid ] = 0;

						SendInfoMessage( playerid, "U redu, vi ste musko.");

						RegistracijaStep[ playerid ] = 3;

						SPD( playerid, dialog_COUNTRY, DSL, ""col_server"Registracija - "col_white"Odakle ste?", "Srbija\nHrvatska\nMakedonija\nCrna Gora\nBosna i Hercegovina\nOstalo", "Odabir", "Izadji" );
					}
					case 1: {

						PlayerInfo[ playerid ][ xPol ] = 2;
						PlayerInfo[ playerid ][ xSkin ] = 40;
						RegSex[ playerid ] = 2;
						chose_skin[ playerid ] = 0;

						SendInfoMessage( playerid, "U redu, vi ste zensko.");

						RegistracijaStep[ playerid ] = 3;

						SPD( playerid, dialog_COUNTRY, DSL, "Odakle ste?", "Srbija\nHrvatska\nMakedonija\nCrna Gora\nBosna i Hercegovina\nOstalo", "Odabir", "Izadji" );
					}
				}
			}
		}
	}
	else if( dialogid == dialog_AGE ) {
		if(RegistracijaStep[playerid] == 4)
		{
			if( !response ) return Kick( playerid );
			if( response ) {
			    new age = strval( inputtext );
				if( age < 12 || age > 70 ) return SPD( playerid, dialog_AGE, DSI, ""col_server"Registracija - "col_white"Godine", ""col_white"U prazni prostor ispod unesite vase godine\nMinimalno 12 maximalno 70", "Unos", "Izadji" );
				PlayerInfo[ playerid ][ xGodine ] = age;
			    SendInfoMessage( playerid, "U redu, vi imate %d godina.", age);
			    RegistracijaStep[ playerid ] = 5;
			    SPD(playerid, dialog_MAIL, DSI, ""col_server"Registracija - "col_white"E-mail", ""col_white"Email je vrlo bitan u slucaju da ste izgubili lozinku ili pristup vasem racunu.", "Unos", "Izadji" );
			}
		}
	}
	else if( dialogid == dialog_MAIL ) {
		if(RegistracijaStep[playerid] == 5)
		{
			if( !response ) return Kick( playerid );
			if( response ) {
				new mailstring = strfind( inputtext, "@", true), tackastring = strfind( inputtext, ".", true );
				if( mailstring == -1 || tackastring == -1) {
					return SPD(playerid, dialog_MAIL, DSI, ""col_server"E-Mail", ""col_white"Email je vrlo bitan u slucaju da ste izgubili lozinku ili pristup vasem racunu.\n\n\
					"col_red"Error: Pogresan unos\n"col_white"Primjer: imeprezime@gmail.com", "Unos", "Izadji" );
				}
				else if( strlen( inputtext ) > MAX_EMAIL ) {
					return SPD(playerid, dialog_MAIL, DSI, ""col_server"E-Mail", ""col_white"Email je vrlo bitan u slucaju da ste izgubili lozinku ili pristup vasem racunu.\n\n\
					"col_red"Error: Email je predugacak!", "Unos", "Izadji" );
				}
				else {
					new query[128];
					mysql_format( _dbConnector, query, sizeof(query), "SELECT `p_name`, `email` FROM `users` WHERE `email` = '%s' LIMIT 1", inputtext );
					mysql_pquery( _dbConnector, query, "DuplicateMailCheck", "is", playerid, inputtext );
				}
			}
		}
	}
	else if( dialogid == dialog_EMAILVF ){
		if( PlayerInfo[ playerid ][ xRegistrovan ] == 1 ){
			if( !response ) return 1;
			else if( response ){
				new kod;
				if( sscanf( inputtext, "i", kod ) ) {
					SPD( playerid, dialog_EMAILVF, DSI, ""col_server"Potvrda E-mail racuna", ""col_white"Na vas e-mail poslan je sigurnosni kod koji je potrebno unijeti dolje.\n\
					"col_red"Error: Nepravilan unos", "Potvrdi", "Odustani" );
					return 1;
				}
				if( kod == PlayerCode[ playerid ] ){
					if( Email_or_Pass[ playerid ] == 2 ) SPD( playerid, dialog_EMAIL, DSI, D_NASLOV, ""col_zenolo"Kod potvrdjen!\n\n"col_white"U prazni prostor ispod unesite vasu novu e-mail adresu.", "Unos", "Izlaz");
					else if( Email_or_Pass[ playerid ] == 1 ) SPD( playerid, dialog_CHANGEPASSWORD, DSI, D_NASLOV, ""col_zenolo"Kod potvrdjen!\n\n"col_red"Upisi novu sifru i dobro ju zapamti!\n\
					CH Admin team ne odgovara za nestale/ukradene sifre!", D_ODABERI, D_ODUSTANI );
				}
				else return SendErrorMessage( playerid, "Niste unijeli ispravan kod za autentifikaciju e-maila." );
			}
		}
		else {
			if( !response ) return Kickovanje( playerid, ""col_red"Niste unijeli kod za potvrdu e-mail adrese te ste kickovani!" );
			else if( response ){
				new kod;
				if( sscanf( inputtext, "i", kod ) ) {
					SPD( playerid, dialog_EMAILVF, DSI, ""col_server"Potvrda E-mail racuna", ""col_white"Na vas e-mail poslan je sigurnosni kod koji je potrebno unijeti dolje.\n\
					"col_red"Error: Nepravilan unos", "Potvrdi", "Odustani" );
					return 1;
				}
				if( kod == PlayerCode[ playerid ] ){
					for( new i = 0; i < 6; i ++) {
						//TextDrawHideForPlayer( playerid, logingore[playerid][ i ] );
						PlayerTextDrawHide(playerid, logingore[playerid][i]);
					}

					for( new i = 0; i < 6; i ++) {
						TextDrawHideForPlayer( playerid, gLoginTDs[ i ] );
					}

					PlayerTextDrawHide( playerid, pLoginTD[ playerid ] );
					PlayerTextDrawDestroy( playerid, pLoginTD[ playerid ] );

					SendInfoMessage( playerid, "Vasa e-mail adresa je potvrdjena i glasi: %s", PlayerInfo[ playerid ][ xEmail ] );

					//ShowSpeedo(playerid,false);
					RegisterTDControl( playerid, false );
					PlayerInfo[ playerid ][ xPocetniTut ] = 0;
					CancelSelectTextDraw( playerid );
					IgracSeRegistruje[ playerid ] = false;
					TogglePlayerSpectating( playerid, true );

					if( PlayerInfo[ playerid ][ xPol ] == 1 )  {
						PlayerInfo[ playerid ][ xSkin ] = 23;
						KGEyes_SetPlayerSkin( playerid, 23 );
					}
					else if( PlayerInfo[ playerid ][ xPol ] == 2 ) {
						PlayerInfo[ playerid ][ xSkin ] = 40;
						KGEyes_SetPlayerSkin( playerid, 40 );
					}

					SetPlayerTime( playerid, ServerInfo[ VrijemeInGame ], 0 );
					SetPlayerInterior( playerid, 0 );
					SetPlayerVirtualWorld( playerid, 1 );
					InterpolateCameraPos(playerid, 1499.427368, -2211.392089, 50.204597, 1534.141723, -2287.918701, 33.354297, 7000);
					InterpolateCameraLookAt(playerid, 1499.957153, -2206.460205, 50.833782, 1529.290649, -2287.728271, 32.158004, 7000);
					KGEyes_SetPlayerPos( playerid, 1534.141723, -2287.918701, 33.354297 );
					SendClientMessage( playerid, BELA," ");
					SendClientMessage( playerid, BELA," ");
					SendClientMessage( playerid, BELA," ");
					SendClientMessage( playerid, BELA," ");
					SendClientMessage( playerid, BELA," ");
					SendClientMessage( playerid, BELA," ");
					SendClientMessage( playerid, SVIJETLOPLAVA, "~ DOBRO DOSLI NA CROHERZE ~");
					SendClientMessage( playerid, BELA," ");
					SendClientMessage( playerid, BELA, "Prije svega zelimo vam pozeljeti dobrodoslicu na nas server.");
					SendClientMessage( playerid, BELA, "Ovo je tutorijal u kojem cemo vam pokazati najvaznije lokacije na serveru.");
					SendClientMessage( playerid, BELA, "Objasnit cemo vam kako uspjesno zapoceti igru i uciniti je zanimljivom.");
					SendClientMessage( playerid, BELA, "Verujem da znate da je ovo RP server i da nije isuvise lako doci do novca.");
					TimerTutorial[ playerid ] = SetTimerEx( "PocetniTut", 2000, false, "ii", playerid, 0 );
					RegistracijaStep[ playerid ] = 0;
					PocetniTutorialStartovan[ playerid ] = true;
				}
				else Kickovanje( playerid, ""col_red"Unijeli ste krivi kod za potvrdu e-mail adrese te ste kickovani!" );
			}
		}
	}
	else if( dialogid == dialog_MARKETUBACIVANJE ){
		if( !response ) return true;
		if( response ){
			new kolicina;
			if( sscanf( inputtext, "i", kolicina ) ) {
				format( globalstring, sizeof( globalstring ), ""col_white"Artikl: "col_server"%s\n"col_white"Cijena: "col_server"%d$",
					MarketArtikli[ UbacujeUKosaricu[ playerid ] ][ A_Name ], MarketArtikli[ UbacujeUKosaricu[ playerid ] ][ A_Price ]  );
				SPD( playerid, dialog_MARKETUBACIVANJE, DSI, "Ubacivanje u kosaricu", globalstring, "Ubaci", "Odustani");
				return 1;
			}
			if( kolicina < 1 || kolicina > MarketArtikli[ UbacujeUKosaricu[ playerid ] ][ A_MaxAmount ] )
				return SendErrorMessage( playerid, "Kolicina ne moze biti manja od 1 i veca od %d", MarketArtikli[ UbacujeUKosaricu[ playerid ] ][ A_MaxAmount ] );
			format( globalstring, sizeof( globalstring ), "%s lijevom rukom ubacuje %dx %s u korpu za kupovinu.", RPImeIgraca( playerid ), kolicina, MarketArtikli[ UbacujeUKosaricu[ playerid ] ][ A_Name ] );
			UkupnaCijena[ playerid ] += kolicina*MarketArtikli[ UbacujeUKosaricu[ playerid ] ][ A_Price ];
			PorukaRadius(20.0 , playerid, globalstring, LJUBICASTA );
			UzeoIzMarketa[ playerid ][ UbacujeUKosaricu[ playerid ] ] += kolicina;
		}
	}
	else if( dialogid == dialog_MARKETBUY ) {
	    if( !response ) return true;
    	if( response ) {
    	    static
		    	id = -1;

		    if( PlayerInfo[ playerid ][ xNovac ] < UkupnaCijena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
		    UkupnaCijena[ playerid ] = 0;
		    new money = 0;
		    format( globalstring, sizeof( globalstring ), "%s placa kasirki, te uzima stvari iz korpe.", RPImeIgraca( playerid ) );
			PorukaRadius( 20.0 , playerid, globalstring, LJUBICASTA );
			if( UzeoIzMarketa[ playerid ][ 0 ] >= 1 )
			{
				if( ( Inventory_Count( playerid, "Pizza" ) + UzeoIzMarketa[ playerid ][ 0 ] ) <= 15 ) {}
				else {
					UzeoIzMarketa[ playerid ][ 0 ] = (15-Inventory_Count( playerid, "Pizza" ));
					SendInfoMessage( playerid, "U inventoriju mozete imati maximum 15 pica." );
				}
				id = Inventory_Add( playerid, "Pizza", 2702, UzeoIzMarketa[ playerid ][ 0 ] );

				if( id != -1 ) {
					new pizza = UzeoIzMarketa[ playerid ][ 0 ];
					money += (pizza*100);
					UzeoIzMarketa[ playerid ][ 0 ] = 0;
					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], pizza*50);
				}
				else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite pizzu." );
			}
			if( UzeoIzMarketa[ playerid ][ 1 ] >= 1 )
			{
				if( ( Inventory_Count( playerid, "Uze" ) + UzeoIzMarketa[ playerid ][ 1 ] ) <= 5 ) {}
				else {
					UzeoIzMarketa[ playerid ][ 1 ] = (5-Inventory_Count( playerid, "Uze" ));
					SendInfoMessage( playerid, "U inventoriju mozete imati maximum 5 uza." );
				}
				id = Inventory_Add( playerid, "Uze", 19088, UzeoIzMarketa[ playerid ][ 1 ] );

				if( id != -1 ) {
					new uze = UzeoIzMarketa[ playerid ][ 1 ];
					money += (uze*200);
					UzeoIzMarketa[ playerid ][ 1 ] = 0;
					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], uze*100);
				}
				else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite spray." );
			}
		    if( UzeoIzMarketa[ playerid ][ 2 ] >= 1 )
			{
				if( ( Inventory_Count( playerid, "Spraycan" ) + UzeoIzMarketa[ playerid ][ 5 ] ) <= 10 ) {}
				else {
					UzeoIzMarketa[ playerid ][ 2 ] = (10-Inventory_Count( playerid, "Spraycan" ));
					SendInfoMessage( playerid, "U inventoriju mozete imati maximum 10 sprayeva." );
				}
				id = Inventory_Add( playerid, "Spraycan", 365, UzeoIzMarketa[ playerid ][ 2 ] );

				if( id != -1 ) {
					new spray = UzeoIzMarketa[ playerid ][ 2 ];
					money += (spray*400);
					UzeoIzMarketa[ playerid ][ 2 ] = 0;
					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], spray*200);
				}
				else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite spray." );
			}
		    if( UzeoIzMarketa[ playerid ][ 3 ] >= 1 )
			{
				id = Inventory_Add( playerid, "Sok", 2647, UzeoIzMarketa[ playerid ][ 3 ] );

				if( id != -1 )  {
					new Sok = UzeoIzMarketa[ playerid ][ 3 ];
					money += (Sok*40);
					UzeoIzMarketa[ playerid ][ 3 ] = 0;
					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], Sok*20);
				}
				else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite sok." );
			}
		    if( UzeoIzMarketa[ playerid ][ 4 ] >= 1 )
			{
				id = Inventory_Add( playerid, "Pivo", 1543, UzeoIzMarketa[ playerid ][ 4 ] );

				if( id != -1 ) {
					new Pivo = UzeoIzMarketa[ playerid ][ 4 ];
					money += (Pivo*55);
					UzeoIzMarketa[ playerid ][ 4 ] = 0;
					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], Pivo*30);
				}
				else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite pivo." );
			}
		    if( UzeoIzMarketa[ playerid ][ 5 ] >= 1 )
			{
				if( ( Inventory_Count( playerid, "Hamburger" ) + UzeoIzMarketa[ playerid ][ 5 ] ) <= 15 ) {}
				else {
					UzeoIzMarketa[ playerid ][ 5 ] = (15-Inventory_Count( playerid, "Hamburger" ));
					SendInfoMessage( playerid, "U inventoriju mozete imati maximum 15 hamburgera." );
				}

				id = Inventory_Add( playerid, "Hamburger", 2703, UzeoIzMarketa[ playerid ][ 5 ] );

				if( id != -1 ) {
					new hamburger = UzeoIzMarketa[ playerid ][ 5 ];
					money += (hamburger*65);
					UzeoIzMarketa[ playerid ][ 5 ] = 0;
					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], hamburger*35);
				}
				else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite hamburger." );
			}
		    if( UzeoIzMarketa[ playerid ][ 6 ] >= 1 )
			{
				if( ( Inventory_Count( playerid, "Piletina" ) + UzeoIzMarketa[ playerid ][ 6 ] ) <= 15 ) {}
				else {
					UzeoIzMarketa[ playerid ][ 6 ] = (15-Inventory_Count( playerid, "Piletina" ));
					SendInfoMessage( playerid, "U inventoriju mozete imati maximum 15 piletina." );
				}

				id = Inventory_Add( playerid, "Piletina", 2663, UzeoIzMarketa[ playerid ][ 6 ] );

				if( id != -1 ) {
					new pilence = UzeoIzMarketa[ playerid ][ 6 ];
					money += (pilence*250);
					UzeoIzMarketa[ playerid ][ 6 ] = 0;
					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], pilence*125);
				}
				else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite piletinu." );
			}
			if( UzeoIzMarketa[ playerid ][ 7 ] == 1 )
			{
				id = Inventory_Add( playerid, "Cigarete", 19896, 20 );

				if( id != -1 ) {
				    money += 35;
			        UzeoIzMarketa[ playerid ][ 7 ] = 0;
			        if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 20);
			    }
				else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite cigarete." );
			}
			if( UzeoIzMarketa[ playerid ][ 8 ] == 1 )
			{
				if( Inventory_HasItem( playerid, "Upaljac" ) )  {
					SendErrorMessage( playerid, "Vec imate upaljac u inventoriju." );
				}
				else {
					id = Inventory_Add( playerid, "Upaljac", 19998 );

					if( id != -1 ) {
						money += 25;
				        UzeoIzMarketa[ playerid ][ 8 ] = 0;
				        if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 15);
				    }
				    else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite upaljac." );
				}
			}
			if( UzeoIzMarketa[ playerid ][ 9 ] == 1 )
			{
				if( Inventory_HasItem( playerid, "Stap" ) )  {
					SendErrorMessage( playerid, "Vec imate stap za pecanje u inventoriju." );
				}
				else {
					id = Inventory_Add( playerid, "Stap", 18632 );

					if( id != -1 ) {
						money += 2000;
				        UzeoIzMarketa[ playerid ][ 9 ] = 0;
				        if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 1000);
				    }
				    else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite stap za pecanje." );
				}
			}
			if( UzeoIzMarketa[ playerid ][ 10 ] >= 1 )
			{
		        if( ( Inventory_Count( playerid, "Maska" ) + UzeoIzMarketa[ playerid ][ 10 ] ) )  {}
				else {
					UzeoIzMarketa[ playerid ][ 10 ] = (5-Inventory_Count( playerid, "Maska" ));
					SendInfoMessage( playerid, "U inventoriju mozete imati maximum 5 maski." );
				}
		        id = Inventory_Add( playerid, "Maska", 19036, UzeoIzMarketa[ playerid ][ 10 ] );

			    if( id != -1 ) {
					money += UzeoIzMarketa[ playerid ][ 10 ]*1500;
					new mask_id = 100000 + PlayerInfo[ playerid ][ xID ];
					PlayerInfo[ playerid ][ xMaskID ] = mask_id;
					UzeoIzMarketa[ playerid ][ 10 ] = 0;
					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], UzeoIzMarketa[ playerid ][ 10 ]*750);
					sql_user_update_integer( playerid, "mask_id", PlayerInfo[ playerid ][ xMaskID ] );
				}
				else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite masku." );
			}
			KGEyes_GivePlayerMoney( playerid, -money ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -money, "Market kupovina" );
		}
	}
	
	//-----------[ V3.0 Rudar rework Rivera]---------//

	else if(dialogid == RUDAR_RUTE)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                PosaoRudar[playerid] = 1;
	                csprudar[ playerid ] = 1;
	                posaocutscena[ playerid ] = SetTimerEx("Rudarcutscena", 1000, false, "d", playerid);
					RadiPosao[ playerid ] = POSAO_RUDAR;
	            }
	        }
		}
	}
	else if(dialogid == PREVOZNIKD_RUTE)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					//dorada
					if( pPDrveca[ playerid ] != 0 ) return SendJobMessage( playerid, "Vec imate aktiviranu rutu!");
					if( pDDrveca[ playerid ] != 0 ) return SendJobMessage( playerid, "Vec imate aktiviranu rutu!");
					//if( ServerDrva[ DrvosjecaHangar ] < 10 ) return SendJobMessage( playerid, "Drvosjece nisu jos isjekle dovoljno drveta");

					pPDrveca[ playerid ] = 1;
					PDrvecaCutScena[ playerid ] = SetTimerEx("PreradaDrvetaCutScena", 1000, false, "i", playerid );

				}
				case 1:
				{
					if( pPDrveca[ playerid ] != 0 ) return SendJobMessage( playerid, "Vec imate aktiviranu rutu!");
					if( pDDrveca[ playerid ] != 0 ) return SendJobMessage( playerid, "Vec imate aktiviranu rutu!");
					if( ServerDrva[ PrevoznikHangar ] < 10 ) return SendJobMessage( playerid, "U hangaru nema dovoljno preradjenog drveta za izvoz");
					pDDrveca[ playerid ] = 1;
					DDrvecaCutScena[ playerid ] = SetTimerEx("DostavljacDrvetaCutScena", 1000, false, "i", playerid );
				}
			}
			RadiPosao[ playerid ] = POSAO_DDRVECA;
		}

	}
	//-------------------------------------------//
	else if( dialogid == dialog_SERVERMI ) {
	    if( !response ) return true;
        if( response ) {
        	if( listitem == 0 ) {
        	    if( PlayerInfo[ playerid ][ xAdmin ] < 7  ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");

                if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
                SPD( playerid, dialog_SERVERSTATS, DSL, D_NASLOV, "Informacije servera\nMogucnost kupovine vozila\nSrecni sati\nMogucnost slanja pitanja\nMogucnost slanja reporta\nPromeni pocetni level\nPromeni pocetni novac\nMogucnost postavljanja oglasa\nMogucnost registracije\nHappy Job\nE-mail verifikacija", D_ODABERI, D_NAZAD );

            }
			if( listitem == 1 ) {

			    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
                if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
				SPD( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nElitni stan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nGameSage port\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nDrug Lab\nZgrada\nActor\nSpray Tag\nDealer\nRadar\nUlica", D_ODABERI, D_NAZAD ); }
			if( listitem == 2 ) {

			    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
                if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
				SPD ( playerid, dialog_IZBRISISVE, DSL, D_NASLOV, "Organizacije\nFirme\nImovina\nKontejner\nVozilo\nBankomat\nAuto salon\nPort orge\nHotel\nKapija\nImanje\nGaraza\nGang Zona\nPoklon\nJelka\nLampa\nActor\nZgrada\nDrug Lab\nSpray Tag\nDiler\nRadar\nUlica\nNamjestaj", D_ODABERI, D_NAZAD ); }
			if( listitem == 3 ) {

       			if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
                //if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
                SPD ( playerid, dialog_IZMENISVE, DSL, D_NASLOV, "Organizacije\nFirme\nVozilo\nImovina\nHotel\nKontejner\nGaraza\nGPS Lokacija\nAdmin port\nGameSage port\nAuto Salon\nGang Zona\nActor\nDealer\nUlica\nVlasnik kapije\nNamjestaj", D_ODABERI, D_NAZAD );
			}
			if( listitem == 4 ) {

			    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				for( new i = 1; i < MAX_ORG; i++ ) {

					if( org_info[ i ][ oID ] > 0 ) {

                        format( globalstring, sizeof( globalstring ), "ID : %d | SQLID : %d | Ime organizacije: %s\n", i, org_info[ i ][ oID ], org_info[ i ][ oName ] );
	                	strcat( DialogStrgEx, globalstring );
					}
				}
				SPD( playerid, dialog_ORGLIST, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
			if( listitem == 5 ) {
			    if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
                if( !IsPlayerAdmin( playerid ) ) return SendErrorMessage( playerid, "Moras biti rcon admin." );
        		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				format( globalstring, sizeof( globalstring ), "antiWeaponHack\t%s\t%s\n", getCheatPower( antiCheatSS[ antiWeaponH ] ), getCheatWork( antiCheatSS[ WeaponHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiTeleportHack\t%s\t%s\n", getCheatPower( antiCheatSS[ antiTeleportH ] ), getCheatWork( antiCheatSS[ TeleportHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiFlyHack\t\t%s\t%s\n", getCheatPower( antiCheatSS[ antiFlyH ] ), getCheatWork( antiCheatSS[ FlyHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiVehRepHack\t%s\t%s\n", getCheatPower( antiCheatSS[ antiVehRepair ] ), getCheatWork( antiCheatSS[ VehRepRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiJetpackHack\t%s\t%s\n", getCheatPower( antiCheatSS[ antiJetPackH ] ), getCheatWork( antiCheatSS[ JetPackHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiSpeedHack\t\t%s\t%s\n", getCheatPower( antiCheatSS[ antiSpeedH ] ), getCheatWork( antiCheatSS[ SpeedHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiVehTrollHack\t%s\t%s\n", getCheatPower( antiCheatSS[ antiVehTroll ] ), getCheatWork( antiCheatSS[ VehTrollRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiC-Bug\t\t%s\t%s\n", getCheatPower( antiCheatSS[ antiCbug ] ), getCheatWork( antiCheatSS[ CbugRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiEventStartMove\t%s\n", getCheatPower( antiCheatSS[ antiEventMove ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiDialogManipulation\t%s\n", getCheatPower( antiCheatSS[ antiDialogManipulation ] ) );
				strcat( DialogStrgEx, globalstring );
				/*format( globalstring, sizeof( globalstring ), "Nex Anticheat/%s", NEXenabled ? "Ukljucen":"Iskljucen" ); // NEX AC - Paljenje/Gasenje
				strcat( DialogStrgEx, globalstring );*/
				SPD( playerid, dialog_ANTICHEAT, DSL, "AntiCheat", DialogStrgEx, D_ODABERI, D_NAZAD );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
			if( listitem == 6 ) {

				new coordsstring[ 128 ];

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		   	    strcat( DialogStrgEx, "__________________________________________________________________\n");

		   	    format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih firmi: "col_server"%d/"col_crvena"%d\n", ServerInfo[ businessCounter ]-1, MAX_BUSSINES );
				strcat( DialogStrgEx, coordsstring );
		   	    format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih imovina: "col_server"%d/"col_crvena"%d\n", ServerInfo[ propCounter ]-1, MAX_IMOVINA );
				strcat( DialogStrgEx, coordsstring );
		   	    format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih organizacija: "col_server"%d/"col_crvena"%d\n", ServerInfo[ orgCounter ]-1, MAX_ORG );
				strcat( DialogStrgEx, coordsstring );
		   	    format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih actora: "col_server"%d/"col_crvena"%d\n", ServerInfo[ actorsCounter ], MAX_ACTORSSES );
				strcat( DialogStrgEx, coordsstring );
		   	    format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih bankomata: "col_server"%d/"col_crvena"%d\n", ServerInfo[ atmsCounter ], MAX_ATM );
				strcat( DialogStrgEx, coordsstring );
		   	    format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih kontejnera: "col_server"%d/"col_crvena"%d\n", ServerInfo[ containerCounter ], MAX_CONTAINER );
				strcat( DialogStrgEx, coordsstring );
		   	    format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih pumpi: "col_server"%d/"col_crvena"%d\n", ServerInfo[ fsCounter ], MAX_FSTATION );
				strcat( DialogStrgEx, coordsstring );
		   	    format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih hotela: "col_server"%d/"col_crvena"%d\n", ServerInfo[ hotelsCounter ], MAX_HOTELS );
				strcat( DialogStrgEx, coordsstring );
		   	    format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih auto salona: "col_server"%d/"col_crvena"%d\n", ServerInfo[ vehsalonsCounter ], MAX_AUTOS );
				strcat( DialogStrgEx, coordsstring );
		   	    format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih gang zona: "col_server"%d/"col_crvena"%d\n", ServerInfo[ GangZCounter ], MAX_GZONE );
				strcat( DialogStrgEx, coordsstring );
				format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih garaza: "col_server"%d/"col_crvena"%d\n", ServerInfo[ Garages ], MAX_GARAGES );
				strcat( DialogStrgEx, coordsstring );
				format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih kapija: "col_server"%d/"col_crvena"%d\n", ServerInfo[ Gates ], MAX_GATES );
				strcat( DialogStrgEx, coordsstring );
				format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih grafita: "col_server"%d/"col_crvena"%d\n", ServerInfo[ sprayTagsCounter ], MAX_STAGS );
				strcat( DialogStrgEx, coordsstring );
				format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih ulica: "col_server"%d/"col_crvena"%d\n", ServerInfo[ streetsCounter ], MAX_STREETS );
				strcat( DialogStrgEx, coordsstring );
				format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranog namjestaja: "col_server"%d/"col_crvena"%d\n", ServerInfo[ furnitureCounter ], MAX_FURNITURE );
				strcat( DialogStrgEx, coordsstring );
				format( coordsstring, sizeof( coordsstring ), ""col_white"Broj kreiranih vozila: "col_server"%d/"col_crvena"%d\n", ServerInfo[ BrojKreiranihVozila ], MAX_VEHICLES );
				strcat( DialogStrgEx, coordsstring );

		   	    strcat( DialogStrgEx, "__________________________________________________________________");
				SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
		}
	}
	else if( dialogid == dialog_SERVERSTATS ) {
	    if( !response ) return SPD( playerid, dialog_SERVERMI, DSL, D_NASLOV, "Upravljanje serverom\nNapravi\nIzbrisi\nIzmeni\nSpisak organizacija\nAntiCheat\nBroj kreiranih stvari", D_ODABERI, D_ODUSTANI );
        if( response ) {
            switch( listitem ) {
                case 0: {

                    new coordsstring[ 128 ], srecnisati[ 11 ], mogucnostreporta[ 11 ], mogucnostpitanja[ 11 ], mogucnostkupovinev[ 11 ], oglasici[ 11 ], regic[ 11 ], happyjob[ 32 ],
					pljackanje[ 11 ], druglabrob[ 11 ], eventi[11], uphours;

                    if( ServerInfo[ HappyHours ] == 1 ) srecnisati = "Ukljuceni";
                    else srecnisati = "Iskljuceni";

                    if( ServerInfo[ HappyJob ] > 0 ) format( happyjob, sizeof( happyjob ), "%s", jobsInfos[ ServerInfo[ HappyJob ]-1 ][ jName ] );
                    else happyjob = "Iskljucen";

                    if( ServerInfo[ KupovinaVozila ] == 1 ) mogucnostkupovinev = "Ukljucena";
                    else mogucnostkupovinev = "Iskljucena";

                    if( ServerInfo[ Report ] == 1 ) mogucnostreporta = "Ukljucen";
                    else mogucnostreporta = "Iskljucen";

                    if( ServerInfo[ Pitanja ] == 1 ) mogucnostpitanja = "Ukljucena";
                    else mogucnostpitanja = "Iskljucena";

                    if( ServerInfo[ Oglasi ] == 1 ) oglasici = "Ukljuceni";
                    else oglasici = "Iskljuceni";

                    if( ServerInfo[ Registracija ] == 1 ) regic = "Ukljucena";
                    else regic = "Iskljucena";

					if( ToggedRob == true ) pljackanje = "Ukljuceno";
					else pljackanje = "Iskljuceno";

					if( ServerInfo[ DrugLabRobOnemogucen ] == true ) druglabrob = "Iskljuceno";
					else druglabrob = "Ukljuceno";

					if( randomeventi == 1 ) eventi = "Ukljuceni";
					else eventi = "Iskljuceni";

					new razlika = gettime() - ServerInfo[ UpTime ];
					uphours = razlika/3600;

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				    strcat( DialogStrgEx, "__________________________________________________________________\n");
					format( coordsstring, sizeof( coordsstring ), ""col_server"Posjeta serveru: "col_white"%d\n"col_server"Registriranih: "col_white"%d\n", ServerInfo[ BrojPosetaServeru ], ServerInfo[ RegistrovanihKorisnika ] );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_server"Rekord igraca: "col_white"%d\n"col_server"Kickovi: "col_white"%d\n", ServerInfo[ RekordServera ], ServerInfo[ KikovanihKorisnika ] );
			        strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_server"Banovi: "col_white"%d\n"col_server"Happy Hours: "col_white"%s\n", ServerInfo[ BanovanihKorisnika ], srecnisati );
			        strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_server"Pocetni level: "col_white"%d\n"col_server"Pocetni novac: "col_white"%d\n", ServerInfo[ PocetniLevel ], ServerInfo[ PocetniNovaca ] );
			        strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_server"Pitanja: "col_white"%s\n"col_server"Report: "col_white"%s\n", mogucnostpitanja, mogucnostreporta );
			        strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_server"Registracija: "col_white"%s\n"col_server"Oglasi: "col_white"%s\n", regic, oglasici );
			        strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_server"Happy Job: "col_white"%s\n"col_server"Kupovina vozila: "col_white"%s\n", happyjob, mogucnostkupovinev );
			        strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_server"Pljackanje banki/zlatara: "col_white"%s\n"col_server"Pljackanje drug labova: "col_white"%s\n", pljackanje, druglabrob );
			        strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_server"Random eventi: "col_white"%s\n"col_server"Up Time: "col_white"%d sati\n", eventi, uphours );
			        strcat( DialogStrgEx, coordsstring );
					strcat( DialogStrgEx, "__________________________________________________________________");

					SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

					SaveServerStats( );
				}
				case 1: {
				    ServerStatsChose[ playerid ] = 1;
				    SPD( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost kupovine vozila:", "Ukljuci", "Iskljuci" );
				}
				case 2: {
				    ServerStatsChose[ playerid ] = 2;
				    SPD( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Srecni sati( dupli respekti ):", "Ukljuci", "Iskljuci" );
				}
				case 3: {
				    ServerStatsChose[ playerid ] = 3;
				    SPD( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost slanja pitanja:", "Ukljuci", "Iskljuci" );
				}
				case 4: {
				    ServerStatsChose[ playerid ] = 4;
				    SPD( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost slanja reporta:", "Ukljuci", "Iskljuci" );
				}
				case 5: {
					SPD( playerid, dialog_SERVERSTATS_3, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni level igraca pri registraciji.", D_ODABERI, D_ODUSTANI );
				}
				case 6: {
					SPD( playerid, dialog_SERVERSTATS_4, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni novac igraca pri registraciji.", D_ODABERI, D_ODUSTANI );
				}
				case 7: {
				    ServerStatsChose[ playerid ] = 5;
				    SPD( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost postavljanja oglasa:", "Ukljuci", "Iskljuci" );
				}
				case 8: {
				    ServerStatsChose[ playerid ] = 6;
				    SPD( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost registracije:", "Ukljuci", "Iskljuci" );
				}
				case 9: {

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

					format( DialogStrgEx, sizeof( DialogStrgEx ), "0 - Iskljuci\n" );
				    for( new i = 0; i < MAX_JOBS; i++ ) {
				        format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, i+1, jobsInfos[ i ][ jName ] );
					}

					SPD( playerid, dialog_SERVERSTATS_5, DSL, "Happy Job", DialogStrgEx, D_ODABERI, "Odustani" );
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				}
				case 10: {
					ServerStatsChose[ playerid ] = 7;
					format( globalstring, sizeof( globalstring ), "E-mail verifikacija pri registraciji:\nTrenutni status: %s", ServerInfo[ EmailVf ] ? "{6ef83c}Ukljucena" : ""col_crvena"Iskljuceno" );
				    SPD( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, globalstring, "Ukljuci", "Iskljuci" );
				}
			}
        }
	}
	else if( dialogid == dialog_SERVERSTATS_5 ) {
	    if( !response ) return true;
        if( response ) {

        	if( listitem == 0 ) {
        		if( ServerInfo[ HappyJob ] == 0 ) return SendErrorMessage( playerid, "HappyJob nije ni ukljucen." );
        		ServerInfo[ HappyJob ] = 0;
        		SendInfoMessage( playerid, "Iskljucili ste duple plate." );
        		SCMA( -1, ""col_server"| HAPPY JOB |  "col_white"Iskljucene su duple plate na poslovima!" );
				foreach(Player, i){
					PlayerTextDrawHide(i, InfoBox[i][10] );
				}

        	}
        	else {
        		if( listitem == POSAO_DETEKTIV ) return SendErrorMessage( playerid, "Za posao Detektiva ne postoji happy job.");
        		if( listitem == POSAO_ADVOKAT ) return SendErrorMessage( playerid, "Za posao Advokata ne postoji happy job.");
        		if( listitem == POSAO_TELOHRANITELJ ) return SendErrorMessage( playerid, "Za posao Telohranitelj ne postoji happy job.");
        		if( jobsInfos[ listitem-1 ][ jIsIllegal ] ) return SendErrorMessage( playerid, "Za ilegalne poslove ne postoji happy job.");
        		ServerInfo[ HappyJob ] = listitem;
        		SendInfoMessage( playerid, "Ukljucili ste duple plate za posao %s.", jobsInfos[ listitem-1 ][ jName ] );
        		format( globalstring, sizeof( globalstring ), ""col_server"| HAPPY JOB |  "col_white"Ukljucene su bonus plate na poslu %s!", jobsInfos[ listitem-1 ][ jName ] );
        		SCMA( -1, globalstring );

        		foreach( Player, i ) {
				if( PlayerInfo[ i ][ xNostalgija ] == 0 && !TogHud[ i ] ){
				new str[ 64 ];
				format( str, sizeof( str ), " %s - %s", jobsInfos[ listitem-1 ][ jName ], GetJobSalary( listitem ) );
				PlayerTextDrawSetString( i, InfoBox[i][10], str );
				PlayerTextDrawShow(i, InfoBox[i][10] );
				}
				}
        	}
       	}
    }
	else if( dialogid == dialog_SERVERSTATS_4 ) {
	    if( !response ) return true;
        if( response ) {
            new broj;
            if( sscanf( inputtext, "i", broj ) ) return SPD( playerid, dialog_SERVERSTATS_4, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni novac igraca pri registraciji.", D_ODABERI, D_ODUSTANI );
            if( broj < 1 ) return SendErrorMessage( playerid, "Uneseni broj ne moze biti manji od 1." );

            ServerInfo[ PocetniNovaca ] = broj;
			SaveServerStats( );
			SendInfoMessage( playerid, "Postavili ste pocetni novac na "col_white"%d$.", broj );
		}
	}
	else if( dialogid == dialog_SERVERSTATS_3 ) {
	    if( !response ) return true;
        if( response ) {
            new broj;
            if( sscanf( inputtext, "i", broj ) ) return SPD( playerid, dialog_SERVERSTATS_3, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni level igraca pri registraciji.", D_ODABERI, D_ODUSTANI );
            if( broj < 1 || broj > 5 ) return SendErrorMessage( playerid, "Uneseni broj ne moze biti manji od 1 a veci od 5." );

            ServerInfo[ PocetniLevel ] = broj;
			SaveServerStats( );
			SendInfoMessage( playerid, "Postavili ste pocetni level na "col_white"%d.", broj );
		}
	}
	else if( dialogid == dialog_SERVERSTATS_2 ) {
        if( response ) {
            switch( ServerStatsChose[ playerid ] ) {
                case 1: {
                    ServerInfo[ KupovinaVozila ] = 1;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost kupovine vozila po salonima." );
                }
                case 2: {
                    ServerInfo[ HappyHours ] = 1;
			    	//TextDrawShowForAll( HappyHoursTD );
                    SendInfoMessage( playerid, "Ukljucio si srecne sate." );
                }
                case 3: {
                    ServerInfo[ Pitanja ] = 1;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost slanja pitanja Admin timu." );
                }
                case 4: {
                    ServerInfo[ Report ] = 1;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost slanja reporta Admin timu." );
					if( PlayerInfo[ playerid ][ xAdmin ] < 8 ) {
						format( globalstring, sizeof( globalstring ), "TOGREPORT | %s je ukljucio mogucnost slanja reporta.", ImeIgraca( playerid ) );
						AdminPoruka( NARACRVENA, globalstring );
					}
                }
                case 5: {
                    ServerInfo[ Oglasi ] = 1;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost postavljanja oglasa." );
                }
                case 6: {
                    ServerInfo[ Registracija ] = 1;
                    SendInfoMessage( playerid, "Ukljucio si mogucnost registracije." );
					format( globalstring, sizeof( globalstring ), "| REGISTRACIJA | %s je ukljucio registraciju", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogEdit.log", globalstring );
                }
				case 7: {
					ServerInfo[ EmailVf ] = true;
                    SendInfoMessage( playerid, "Ukljucio si verifikaciju e-maila pri registraciji." );
					format( globalstring, sizeof( globalstring ), "| EMAIL | %s je ukljucio verifikaciju", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogEdit.log", globalstring );
				}
			}
			SaveServerStats( );
		}
		else if( !response ) {
            switch( ServerStatsChose[ playerid ] ) {
                case 1: {
                    ServerInfo[ KupovinaVozila ] = 0;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost kupovine vozila po salonima." );
                }
                case 2: {
                    ServerInfo[ HappyHours ] = 0;
			    	//TextDrawHideForAll( HappyHoursTD );
                    SendInfoMessage( playerid, "Iskljucio si srecne sate." );
                }
                case 3: {
                    ServerInfo[ Pitanja ] = 0;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost slanja pitanja Admin timu." );
                }
                case 4: {
                    ServerInfo[ Report ] = 0;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost slanja reporta Admin timu." );
					if( PlayerInfo[ playerid ][ xAdmin ] < 8 ) {
						format( globalstring, sizeof( globalstring ), "TOGREPORT | %s je iskljucio mogucnost slanja reporta.", ImeIgraca( playerid ) );
						AdminPoruka( NARACRVENA, globalstring );
					}
                }
                case 5: {
                    ServerInfo[ Oglasi ] = 0;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost postavljanja oglasa." );
                }
                case 6: {
                    ServerInfo[ Registracija ] = 0;
                    SendInfoMessage( playerid, "Iskljucio si mogucnost registracije." );
					format( globalstring, sizeof( globalstring ), "| REGISTRACIJA | %s je iskljucio registraciju", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogEdit.log", globalstring );
                }
				case 7: {
					ServerInfo[ EmailVf ] = false;
					SendInfoMessage( playerid, "Iskljucio email verifikaciju pri registraciji." );
					format( globalstring, sizeof( globalstring ), "| EMAIL | %s je iskljucio verifikaciju", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogEdit.log", globalstring );
				}
			}
			SaveServerStats( );
		}
	}
	else if( dialogid == dialog_ANTICHEAT ) {
        if( response ) {
            switch( listitem ) {
                case 0: {
					anticheatinfo[ playerid ] = 0;
                    SPD( playerid, dialog_ANTICHEAT_2, DSL, "antiWeaponHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
                }
                case 1: {
					anticheatinfo[ playerid ] = 1;
                    SPD( playerid, dialog_ANTICHEAT_2, DSL, "antiTeleportHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
                }
                case 2: {
					anticheatinfo[ playerid ] = 2;
                    SPD( playerid, dialog_ANTICHEAT_2, DSL, "antiFlyHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
                }
                case 3: {
					anticheatinfo[ playerid ] = 3;
                    SPD( playerid, dialog_ANTICHEAT_2, DSL, "antiVehRepHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
                }
                case 4: {
					anticheatinfo[ playerid ] = 4;
                    SPD( playerid, dialog_ANTICHEAT_2, DSL, "antiJetpackHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
                }
                case 5: {
					anticheatinfo[ playerid ] = 5;
                    SPD( playerid, dialog_ANTICHEAT_2, DSL, "antiSpeedHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
                }
                case 6: {
					anticheatinfo[ playerid ] = 6;
                    SPD( playerid, dialog_ANTICHEAT_2, DSL, "antiVehTrollHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
                }
				case 7: {
					anticheatinfo[ playerid ] = 7;
					SPD( playerid, dialog_ANTICHEAT_2, DSL, "antiC-Bug", "Iskljuci/Ukljuci\nPromjeni rezim rada", D_ODABERI, D_ODUSTANI );
				}
				case 8: {
					anticheatinfo[ playerid ] = 8;
					SPD( playerid, dialog_ANTICHEAT_2, DSL, "antiEventMove", "Iskljuci/Ukljuci", D_ODABERI, D_ODUSTANI );
				}
				case 9: {
					anticheatinfo[ playerid ] = 9;
					SPD( playerid, dialog_ANTICHEAT_2, DSL, "antiDialogManipulation", "Iskljuci/Ukljuci", D_ODABERI, D_ODUSTANI );
				}
				/*case 7: { // NEX AC - Toggle
					if( NEXenabled == true ) {
						NEXenabled = false;
						SendInfoMessage( playerid, "Iskljucili ste NEX-AC warninge." );
					}
					else if( NEXenabled == false ) {
						NEXenabled = true;
						SendInfoMessage( playerid, "Ukljucili ste NEX-AC warninge." );
					}
				}*/
            }
        }
        else { SPD( playerid, dialog_SERVERMI, DSL, D_NASLOV, "Upravljanje serverom\nNapravi\nIzbrisi\nIzmeni\nSpisak organizacija\nAntiCheat\nBroj kreiranih stvari", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ANTICHEAT_2 ) {
        if( response ) {
            switch( listitem ) {
                case 0: {
                    switch( anticheatinfo[ playerid ] ) {
                		case 0: {
                		    if( antiCheatSS[ antiWeaponH ] ) {
                		        antiCheatSS[ antiWeaponH ] = 0;
                		        SCM( playerid, ZUTA, "Iskljucio si antiWeaponHack." );
                		    }
                		    else if( !antiCheatSS[ antiWeaponH ] ) {
                		        antiCheatSS[ antiWeaponH ] = 1;
                		        SCM( playerid, ZUTA, "Ukljucio si antiWeaponHack." );
                		    }
                		    SaveAntiCheat( );
                		}
                		case 1: {
                		    if( antiCheatSS[ antiTeleportH ] ) {
                		        antiCheatSS[ antiTeleportH ] = 0;
                		        SCM( playerid, ZUTA, "Iskljucio si antiTeleportHack." );
                		    }
                		    else if( !antiCheatSS[ antiTeleportH ] ) {
                		        antiCheatSS[ antiTeleportH ] = 1;
                		        SCM( playerid, ZUTA, "Ukljucio si antiTeleportHack." );
                		    }
                		    SaveAntiCheat( );
                		}
                		case 2: {
                		    if( antiCheatSS[ antiFlyH ] ) {
                		        antiCheatSS[ antiFlyH ] = 0;
                		        SCM( playerid, ZUTA, "Iskljucio si antiFlyHack." );
                		    }
                		    else if( !antiCheatSS[ antiFlyH ] ) {
                		        antiCheatSS[ antiFlyH ] = 1;
                		        SCM( playerid, ZUTA, "Ukljucio si antiFlyHack." );
                		    }
                		    SaveAntiCheat( );
                		}
                		case 3: {
                		    if( antiCheatSS[ antiVehRepair ] ) {
                		        antiCheatSS[ antiVehRepair ] = 0;
                		        SCM( playerid, ZUTA, "Iskljucio si antiVehRepairHack." );
                		    }
                		    else if( !antiCheatSS[ antiVehRepair ] ) {
                		        antiCheatSS[ antiVehRepair ] = 1;
                		        SCM( playerid, ZUTA, "Ukljucio si antiVehRepairHack." );
                		    }
                		    SaveAntiCheat( );
                		}
                		case 4: {
                		    if( antiCheatSS[ antiJetPackH ] ) {
                		        antiCheatSS[ antiJetPackH ] = 0;
                		        SCM( playerid, ZUTA, "Iskljucio si antiJetPackHack." );
                		    }
                		    else if( !antiCheatSS[ antiJetPackH ] ) {
                		        antiCheatSS[ antiJetPackH ] = 1;
                		        SCM( playerid, ZUTA, "Ukljucio si antiJetPackHack." );
                		    }
                		    SaveAntiCheat( );
                		}
                		case 5: {
                		    if( antiCheatSS[ antiSpeedH ] ) {
                		        antiCheatSS[ antiSpeedH ] = 0;
                		        SCM( playerid, ZUTA, "Iskljucio si antiSpeedHack." );
                		    }
                		    else if( !antiCheatSS[ antiSpeedH ] ) {
                		        antiCheatSS[ antiSpeedH ] = 1;
                		        SCM( playerid, ZUTA, "Ukljucio si antiSpeedHack." );
                		    }
                		    SaveAntiCheat( );
                		}
                		case 6: {
                		    if( antiCheatSS[ antiVehTroll ] ) {
                		        antiCheatSS[ antiVehTroll ] = 0;
                		        SCM( playerid, ZUTA, "Iskljucio si antiVehTrollHack." );
                		    }
                		    else if( !antiCheatSS[ antiVehTroll ] ) {
                		        antiCheatSS[ antiVehTroll ] = 1;
                		        SCM( playerid, ZUTA, "Ukljucio si antiVehTrollHack." );
                		    }
                		    SaveAntiCheat( );
                		}
						case 7:{
							if( antiCheatSS[ antiCbug ] ) {
                		        antiCheatSS[ antiCbug ] = 0;
                		        SCM( playerid, ZUTA, "Iskljucio si antiC-Bug." );
                		    }
                		    else if( !antiCheatSS[ antiCbug ] ) {
                		        antiCheatSS[ antiCbug ] = 1;
                		        SCM( playerid, ZUTA, "Ukljucio si antiC-Bug." );
                		    }
                		    SaveAntiCheat( );
						}
						case 8:{
							if( antiCheatSS[ antiEventMove ] ) {
                		        antiCheatSS[ antiEventMove ] = 0;
                		        SCM( playerid, ZUTA, "Iskljucio si antiEventMove." );
                		    }
                		    else if( !antiCheatSS[ antiEventMove ] ) {
                		        antiCheatSS[ antiEventMove ] = 1;
                		        SCM( playerid, ZUTA, "Ukljucio si antiEventMove." );
                		    }
                		    SaveAntiCheat( );
						}
						case 9: {
							if( antiCheatSS[ antiDialogManipulation ] ) {
                		        antiCheatSS[ antiDialogManipulation ] = 0;
                		        SCM( playerid, ZUTA, "Iskljucio si antiDialogManipulation." );
                		    }
                		    else if( !antiCheatSS[ antiDialogManipulation ] ) {
                		        antiCheatSS[ antiDialogManipulation ] = 1;
                		        SCM( playerid, ZUTA, "Ukljucio si antiDialogManipulation." );
                		    }
                		    SaveAntiCheat( );
						}
					}
            	}
			    case 1: {
                    new antiCheatName[ 20 ] = "antiVehRepairHack";
                    switch( anticheatinfo[ playerid ] ) {
                		case 0: antiCheatName = "antiWeaponHack";
                		case 1: antiCheatName = "antiTeleportHack";
                		case 2: antiCheatName = "antiFlyHack";
                		case 3: antiCheatName = "antiVehRepairHack";
                		case 4: antiCheatName = "antiJetPackHack";
                		case 5: antiCheatName = "antiSpeedHack";
                		case 6: antiCheatName = "antiVehTrollHack";
						case 7: antiCheatName = "antiC-Bug";
						case 8: return SendErrorMessage( playerid, "Ne postoje drugi rezimi rada za ovaj anticheat." );

					}
                    SPD( playerid, dialog_ANTICHEAT_3, DSL, antiCheatName, "Warning\nKick\nBan\nFreeze", D_ODABERI, D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_ANTICHEAT_3 ) {
        if( response ) {
            switch( listitem ) {
                case 0: {
                    switch( anticheatinfo[ playerid ] ) {
                		case 0: {
                    		antiCheatSS[ WeaponHRezimRada ] = AC_ADMINPORUKA;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na warning za antiWeaponHack." );
						}
						case 1: {
                    		antiCheatSS[ TeleportHRezimRada ] = AC_ADMINPORUKA;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na warning za antiTeleportHack." );
						}
						case 2: {
                    		antiCheatSS[ FlyHRezimRada ] = AC_ADMINPORUKA;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na warning za antiFlyHack." );
						}
						case 3: {
                    		antiCheatSS[ VehRepRezimRada ] = AC_ADMINPORUKA;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na warning za antiVehRepairHack." );
						}
						case 4: {
                    		antiCheatSS[ JetPackHRezimRada ] = AC_ADMINPORUKA;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na warning za antiJetPackHack." );
						}
						case 5: {
                    		antiCheatSS[ SpeedHRezimRada ] = AC_ADMINPORUKA;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na warning za antiSpeedHack." );
						}
						case 6: {
                    		antiCheatSS[ VehTrollRezimRada ] = AC_ADMINPORUKA;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na warning za antiVehTrollHack." );
						}
						case 7: {
							antiCheatSS[ CbugRezimRada ] = AC_ADMINPORUKA;
							SCM( playerid, ZUTA, "Postavio si rezim rada na warning za antiC-Bug" );
						}
					}
					SaveAntiCheat( );
                }
                case 1: {
                    switch( anticheatinfo[ playerid ] ) {
                		case 0: {
                    		antiCheatSS[ WeaponHRezimRada ] = AC_KICK;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na kick za antiWeaponHack." );
						}
						case 1: {
                    		antiCheatSS[ TeleportHRezimRada ] = AC_KICK;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na kick za antiTeleportHack." );
						}
						case 2: {
                    		antiCheatSS[ FlyHRezimRada ] = AC_KICK;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na kick za antiFlyHack." );
						}
						case 3: {
                    		antiCheatSS[ VehRepRezimRada ] = AC_KICK;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na kick za antiVehRepairHack." );
						}
						case 4: {
                    		antiCheatSS[ JetPackHRezimRada ] = AC_KICK;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na kick za antiJetPackHack." );
						}
						case 5: {
                    		antiCheatSS[ SpeedHRezimRada ] = AC_KICK;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na kick za antiSpeedHack." );
						}
						case 6: {
                    		antiCheatSS[ VehTrollRezimRada ] = AC_KICK;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na kick za antiVehTrollHack." );
						}
						case 7: {
							antiCheatSS[ CbugRezimRada ] = AC_KICK;
							SCM( playerid, ZUTA, "Postavio si rezim rada na kick za antiC-Bug." );
						}
					}
					SaveAntiCheat( );
                }
                case 2: {
                    switch( anticheatinfo[ playerid ] ) {
                		case 0: {
                    		antiCheatSS[ WeaponHRezimRada ] = AC_BAN;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na ban za antiWeaponHack." );
						}
						case 1: {
                    		antiCheatSS[ TeleportHRezimRada ] = AC_BAN;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na ban za antiTeleportHack." );
						}
						case 2: {
                    		antiCheatSS[ FlyHRezimRada ] = AC_BAN;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na ban za antiFlyHack." );
						}
						case 3: {
                    		antiCheatSS[ VehRepRezimRada ] = AC_BAN;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na ban za antiVehRepairHack." );
						}
						case 4: {
                    		antiCheatSS[ JetPackHRezimRada ] = AC_BAN;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na ban za antiJetPackHack." );
						}
						case 5: {
                    		antiCheatSS[ SpeedHRezimRada ] = AC_BAN;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na ban za antiSpeedHack." );
						}
						case 6: {
                    		antiCheatSS[ VehTrollRezimRada ] = AC_BAN;
                			SCM( playerid, ZUTA, "Postavio si rezim rada na ban za antiVehTrollHack." );
						}
						case 7: {
							SendErrorMessage( playerid, "Ne mozes podesiti ban za C-Bug!");
						}
					}
					SaveAntiCheat( );
                }
				case 3: {
					switch( anticheatinfo[ playerid ] ) {
						case 7: {
							antiCheatSS[ CbugRezimRada ] = AC_FREEZE;
							SCM( playerid, ZUTA, "Postavio si rezim rada na freeze za antiC-Bug." );
						}
					}
					SaveAntiCheat( );
				}
            }
        }
	}
	else if( dialogid == dialog_CREATEVEH ) {
	    if( response ) {
	        switch( listitem ) {
				case 0: { SPD( playerid, dialog_VCREATE, DSI, D_NASLOV, "Unesite id zeljenog vozila, id boje1, id boje2!", D_ODABERI, D_NAZAD ); }
				case 1: { SPD( playerid, dialog_PCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id posla, id boje1, id boje2.\nID posla: 1. Prevoznik Novca 2. Detektiv 3. Prevoznik sljunka 4. Kosac Trave 5. Komunalac 6. Prevoznik cementa 7.Dostavljac pizze\n8.Pilot 9.Farmer 10. Bus vozac 11. Rudar 12. Prevoznik drveca 13. Telohranitelj 14. Pepsi Dostavljac", D_ODABERI, D_NAZAD ); }
				case 2: { SPD( playerid, dialog_OVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id organizacije, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
				case 3: { SPD( playerid, dialog_RVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za rent vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
				case 4: { SPD( playerid, dialog_IVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za izlozbeno vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
				case 5: { SPD( playerid, dialog_AVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Admin vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
				case 6: { SPD( playerid, dialog_GRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za gradonacelnikovo vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
				case 7: { SPD( playerid, dialog_PRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za promotersko vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
				case 8: { SPD( playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
                case 9: { SPD( playerid, dialog_POLVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vozilo za polaganje, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
                case 10: { SPD( playerid, dialog_HVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za GameSage vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
                case 11: { SPD( playerid, dialog_MVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Misija vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
                case 12: { SPD( playerid, dialog_DMZVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za DMZ vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }

			}
	    }
	}
	else if( dialogid == dialog_NAPRAVISVE ) {
        if( response ) {
            switch( listitem ) {
			    case 0: {
			    	SPD( playerid, dialog_ORGCREATE, DSI, D_NASLOV, "Unesite zeljeno ime vase organizacije!", D_ODABERI, D_NAZAD );
				}
				case 1: {
				    SPD( playerid, dialog_CREATEVEH, DSL, D_NASLOV, "Privatno vozilo\nPoslovno vozilo\nOrganizacijsko vozilo\nRent vozilo\nIzlozbeno vozilo\nAdmin Vozilo\nGradonacelnikovo vozilo\nPromotersko vozilo\nVIP vozilo\nPolaganje vozilo\nGameSage vozilo\nMisija Vozilo\nDMZ vozilo", D_ODABERI, D_NAZAD );
				}
				case 2: {

                    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

					strcat( DialogStrgEx, ""col_white"Unesite vrstu firme koju zelite.\n" );
					strcat( DialogStrgEx, "Vrste: 0. 24/7 1. Burg 2. Cluckin Bell 3. Binco 4. Firma bez ulaza 5. Zip 6. Victim 7. Suburban 8. Bar 9. Gym\n" );
		            strcat( DialogStrgEx, "10. Gun Shop 11. MRestoran 12. VRestoran 13. Pizza 14. Nocni klub 15. Disco 16. Electronic Shop 17. Trafika\n" );
					strcat( DialogStrgEx, "18. Firma za posao 19. Rent firma 20. Pumpa 21. Javna Kuca 22. Kladionica 23. Oglas 24. Telekom 25. PayNspay\n" );
					strcat( DialogStrgEx, "26. Komunalije 27. Vodovod 28. Elektrana 29. Lutrija 30. Casino 31. Neon Shop 32. Auto Skola 33. Namjestaj\n" );
					strcat( DialogStrgEx, "34. HotDog 35. Toplana 36. Sex Shop 37. Banka 38. Bilbord" );

					SPD( playerid, dialog_FCREATE, DSI, D_NASLOV, DialogStrgEx, "U redu", "Nazad" );

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				}
		        case 3: {

		        	new conID = 0;
					for( new j = 0; j < MAX_CONTAINER; j++ ) {
						if( containerInfo[ j ][ conbaseID ] == -1 ) {
						    conID = j;
						    break;
						}
					}
					if( conID != 0 ) return SendErrorMessage( playerid, "Vec je jedan kontejner u procesu izgradnje." );

					conID = -1;
					for( new i = 0; i < MAX_CONTAINER; i++) {
					    if( containerInfo[ i ][ conbaseID ] == 0 ) {
							conID = i;
							break;
					    }
					}
					if( conID == -1 ) return SendErrorMessage( playerid, "Ima maksimalno kreiranih kontejnera." );


					new Float:x, Float:y, Float:z, Float:angle;
					GetPlayerPos( playerid, x, y, z);
					GetPlayerFacingAngle( playerid, angle);

					containerInfo[ conID ][ conbaseID ] = -1;
					containerInfo[ conID ][ conObjPos_X ] = x;
		    		containerInfo[ conID ][ conObjPos_Y ] = y;
		    		containerInfo[ conID ][ conObjPos_Z ] = z;
		    		containerInfo[ conID ][ conObjRot_X ] = 0;
		    		containerInfo[ conID ][ conObjRot_Y ] = 0;
		    		containerInfo[ conID ][ conObjRot_Z ] = 0;
		    		containerInfo[ conID ][ conJobNumber ] = 0;
					containerInfo[ conID ][ conObjID ] = CreateDynamicObject(1345, x+2, y, z+0.6, 0.0, 0.0, angle);

                    Streamer_Update( playerid );
					EditDynamicObject( playerid, containerInfo[ conID ][ conObjID ] );
					EditContainer[ playerid ] = conID;
					creatingContainer[ playerid ] = true;

		        }
		        case 4: {
		            SPD( playerid, dialog_IMCREATE, DSI, D_NASLOV, "Unesite vrstu kuce koju zelite.\nVrste: 1. Mala kuca 2. Srednja Kuca 3. Velika kuca 4. Vila!", D_ODABERI, D_NAZAD );
				}
		        case 5: {
				    sql_create_property( playerid, IMOVINA_STAN, 3, 0 );
				}
				case 6: {
				    sql_create_property( playerid, IMOVINA_ELITNI_STAN, 3, 0 );
				}
				case 7: {
					sql_create_property( playerid, IMOVINA_VIKENDICA, 5, 0);
				}
				case 8: {
				    if( PlayerCreateEvent[ playerid ] ) return SendErrorMessage( playerid, "Vec pravis event!");

					EventID[ playerid ] = -1;

					for( new id = 1; id < MAX_EVENTS; id++ ) {

						if( Event[ id ][ VehID ] == -1 ) {

							EventID[ playerid ]	= -2;
							break;
						}
					}
					if( EventID[ playerid ]	== -2 ) return SendErrorMessage( playerid, "Jedan event je vec u procesu kreiranja." );
					EventID[ playerid ] = -1;
					for( new id = 1; id < MAX_EVENTS; id++ ) {

						if( Event[ id ][ VehID ] == 0 ) {

							EventID[ playerid ]	= id;
							Event[ id ][ VehID ] = -1;
							break;
						}
					}
					if( EventID[ playerid ] == -1 )  return SendErrorMessage( playerid, "Vec je napravljen maksimalan broj eventa.");

					PlayerCreateEvent[ playerid ] = true;

					SPD( playerid, dialog_CREATEEVENT, DSI, D_NASLOV, "Unesite ime eventa", D_ODABERI, D_ODUSTANI );
				}
				case 9: {

					new atmID = 0;
					for( new j = 0; j < MAX_ATM; j++ ) {
						if( atmInfo[ j ][ atmbaseID ] == -1 ) {
						    atmID = j;
						    break;
						}
					}
					if( atmID != 0 ) return SendErrorMessage( playerid, "Vec je jedan bankomat u procesu izgradnje." );

					atmID = -1;
					for( new i = 0; i < MAX_ATM; i++) {
					    if( atmInfo[ i ][ atmbaseID ] == 0 ) {
							atmID = i;
							break;
					    }
					}
					if( atmID == -1 ) return SendErrorMessage( playerid, "Ima maksimalno kreiranih bankomata." );

				    new Float:x, Float:y, Float:z, Float:angle;
					GetPlayerPos( playerid, x, y, z);
					GetPlayerFacingAngle( playerid, angle );

					atmInfo[ atmID ][ atmPos ][ 0 ] = x;
		    		atmInfo[ atmID ][ atmPos ][ 1 ] = y;
		    		atmInfo[ atmID ][ atmPos ][ 2 ] = z;
		    		atmInfo[ atmID ][ atmPos ][ 3 ] = 0;
		    		atmInfo[ atmID ][ atmPos ][ 4 ] = 0;
		    		atmInfo[ atmID ][ atmPos ][ 5 ] = 0;

		    		atmInfo[ atmID ][ atmbaseID ] = -1;
					atmInfo[ atmID ][ atmObject ] = CreateDynamicObject( 2942, x+2, y, z+0.6, 0.0, 0.0, angle );

                    Streamer_Update( playerid );

					EditDynamicObject( playerid, atmInfo[ atmID ][ atmObject ] );
					EditATM[ playerid ] = atmID;
		        }
		        case 10: {

		            new Float:PozX, Float:PozY, Float:PozZ;
					GetPlayerPos( playerid, PozX, PozY, PozZ );

					new as = 0;
					for( new j = 0; j < MAX_AUTOS; j++ ) {
						if( AutoSalon[ j ][ aSalon_ID ] == -1 ) {
						    as = j;
						    break;
						}
					}
					if( as != 0 ) return SendErrorMessage( playerid, "Vec je jedan salon u procesu izgradnje, nije dovrsen, sacekajte(sigurnost baze)." );

					as = -1;
					for( new i = 0; i < MAX_AUTOS; i++) {
					    if( AutoSalon[ i ][ aSalon_ID ] == 0 ) {
							as = i;
							break;
					    }
					}
					if( as != -1 ) {

					        AutoSalon[ as ][ aSalon_ID ] = -1;
							AutoSalon[ as ][ aPickupPos ][ 0 ] = PozX;
							AutoSalon[ as ][ aPickupPos ][ 1 ] = PozY;
							AutoSalon[ as ][ aPickupPos ][ 2 ] = PozZ;
							AutoSalon[ as ][ aVW ] = GetPlayerVirtualWorld( playerid );
							AutoSalon[ as ][ aInt ] = GetPlayerInterior( playerid );
							AutoSalon[ as ][ aVehBuyedPos ][ 0 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 1 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 2 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 3 ] = 0.0;
							AutoSalon[ as ][ aVehModel ][ 0 ] = 0; AutoSalon[ as ][ aMaxVehModel ] = 0;
							AutoSalon[ as ][ aVehModel ][ 1 ] = 0; AutoSalon[ as ][ aVehModel ][ 2 ] = 0; AutoSalon[ as ][ aVehModel ][ 3 ] = 0;
							AutoSalon[ as ][ aVehModel ][ 4 ] = 0; AutoSalon[ as ][ aVehModel ][ 5 ] = 0; AutoSalon[ as ][ aVehModel ][ 6 ] = 0;
							AutoSalon[ as ][ aVehModel ][ 7 ] = 0; AutoSalon[ as ][ aVehModel ][ 8 ] = 0; AutoSalon[ as ][ aVehModel ][ 9 ] = 0;
							AutoSalon[ as ][ aVehModel ][ 10 ] = 0; AutoSalon[ as ][ aVehModel ][ 11 ] = 0; AutoSalon[ as ][ aVehModel ][ 12 ] = 0;
							AutoSalon[ as ][ aVehModel ][ 13 ] = 0; AutoSalon[ as ][ aVehModel ][ 14 ] = 0; AutoSalon[ as ][ aVehModel ][ 15 ] = 0;
		                    AutoSalon[ as ][ aVehAmmount ][ 0 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 1 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 2 ] = 0;
		                    AutoSalon[ as ][ aVehAmmount ][ 3 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 4 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 5 ] = 0;
		                    AutoSalon[ as ][ aVehAmmount ][ 6 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 7 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 8 ] = 0;
		                    AutoSalon[ as ][ aVehAmmount ][ 9 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 10 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 11 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 12 ] = 0;
		                    AutoSalon[ as ][ aVehAmmount ][ 13 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 14 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 15 ] = 0;


		                  	strmid( AutoSalon[ as ][ aSalonName ], "Vehicle Salon", 0, strlen( "Vehicle Salon" ), 32);

							KreiranAutoSalon[ playerid ] = as;
							new str[ 128 ];
            				format( str, sizeof( str ), ""col_server"[ %s ]\n"col_white"Da kupite vozilo kucajte\n"col_server"[ /kupivozilo ]", AutoSalon[ as ][ aSalonName ] );
							new pickupid = CreateInteractivePickup( AutoSalon[ as ][ aPickupPos ][ 0 ], AutoSalon[ as ][ aPickupPos ][ 1 ], AutoSalon[ as ][ aPickupPos ][ 2 ], AutoSalon[ as ][ aVW ], AutoSalon[ as ][ aInt ], str, 1318, 20.0, AUTOSALON );

							AutoSalon[ as ][ AutoSalon3D ] = InteractivePickup[ pickupid ][ IP_labelid ];
							AutoSalon[ as ][ AutoSalonPickup ] = InteractivePickup[ pickupid ][ IP_pickupid ];

							//AutoSalon[ as ][ AutoSalon3D ] = CreateDynamic3DTextLabel( str, -1, AutoSalon[ as ][ aPickupPos ][ 0 ], AutoSalon[ as ][ aPickupPos ][ 1 ], AutoSalon[ as ][ aPickupPos ][ 2 ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, AutoSalon[ as ][ aVW ], AutoSalon[ as ][ aInt ], -1, 20.0);
						    //AutoSalon[ as ][ AutoSalonPickup ] = CreateDynamicPickup( 1318, 1, AutoSalon[ as ][ aPickupPos ][ 0 ], AutoSalon[ as ][ aPickupPos ][ 1 ], AutoSalon[ as ][ aPickupPos ][ 2 ], AutoSalon[ as ][ aVW ], AutoSalon[ as ][ aInt ], -1, 20.0 );
							SPD( playerid, dialog_ASMAXMODEL, DSI, D_NASLOV, "Unesite broj razlicith vrsti vozila koja ce se nalaziti u salonu(3-16)", D_ODABERI, D_NAZAD );

					}
					else return SendErrorMessage( playerid, "Ima maksimalno kreiranih auto salona." );
				}
				case 11: {

		            new Float:PozX, Float:PozY, Float:PozZ;
					GetPlayerPos( playerid, PozX, PozY, PozZ );

					new h = -1;
					for( new i = 1; i < MAX_HOTELS; i++) {
					    if( hotelInfo[ i ][ hbaseID ] == 0 ) {
							h = i;
							break;
					    }
					}
					if( h != -1 ) {

						hotelInfo[ h ][ hbaseID ] = 0;
					    hotelInfo[ h ][ hExit ][ 0 ] = 2214.3848;
			    		hotelInfo[ h ][ hExit ][ 1 ] = -1150.5399;
			    		hotelInfo[ h ][ hExit ][ 2 ] = 1025.7969;
					    hotelInfo[ h ][ hPrice ] = 1000000;
					    hotelInfo[ h ][ hInterior ] = 15;
						hotelInfo[ h ][ hOwnerSQL ] = 0;
						strmid( hotelInfo[ h ][ hOwner], "Drzava", 0, strlen( "Drzava" ), 32);
						hotelInfo[ h ][ hEnter ][ 0 ] = PozX;
						hotelInfo[ h ][ hEnter ][ 1 ] = PozY;
					   	hotelInfo[ h ][ hEnter ][ 2 ] = PozZ;
					    hotelInfo[ h ][ hRoomPrice ] = 50;
					    hotelInfo[ h ][ hMoney ] = 0;
					    hotelInfo[ h ][ hLocked  ] = 0;
					    hotelInfo[ h ][ hLevel ] = 5;

					    strmid( hotelInfo[ h ][ hAdress ], UlicaHotela( h ), 0, strlen( UlicaHotela( h ) ), 32);
					    hotelInfo[ h ][ hVW ] = h;
					    hotelInfo[ h ][ hGuests ][ 0 ] = 0;
					    hotelInfo[ h ][ hGuests ][ 1 ] = 0;
					    hotelInfo[ h ][ hGuests ][ 2 ] = 0;
					    hotelInfo[ h ][ hGuests ][ 3 ] = 0;
					    hotelInfo[ h ][ hGuests ][ 4 ] = 0;
					    hotelInfo[ h ][ hGuests ][ 5 ] = 0;
					    hotelInfo[ h ][ hGuests ][ 6 ] = 0;
						hotelInfo[ h ][ hGuests ][ 7 ] = 0;
						hotelInfo[ h ][ hGuests ][ 8 ] = 0;
						hotelInfo[ h ][ hGuests ][ 9 ] = 0;

						sql_create_hotel( playerid, h );
					}
					else return SendErrorMessage( playerid, "Ima maksimalno kreiranih hotela." );
				}
				case 12: {
				    SPD( playerid, dialog_CREATEGATE, DSI, D_NASLOV, "Unesite id objekta kapije.", D_ODABERI, D_NAZAD );
				}
				case 13: {
				    SendErrorMessage( playerid, "Ovde nema nista." );
				}
				case 14: {
				    SPD( playerid, dialog_CREATEGARAGE, DSL, D_NASLOV, "Mala garaza\nSrednja garaza\nVelika garaza\nLuksuzna garaza", D_ODABERI, D_NAZAD );
				}
				case 15: {
				    SPD( playerid, dialog_CREATEGPS, DSI, D_NASLOV, "Unesite ime ovog mjesta za gps.", D_ODABERI, D_NAZAD );
				}
				case 16: {
				    SPD( playerid, dialog_CREATEAPORT, DSI, D_NASLOV, "Unesite ime ovog mjesta za Admin port.", D_ODABERI, D_NAZAD );
				}
				case 17: {
				    SPD( playerid, dialog_CREATESPORT, DSI, D_NASLOV, "Unesite ime ovog mjesta za GameSage port.", D_ODABERI, D_NAZAD );
				}
				case 18: {
				    SPD( playerid, dialog_GANGZCOLOR, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD );
				}
				case 19: {


		            for( new i = 1; i < MAX_PRESENTS; i++ ) {
					    new fileauta[ 40 ];
						format(fileauta, sizeof( fileauta ), F_PRESENTS, i);
						if( !fexist( fileauta ) ) {
						    new Float:x, Float:y, Float:z, Float:angle;
							GetPlayerPos( playerid, x, y, z); GetPlayerFacingAngle( playerid, angle );
							presentsInfo[ i ][ presPos ][ 0 ] = x;
		    				presentsInfo[ i ][ presPos ][ 1 ] = y;
		    				presentsInfo[ i ][ presPos ][ 2 ] = z;
		    				presentsInfo[ i ][ presPos ][ 3 ] = 0;
		    				presentsInfo[ i ][ presPos ][ 4 ] = 0;
		    				presentsInfo[ i ][ presPos ][ 5 ] = 0;
		    				presentsInfo[ i ][ presTaken ] = false;
							presentsInfo[ i ][ presObject ] = CreateDynamicObject( 19054, x+2, y, z+0.6, 0.0, 0.0, angle );
                            Streamer_Update( playerid );
							EditDynamicObject( playerid, presentsInfo[ i ][ presObject ] ); EditPresents[ playerid ] = i;
						 	SavePresent( i );
						    break;
						}
					}

		        }
		        case 20: {


		            for( new i = 1; i < MAX_CTREES; i++ ) {
					    new fileauta[ 40 ];
						format(fileauta, sizeof( fileauta ), F_CTREES, i);
						if( !fexist( fileauta ) ) {
						    new Float:x, Float:y, Float:z, Float:angle;
							GetPlayerPos( playerid, x, y, z); GetPlayerFacingAngle( playerid, angle );
							CTree[ i ][ ctPos ][ 0 ] = x;
		    				CTree[ i ][ ctPos ][ 1 ] = y;
		    				CTree[ i ][ ctPos ][ 2 ] = z;
		    				CTree[ i ][ ctPos ][ 3 ] = 0;
		    				CTree[ i ][ ctPos ][ 4 ] = 0;
		    				CTree[ i ][ ctPos ][ 5 ] = 0;
		    				CTree[ i ][ ctPlaced ] = true;
							CTree[ i ][ ctObject ] = CreateDynamicObject( 3511, x+2, y, z+0.6, 0.0, 0.0, angle );
                            Streamer_Update( playerid );
							EditDynamicObject( playerid, CTree[ i ][ ctObject ] ); EditCTrees[ playerid ] = i;
						 	SaveCTree( i );
						    break;
						}
					}

		        }
		        case 21: {


		            for( new i = 1; i < MAX_XORBS; i++ ) {
					    new fileauta[ 40 ];
						format(fileauta, sizeof( fileauta ), F_XORBS, i);
						if( !fexist( fileauta ) ) {
						    new Float:x, Float:y, Float:z, Float:angle;
							GetPlayerPos( playerid, x, y, z); GetPlayerFacingAngle( playerid, angle );
							XmasOrbs[ i ][ xoPos ][ 0 ] = x;
		    				XmasOrbs[ i ][ xoPos ][ 1 ] = y;
		    				XmasOrbs[ i ][ xoPos ][ 2 ] = z;
		    				XmasOrbs[ i ][ xoPos ][ 3 ] = 0;
		    				XmasOrbs[ i ][ xoPos ][ 4 ] = 0;
		    				XmasOrbs[ i ][ xoPos ][ 5 ] = 0;
		    				XmasOrbs[ i ][ xoPlaced ] = true;
							XmasOrbs[ i ][ xoObject ] = CreateDynamicObject( 19059, x+2, y, z+0.6, 0.0, 0.0, angle );
                            Streamer_Update( playerid );
							EditDynamicObject( playerid, XmasOrbs[ i ][ xoObject ] ); EditXOrbs[ playerid ] = i;
						 	SaveXOrb( i );
						    break;
						}
					}

		        }
		        case 22: {
				    SPD( playerid, dialog_CREATEFSTATION, DSI, D_NASLOV, ""col_white"Unesite ID firme sa kojom povezujete, cijenu benzina, cijenudizela.\nPrimer: 23, 100, 100", D_ODABERI, D_NAZAD );
				}
				case 23: {

					
					SendErrorMessage( playerid, "Trenutno onemoguceno." );

				}
				case 24: { // drug lab
				    SPD( playerid, dialog_createDrugLab, DSI, D_NASLOV, "Unesite cijenulabaratorije.", D_ODABERI, D_NAZAD );
				}
				case 25: { // zgrada
					SPD( playerid, dialog_createBuilding, DSL, D_NASLOV, "Siromasni interijer\nLuksuzniji interijer.", D_ODABERI, D_NAZAD );
				}
				case 26: {
					SPD( playerid, dialog_createActor, DSI, D_NASLOV, "Unesite skin id koji ce nositi actor.", D_ODABERI, D_NAZAD );
				}
				case 27: {

					new spID = 0;
					for( new j = 0; j < MAX_STAGS; j++ ) {
						if( sprayTags[ j ][ spbaseID ] == -1 ) {
						    spID = j;
						    break;
						}
					}
					if( spID != 0 ) return SendErrorMessage( playerid, "Vec je jedan spray tag u procesu izgradnje." );

					spID = -1;
					for( new i = 0; i < MAX_STAGS; i++) {
					    if( sprayTags[ i ][ spbaseID ] == 0 ) {
							spID = i;
							break;
					    }
					}
					if( spID == -1 ) return SendErrorMessage( playerid, "Ima maksimalno kreiranih spray tagova." );

				    new Float:x, Float:y, Float:z, Float:angle;
					GetPlayerPos( playerid, x, y, z);
					GetPlayerFacingAngle( playerid, angle );

					sprayTags[ spID ][ spPos ][ 0 ] = x;
		    		sprayTags[ spID ][ spPos ][ 1 ] = y;
		    		sprayTags[ spID ][ spPos ][ 2 ] = z;
		    		sprayTags[ spID ][ spPos ][ 3 ] = 0;
		    		sprayTags[ spID ][ spPos ][ 4 ] = 0;
		    		sprayTags[ spID ][ spPos ][ 5 ] = 0;
		    		sprayTags[ spID ][ spModelID ] = 18663;
		    		sprayTags[ spID ][ spGangSqlID ] = 0;
		    		sprayTags[ spID ][ spGangID ] = -1;

		    		sprayTags[ spID ][ spbaseID ] = -1;
					sprayTags[ spID ][ spObject ] = CreateDynamicObject( 18663, x+2, y, z+0.6, 0.0, 0.0, angle+90 );

                    Streamer_Update( playerid );

					EditDynamicObject( playerid, sprayTags[ spID ][ spObject ] );
					editSprayTags[ playerid ] = spID;
		        }
		        case 28: {
					SPD( playerid, dialog_createDealer, DSI, D_NASLOV, "Unesite skin id koji ce nositi diler.", D_ODABERI, D_NAZAD );
		        }
		        case 29: {
				    SPD( playerid, dialog_CREATERADAR, DSI, D_NASLOV, "Unesite dozvoljenu brzinu i kaznu.\nPrimjer: 100 5000", D_ODABERI, D_NAZAD );
				}
				case 30: {

		            new Float:PozX, Float:PozY, Float:PozZ;
					GetPlayerPos( playerid, PozX, PozY, PozZ );

					new s = -1;
					for( new i = 1; i < MAX_STREETS; i++) {
					    if( streetInfo[ i ][ sbaseID ] == 0 ) {
							s = i;
							break;
					    }
					}
					if( s != -1 ) {

						streetInfo[ s ][ sbaseID ] = 0;
					    streetInfo[ s ][ sPos ][ 0 ] = PozX;
						streetInfo[ s ][ sPos ][ 1 ] = PozY;
					   	streetInfo[ s ][ sPos ][ 2 ] = PozZ;
					    streetInfo[ s ][ sPrice ] = 10000000;
					    streetInfo[ s ][ sLevel ] = 10;
						streetInfo[ s ][ sOwnerSQL ] = 0;
						strmid( streetInfo[ s ][ sOwner], "Drzava", 0, strlen( "Drzava" ), 32);
					    strmid( streetInfo[ s ][ sName ], "Nepoznato", 0, strlen("Nepoznato" ), 32);

						sql_create_street( playerid, s );
					}
					else return SendErrorMessage( playerid, "Ima maksimalno kreiranih ulica." );
				}
			}
		}
		else { SPD( playerid, dialog_SERVERMI, DSL, D_NASLOV, "Upravljanje serverom\nNapravi\nIzbrisi\nIzmeni\nSpisak organizacija\nAntiCheat\nBroj kreiranih stvari", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_createDealer ) {

	    if( !response ) return true;
        if( response ) {

        	new skinID;
            if( sscanf( inputtext, "d", skinID ) ) return SPD( playerid, dialog_createDealer, DSI, D_NASLOV, "Unesite skin id koji ce nositi diler.", D_ODABERI, D_NAZAD );
            if( skinID < 0 || skinID > 311 ) return SPD( playerid, dialog_createDealer, DSI, D_NASLOV, "ERROR: SkinID moze ici od 0 do 331.\nUnesite skin id koji ce nositi diler.", D_ODABERI, D_NAZAD );

            new dealerID = -1;
			for( new i = 0; i < MAX_DEALERS; i++) {
			    if( dealers_info[ i ][ dealer_baseID ] == 0 ) {
					dealerID = i;
					break;
			    }
			}
			if( dealerID == -1 ) return SendErrorMessage( playerid, "Ima maksimalno kreiranih dilera." );

			new Float:x, Float:y, Float:z, Float:angle;
			GetPlayerPos( playerid, x, y, z);
			GetPlayerFacingAngle( playerid, angle );

			dealers_info[ dealerID ][ dealer_cartelSqlID ] = 0;
			dealers_info[ dealerID ][ dealer_cartelID ] = 0;
			dealers_info[ dealerID ][ dealer_TakingInProg ] = false;

			dealers_info[ dealerID ][ dealer_acPos_X ] = x;
			dealers_info[ dealerID ][ dealer_acPos_Y ] = y;
			dealers_info[ dealerID ][ dealer_acPos_Z ] = z;
			dealers_info[ dealerID ][ dealer_acPos_A ] = angle;

		    dealers_info[ dealerID ][ dealer_acSkin ] = skinID;
			dealers_info[ dealerID ][ dealer_acAnim ] = 0;
			dealers_info[ dealerID ][ dealer_Time ] = 0;
			dealers_info[ dealerID ][ dNeakt ] = 0;

			dealers_info[ dealerID ][ dealer_acAC ] = CreateDynamicActor( dealers_info[ dealerID ][ dealer_acSkin ],
																			dealers_info[ dealerID ][ dealer_acPos_X ],
																			dealers_info[ dealerID ][ dealer_acPos_Y ],
																			dealers_info[ dealerID ][ dealer_acPos_Z ],
																			dealers_info[ dealerID ][ dealer_acPos_A ], 0, 100.0, 0);



			new query[ 256 ];
		    mysql_format( _dbConnector, query, sizeof( query ), "INSERT INTO `dealers` (dealer_skin, dealer_pos_x, dealer_pos_y, dealer_pos_z, dealer_pos_a)" );

		    mysql_format( _dbConnector, query, sizeof( query ),	"%s VALUES( '%d', '%f', '%f', '%f', '%f')",
		        query,
		        dealers_info[ dealerID ][ dealer_acSkin ],
		        dealers_info[ dealerID ][ dealer_acPos_X ],
		        dealers_info[ dealerID ][ dealer_acPos_Y ],
		        dealers_info[ dealerID ][ dealer_acPos_Z ],
		        dealers_info[ dealerID ][ dealer_acPos_A ] );

		    mysql_pquery( _dbConnector, query, "OnDealerCreated", "ii", playerid, dealerID );

			KGEyes_SetPlayerPos( playerid, x, y, z+5 );
        }
    }
	else if( dialogid == dialog_createActor ) {

	    if( !response ) return true;
        if( response ) {
        	new skinID;
            if( sscanf( inputtext, "d", skinID ) ) return SPD( playerid, dialog_createActor, DSI, D_NASLOV, "Unesite skin id koji ce nositi actor.", D_ODABERI, D_NAZAD );
            if( skinID < 0 || skinID > 311 ) return SPD( playerid, dialog_createActor, DSI, D_NASLOV, "ERROR: SkinID moze ici od 0 do 331.\nUnesite skin id koji ce nositi actor.", D_ODABERI, D_NAZAD );

            sql_create_actor( playerid, skinID );
        }
    }
	else if( dialogid == dialog_CREATEFSTATION ) {

	    if( !response ) return true;
        if( response ) {

            new bussinesID, price[ 2 ];
            if( sscanf( inputtext, "iiiii", bussinesID, price[ 0 ], price[ 1 ] ) ) return SPD( playerid, dialog_CREATEFSTATION, DSI, D_NASLOV, ""col_white"Unesite ID firme sa kojom povezujete, cijenubenzina, cijenudizela.\nPrimer: 23, 100, 100", D_ODABERI, D_NAZAD );

			if( BussinesInfo[ bussinesID ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

            new Float:PozX, Float:PozY, Float:PozZ, fstationID = -1;
			GetPlayerPos( playerid, PozX, PozY, PozZ );

			for( new j = 0; j < MAX_FSTATION; j++ ) {

				if( FuelStation[ j ][ fsbaseID ] == -1 ) {
					fstationID = -2;
					break;
				}
			}
			if( fstationID == -2 ) return SendErrorMessage( playerid, "Jedna pumpa je vec u procesu izgradnje" );
			fstationID = -1;
			for( new j = 0; j < MAX_FSTATION; j++ ) {

				if( FuelStation[ j ][ fsbaseID ] == 0 ) {
					fstationID = j;
					break;
				}
			}
			if( fstationID == -1 ) return SendErrorMessage( playerid, "Dostignut je maksimalni broj kreiranih pumpi." );

			FuelStation[ fstationID ][ fsPos_X ] = PozX;
			FuelStation[ fstationID ][ fsPos_Y ] = PozY;
			FuelStation[ fstationID ][ fsPos_Z ] = PozZ;
			FuelStation[ fstationID ][ fsbaseID ] = -1;
			FuelStation[ fstationID ][ fsBussinesID ] = BussinesInfo[ bussinesID ][ b_ID ];

			FuelStation[ fstationID ][ fsGasolinePrice ] = price[ 0 ];
			FuelStation[ fstationID ][ fsGasolineL ] = 50;
			FuelStation[ fstationID ][ fsDieselPrice ] = price[ 1 ];
			FuelStation[ fstationID ][ fsDieselL ] = 50;
			FuelStation[ fstationID ][ fsGasPrice ] = 32;
			FuelStation[ fstationID ][ fsGasL ] = 50;
			strmid( FuelStation[ fstationID ][ fsName ], "Pumpa", 0, strlen( "Pumpa" ), 64 );

			sql_create_fstation( playerid, fstationID );
            SendInfoMessage( playerid, "Uspjesno ste kreirali pumpu.");

        }
	}
	else if( dialogid == dialog_GANGZCOLOR ) {

	    if( !response ) return true;
        if( response ) {

            new color[24], stringic[24];
            if( sscanf( inputtext, "s[24]", color ) ) return SPD( playerid, dialog_GANGZCOLOR, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD );

            new g = 0;
			for( new j = 0; j < MAX_GZONE; j++ ) {
				if( gZoneInfo[ j ][ gZone_ID ] == -1 ) {
				    g = j;
				    break;
				}
			}
			if( g != 0 ) return SendErrorMessage( playerid, "Vec je jedna gang zona u procesu izgradnje, nije dovrsena, sacekajte(sigurnost baze)." );
            if( gZoneInfo[ (MAX_GZONE-1) ][ gZone_ID ] != 0 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj gang zona." );
			g = -1;
			for( new j = 0; j < MAX_GZONE; j++ ) {
				if( gZoneInfo[ j ][ gZone_ID ] == 0 ) {
				    g = j;
				    break;
				}
			}
            if( g == -1 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj gang zona." );

            CreatingGZoneID[ playerid ] = g;

            gZoneInfo[ g ][ gZone_ID ] = -1;

            format( stringic, sizeof( stringic ), "%s", color );
            strmid( gZoneInfo[ g ][ gZoneColor ], stringic, 0, strlen( stringic ), 255 );

            CreatingGZone[ playerid ] = 1;
		    SendInfoMessage( playerid, "Uneo si boju." );
		    SendInfoMessage( playerid, "Koristi "col_white"LMB"col_server" da postavis pozicije." );
		    SendInfoMessage( playerid, "Prvo sacuvaj poziciju levog donjeg ugla polja." );

        }
	}
	else if( dialogid == dialog_ORGCOLOR ) {

	    if( !response ) return true;
        if( response ) {

            new id = GetNearestOrganization( playerid );
            new color[ 24 ], stringic[ 24 ];
            if( sscanf( inputtext, "s[24]", color ) ) SPD( playerid, dialog_ORGCOLOR, DSI, D_NASLOV, "Unesite boju za organizaciju(Vezano za zone ). Primer: FF00FF", D_ODABERI, D_ODUSTANI );

            format( stringic, sizeof( stringic ), "%s", color );
            strmid( org_info[ id ][ oColor ], stringic, 0, strlen( stringic ), 255 );

            new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `color` = '%e' WHERE `org_id` = '%d' LIMIT 1",
				org_info[ id ][ oColor ],
				org_info[ id ][ oID ] );
			mysql_pquery( _dbConnector, q, "", "" );

            SendInfoMessage( playerid, "Promenili ste boju organizacije." );

        }

	}

	else if( dialogid == dialog_CREATERADAR ) {

	    if( !response ) return true;
        if( response ) {

            new speed, ticket, radarID = NextRadarID( MAX_RADARS );

            if( sscanf( inputtext, "ii", speed, ticket ) ) return SPD( playerid, dialog_CREATERADAR, DSI, D_NASLOV, "Unesite dozvoljenu brzinu i kaznu.\nPrimjer: 100 5000", D_ODABERI, D_NAZAD );
        	if( speed < 100 || speed > 200 ) return SPD( playerid, dialog_CREATERADAR, DSI, D_NASLOV, "Greska!\nDozvoljena brzina se krece izmedju 110 i 200 na sat", D_ODABERI, D_NAZAD );
        	if( ticket < 2500 || ticket > 5000 ) return SPD( playerid, dialog_CREATERADAR, DSI, D_NASLOV, "Greska!\nKazna se krece izmedju 2500$ i 5000$", D_ODABERI, D_NAZAD );
            new Float:Pos[ 4 ];
            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
            GetPlayerFacingAngle( playerid, Pos[ 3 ] );

            radarInfo[ radarID ][ radarMaxSpeed ] = speed;
			radarInfo[ radarID ][ radarPrice ] = ticket;
			radarInfo[ radarID ][ radarPos ][ 0 ] = ( Pos[ 0 ]+2 );
			radarInfo[ radarID ][ radarPos ][ 1 ] = ( Pos[ 1 ]+2 );
			radarInfo[ radarID ][ radarPos ][ 2 ] = Pos[ 2 ];
			radarInfo[ radarID ][ radarPos ][ 3 ] = 0;
			radarInfo[ radarID ][ radarPos ][ 4 ] = 0;
			radarInfo[ radarID ][ radarPos ][ 5 ] = 0;
			strmid( radarInfo[ radarID ][ radarOwner ], ImeIgraca (playerid ), 0, strlen( ImeIgraca (playerid ) ), 32);
			radarInfo[ radarID ][ radarOwnerID ] = -1;

            radarInfo[ radarID ][ radarObject ] = CreateDynamicObject( 18880, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0.0, 0.0, Pos[ 3 ] );
            Streamer_Update( playerid );
			EditDynamicObject( playerid, radarInfo[ radarID ][ radarObject ] ); EditRadar[ playerid ] = radarID;
			SaveRadar( radarID );

			//new str_radar[ 256 ];
    		//format( str_radar, sizeof( str_radar ), "((ID: %d || Postavio: %s))\nBrzina: %d || Kazna: %d$\n ", radarID, radarInfo[ radarID ][ radarOwner ], radarInfo[ radarID ][ radarMaxSpeed ], radarInfo[ radarID ][ radarPrice ] );
			//radarInfo[ radarID ][ radar3d ] = CreateDynamic3DTextLabel( str_radar, COLOR_WHITE, radarInfo[ radarID ][ radarPos ][ 0 ], radarInfo[ radarID ][ radarPos ][ 1 ], radarInfo[ radarID ][ radarPos ][ 2 ]+1.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1 );

			SendInfoMessage( playerid, "Napravili ste radar!Da bi okretali mis drzite tipku SPACE Maximalna brzina: %d kazna: $%d", speed, ticket );

        }
	}

	else if( dialogid == dialog_CREATERADARPOLICE ) {

	    if( !response ) return true;
        if( response ) {

            new speed, ticket, radarID = NextRadarID( MAX_RADARS );

            if( sscanf( inputtext, "ii", speed, ticket ) ) return SPD( playerid, dialog_CREATERADARPOLICE, DSI, D_NASLOV, "Unesite dozvoljenu brzinu i kaznu.\nPrimjer: 100 5000", D_ODABERI, D_NAZAD );
        	if( speed < 100 || speed > 200 ) return SPD( playerid, dialog_CREATERADARPOLICE, DSI, D_NASLOV, "Greska!\nDozvoljena brzina se krece izmedju 110 i 200 na sat", D_ODABERI, D_NAZAD );
        	if( ticket < 2500 || ticket > 5000 ) return SPD( playerid, dialog_CREATERADARPOLICE, DSI, D_NASLOV, "Greska!\nKazna se krece izmedju 2500$ i 5000$", D_ODABERI, D_NAZAD );
            new Float:Pos[ 4 ];
            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
            GetPlayerFacingAngle( playerid, Pos[ 3 ] );

            radarInfo[ radarID ][ radarMaxSpeed ] = speed;
			radarInfo[ radarID ][ radarPrice ] = ticket;
			radarInfo[ radarID ][ radarPos ][ 0 ] = ( Pos[ 0 ]+2 );
			radarInfo[ radarID ][ radarPos ][ 1 ] = ( Pos[ 1 ]+2 );
			radarInfo[ radarID ][ radarPos ][ 2 ] = Pos[ 2 ];
			radarInfo[ radarID ][ radarPos ][ 3 ] = 0;
			radarInfo[ radarID ][ radarPos ][ 4 ] = 0;
			radarInfo[ radarID ][ radarPos ][ 5 ] = 0;
			ID_Radar[ playerid ] = radarID;
			strmid( radarInfo[ radarID ][ radarOwner ], ImeIgraca (playerid ), 0, strlen( ImeIgraca (playerid ) ), 32);
			radarInfo[ radarID ][ radarOwnerID ] = playerid;

            radarInfo[ radarID ][ radarObject ] = CreateDynamicObject( 18880, Pos[ 0 ]+2.5, Pos[ 1 ], Pos[ 2 ]+0.8, 0.0, 0.0, Pos[ 3 ] );
            Streamer_Update( playerid );
			EditDynamicObject( playerid, radarInfo[ radarID ][ radarObject ] ); EditRadar[ playerid ] = radarID;
			SaveRadar( radarID );

			new str_radar[ 256 ];
    		format( str_radar, sizeof( str_radar ), "((ID: %d || Postavio: %s))\nBrzina: %d || Kazna: %d$\n ", radarID, radarInfo[ radarID ][ radarOwner ], radarInfo[ radarID ][ radarMaxSpeed ], radarInfo[ radarID ][ radarPrice ] );
			radarInfo[ radarID ][ radar3d ] = CreateDynamic3DTextLabel( str_radar, COLOR_WHITE, radarInfo[ radarID ][ radarPos ][ 0 ], radarInfo[ radarID ][ radarPos ][ 1 ], radarInfo[ radarID ][ radarPos ][ 2 ]+1.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1 );
			//Radar_Timer[ playerid ] = SetTimerEx( "RadarTimer", 1000, true, "i", playerid );
			SendInfoMessage( playerid, "Napravili ste radar!Da bi okretali mis drzite tipku SPACE Maximalna brzina: %d kazna: $%d", speed, ticket );

        }
	}

	else if( dialogid == dialog_CREATESPORT ) {
	    if( !response ) return true;
        if( response ) {

			new id = -1, Float:PozX, Float:PozY, Float:PozZ, nameaport[ 50 ];

            for( new a = 0; a < MAX_SPORTS; a++ ) {
				if( supportInfo[ a ][ supportCreated ] != 1 ) {
					id = a;
					break;
				} else continue;
			}
			if( id == -1 ) return SendErrorMessage( playerid, "Nema vise mjesta za kreiranje gamesage portova." );

            if( sscanf( inputtext, "s[50]", nameaport ) ) return SPD( playerid, dialog_CREATESPORT, DSI, D_NASLOV, "Unesite ime ovog mjesta za gamesage port.", D_ODABERI, D_NAZAD );

			GetPlayerPos( playerid, PozX, PozY, PozZ );

            supportInfo[ id ][ supportID ] = id;
            supportInfo[ id ][ supportCreated ] = 1;
			supportInfo[ id ][ supportPos_X ] = PozX;
			supportInfo[ id ][ supportPos_Y ] = PozY;
			supportInfo[ id ][ supportPos_Z ] = PozZ;
			strmid( supportInfo[ id ][ supportName ], nameaport, 0, strlen( nameaport ), 50 );

			SaveSports( );

			SendInfoMessage( playerid, "Uspjesno si kreirao novu lokaciju za gamesage port." );
        }
	}
	else if( dialogid == dialog_CREATEAPORT ) {
	    if( !response ) return true;
        if( response ) {

			new id = -1, Float:PozX, Float:PozY, Float:PozZ, nameaport[ 50 ];

            for( new a = 0; a < MAX_APORTS; a++ ) {
				if( aportInfo[ a ][ aportCreated ] != 1 ) {
					id = a;
					break;
				} else continue;
			}
			if( id == -1 ) return SendErrorMessage( playerid, "Nema vise mjesta za kreiranje Admin portova." );

            if( sscanf( inputtext, "s[50]", nameaport ) ) return SPD( playerid, dialog_CREATEAPORT, DSI, D_NASLOV, "Unesite ime ovog mjesta za Admin port.", D_ODABERI, D_NAZAD );

			GetPlayerPos( playerid, PozX, PozY, PozZ );

            aportInfo[ id ][ aportID ] = id;
            aportInfo[ id ][ aportCreated ] = 1;
			aportInfo[ id ][ aportPos_X ] = PozX;
			aportInfo[ id ][ aportPos_Y ] = PozY;
			aportInfo[ id ][ aportPos_Z ] = PozZ;
			strmid( aportInfo[ id ][ aportName ], nameaport, 0, strlen( nameaport ), 50 );

			SaveAports( );

			SendInfoMessage( playerid, "Uspjesno si kreirao novu lokaciju za Admin port." );
        }
	}
	else if( dialogid == dialog_CREATEGPS ) {
	    if( !response ) return true;
        if( response ) {

			new namegps[ 50 ];

            if( sscanf( inputtext, "s[50]", namegps ) ) return SPD( playerid, dialog_CREATEGPS, DSI, D_NASLOV, "Unesite ime ovog mjesta za gps.", D_ODABERI, D_NAZAD );

        	new gpsID = -1, Float:PozX, Float:PozY, Float:PozZ;
			for( new g = 0; g < MAX_GPS; g++ ) {

				if( gpsInfo[ g ][ gpsbaseID ] == 0) {
					gpsID = g;
					break;
				}
			}
			if( gpsID == -1 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj gps lokacija." );

			GetPlayerPos( playerid, PozX, PozY, PozZ );

			gpsInfo[ gpsID ][ gpsbaseID ] = 0;
			gpsInfo[ gpsID ][ gpsPos_X ] = PozX;
			gpsInfo[ gpsID ][ gpsPos_Y ] = PozY;
			gpsInfo[ gpsID ][ gpsPos_Z ] = PozZ;
			strmid( gpsInfo[ gpsID ][ gpsName ], namegps, 0, strlen( namegps ), 50 );

			sql_create_gpsLocation( gpsID );

			SendInfoMessage( playerid, "Uspjesno si kreirao novu gps lokaciju." );
        }
	}
	else if( dialogid == dialog_CREATEGARAGE ) {
	    if( !response ) return true;
        if( response ) {
			new Float:PozX, Float:PozY, Float:PozZ;
			GetPlayerPos( playerid, PozX, PozY, PozZ );

		    if( garageInfo[ (MAX_GARAGES-1) ][ garageSqlID ] != 0 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj garaza na serveru." );

			new	id = -1;
			for( new j = 1; j < MAX_GARAGES; j++ ) {
				if( garageInfo[ j ][ garageSqlID ] == 0 ) {
				    id = j;
				    break;
				}
			}
            if( id == -1 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj garaza na serveru." );

            garageInfo[ id ][ garageSqlID ] = -1;
			garageInfo[ id ][ garagePos_X ] = PozX;
			garageInfo[ id ][ garagePos_Y ] = PozY;
			garageInfo[ id ][ garagePos_Z ] = PozZ;
			garageInfo[ id ][ garageLocked ] = 0;
			garageInfo[ id ][ garageVW ] = id;

			switch( listitem ) {
			    case 0: {
			        garageInfo[ id ][ garagePrice ] = 60000;
					garageInfo[ id ][ garageLevel ] = 3;
			    }
			    case 1: {
			        garageInfo[ id ][ garagePrice ] = 120000;
					garageInfo[ id ][ garageLevel ] = 4;
			    }
			    case 2: {
			        garageInfo[ id ][ garagePrice ] = 200000;
					garageInfo[ id ][ garageLevel ] = 5;
			    }
			    case 3: {
			        garageInfo[ id ][ garagePrice ] = 500000;
					garageInfo[ id ][ garageLevel ] = 6;
			    }
			}
			garageInfo[ id ][ garageType ] = listitem;
			garageInfo[ id ][ garageNeaktivnost ] = 0;

			KreiraGarazu[ playerid ] = id;

			SPD( playerid, dialog_CREATEGARAGE_2, DSI, D_NASLOV, "Ukoliko zelis da povezes garazu sa nekom kucom/stanom/vikendicom unesi ID kuce.\nAko ne zelis unesi 0.", D_ODABERI, D_NAZAD );
		}
	}
	else if( dialogid == dialog_CREATEGARAGE_2 ) {
	    if( !response ) {
	        new id = KreiraGarazu[ playerid ];

	        garageInfo[ id ][ garageSqlID ] = 0;
			garageInfo[ id ][ garagePos_X ] = 0;
			garageInfo[ id ][ garagePos_Y ] = 0;
			garageInfo[ id ][ garagePos_Z ] = 0;
			garageInfo[ id ][ garageLocked ] = 0;
			garageInfo[ id ][ garageVW ] = 0;
			garageInfo[ id ][ garageType ] = 0;
			garageInfo[ id ][ garagePrice ] = 0;
			garageInfo[ id ][ garageLevel ] = 0;

			SendInfoMessage( playerid, "Odustao si od kreiranja garaze." );
	    }
        else if( response ) {
            new broj, id = KreiraGarazu[ playerid ];
            if( sscanf( inputtext, "i", broj ) ) return SPD( playerid, dialog_CREATEGARAGE_2, DSI, D_NASLOV, "Ukoliko zelis da povezes garazu sa nekom kucom/stanom/vikendicom unesi ID kuce.\nAko ne zelis unesi 0.", D_ODABERI, D_NAZAD );
            if( broj == 0 ) {

            	garageInfo[ id ][ garagePropertySqlID ] = 0;
                garageInfo[ id ][ garageProperty ] = -1;

				SendInfoMessage( playerid, "Uspjesno si kreirao garazu, sada koristi '/veh 560 1 1'." );
				SendInfoMessage( playerid, "Zauzmi poziciju i sacuvaj lokaciju vozila kada izadje iz garaze." );
				SendInfoMessage( playerid, "Za cuvanje pozicije koristi '/garagesave'." );

				garageInfo[ id ][ garageOwner_SqlID ] = 0;
				strmid( garageInfo[ id ][ garageOwner ], "Drzava", 0, strlen( "Drzava" ), MAX_PLAYER_NAME );
            }
            else {
                if( II[ broj ][ iEnter_X ] != 0 ) {

                	garageInfo[ id ][ garagePropertySqlID ] = II[ broj ][ ibaseID ] ;
                	garageInfo[ id ][ garageProperty ] = broj;
                	garageInfo[ id ][ garageOwner_SqlID ] = 0;

                	if( II[ broj ][ iOwnerbaseID ] != 0 ) strmid( garageInfo[ id ][ garageOwner ], II[ broj ][ iOwner ], 0, strlen( II[ broj ][ iOwner ] ), MAX_PLAYER_NAME );
					else  {
					    format( globalstring, sizeof( globalstring ), "IMOVINA - ID: %d", broj );
						strmid( garageInfo[ id ][ garageOwner ], globalstring, 0, strlen( globalstring ), MAX_PLAYER_NAME );
					}

                	SendInfoMessage( playerid, "Postavio si garazi vlasnistvo vezano za imovinu id: %d.", broj );

				    SendInfoMessage( playerid, "Uspjesno si kreirao garazu, sada koristi '/veh 560 1 1'." );
					SendInfoMessage( playerid, "Zauzmi poziciju i sacuvaj lokaciju vozila kada izadje iz garaze." );
					SendInfoMessage( playerid, "Za cuvanje pozicije koristi '/garagesave'." );
				}
				else {

					garageInfo[ id ][ garagePropertySqlID ] = 0;
                	garageInfo[ id ][ garageProperty ] = -1;

				    SendInfoMessage( playerid, "Uspjesno si kreirao garazu, sada koristi '/veh 560 1 1'." );
					SendInfoMessage( playerid, "Zauzmi poziciju i sacuvaj lokaciju vozila kada izadje iz garaze." );
					SendInfoMessage( playerid, "Za cuvanje pozicije koristi '/garagesave'." );

					garageInfo[ id ][ garageOwner_SqlID ] = 0;
					strmid( garageInfo[ id ][ garageOwner ], "Drzava", 0, strlen( "Drzava" ), MAX_PLAYER_NAME );
				}
            }
        }
	}
	else if( dialogid == dialog_createBuilding ) {
	    if( !response ) return true;
        if( response ) {
        	sql_create_building( playerid, listitem );
        }
    }
	else if( dialogid == dialog_createDrugLab ) {
	    if( !response ) return true;
        if( response ) {

            if( drug_lab[ (MAX_DRUG_LABS-1) ][ dlSqlID ] != 0 ) return SendErrorMessage( playerid, "Vec ima maksimalan labaratorija droge." );
			new dl = -1;
			for( new j = 0; j < MAX_DRUG_LABS; j++ ) {
				if( drug_lab[ j ][ dlSqlID ] == 0 ) {
				    dl = j;
				    break;
				}
			}
            if( dl == -1 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj labaratorija droge." );

			new price;
			if( sscanf( inputtext, "i", price ) ) return SPD( playerid, dialog_createDrugLab, DSI, D_NASLOV, "Unesite cijenulabaratorije.", D_ODABERI, D_NAZAD );
			if( price < 1 ) return SPD( playerid, dialog_createDrugLab, DSI, D_NASLOV, "Unesite cijenulabaratorije.", D_ODABERI, D_NAZAD );

			new Float:x,
			    	Float:y,
			    		Float:z;

            GetPlayerPos( playerid, x, y, z );

			drug_lab[ dl ][ dlSqlID  ] = 0;
			drug_lab[ dl ][ dlEntPos ][ 0 ] = x;
			drug_lab[ dl ][ dlEntPos ][ 1 ] = y;
			drug_lab[ dl ][ dlEntPos ][ 2 ] = z;

			drug_lab[ dl ][ dlExitPos ][ 0 ] = 111.4396;
			drug_lab[ dl ][ dlExitPos ][ 1 ] = 115.8036;
			drug_lab[ dl ][ dlExitPos ][ 2 ] = 882.3694;

			drug_lab[ dl ][ dlPrice ] = price;
			drug_lab[ dl ][ dlOrgOwnerSqlID  ] = 0;
			drug_lab[ dl ][ dlOrgOwner ] = -1;
			drug_lab[ dl ][ dlInt ] = 1;
			drug_lab[ dl ][ dlVW ] = dl;
			drug_lab[ dl ][ dlSafeDrug ] = 0;
			drug_lab[ dl ][ dlActorsUpgLevel ][ 0 ] = 0;
			drug_lab[ dl ][ dlActorsUpgLevel ][ 1 ] = 0;
			drug_lab[ dl ][ dlActorsUpgLevel ][ 2 ] = 0;
			drug_lab[ dl ][ dlActorsUpgLevel ][ 3 ] = 0;
			drug_lab[ dl ][ dlActorsUpgLevel ][ 4 ] = 0;
			drug_lab[ dl ][ dlActorsUpgLevel ][ 5 ] = 0;
			drug_lab[ dl ][ dlActorsUpgLevel ][ 6 ] = 0;
			drug_lab[ dl ][ dlActorsUpgLevel ][ 7 ] = 0;
			drug_lab[ dl ][ dlActorsUpgLevel ][ 8 ] = 0;
			drug_lab[ dl ][ dlActorsUpgLevel ][ 9 ] = 0;
			drug_lab[ dl ][ dlSeeds ] = 0;
			drug_lab[ dl ][ dlActor ][ 0 ] = INVALID_ACTOR_ID;
		    drug_lab[ dl ][ dlActor ][ 1 ] = INVALID_ACTOR_ID;
		    drug_lab[ dl ][ dlActor ][ 2 ] = INVALID_ACTOR_ID;
		    drug_lab[ dl ][ dlActor ][ 3 ] = INVALID_ACTOR_ID;
		    drug_lab[ dl ][ dlActor ][ 4 ] = INVALID_ACTOR_ID;
		    drug_lab[ dl ][ dlActor ][ 5 ] = INVALID_ACTOR_ID;
		    drug_lab[ dl ][ dlActor ][ 6 ] = INVALID_ACTOR_ID;
		    drug_lab[ dl ][ dlActor ][ 7 ] = INVALID_ACTOR_ID;
		    drug_lab[ dl ][ dlActor ][ 8 ] = INVALID_ACTOR_ID;
		    drug_lab[ dl ][ dlActor ][ 9 ] = INVALID_ACTOR_ID;

			sql_create_drug_lab( dl );

			SendInfoMessage( playerid, "Uspjesno ste kreirali laboratoriju droge." );
		}
	}
	else if( dialogid == dialog_CREATEGATE ) {
	    if( !response ) return true;
        if( response ) {

			new g = 0;
			for( new j = 0; j < MAX_GATES; j++ ) {
				if( GateData[ j ][ gatebaseID ] == -1 ) {
				    g = j;
				    break;
				}
			}
			if( g != 0 ) return SendErrorMessage( playerid, "Vec je jedna kapija u procesu izgradnje, nije dovrsena, sacekajte(sigurnost baze)." );
            if( GateData[ (MAX_GATES-1) ][ gatebaseID ] != 0 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj kapija." );
			g = -1;
			for( new j = 0; j < MAX_GATES; j++ ) {
				if( GateData[ j ][ gatebaseID ] == 0 ) {
				    g = j;
				    break;
				}
			}
            if( g == -1 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj kapija." );

			new Float:x,
			    	Float:y,
			    		Float:z,
			    			Float:angle,
								model;

            GetPlayerPos( playerid, x, y, z ); GetPlayerFacingAngle( playerid, angle );

            if( sscanf( inputtext, "i", model ) ) return SPD( playerid, dialog_CREATEGATE, DSI, D_NASLOV, "Unesite id objekta kapije.", D_ODABERI, D_NAZAD );

            GateData[ g ][ gatebaseID ] = -1;
            GateData[ g ][ gateFor ] = 0;
            GateData[ g ][ gateOrgID ] = -1;
            GateData[ g ][ gateModel ] = model;
			GateData[ g ][ gateSpeed ] = 3.0;
			GateData[ g ][ gateRadius ] = 10.0;
			GateData[ g ][ gateOpened ] = false;
			GateData[ g ][ gateTime ] = 0;
			GateData[ g ][ gateTimer ] = -1;
			GateData[ g ][ gateOpenedBefore ] = 0;

			GateData[ g ][ gatePos ][ 0 ] = x + ( 3.0 * floatsin( -angle, degrees ) );
			GateData[ g ][ gatePos ][ 1 ] = y + ( 3.0 * floatcos( -angle, degrees ) );
			GateData[ g ][ gatePos ][ 2 ] = z;
			GateData[ g ][ gatePos ][ 3 ] = 0.0;
			GateData[ g ][ gatePos ][ 4 ] = 0.0;
			GateData[ g ][ gatePos ][ 5 ] = angle;

			GateData[ g ][ gateMove ][ 0 ] = 0.0;
			GateData[ g ][ gateMove ][ 1 ] = 0.0;
			GateData[ g ][ gateMove ][ 2 ] = 0.0;
			GateData[ g ][ gateMove ][ 3 ] = 0.0;
			GateData[ g ][ gateMove ][ 4 ] = 0.0;
			GateData[ g ][ gateMove ][ 5 ] = 0.0;

			strmid( GateData[ g ][ gateTexture ], "nema", 0, strlen( "nema" ), 128 );

            GateData[ g ][ gateInterior ] = GetPlayerInterior( playerid );
            GateData[ g ][ gateWorld ] = GetPlayerVirtualWorld( playerid );


            SCM( playerid, PLAVA, "Sada sacuvajte poziciju zatvorene kapije.");
            GateData[ g ][ gateObject ] = CreateDynamicObject( GateData[ g ][ gateModel ], GateData[ g ][ gatePos ][ 0 ], GateData[ g ][ gatePos ][ 1 ], GateData[ g ][ gatePos ][ 2 ], GateData[ g ][ gatePos ][ 3 ], GateData[ g ][ gatePos ][ 4 ], GateData[ g ][ gatePos ][ 5 ], GateData[ g ][ gateWorld ], GateData[ g ][ gateInterior ] );
            Streamer_Update( playerid );
			EditDynamicObject( playerid, GateData[ g ][ gateObject ] );
            EditDGate[ playerid ] = g;
		}
	}
	else if( dialogid == dialog_CREATEGATE_2 ) {
	    if( !response ) return true;
        if( response ) {
            new g = EditDGate[ playerid ], Float:speed;
            if( sscanf( inputtext, "f", speed ) ) return SPD( playerid, dialog_CREATEGATE_2, DSI, D_NASLOV, "Unesite brzinu zatvaranja i otvaranja kapije( 0-20.0).", D_ODABERI, D_NAZAD );
            if( speed < 0.0 || speed > 20.0 ) return SendErrorMessage( playerid, "Brzina otvaranja i zatvaranja vrata moze imat raspon od 0 do 20." );

            GateData[ g ][ gateSpeed ] = speed;

            SPD( playerid, dialog_CREATEGATE_3, DSI, D_NASLOV, "Unesite vrijeme posle koliko sekundi ce se zatvoriti kapija.", D_ODABERI, D_NAZAD );
		}
	}
	else if( dialogid == dialog_CREATEGATE_3 ) {
	    if( !response ) return true;
        if( response ) {
            new g = EditDGate[ playerid ], brzina;
            if( sscanf( inputtext, "i", brzina ) ) return SPD( playerid, dialog_CREATEGATE_3, DSI, D_NASLOV, "Unesite vrijeme posle koliko sekundi ce se zatvoriti kapija.", D_ODABERI, D_NAZAD );
            if( brzina < 0 || brzina > 60 ) return SendErrorMessage( playerid, "Uneseno vrijeme ne moze biti manje od 0s ili vece od 60s." );

            GateData[ g ][ gateTime ] = brzina*1000;

            SPD( playerid, dialog_CREATEGATE_5, DSL, "Za sta pravite ovu kapiju?", "Organizacija\nIgrac\nAdmine\nGameSagee\nVipove\nPromotere", "Izaberi", "Odustani" );
		}
	}
	else if( dialogid == dialog_CREATEGATE_5 ) {

	    if( !response ) return true;
        if( response ) {

	    	new g = EditDGate[ playerid ];

		    switch( listitem ) {

		        case 0: {

		            GateData[ g ][ gateFor ] = 1;

		            SPD( playerid, dialog_CREATEGATE_6, DSI, D_NASLOV, "Unesite id organizacije za koju pravite kapiju.", D_ODABERI, D_NAZAD );
		        }
		        case 1:  {

		            GateData[ g ][ gateFor ] = 2;

		            SPD( playerid, dialog_CREATEGATE_4, DSI, D_NASLOV, "Unesite ime igraca koji moze kontrolisati ovu kapiju(FORMAT:Ime_Prezime).", D_ODABERI, D_NAZAD );
				}
				case 2:  {

				    GateData[ g ][ gateFor ] = 3;
		            sql_create_gate( g );
		            SCM( playerid, PLAVA, "Uspjesno ste zavrsili kreiranje kapije za admine." );
		            EditDGate[ playerid ] = -1;
    				EditDGateMove[ playerid ] = -1;
		        }
		        case 3:  {

				    GateData[ g ][ gateFor ] = 4;
		            sql_create_gate( g );
		            SCM( playerid, PLAVA, "Uspjesno ste zavrsili kreiranje kapije za gamesagee." );
		            EditDGate[ playerid ] = -1;
    				EditDGateMove[ playerid ] = -1;
		        }
		        case 4:  {

				    GateData[ g ][ gateFor ] = 5;
		            sql_create_gate( g );
		            SCM( playerid, PLAVA, "Uspjesno ste zavrsili kreiranje kapije za vipove." );
		            EditDGate[ playerid ] = -1;
    				EditDGateMove[ playerid ] = -1;
		        }
		        case 5:  {

				    GateData[ g ][ gateFor ] = 6;
		            sql_create_gate( g );
		            SCM( playerid, PLAVA, "Uspjesno ste zavrsili kreiranje kapije za promotere." );
		            EditDGate[ playerid ] = -1;
    				EditDGateMove[ playerid ] = -1;
		        }
			}
		}
	}
	else if( dialogid == dialog_CREATEGATE_6 ) {
	    if( !response ) return true;
        if( response ) {
            new g = EditDGate[ playerid ], orga;
            if( sscanf( inputtext, "d", orga ) ) return SPD( playerid, dialog_CREATEGATE_6, DSI, D_NASLOV, "Unesite id organizacije za koju pravite kapiju.", D_ODABERI, D_NAZAD );

			GateData[ g ][ gateOrgID ] = orga;
			sql_create_gate( g );
			SendClientMessageEx( playerid, PLAVA, "Uspjesno ste zavrsili kreiranje kapije za organizaciju %s.", getOrgName( orga ) );
		    EditDGate[ playerid ] = -1;
    		EditDGateMove[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_CREATEGATE_4 ) {
	    if( !response ) return true;
        if( response ) {
            new g = EditDGate[ playerid ], ime[ MAX_PLAYER_NAME ];
            if( sscanf( inputtext, "s[24]", ime ) ) return SPD( playerid, dialog_CREATEGATE_4, DSI, D_NASLOV, "Unesite ime igraca koji moze kontrolisati ovu kapiju(FORMAT:Ime_Prezime).", D_ODABERI, D_NAZAD );

			strmid( GateData[ g ][ gateOwner ], ime, 0, strlen( ime ), MAX_PLAYER_NAME );
			sql_create_gate( g );
			SendClientMessageEx( playerid, PLAVA, "Uspjesno ste zavrsili kreiranje kapije za igraca %s.", ime );
		    EditDGate[ playerid ] = -1;
    		EditDGateMove[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_ASMAXMODEL ) {
	    if( !response ) return true;
        if( response ) {
            new broj, as = GetNearestSalon( playerid );
            if( as == -1 ) return SendErrorMessage( playerid, "Moras biti pored pickupa za kupnju u salonu." );
            if( sscanf( inputtext, "i", broj ) ) return SPD( playerid, dialog_ASMAXMODEL, DSI, D_NASLOV, "Unesite broj razlicith vrsti vozila koja ce se nalaziti u salonu(3-16)", D_ODABERI, D_NAZAD );
			if( broj < 3 || broj > 16 ) return SPD( playerid, dialog_ASMAXMODEL, DSI, D_NASLOV, "Unesite broj razlicith vrsti vozila koja ce se nalaziti u salonu(3-16)", D_ODABERI, D_NAZAD );
			AutoSalon[ as ][ aMaxVehModel ] = broj;
			SendClientMessageEx( playerid, PLAVA, "Odabrao si %d vrste vozila.", broj );

			if( broj == 3 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422", D_ODABERI, D_NAZAD ); }
			else if( broj == 4 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401", D_ODABERI, D_NAZAD ); }
			else if( broj == 5 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411", D_ODABERI, D_NAZAD ); }
			else if( broj == 6 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523", D_ODABERI, D_NAZAD ); }
			else if( broj == 7 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527", D_ODABERI, D_NAZAD ); }
			else if( broj == 8 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564", D_ODABERI, D_NAZAD ); }
			else if( broj == 9 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562", D_ODABERI, D_NAZAD ); }
			else if( broj == 10 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562 523", D_ODABERI, D_NAZAD ); }
			else if( broj > 10 ) { SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD ); }
		}
	}
	else if( dialogid == dialog_ASAMMOUNT ) {
	    if( !response ) return true;
        if( response ) {
            new as = KreiranAutoSalon[ playerid ], model[ 16 ];
            if( as == -1 ) return SendErrorMessage( playerid, "Ne kreiras nijedan salon." );
            switch( AutoSalon[ as ][ aMaxVehModel ] ) {
                case 3: {
					if( sscanf( inputtext, "iii", model[ 0 ], model[ 1 ], model[ 2 ] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 4: {
					if( sscanf( inputtext, "iiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 5: {
					if( sscanf( inputtext, "iiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 6: {
					if( sscanf( inputtext, "iiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 7: {
					if( sscanf( inputtext, "iiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 8: {
					if( sscanf( inputtext, "iiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 9: {
					if( sscanf( inputtext, "iiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 10: {
					if( sscanf( inputtext, "iiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 11: {
					if( sscanf( inputtext, "iiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 12: {
					if( sscanf( inputtext, "iiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 13: {
					if( sscanf( inputtext, "iiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 14: {
					if( sscanf( inputtext, "iiiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 15: {
					if( sscanf( inputtext, "iiiiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
                case 16: {
					if( sscanf( inputtext, "iiiiiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14], model[15] ) ) {
					    new coordsstring[ 64 ];
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
						    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
					        strcat( DialogStrgEx, coordsstring );
						}
					    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
            }
            for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
                if( model[ i ] < 1 ) {
                    new coordsstring[ 64 ];
				  	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				    strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n" );
				    strcat( DialogStrgEx, "Kolicina ne moze ici ispod 1\n\n" );
					strcat( DialogStrgEx, "__________________________________________________________________\n");
					for( new a = 0; a < AutoSalon[ as ][ aMaxVehModel ]; a++ ) {
					    format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (a+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ a ]- 400) ] );
				      	strcat( DialogStrgEx, coordsstring );
					}
				    SPD( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					return true;
                }
                AutoSalon[ as ][ aVehAmmount ][ i ] = model[ i ];
            }
            sql_create_vehsalon( as );
            SendInfoMessage( playerid, "Uspjesno si kolicinu svakog modela vozila." );
            SendInfoMessage( playerid, "Zavrsio si sa kreiranjem auto salona." );
            KreiranAutoSalon[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_ASMODEL ) {
	    if( !response ) return true;
        if( response ) {
            new as = GetNearestSalon( playerid );
            if( as == -1 ) return SendErrorMessage( playerid, "Moras biti pored pickupa za kupovinu u salonu." );
			if( AutoSalon[ as ][ aMaxVehModel ] == 3 ) {
			    new model[ 3 ];
			    if( sscanf( inputtext, "iii", model[ 0 ], model[ 1 ], model[ 2 ] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 3; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ];

			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 4 ) {
			    new model[ 4 ];
			    if( sscanf( inputtext, "iiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 4; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];

			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 5 ) {
			    new model[ 5 ];
			    if( sscanf( inputtext, "iiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 5; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4];

			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 6 ) {
			    new model[ 6 ];
			    if( sscanf( inputtext, "iiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 6; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4];
				AutoSalon[ as ][ aVehModel ][ 5 ] = model[5];

			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 7 ) {
			    new model[ 7 ];
			    if( sscanf( inputtext, "iiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 7; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4];
				AutoSalon[ as ][ aVehModel ][ 5 ] = model[5];
				AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];

			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 8 ) {
			    new model[ 8 ];
			    if( sscanf( inputtext, "iiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 8; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4];
				AutoSalon[ as ][ aVehModel ][ 5 ] = model[5];
				AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7];

			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 9 ) {
			    new model[ 9 ];
			    if( sscanf( inputtext, "iiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 9; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4];
				AutoSalon[ as ][ aVehModel ][ 5 ] = model[5];
				AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7];
				AutoSalon[ as ][ aVehModel ][ 8 ] = model[8];

			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 10 ) {
			    new model[ 10 ];
			    if( sscanf( inputtext, "iiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562 523", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 10; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562 523", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];

			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 11 ) {
			    new model[ 11 ];
			    if( sscanf( inputtext, "iiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 11; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
                AutoSalon[ as ][ aVehModel ][ 10 ] = model[10];

			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 12 ) {
			    new model[ 12 ];
			    if( sscanf( inputtext, "iiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 12; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
                AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11];

			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 13 ) {
			    new model[ 13 ];
			    if( sscanf( inputtext, "iiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 13; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
				AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11]; AutoSalon[ as ][ aVehModel ][ 12 ] = model[12];

			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 14 ) {
			    new model[ 14 ];
			    if( sscanf( inputtext, "iiiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 14; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
                AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11]; AutoSalon[ as ][ aVehModel ][ 12 ] = model[12];
                AutoSalon[ as ][ aVehModel ][ 13 ] = model[13];

			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 15 ) {
			    new model[ 15 ];
			    if( sscanf( inputtext, "iiiiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 15; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
                AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11]; AutoSalon[ as ][ aVehModel ][ 12 ] = model[12];
                AutoSalon[ as ][ aVehModel ][ 13 ] = model[13]; AutoSalon[ as ][ aVehModel ][ 14 ] = model[14];

			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 16 ) {
			    new model[ 16 ];
			    if( sscanf( inputtext, "iiiiiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14], model[15] ) ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 16; i++) {
					if( model[ i ] < 400 || model[ i ] > 611 ) return SPD( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
                AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11]; AutoSalon[ as ][ aVehModel ][ 12 ] = model[12];
                AutoSalon[ as ][ aVehModel ][ 13 ] = model[13]; AutoSalon[ as ][ aVehModel ][ 14 ] = model[14]; AutoSalon[ as ][ aVehModel ][ 15 ] = model[15];

			}
			SendInfoMessage( playerid, "Uspjesno si sacuvao modele koji ce se prodavati u salonu." );
			SCM( playerid, PLAVA, "Kada izadjes na cisti prostor kucaj '/veh 560 1 1' da spawnas vozilo." );
			SCM( playerid, PLAVA, "Kada spawnas vozilo i nadjes lokaciju gde ce biti dostavljena kupljena vozila kucaj /asbvozilo." );
		}
	}
	else if( dialogid == dialog_IZBRISISVE ) {
	    if( !response ) return SPD( playerid, dialog_SERVERMI, DSL, D_NASLOV, "Upravljanje serverom\nNapravi\nIzbrisi\nIzmeni\nSpisak organizacija\nAntiCheat\nBroj kreiranih stvari", D_ODABERI, D_ODUSTANI );
        if( response ) {
		    if( listitem == 0 ) {
		        if( SpecijalnaProvera[ playerid ] == 0 ) return SendErrorMessage( playerid, "Za ovo treba specijalna provera koju zna samo CHRP Tim." );
		    	SPD( playerid, dialog_ORGDELETE, DSI, D_NASLOV, "Unesite id organizacije koju zelite obrisati!", D_ODABERI, D_ODUSTANI ); }
	        if( listitem == 1 ) {
			    SPD( playerid, dialog_FDELETE, DSI, D_NASLOV, "Unesite id firme koju zelite obrisati!", D_ODABERI, D_ODUSTANI ); }
	        if( listitem == 2 ) {
				SPD( playerid, dialog_IMDELETE, DSI, D_NASLOV, "Unesite id imovine koju zelite obrisati!", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 3 ) {
            	if( SpecijalnaProvera[ playerid ] == 0 ) return SendErrorMessage( playerid, "Za ovo treba specijalna provera koju zna samo CHRP Tim." );
                if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu kontejnera." );
				new i = GetNearestContainer( playerid );

				if( IsValidDynamicObject( containerInfo[ i ][ conObjID ] ) )
					DestroyDynamicObject( containerInfo[ i ][ conObjID ] );

				if( IsValidDynamic3DTextLabel( containerInfo[ i ][ conText3D ] ) )
                	DestroyDynamic3DTextLabel( containerInfo[ i ][ conText3D ] );

    			new query[ 128 ];
				mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `containers` WHERE `conID` = '%d'", containerInfo[ i ][ conbaseID ] );
				mysql_pquery( _dbConnector, query, "", "" );

		    	containerInfo[ i ][ conObjPos_X ] = 0;
    			containerInfo[ i ][ conObjPos_Y ] = 0;
    			containerInfo[ i ][ conObjPos_Z ] = 0;
    			containerInfo[ i ][ conObjRot_X ] = 0;
    			containerInfo[ i ][ conObjRot_Y ] = 0;
    			containerInfo[ i ][ conObjRot_Z ] = 0;
    			containerInfo[ i ][ conbaseID ] = 0;
    			containerInfo[ i ][ conJobNumber ] = 0;

				ServerInfo[ containerCounter ]--;

	            SendInfoMessage( playerid, "Obrisao si kontejner. ID = %d.", i );
			}
			if( listitem == 4 ) {
    			if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
    			if( VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u server side vozilu." );

                new vehicleid = GetPlayerVehicleID( playerid );

				if( VehicleInfo[ vehicleid ][ vOrganizationSQLID ] != 0 && VehicleInfo[ vehicleid ][ vOrganization ] != -1 ) {
				    new org_id = VehicleInfo[ vehicleid ][ vOrganization ];

				    org_info[ org_id ][ oVehSlots ]--;
				    //sql_organization_update_integer( org_id, "vehslots", org_info[ org_id ][ oVehSlots ] );
				}

			    KGEyes_DestroyVehicle( vehicleid );
				sql_vehicles_delete( vehicleid );
				ResetVehicle( vehicleid );

				SendInfoMessage( playerid, "Obrisao si vozilo. ID = %d.", vehicleid );
			}
			if( listitem == 5 ) {
                if( GetNearestAtm( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu bankomata." );
				new atmID = GetNearestAtm( playerid );

				if( IsValidDynamicObject( atmInfo[ atmID ][ atmObject ] ) )
					DestroyDynamicObject( atmInfo[ atmID ][ atmObject ] );

                if( IsValidDynamic3DTextLabel( atmInfo[ atmID ][ atmText3D ] ) )
                	DestroyDynamic3DTextLabel( atmInfo[ atmID ][ atmText3D ] );

			    new query[ 128 ];
				mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `atms` WHERE `atmID` = '%d'", atmInfo[ atmID ][ atmbaseID ] );
				mysql_pquery( _dbConnector, query, "", "" );

		    	atmInfo[ atmID ][ atmPos ][ 0 ] = 0;
    			atmInfo[ atmID ][ atmPos ][ 1 ] = 0;
    			atmInfo[ atmID ][ atmPos ][ 2 ] = 0;
    			atmInfo[ atmID ][ atmPos ][ 3 ] = 0;
    			atmInfo[ atmID ][ atmPos ][ 4 ] = 0;
    			atmInfo[ atmID ][ atmPos ][ 5 ] = 0;
    			atmInfo[ atmID ][ atmPreseceneZice ] = false;
    			atmInfo[ atmID ][ atmProbijenBios ] = false;
    			atmInfo[ atmID ][ atmTimeToRob ] = 0;
    			atmInfo[ atmID ][ atmbaseID ] = 0;

				ServerInfo[ atmsCounter ]--;

	            SendInfoMessage( playerid, "Obrisao si bankomat. ID = %d.", atmID );
			}
			if( listitem == 6 ) {

			    new as = GetNearestSalon( playerid );
            	if( as == -1 ) return SendErrorMessage( playerid, "Moras biti pored pickupa za kupnju u salonu." );

            	if( IsValidDynamic3DTextLabel( AutoSalon[ as ][ AutoSalon3D ] ) )
		    		DestroyDynamic3DTextLabel( AutoSalon[ as ][ AutoSalon3D ] );

		    	if( IsValidDynamicPickup( AutoSalon[ as ][ AutoSalonPickup ] ) )
					DestroyDynamicPickup( AutoSalon[ as ][ AutoSalonPickup ] );

                new query[ 128 ];
				mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `vehicle_salon` WHERE `salon_id` = '%d'", AutoSalon[ as ][ aSalon_ID ] );
				mysql_pquery( _dbConnector, query, "", "" );

				AutoSalon[ as ][ aPickupPos ][ 0 ] = 0.0;
				AutoSalon[ as ][ aPickupPos ][ 1 ] = 0.0;
				AutoSalon[ as ][ aPickupPos ][ 2 ] = 0.0;
				AutoSalon[ as ][ aVW ] = 0;
				AutoSalon[ as ][ aInt ] = 0;
				AutoSalon[ as ][ aVehBuyedPos ][ 0 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 1 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 2 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 3 ] = 0.0;
				AutoSalon[ as ][ aVehModel ][ 0 ] = 0; AutoSalon[ as ][ aMaxVehModel ] = 0;
				AutoSalon[ as ][ aVehModel ][ 1 ] = 0; AutoSalon[ as ][ aVehModel ][ 2 ] = 0; AutoSalon[ as ][ aVehModel ][ 3 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 4 ] = 0; AutoSalon[ as ][ aVehModel ][ 5 ] = 0; AutoSalon[ as ][ aVehModel ][ 6 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 7 ] = 0; AutoSalon[ as ][ aVehModel ][ 8 ] = 0; AutoSalon[ as ][ aVehModel ][ 9 ] = 0;
                AutoSalon[ as ][ aVehModel ][ 10 ] = 0; AutoSalon[ as ][ aVehModel ][ 11 ] = 0; AutoSalon[ as ][ aVehModel ][ 12 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 13 ] = 0; AutoSalon[ as ][ aVehModel ][ 14 ] = 0; AutoSalon[ as ][ aVehModel ][ 15 ] = 0;
				AutoSalon[ as ][ aSalon_ID ] = 0;

				ServerInfo[ vehsalonsCounter ]--;

	    		SendInfoMessage( playerid, "Obrisao si autosalon. ID = %d.", as );
			}
			if( listitem == 7 ) {
			    new portid = GetNearestOrgPortID( playerid );

			    if( portid == -1 ) return SendErrorMessage( playerid, "U blizini nema organizacijskih portova" );

				if( IsValidDynamicPickup( org_ports_info[ portid ][ o_p_pickup_1 ] ) )
					DestroyDynamicPickup( org_ports_info[ portid ][ o_p_pickup_1 ] );

                if( IsValidDynamicPickup( org_ports_info[ portid ][ o_p_pickup_2 ] ) )
					DestroyDynamicPickup( org_ports_info[ portid ][ o_p_pickup_2 ] );

				if( IsValidDynamic3DTextLabel( org_ports_info[ portid ][ o_p_3D_1 ] ) )
		    		DestroyDynamic3DTextLabel( org_ports_info[ portid ][ o_p_3D_1 ] );

		    	if( IsValidDynamic3DTextLabel( org_ports_info[ portid ][ o_p_3D_2 ] ) )
		    		DestroyDynamic3DTextLabel( org_ports_info[ portid ][ o_p_3D_2 ] );

				org_ports_info[ portid ][ o_p_orgID ] = -1;
				org_ports_info[ portid ][ o_p_baseOrgID ] = 0;
				org_ports_info[ portid ][ o_p_pos1_X ] = 0.0;
				org_ports_info[ portid ][ o_p_pos1_Y ] = 0.0;
				org_ports_info[ portid ][ o_p_pos1_Z ] = 0.0;
				org_ports_info[ portid ][ o_p_int_1 ] = 0;
				org_ports_info[ portid ][ o_p_vw_1 ] = 0;
				org_ports_info[ portid ][ o_p_pos2_X ] = 0.0;
				org_ports_info[ portid ][ o_p_pos2_Y ] = 0.0;
				org_ports_info[ portid ][ o_p_pos2_Z ] = 0.0;
				org_ports_info[ portid ][ o_p_int_2 ] = 0;
				org_ports_info[ portid ][ o_p_vw_2 ] = 0;

				new query[ 128 ];
				mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `org_ports` WHERE `port_id` = '%d'",  org_ports_info[ portid ][ o_p_baseID ] );
				mysql_pquery( _dbConnector, query, "", "" );

				org_ports_info[ portid ][ o_p_baseID ] = 0;

				SendInfoMessage( playerid, "Obrisao si port za orgu. ID porta = %d.", portid );
			}
			if( listitem == 8 ) {

                if( GetNearestHotel( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu hotela." );
				new h = GetNearestHotel( playerid );

				if( IsValidDynamicPickup( hotelInfo[ h ][ hPickup ] ) )
					DestroyDynamicPickup( hotelInfo[ h ][ hPickup ] );

				if( IsValidDynamic3DTextLabel( hotelInfo[ h ][ h3DText ] ) )
					DestroyDynamic3DTextLabel( hotelInfo[ h ][ h3DText ] );

    			new query[ 128 ];
				mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `hotels` WHERE `hID` = '%d'",  hotelInfo[ h ][ hbaseID ] );
				mysql_pquery( _dbConnector, query, "", "" );

				hotelInfo[ h ][ hbaseID ] = 0;

				ServerInfo[ hotelsCounter ]--;

	            SendInfoMessage( playerid, "Obrisao si hotel. ID = %d.", h );
			}
			if( listitem == 9 ) {

                if( NearestGate( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti pored kapije." );
				new g = NearestGate( playerid );

				if( IsValidDynamicObject( GateData[ g ][ gateObject ] ) )
					DestroyDynamicObject( GateData[ g ][ gateObject ] );

			    new query[ 128 ];
				mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `gates` WHERE `gateid` = '%d'", GateData[ g ][ gatebaseID ] );
				mysql_pquery( _dbConnector, query, "", "" );

			    SendInfoMessage( playerid, "Obrisao si kapiju. baseSqlID = %d.", GateData[ g ][ gatebaseID ] );

			    GateData[ g ][ gatebaseID ] = 0;
	            GateData[ g ][ gateFor ] = 0;
	            GateData[ g ][ gateOrgID ] = 0;
	            GateData[ g ][ gateModel ] = 0;
				GateData[ g ][ gateSpeed ] = 0.0;
				GateData[ g ][ gateRadius ] = 0.0;
				GateData[ g ][ gateOpened ] = false;
				GateData[ g ][ gateTime ] = 0;
				GateData[ g ][ gateTimer ] = -1;
				GateData[ g ][ gateOpenedBefore ] = 0;

                strmid( GateData[ g ][ gateOwner ], "", 0, strlen( "" ), MAX_PLAYER_NAME );
                strmid( GateData[ g ][ gateTexture ], "nema", 0, strlen( "nema" ), 128 );

				GateData[ g ][ gatePos ][ 0 ] = 0.0;
				GateData[ g ][ gatePos ][ 1 ] = 0.0;
				GateData[ g ][ gatePos ][ 2 ] = 0.0;
				GateData[ g ][ gatePos ][ 3 ] = 0.0;
				GateData[ g ][ gatePos ][ 4 ] = 0.0;
				GateData[ g ][ gatePos ][ 5 ] = 0.0;

				GateData[ g ][ gateMove ][ 0 ] = 0.0;
				GateData[ g ][ gateMove ][ 1 ] = 0.0;
				GateData[ g ][ gateMove ][ 2 ] = 0.0;
				GateData[ g ][ gateMove ][ 3 ] = 0.0;
				GateData[ g ][ gateMove ][ 4 ] = 0.0;
				GateData[ g ][ gateMove ][ 5 ] = 0.0;

	            GateData[ g ][ gateInterior ] = 0;
	            GateData[ g ][ gateWorld ] = 0;
			}
			if( listitem == 10 ) {
	            SendErrorMessage( playerid, "Trenutno onemoguceno." );
			}
			if( listitem == 11 ) {
                if( GetNearestGarage( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu garaze." );
				new id = GetNearestGarage( playerid );

				if( IsValidDynamicPickup( garageInfo[ id ][ garagePickup ] ) )
					DestroyDynamicPickup( garageInfo[ id ][ garagePickup ] );

				if( IsValidDynamic3DTextLabel( garageInfo[ id ][ garage3D ] ) )
					DestroyDynamic3DTextLabel( garageInfo[ id ][ garage3D ] );

    			new query[ 128 ];
				mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `garages` WHERE `garage_id` = '%d'", garageInfo[ id ][ garageSqlID ] );
				mysql_pquery( _dbConnector, query, "", "" );

                ResetGarage( id );
                garageInfo[ id ][ garageSqlID ] = 0;
	            SendInfoMessage( playerid, "Obrisao si garazu. ID = %d.", id );
			}
			if( listitem == 12 ) {

			    if( GetNearestGZone( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti u teritoriji." );
				new id = GetNearestGZone( playerid );

				if( IsValidDynamicPickup( gZoneInfo[ id ][ gZonePickup ] ) )
					IsValidDynamicPickup( gZoneInfo[ id ][ gZonePickup ] );

			    if( IsValidDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] ) )
		    		DestroyDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] );

                if( IsValidDynamicArea( gZoneInfo[ id ][ gZoneRectAngle ] ) )
		    		IsValidDynamicArea( gZoneInfo[ id ][ gZoneRectAngle ] );

		    	if( IsValidDynamicActor( gZoneInfo[ id ][ gZoneAc_1AC ] ) )
					DestroyDynamicActor( gZoneInfo[ id ][ gZoneAc_1AC ] );

		    	if( IsValidDynamicActor( gZoneInfo[ id ][ gZoneAc_2AC ] ) )
					DestroyDynamicActor( gZoneInfo[ id ][ gZoneAc_2AC ] );

		    	if( IsValidDynamicActor( gZoneInfo[ id ][ gZoneAc_3AC ] ) )
					DestroyDynamicActor( gZoneInfo[ id ][ gZoneAc_3AC ] );

		    	new query[ 128 ];
				mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `gangzones` WHERE `gzone_id` = '%d'", gZoneInfo[ id ][ gZone_ID ] );
				mysql_pquery( _dbConnector, query, "", "" );

				ServerInfo[ GangZCounter ]--;

				gZoneInfo[ id ][ gZone_ID ] = 0;
				gZoneInfo[ id ][ gZoneWounded ] = 0;
			    GZone_Reset( id );

			    GangZoneHideForAll( gZoneInfo[ id ][ gZoneID ] );
			    GangZoneDestroy( gZoneInfo[ id ][ gZoneID ] );

			    SendInfoMessage( playerid, "Obrisao si gangzonu. ID = %d.", id );

			}
			if( listitem == 13 ) {

                if( GetNearestPresent( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu poklona." );

				new i = GetNearestPresent( playerid );

				if( IsValidDynamicObject( presentsInfo[ i ][ presObject ] ) )
					DestroyDynamicObject( presentsInfo[ i ][ presObject ] );

                if( IsValidDynamic3DTextLabel( presentsInfo[ i ][ pres3d ] ) )
					DestroyDynamic3DTextLabel( presentsInfo[ i ][ pres3d ] );

		    	presentsInfo[ i ][ presPos ][ 0 ] = 0;
    			presentsInfo[ i ][ presPos ][ 1 ] = 0;
    			presentsInfo[ i ][ presPos ][ 2 ] = 0;
    			presentsInfo[ i ][ presPos ][ 3 ] = 0;
    			presentsInfo[ i ][ presPos ][ 4 ] = 0;
    			presentsInfo[ i ][ presPos ][ 5 ] = 0;
    			presentsInfo[ i ][ presTaken ] = true;
    			presentsInfo[ i ][ presPlaced ] = false;

    			new fstring[ 64 ];
				format( fstring, sizeof( fstring ), F_PRESENTS, i );
			    if( fexist( fstring ) ) { fremove( fstring ); }

	            SendInfoMessage( playerid, "Obrisao si poklon. ID = %d.", i );

			}
			if( listitem == 14 ) {

                if( GetNearestCTree( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu jelke." );
				new i = GetNearestCTree( playerid );

				if( IsValidDynamicObject( CTree[ i ][ ctObject ] ) )
					DestroyDynamicObject( CTree[ i ][ ctObject ] );

                if( IsValidDynamic3DTextLabel( CTree[ i ][ ct3d ] ) )
					DestroyDynamic3DTextLabel( CTree[ i ][ ct3d ] );

		    	CTree[ i ][ ctPos ][ 0 ] = 0;
    			CTree[ i ][ ctPos ][ 1 ] = 0;
    			CTree[ i ][ ctPos ][ 2 ] = 0;
    			CTree[ i ][ ctPos ][ 3 ] = 0;
    			CTree[ i ][ ctPos ][ 4 ] = 0;
    			CTree[ i ][ ctPos ][ 5 ] = 0;
    			CTree[ i ][ ctPlaced ] = false;

    			new fstring[ 64 ];
				format( fstring, sizeof( fstring ), F_CTREES, i );
			    if( fexist( fstring ) ) { fremove( fstring ); }

	            SendInfoMessage( playerid, "Obrisao si jelku. ID = %d.", i );

			}
			if( listitem == 15 ) {

                if( GetNearestXOrb( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu lampe." );
				new i = GetNearestXOrb( playerid );

				if( IsValidDynamicObject( XmasOrbs[ i ][ xoObject ] ) )
					DestroyDynamicObject( XmasOrbs[ i ][ xoObject ] );

		    	XmasOrbs[ i ][ xoPos ][ 0 ] = 0;
    			XmasOrbs[ i ][ xoPos ][ 1 ] = 0;
    			XmasOrbs[ i ][ xoPos ][ 2 ] = 0;
    			XmasOrbs[ i ][ xoPos ][ 3 ] = 0;
    			XmasOrbs[ i ][ xoPos ][ 4 ] = 0;
    			XmasOrbs[ i ][ xoPos ][ 5 ] = 0;
    			XmasOrbs[ i ][ xoPlaced ] = false;

    			new fstring[ 64 ];
				format( fstring, sizeof( fstring ), F_XORBS, i );
			    if( fexist( fstring ) ) { fremove( fstring ); }

	            SendInfoMessage( playerid, "Obrisao si lampu. ID = %d.", i );

			}
			if( listitem == 16 ) { // actor

				new actorID = getTargetedActor( playerid );
        		if( actorID == -1 ) return SendErrorMessage( playerid, "Morate gledati u actora kog zelite obrisati." );

        		DestroyDynamicActor( actorInfo[ actorID ][ actorActorID ] );

        		new query[ 128 ];
				mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `actors` WHERE `acID` = '%d'", actorInfo[ actorID ][ actorbaseID ] );
				mysql_pquery( _dbConnector, query, "", "" );

        		actorInfo[ actorID ][ actorbaseID ] = 0;
				actorInfo[ actorID ][ actorSkinID ] = 0;
				actorInfo[ actorID ][ actorPos_X ] = 0;
				actorInfo[ actorID ][ actorPos_Y ] = 0;
				actorInfo[ actorID ][ actorPos_Z ] = 0;
				actorInfo[ actorID ][ actorPos_A ] = 0;
				actorInfo[ actorID ][ actorVW ] = 0;
				actorInfo[ actorID ][ actorAnimationID ] = 0;

				actorInfo[ actorID ][ actorActorID ] = INVALID_ACTOR_ID;

				ServerInfo[ actorsCounter ]--;

				SendInfoMessage( playerid, "Uspjesno ste obrisali actora ID: %d.", actorID );

			}
			if( listitem == 17 ) {
				new buildID = GetNearestBuilding( playerid );
				if( buildID == -1 ) return SendErrorMessage( playerid, "Moras biti na ulazu u zgradu." );

				if( IsValidDynamicPickup( buildingInfo[ buildID ][ buildPickup ] ) )
					DestroyDynamicPickup( buildingInfo[ buildID ][ buildPickup ] );

				if( IsValidDynamic3DTextLabel( buildingInfo[ buildID ][ build3DText ] ) )
					DestroyDynamic3DTextLabel( buildingInfo[ buildID ][ build3DText ] );

				new query[ 128 ];
				mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `buildings` WHERE `buildID` = '%d'", buildingInfo[ buildID ][ buildbaseID ] );
				mysql_pquery( _dbConnector, query, "", "" );


				buildingInfo[ buildID ][ buildbaseID ] = 0;
				buildingInfo[ buildID ][ buildEnter ][ 0 ] =  0;
				buildingInfo[ buildID ][ buildEnter ][ 1 ] =  0;
				buildingInfo[ buildID ][ buildEnter ][ 2 ] =  0;
				buildingInfo[ buildID ][ buildExit ][ 0 ] = 0.0;
				buildingInfo[ buildID ][ buildExit ][ 1 ] = 0.0;
				buildingInfo[ buildID ][ buildExit ][ 2 ] = 0.0;
				buildingInfo[ buildID ][ buildInterior ] = 0;
				buildingInfo[ buildID ][ buildVW ] = 0;

				SendInfoMessage( playerid, "Uspjesno ste obrisali zgradu ID: %d.", buildID );
			}
			if( listitem == 18 ) {

				new dl = GetNearestDrugLab( playerid );
				if( dl == -1 ) return SendErrorMessage( playerid, "Ne nalazite se na ulazu nijedne laboratorije droge." );
				if( drug_lab[ dl ][ dlOrgOwner ] != -1 ) return SendErrorMessage( playerid, "Ova laboratorija je u vlasnistvu organizacije." );

				if( IsValidDynamic3DTextLabel( drug_lab[ dl ][ dlLabel ] ) )
			    	DestroyDynamic3DTextLabel( drug_lab[ dl ][ dlLabel ] );

		    	if( IsValidDynamicPickup( drug_lab[ dl ][ dlPickup ] ) )
			    	DestroyDynamicPickup( drug_lab[ dl ][ dlPickup ] );

			    if( IsValidDynamic3DTextLabel( drug_lab[ dl ][ dlSeedsLabel ] ) )
			    	DestroyDynamic3DTextLabel( drug_lab[ dl ][ dlSeedsLabel ] );

		    	if( IsValidDynamicPickup( drug_lab[ dl ][ dlSeedsPickup ] ) )
			    	DestroyDynamicPickup( drug_lab[ dl ][ dlSeedsPickup ] );

				new query[ 128 ];
				mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `drug_labs` WHERE `dl_sqlID` = '%d'", drug_lab[ dl ][ dlSqlID ] );
				mysql_pquery( _dbConnector, query, "", "" );

				drug_lab[ dl ][ dlSqlID ] = 0;
				for( new i = 0; i < 10; i++ ) {

					if( IsValidActor( drug_lab[ dl ][ dlActor ][ i ] ) )
		        		DestroyActor( drug_lab[ dl ][ dlActor ][ i ] );

		        	drug_lab[ dl ][ dlActorsUpgLevel ][ i ] = 0;
					drug_lab[ dl ][ dlActor ][ i ] = INVALID_ACTOR_ID;
				}

				drug_lab[ dl ][ dlSeeds ] = 0;

				drug_lab[ dl ][ dlSafeDrug ] = 0;

				drug_lab[ dl ][ dlEntPos ][ 0 ] = 0;
				drug_lab[ dl ][ dlEntPos ][ 1 ] = 0;
				drug_lab[ dl ][ dlEntPos ][ 2 ] = 0;

				drug_lab[ dl ][ dlExitPos ][ 0 ] = 0;
				drug_lab[ dl ][ dlExitPos ][ 1 ] = 0;
				drug_lab[ dl ][ dlExitPos ][ 2 ] = 0;

				drug_lab[ dl ][ dlPrice ] = 0;
				drug_lab[ dl ][ dlOrgOwner ] = -1;
				drug_lab[ dl ][ dlOrgOwnerSqlID  ] = 0;

				drug_lab[ dl ][ dlInt ] = 0;
				drug_lab[ dl ][ dlVW ] = 0;

				SendInfoMessage( playerid, "Uspjesno ste obrisali lab droge ID: %d.", dl );

			}
			if( listitem == 19 ) {
                if( GetNearestSprayTag( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu spray taga." );
				new spID = GetNearestSprayTag( playerid );

				if( IsValidDynamicObject( sprayTags[ spID ][ spObject ] ) )
					DestroyDynamicObject( sprayTags[ spID ][ spObject ] );

			    new query[ 128 ];
				mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `spraytags` WHERE `spID` = '%d'", sprayTags[ spID ][ spbaseID ] );
				mysql_pquery( _dbConnector, query, "", "" );

		    	sprayTags[ spID ][ spPos ][ 0 ] = 0;
    			sprayTags[ spID ][ spPos ][ 1 ] = 0;
    			sprayTags[ spID ][ spPos ][ 2 ] = 0;
    			sprayTags[ spID ][ spPos ][ 3 ] = 0;
    			sprayTags[ spID ][ spPos ][ 4 ] = 0;
    			sprayTags[ spID ][ spPos ][ 5 ] = 0;
    			sprayTags[ spID ][ spModelID ] = 0;
    			sprayTags[ spID ][ spbaseID ] = 0;
    			sprayTags[ spID ][ spGangSqlID ] = 0;
    			sprayTags[ spID ][ spGangID ] = -1;

				ServerInfo[ sprayTagsCounter ]--;

	            SendInfoMessage( playerid, "Obrisao si spray tag. ID = %d.", spID );
			}
			if( listitem == 20 ) { // diler

				new dealerID = getTargetedDealer( playerid );
        		if( dealerID == -1 ) return SendErrorMessage( playerid, "Morate gledati u dilera kog zelite obrisati." );

        		DestroyDynamicActor( dealers_info[ dealerID ][ dealer_acAC ] );

        		if( IsValidDynamic3DTextLabel( dealers_info[ dealerID ][ dealer_ac3D ] ) )
			    	DestroyDynamic3DTextLabel( dealers_info[ dealerID ][ dealer_ac3D ] );

        		new query[ 128 ];
				mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `dealers` WHERE `dealer_id` = '%d'", dealers_info[ dealerID ][ dealer_baseID ] );
				mysql_pquery( _dbConnector, query, "", "" );

        		dealers_info[ dealerID ][ dealer_baseID ] = 0;
        		dealers_info[ dealerID ][ dealer_cartelSqlID ] = 0;
				dealers_info[ dealerID ][ dealer_cartelID ] = 0;
				dealers_info[ dealerID ][ dealer_TakingInProg ] = false;
				dealers_info[ dealerID ][ dealer_acSkin ] = 0;
				dealers_info[ dealerID ][ dealer_acPos_X ] = 0;
				dealers_info[ dealerID ][ dealer_acPos_Y ] = 0;
				dealers_info[ dealerID ][ dealer_acPos_Z ] = 0;
				dealers_info[ dealerID ][ dealer_acPos_A ] = 0;
				dealers_info[ dealerID ][ dealer_Time ] = 0;
				dealers_info[ dealerID ][ dealer_acAnim ] = 0;

				dealers_info[ dealerID ][ dealer_acAC ] = INVALID_ACTOR_ID;

				SendInfoMessage( playerid, "Uspjesno ste obrisali dilera ID: %d.", dealerID );

			}
			if( listitem == 21 ) { //radar

			    if( GetNearestRadar( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu radara." );
				new id = GetNearestRadar( playerid );

				if( IsValidDynamicObject( radarInfo[ id ][ radarObject ] ) )
					DestroyDynamicObject( radarInfo[ id ][ radarObject ] );

				if( IsValidDynamic3DTextLabel( radarInfo[ id ][ radar3d ] ) )
					DestroyDynamic3DTextLabel( radarInfo[ id ][ radar3d ] );

				radarInfo[ id ][ radarMaxSpeed ] = 0;
				radarInfo[ id ][ radarPrice ] = 0;
				radarInfo[ id ][ radarPos ][ 0 ] = 0;
				radarInfo[ id ][ radarPos ][ 1 ] = 0;
				radarInfo[ id ][ radarPos ][ 2 ] = 0;
				radarInfo[ id ][ radarPos ][ 3 ] = 0;
				radarInfo[ id ][ radarPos ][ 4 ] = 0;
				radarInfo[ id ][ radarPos ][ 5 ] = 0;

    			new fstring[ 64 ];
				format( fstring, sizeof( fstring ), F_RADARS, id );
			    if( fexist( fstring ) ) { fremove( fstring ); }

	            SendInfoMessage( playerid, "Obrisao si radar. ID = %d.", id );
			}
			if( listitem == 22 ) {

                if( GetNearestStreet( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu ulice." );
				new s = GetNearestStreet( playerid );

				if( IsValidDynamicPickup( streetInfo[ s ][ sPickup ] ) )
					DestroyDynamicPickup( streetInfo[ s ][ sPickup ] );

				if( IsValidDynamic3DTextLabel( streetInfo[ s ][ s3DText ] ) )
					DestroyDynamic3DTextLabel( streetInfo[ s ][ s3DText ] );

    			new query[ 128 ];
				mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `streets` WHERE `sID` = '%d'",  streetInfo[ s ][ sbaseID ] );
				mysql_pquery( _dbConnector, query, "", "" );

				streetInfo[ s ][ sbaseID ] = 0;

				ServerInfo[ streetsCounter ]--;

	            SendInfoMessage( playerid, "Obrisao si ulicu. ID = %d.", s );
			}
			if( listitem == 23 ){
				new f = Furniture_GetNearest( playerid );
				if( f == -1 ) return SendErrorMessage( playerid, "Moras biti blizu namjestaja." );
				Furniture_Delete( f );
				SendInfoMessage( playerid, "Obrisao si namjestaj ID: %d.", f );
			}
		}
	}
	else if( dialogid == dialog_IZMENISVE ) {
	    if( !response ) return SPD( playerid, dialog_SERVERMI, DSL, D_NASLOV, "Upravljanje serverom\nNapravi\nIzbrisi\nIzmeni\nSpisak organizacija\nAntiCheat\nBroj kreiranih stvari", D_ODABERI, D_ODUSTANI );
        if( response ) {
		    if( listitem == 0 ) {
		    	SPD( playerid, dialog_ORGEDIT, DSL, D_NASLOV, "Promjeni Ime\nPromeni Interior\nPromeni Rankove\nPromeni Tip\nPromeni muske skinove\nPromeni Skracenicu\nNapravi DutyPoint\nNapravi Equipment Point\nNapravi Port point\nPromeni zenske skinove\nPromeni max broj clanova\nKreiraj sef\nPromeni boju orge\nZakljucaj organizaciju\nSpawn Point\nUlaz iz firme\nBoja vozila\nDodaj slot vozila\nNapravi ormar", D_ODABERI, D_ODUSTANI ); }
	        if( listitem == 1 ) {
		    	SPD( playerid, dialog_FEDIT, DSL, D_NASLOV, "Promjeni Ime\nOtkljucaj firmu\nZakljucaj firmu\nProdaj firmu\nPromeni kordinate izlaza\nPromeni vrstu firme\nEdit Reket", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 2 ) {
		    	SPD( playerid, dialog_VEDIT, DSL, D_NASLOV, "Promjeni cijenu\nParkiraj vozilo\nProdaj vozilo\nPromeni boju", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 3 ) {
		    	SPD( playerid, dialog_IEDIT, DSL, D_NASLOV, "Promjeni cijenu\nOtkljucaj imovinu\nZakljucaj imovinu\nProdaj imovinu\nPromjeni koordinate interijera", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 4 ) {
		    	SPD( playerid, dialog_HEDIT, DSL, D_NASLOV, "Promjeni cijenu\nPromeni level\nProdaj hotel", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 5 ) {
		    	SPD( playerid, dialog_CONEDIT, DSMSG, D_NASLOV, "Da li zelite da promjenite lokaciju kontejnera?", "Da", "Ne" ); }
            if( listitem == 6 ) {
		    	SPD( playerid, dialog_GEDIT, DSL, D_NASLOV, "Promjeni cijenu\nPromeni level\nProdaj garazu\nPostavi vlasnistvo imovini", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 7 ) {
		    	SPD( playerid, dialog_GPSEDIT, DSL, D_NASLOV, "Promjeni ime\nPromeni poziciju", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 8 ) {
		    	SPD( playerid, dialog_APORTEDIT, DSL, D_NASLOV, "Promjeni ime\nPromeni poziciju", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 9 ) {
		    	SPD( playerid, dialog_SPORTEDIT, DSL, D_NASLOV, "Promjeni ime\nPromeni poziciju", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 10 ) {
		    	SPD( playerid, dialog_AUTOSEDIT, DSL, D_NASLOV, "Dodaj kolicinu modela\nPovezi sa firmom\nIme Autosalona", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 11 ) {
		    	SPD( playerid, dialog_GANGZEDIT, DSL, D_NASLOV, "Daj vlasnistvo zone bandi\nDa li zona moze da se zauzima?\nOslobodi zonu\nPromeni boju zone\nPostavi pickup ovde\nAnimaciju actora\nPozicija actora 1\nPozicija actora 2\nPozicija actora 3\nTip zone", D_ODABERI, D_ODUSTANI ); }
            if( listitem == 12 ) {
		    	SPD( playerid, dialog_actorEdit, DSL, D_NASLOV, "Postavi animaciju\nPrebaci na tvoju poziciju\nPromeni skin", D_ODABERI, D_ODUSTANI );}
		   	if( listitem == 13 ) {
		    	SPD( playerid, dialog_dealerEdit, DSL, D_NASLOV, "Postavi animaciju\nPrebaci na tvoju poziciju\nPromeni skin\nDaj vlasnistvo kartelu", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 14 ) {
		    	SPD( playerid, dialog_SEDIT, DSL, D_NASLOV, "Promjeni cijenu\nPromjeni level\nPromjeni ime\nProdaj ulicu", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 15 ) {
		    	SPD( playerid, dialog_GATEEDIT, DSI, "Promjena vlasnika kapije", "Unesi tocno ime novog vlasnika kapije", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 16 ){
				SPD( playerid, dialog_FURNITUREEDIT, DSL, D_NASLOV, "Promjena pozicije", D_ODABERI, D_ODUSTANI );
			}
		}
	}
	else if( dialogid == dialog_CONEDIT ) {

	    if( !response ) return true;
        if( response ) {
        	if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu kontejnera." );
        	new conID = GetNearestContainer( playerid );

        	EditDynamicObject( playerid, containerInfo[ conID ][ conObjID ] );
			EditContainer[ playerid ] = conID;
			creatingContainer[ playerid ] = false;
        }
    }
    else if( dialogid == dialog_dealerEdit ) {

	    if( !response ) return true;
        if( response ) {
        	switch( listitem ) {
        		case 0:{

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_ACANIMS; i++ ) {
						strcat( DialogStrgEx, actoranims[ i ][ anim_comamnd ] );
						if( i != MAX_ACANIMS-1 ) strcat( DialogStrgEx, "\n" );
					}
					SPD( playerid, dialog_dealerAnimList, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
        		}
        		case 1: {
        			new dealerID = getTargetedDealer( playerid );
		        	if( dealerID == -1 ) return SendErrorMessage( playerid, "Morate gledati u dealera kome zelite da promjenite poziciju." );

		        	new Float:Pos[ 4 ];
		        	GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		        	GetPlayerFacingAngle( playerid, Pos[ 3 ]);

		        	dealers_info[ dealerID ][ dealer_acPos_X ] = Pos[ 0 ];
					dealers_info[ dealerID ][ dealer_acPos_Y ] = Pos[ 1 ];
					dealers_info[ dealerID ][ dealer_acPos_Z ] = Pos[ 2 ];
					dealers_info[ dealerID ][ dealer_acPos_A ] = Pos[ 3 ];

					DestroyDynamicActor( dealers_info[ dealerID ][ dealer_acAC ] );

					dealers_info[ dealerID ][ dealer_acAC ] = CreateDynamicActor( dealers_info[ dealerID ][ dealer_acSkin ],
																				dealers_info[ dealerID ][ dealer_acPos_X ],
																				dealers_info[ dealerID ][ dealer_acPos_Y ],
																				dealers_info[ dealerID ][ dealer_acPos_Z ],
																				dealers_info[ dealerID ][ dealer_acPos_A ], 0, 100.0, 0);
					dealers_Refresh( dealerID );

				    if( dealers_info[ dealerID ][ dealer_acAnim ] > 0 ) {
				        new animID = dealers_info[ dealerID ][ dealer_acAnim ];
				        ApplyDynamicActorAnimation( dealers_info[ dealerID ][ dealer_acAC ],
				        			actoranims[ animID ][ acanim_animlib ],
				        			actoranims[ animID ][ acanim_animname ],
				        			actoranims[ animID ][ acanim_fdelta ],
				        			actoranims[ animID ][ acanim_loop ],
				        			actoranims[ animID ][ acanim_lockx ],
				        			actoranims[ animID ][ acanim_locky ],
				        			actoranims[ animID ][ acanim_freeze ],
				        			actoranims[ animID ][ acanim_ime ]);
				    }

			       	new q[ 192 ];
					mysql_format( _dbConnector, q, sizeof(q), "UPDATE `dealers` SET `dealer_pos_x` = '%f',`dealer_pos_y` = '%f',`dealer_pos_z` = '%f',`dealer_pos_a` = '%f' WHERE `dealer_id` = '%d'",
						dealers_info[ dealerID ][ dealer_acPos_X ],
						dealers_info[ dealerID ][ dealer_acPos_Y ],
						dealers_info[ dealerID ][ dealer_acPos_Z ],
						dealers_info[ dealerID ][ dealer_acPos_A ],
						dealers_info[ dealerID ][ dealer_baseID ] );

				 	mysql_pquery( _dbConnector, q, "", "");

				   	SendInfoMessage( playerid, "Uspjesno ste promjenili poziciju dilera ID:%d.", dealerID );

				   	KGEyes_SetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ]+5 );
				}
				case 2: {

					SPD( playerid, dialog_dealerChangeSkin, DSI, D_NASLOV, "Unesti skinID za promenu Dilera(1-311)", D_ODABERI, D_NAZAD );
				}
				case 3: {

					SPD( playerid, dialog_dealerChangeOwnership, DSI, D_NASLOV, "Unesite ID kartela kome dajete vlasnistvo", D_ODABERI, D_NAZAD );
				}
        	}
        }
    }
    else if( dialogid == dialog_dealerChangeOwnership ) {

	    if( !response ) return true;
        if( response ) {

        	new organizacija;

            if( sscanf( inputtext, "i", organizacija ) ) return SPD( playerid, dialog_GANGZID, DSI, D_NASLOV, "Unesi ID orge kojoj dajete vlasnistvo.", D_ODABERI, D_ODUSTANI );
			if( organizacija < 1 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
			if( org_info[ organizacija ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
			if( !IsIllegalTypeOrgByID( organizacija ) ) return SendErrorMessage( playerid, "Ta organizacija nije ilegalnog tipa." );

            new dealerID = getTargetedDealer( playerid );
        	if( dealerID == -1 ) return SendErrorMessage( playerid, "Morate gledati u dilera kome zelite da postavite vlasnistvo." );

			dealers_info[ dealerID ][ dealer_cartelSqlID ] = org_info[ organizacija ][ oID ];
   	        dealers_info[ dealerID ][ dealer_cartelID ] = organizacija;

			dealers_Refresh( dealerID );

			if( IsValidDynamicActor( dealers_info[ dealerID ][ dealer_acAC ] ) )
				DestroyDynamicActor( dealers_info[ dealerID ][ dealer_acAC ] );

			dealers_info[ dealerID ][ dealer_acSkin ] = org_info[ dealers_info[ dealerID ][ dealer_cartelID ] ][ oSkin1 ];

			dealers_info[ dealerID ][ dealer_acAC ] = CreateDynamicActor( dealers_info[ dealerID ][ dealer_acSkin ],
																		  dealers_info[ dealerID ][ dealer_acPos_X ],
																		  dealers_info[ dealerID ][ dealer_acPos_Y ],
																		  dealers_info[ dealerID ][ dealer_acPos_Z ],
																		  dealers_info[ dealerID ][ dealer_acPos_A ], 0, 100.0, 0);

			if( dealers_info[ dealerID ][ dealer_acAnim ] > 0 ) {
		   		new animID = dealers_info[ dealerID ][ dealer_acAnim ];
		    	ApplyDynamicActorAnimation( dealers_info[ dealerID ][ dealer_acAC ],
				        			actoranims[ animID ][ acanim_animlib ],
				        			actoranims[ animID ][ acanim_animname ],
				        			actoranims[ animID ][ acanim_fdelta ],
				        			actoranims[ animID ][ acanim_loop ],
				        			actoranims[ animID ][ acanim_lockx ],
				        			actoranims[ animID ][ acanim_locky ],
				        			actoranims[ animID ][ acanim_freeze ],
				        			actoranims[ animID ][ acanim_ime ]);
			}

			new q[ 128 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `dealers` SET  `dealer_orgid` = '%d', `dealer_skin` = '%d' WHERE `dealer_id` = '%d'",
					dealers_info[ dealerID ][ dealer_cartelSqlID ], dealers_info[ dealerID ][ dealer_acSkin ], dealers_info[ dealerID ][ dealer_baseID ] );

		   	mysql_pquery( _dbConnector, q, "", "");

			SendInfoMessage( playerid, "Ovaj diler je sad u vlasnistvu kartela ID %d.", organizacija );
        }
    }
    else if( dialogid == dialog_dealerAnimList ) {

	    if( !response ) return true;
        if( response ) {
        	new dealerID = getTargetedDealer( playerid );
        	if( dealerID == -1 ) return SendErrorMessage( playerid, "Morate gledati u dilera kome zelite da postavite animaciju." );

        	dealers_info[ dealerID ][ dealer_acAnim ] = listitem;
        	if( listitem > 0 ) {
        		ApplyDynamicActorAnimation( dealers_info[ dealerID ][ dealer_acAC ],
        									actoranims[ listitem ][ acanim_animlib ],
        									actoranims[ listitem ][ acanim_animname ],
        									actoranims[ listitem ][ acanim_fdelta ],
        									actoranims[ listitem ][ acanim_loop ],
        									actoranims[ listitem ][ acanim_lockx ],
        									actoranims[ listitem ][ acanim_locky ],
        									actoranims[ listitem ][ acanim_freeze ],
        									actoranims[ listitem ][ acanim_ime ]);


				mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `dealers` SET `dealer_anim` = '%d' WHERE `dealer_id` = '%d'",
						dealers_info[ dealerID ][ dealer_acAnim ],
						dealers_info[ dealerID ][ dealer_baseID ] );

			   	mysql_pquery( _dbConnector, sql_str, "", "");

			   	SendInfoMessage( playerid, "Uspjesno ste postavili ovom dileru, animaciju '%s'.", actoranims[ listitem ][ anim_comamnd ] );

        	}
        	else ClearDynamicActorAnimations( dealers_info[ dealerID ][ dealer_acAC ] );
        }
    }
    else if( dialogid == dialog_dealerChangeSkin ) {

	    if( !response ) return true;
        if( response ) {

        	new skinID;
        	if( sscanf( inputtext, "i", skinID ) ) return SPD( playerid, dialog_dealerChangeSkin, DSI, D_NASLOV, "Unesti skinID za promenu Dilera(1-311)", D_ODABERI, D_NAZAD );
			if( skinID < 1 || skinID > 311 ) return SPD( playerid, dialog_dealerChangeSkin, DSI, D_NASLOV, "Unesti skinID za promenu Dilera(1-311)", D_ODABERI, D_NAZAD );

        	new dealerID = getTargetedDealer( playerid );
		    if( dealerID == -1 ) return SendErrorMessage( playerid, "Morate gledati u dilera kome zelite da promjenite skin." );

		    dealers_info[ dealerID ][ dealer_acSkin ] = skinID;

		    DestroyDynamicActor( dealers_info[ dealerID ][ dealer_acAC ] );
			dealers_info[ dealerID ][ dealer_acAC ] = CreateDynamicActor( dealers_info[ dealerID ][ dealer_acSkin ], Float:dealers_info[ dealerID ][ dealer_acPos_X ], Float:dealers_info[ dealerID ][ dealer_acPos_Y ], Float:dealers_info[ dealerID ][ dealer_acPos_Z ], Float:dealers_info[ dealerID ][ dealer_acPos_A ], 0, 100.0, 0);

		    if( dealers_info[ dealerID ][ dealer_acAnim ] > 0 ) {
		        new animID = dealers_info[ dealerID ][ dealer_acAnim ];
		        ApplyDynamicActorAnimation( dealers_info[ dealerID ][ dealer_acAC ],
		        			actoranims[ animID ][ acanim_animlib ],
		        			actoranims[ animID ][ acanim_animname ],
		        			actoranims[ animID ][ acanim_fdelta ],
		        			actoranims[ animID ][ acanim_loop ],
		        			actoranims[ animID ][ acanim_lockx ],
		        			actoranims[ animID ][ acanim_locky ],
		        			actoranims[ animID ][ acanim_freeze ],
		        			actoranims[ animID ][ acanim_ime ]);
		    }

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `dealers` SET `dealer_skin` = '%d' WHERE `dealer_id` = '%d'",
						dealers_info[ dealerID ][ dealer_acSkin ],
						dealers_info[ dealerID ][ dealer_baseID ] );

		 	mysql_pquery( _dbConnector, sql_str, "", "");
        }
    }
	else if( dialogid == dialog_actorEdit ) {

	    if( !response ) return true;
        if( response ) {
        	switch( listitem ) {
        		case 0:{

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_ACANIMS; i++ ) {
						strcat( DialogStrgEx, actoranims[ i ][ anim_comamnd ] );
						if( i != MAX_ACANIMS-1 ) strcat( DialogStrgEx, "\n" );
					}
					SPD( playerid, dialog_actorAnimList, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
        		}
        		case 1: {
        			new actorID = getTargetedActor( playerid );
		        	if( actorID == -1 ) return SendErrorMessage( playerid, "Morate gledati u actora kome zelite da promjenite poziciju." );

		        	new Float:Pos[ 4 ];
		        	GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		        	GetPlayerFacingAngle( playerid, Pos[ 3 ]);

		        	actorInfo[ actorID ][ actorPos_X ] = Pos[ 0 ];
					actorInfo[ actorID ][ actorPos_Y ] = Pos[ 1 ];
					actorInfo[ actorID ][ actorPos_Z ] = Pos[ 2 ];
					actorInfo[ actorID ][ actorPos_A ] = Pos[ 3 ];

					DestroyDynamicActor( actorInfo[ actorID ][ actorActorID ] );

					actorInfo[ actorID ][ actorActorID ] = CreateDynamicActor( actorInfo[ actorID ][ actorSkinID ], Float:actorInfo[ actorID ][ actorPos_X ], Float:actorInfo[ actorID ][ actorPos_Y ], Float:actorInfo[ actorID ][ actorPos_Z ], Float:actorInfo[ actorID ][ actorPos_A ]);

				    if( actorInfo[ actorID ][ actorAnimationID ] > 0 ) {
				        new animID = actorInfo[ actorID ][ actorAnimationID ];
				        ApplyDynamicActorAnimation( actorInfo[ actorID ][ actorActorID ],
				        			actoranims[ animID ][ acanim_animlib ],
				        			actoranims[ animID ][ acanim_animname ],
				        			actoranims[ animID ][ acanim_fdelta ],
				        			actoranims[ animID ][ acanim_loop ],
				        			actoranims[ animID ][ acanim_lockx ],
				        			actoranims[ animID ][ acanim_locky ],
				        			actoranims[ animID ][ acanim_freeze ],
				        			actoranims[ animID ][ acanim_ime ]);
				    }

			       	new q[ 192 ];
					mysql_format( _dbConnector, q, sizeof(q), "UPDATE `actors` SET `acPos_x` = '%f',`acPos_y` = '%f',`acPos_z` = '%f',`acPos_a` = '%f' WHERE `acID` = '%d'",
						actorInfo[ actorID ][ actorPos_X ],
						actorInfo[ actorID ][ actorPos_Y ],
						actorInfo[ actorID ][ actorPos_Z ],
						actorInfo[ actorID ][ actorPos_A ],
						actorInfo[ actorID ][ actorbaseID ] );

				 	mysql_pquery( _dbConnector, q, "", "");

				   	SendInfoMessage( playerid, "Uspjesno ste promjenili poziciju actoru ID:%d.", actorID );

				   	KGEyes_SetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ]+5 );
				}
				case 2: {

					SPD( playerid, dialog_actorChangeSkin, DSI, D_NASLOV, "Unesti skinID za promenu Actoru(1-311)", D_ODABERI, D_NAZAD );
				}
        	}
        }
    }
    else if( dialogid == dialog_actorChangeSkin ) {

	    if( !response ) return true;
        if( response ) {

        	new skinID;
        	if( sscanf( inputtext, "i", skinID ) ) return SPD( playerid, dialog_actorChangeSkin, DSI, D_NASLOV, "Unesti skinID za promenu Actoru(1-311)", D_ODABERI, D_NAZAD );
			if( skinID < 1 || skinID > 311 ) return SPD( playerid, dialog_actorChangeSkin, DSI, D_NASLOV, "Unesti skinID za promenu Actoru(1-311)", D_ODABERI, D_NAZAD );

        	new actorID = getTargetedActor( playerid );
		    if( actorID == -1 ) return SendErrorMessage( playerid, "Morate gledati u actora kome zelite da promjenite skin." );

		    actorInfo[ actorID ][ actorSkinID ] = skinID;

		    DestroyDynamicActor( actorInfo[ actorID ][ actorActorID ] );
			actorInfo[ actorID ][ actorActorID ] = CreateDynamicActor( actorInfo[ actorID ][ actorSkinID ], Float:actorInfo[ actorID ][ actorPos_X ], Float:actorInfo[ actorID ][ actorPos_Y ], Float:actorInfo[ actorID ][ actorPos_Z ], Float:actorInfo[ actorID ][ actorPos_A ]);

		    if( actorInfo[ actorID ][ actorAnimationID ] > 0 ) {
		        new animID = actorInfo[ actorID ][ actorAnimationID ];
		        ApplyDynamicActorAnimation( actorInfo[ actorID ][ actorActorID ],
		        			actoranims[ animID ][ acanim_animlib ],
		        			actoranims[ animID ][ acanim_animname ],
		        			actoranims[ animID ][ acanim_fdelta ],
		        			actoranims[ animID ][ acanim_loop ],
		        			actoranims[ animID ][ acanim_lockx ],
		        			actoranims[ animID ][ acanim_locky ],
		        			actoranims[ animID ][ acanim_freeze ],
		        			actoranims[ animID ][ acanim_ime ]);
		    }

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `actors` SET `acSkin` = '%d' WHERE `acID` = '%d'",
						actorInfo[ actorID ][ actorSkinID ],
						actorInfo[ actorID ][ actorbaseID ] );

		 	mysql_pquery( _dbConnector, sql_str, "", "");
        }
    }
    else if( dialogid == dialog_actorAnimList ) {

	    if( !response ) return true;
        if( response ) {
        	new actorID = getTargetedActor( playerid );
        	if( actorID == -1 ) return SendErrorMessage( playerid, "Morate gledati u actora kome zelite da postavite animaciju." );

        	actorInfo[ actorID ][ actorAnimationID ] = listitem;
        	if( listitem > 0 ) {
        		ApplyDynamicActorAnimation( actorInfo[ actorID ][ actorActorID ],
        									actoranims[ listitem ][ acanim_animlib ],
        									actoranims[ listitem ][ acanim_animname ],
        									actoranims[ listitem ][ acanim_fdelta ],
        									actoranims[ listitem ][ acanim_loop ],
        									actoranims[ listitem ][ acanim_lockx ],
        									actoranims[ listitem ][ acanim_locky ],
        									actoranims[ listitem ][ acanim_freeze ],
        									actoranims[ listitem ][ acanim_ime ]);


				mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `actors` SET `acAnimID` = '%d' WHERE `acID` = '%d'",
						actorInfo[ actorID ][ actorAnimationID ],
						actorInfo[ actorID ][ actorbaseID ] );

			   	mysql_pquery( _dbConnector, sql_str, "", "");

			   	SendInfoMessage( playerid, "Uspjesno ste postavili ovom akteru, animaciju '%s'.", actoranims[ listitem ][ anim_comamnd ] );

        	}
        	else ClearDynamicActorAnimations( actorInfo[ actorID ][ actorActorID ] );
        }
    }
	else if( dialogid == dialog_GANGZID ) {

	    if( !response ) return true;
        if( response ) {

            new organizacija;

            if( sscanf( inputtext, "i", organizacija ) ) return SPD( playerid, dialog_GANGZID, DSI, D_NASLOV, "Unesi ID orge kojoj dajete vlasnistvo.", D_ODABERI, D_ODUSTANI );
			if( organizacija < 1 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
			if( org_info[ organizacija ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

            new gZone__ID = GetNearestGZone( playerid );
			if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );

			gZoneInfo[ gZone__ID ][ gZoneGangSQLID ] = org_info[ organizacija ][ oID ];
   	        gZoneInfo[ gZone__ID ][ gZoneGangID ] = organizacija;
			gZoneInfo[ gZone__ID ][ gZoneTaken ] = 1;

			GangZoneHideForAll( gZone__ID );
			new stringic[ 24 ];
			format( stringic, sizeof( stringic ), "%s", org_info[ organizacija ][ oColor ] );
			strmid( gZoneInfo[ gZone__ID ][ gZoneColor ], stringic, 0, strlen( stringic ), 255 );

			format( stringic, sizeof( stringic ), "0x%s66", gZoneInfo[ gZone__ID ][ gZoneColor ] );
			GangZoneShowForAll( gZoneInfo[ gZone__ID ][ gZoneID ], HexToInt( stringic ) );

			GZone_Refresh( gZone__ID );
			gZoneInfo[ gZone__ID ][ gZoneWounded ] = 0;
			GZone_ActorRefresh( gZone__ID );

			new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `gangzones` SET `taken` = '%d', `gang_id` = '%d', `color` = '%e' WHERE `gzone_id` = '%d'",
					gZoneInfo[ gZone__ID ][ gZoneTaken ],
					gZoneInfo[ gZone__ID ][ gZoneGangSQLID ],
					gZoneInfo[ gZone__ID ][ gZoneColor ],
					gZoneInfo[ gZone__ID ][ gZone_ID ] );

		   	mysql_pquery( _dbConnector, q, "", "");

			SendInfoMessage( playerid, "Ova zona je sad u vlasnistvu organizacije ID %d.", organizacija );
        }
	}
	else if( dialogid == dialog_GANGZCOLOREDIT ) {

	    if( !response ) return true;
        if( response ) {

            new color[24], stringic[24];
            if( sscanf( inputtext, "s[24]", color ) ) return SPD( playerid, dialog_GANGZCOLOREDIT, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD );

            new gZone__ID = GetNearestGZone( playerid );
			if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );

            format( stringic, sizeof( stringic ), "%s", color );
            strmid( gZoneInfo[ gZone__ID ][ gZoneColor ], stringic, 0, strlen( stringic ), 255 );

            GangZoneHideForAll( gZoneInfo[ gZone__ID ][ gZoneID ] );

  			format( stringic, sizeof( stringic ), "0x%s66", gZoneInfo[ gZone__ID ][ gZoneColor ] );
            GangZoneShowForAll( gZoneInfo[ gZone__ID ][ gZoneID ], HexToInt( stringic ) );


			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `gangzones` SET `color` = '%e' WHERE `gzone_id` = '%d'",
					gZoneInfo[ gZone__ID ][ gZoneColor ], gZoneInfo[ gZone__ID ][ gZone_ID ] );

		   	mysql_pquery( _dbConnector, sql_str, "", "");

		    SendInfoMessage( playerid, "Uneo si boju." );

        }
	}
	else if( dialogid == dialog_GANGZEDIT ) {

	    if( !response ) return true;
        if( response ) {

            if( listitem == 0 ) {

                new gZone__ID = GetNearestGZone( playerid );
				if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );
                SPD( playerid, dialog_GANGZID, DSI, D_NASLOV, "Unesi ID orge kojoj dajete vlasnistvo.", D_ODABERI, D_ODUSTANI );
            }
            if( listitem == 1 ) {

                new gZone__ID = GetNearestGZone( playerid );
				if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );
				if( !gZoneInfo[ gZone__ID ][ gZoneTakeable ] ) {

				    gZoneInfo[ gZone__ID ][ gZoneTakeable ] = 1;
				    SendInfoMessage( playerid, "Postavio si zonu ID - %d, da moze da se zauzima.", gZone__ID );

				}
				else if( gZoneInfo[ gZone__ID ][ gZoneTakeable ] ) {

				    gZoneInfo[ gZone__ID ][ gZoneTakeable ] = 0;
				    SendInfoMessage( playerid, "Postavio si zonu ID - %d, da ne moze da se zauzima.", gZone__ID );

				}

				mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `gangzones` SET `takeable` = '%d' WHERE `gzone_id` = '%d'",
					gZoneInfo[ gZone__ID ][ gZoneTakeable ], gZoneInfo[ gZone__ID ][ gZone_ID ] );

				mysql_pquery( _dbConnector, sql_str, "", "");
            }
            if( listitem == 2 ) {

                new gZone__ID = GetNearestGZone( playerid );
				if( gZone__ID == -1 ) return SendErrorMessage( playerid, "Moras biti pored teritorije." );

	   	        gZoneInfo[ gZone__ID ][ gZoneGangID ] = 0;
	   	        gZoneInfo[ gZone__ID ][ gZoneGangSQLID ] = 0;
				gZoneInfo[ gZone__ID ][ gZoneTaken ] = 0;

				new stringic[12];
				strmid( gZoneInfo[ gZone__ID ][ gZoneColor ], "FF0000", 0, 24, 255 );
				format( stringic, sizeof( stringic ), "0x%s66", gZoneInfo[ gZone__ID ][ gZoneColor ] );
				GangZoneShowForAll( gZoneInfo[ gZone__ID ][ gZoneID ], HexToInt( stringic ) );

				GZone_Refresh( gZone__ID );
				gZoneInfo[ gZone__ID ][ gZoneWounded ] = 0;
				GZone_ActorRefresh( gZone__ID );

				mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `gangzones` SET `taken` = '%d', `gang_id` = '%d' WHERE `gzone_id` = '%d'",
						gZoneInfo[ gZone__ID ][ gZoneTaken ],
						gZoneInfo[ gZone__ID ][ gZoneGangSQLID ], gZoneInfo[ gZone__ID ][ gZone_ID ] );

			   	mysql_pquery( _dbConnector, sql_str, "", "");

				SendInfoMessage( playerid, "Ova zona je sad slobodna." );

			}
            if( listitem == 3 ) {

                SPD( playerid, dialog_GANGZCOLOREDIT, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD );
            }
            if( listitem == 4 ) {

                new Float:Pos[ 3 ];

	            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

	            if( GetNearestGZone( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti u teritoriji." );
				new id = GetNearestGZone( playerid );

	            gZoneInfo[ id ][ gZonePickupPos_X ] = Pos[ 0 ];
	            gZoneInfo[ id ][ gZonePickupPos_Y ] = Pos[ 1 ];
	            gZoneInfo[ id ][ gZonePickupPos_Z ] = Pos[ 2 ];

				GZone_Refresh( id );

	            new q[ 256 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `gangzones` SET `pickup_pos_x` = '%f', `pickup_pos_y` = '%f', `pickup_pos_z` = '%f' WHERE `gzone_id` = '%d'",
						gZoneInfo[ id ][ gZonePickupPos_X ],
						gZoneInfo[ id ][ gZonePickupPos_Y ],
						gZoneInfo[ id ][ gZonePickupPos_Z ],
						gZoneInfo[ id ][ gZone_ID ] );

			   	mysql_pquery( _dbConnector, q, "", "");

            }
            if( listitem == 5 ) {

	            if( GetNearestGZone( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti u teritoriji." );

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				for( new i = 0; i < MAX_ACANIMS; i++ ) {
					strcat( DialogStrgEx, actoranims[ i ][ anim_comamnd ] );
					if( i != MAX_ACANIMS-1 ) strcat( DialogStrgEx, "\n" );
				}
				SPD( playerid, dialog_gangzACAList, DSL, "Izaberite animaciju za actora", DialogStrgEx, D_ODABERI, D_NAZAD );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
            }
            if( listitem == 6 ) {

            	if( GetNearestGZone( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti u teritoriji." );
	    		new id = GetNearestGZone( playerid );

            	new Float:Pos[ 4 ];
		       	GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		       	GetPlayerFacingAngle( playerid, Pos[ 3 ]);

		       	if( IsValidDynamicActor( gZoneInfo[ id ][ gZoneAc_1AC ] ) )
					DestroyDynamicActor( gZoneInfo[ id ][ gZoneAc_1AC ] );

		       	gZoneInfo[ id ][ gZoneAc_1Pos_X ] = Pos[ 0 ];
				gZoneInfo[ id ][ gZoneAc_1Pos_Y ] = Pos[ 1 ];
				gZoneInfo[ id ][ gZoneAc_1Pos_Z ] = Pos[ 2 ];
				gZoneInfo[ id ][ gZoneAc_1Pos_A ] = Pos[ 3 ];

				gZoneInfo[ id ][ gZoneAc_1AC ] = CreateDynamicActor( gZoneInfo[ id ][ gZoneAc_1Skin ],
		    				    gZoneInfo[ id ][ gZoneAc_1Pos_X ],
		    				    gZoneInfo[ id ][ gZoneAc_1Pos_Y ],
		    				    gZoneInfo[ id ][ gZoneAc_1Pos_Z ],
		    				    gZoneInfo[ id ][ gZoneAc_1Pos_A ],
		    				    0, 100.0, 0);

				if( gZoneInfo[ id ][ gZoneAc_1Anim ] > 0 ) {
					ApplyDynamicActorAnimation( gZoneInfo[ id ][ gZoneAc_1AC ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_1Anim ] ][ acanim_animlib ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_1Anim ] ][ acanim_animname ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_1Anim ] ][ acanim_fdelta ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_1Anim ] ][ acanim_loop ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_1Anim ] ][ acanim_lockx ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_1Anim ] ][ acanim_locky ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_1Anim ] ][ acanim_freeze ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_1Anim ] ][ acanim_ime ]);
				}
				else ClearDynamicActorAnimations( gZoneInfo[ id ][ gZoneAc_1AC ] );

				sql_update_gzone_actor( id, 1 );
            }
            if( listitem == 7 ) {

            	if( GetNearestGZone( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti u teritoriji." );
	    		new id = GetNearestGZone( playerid );

            	new Float:Pos[ 4 ];
		       	GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		       	GetPlayerFacingAngle( playerid, Pos[ 3 ]);

		       	if( IsValidDynamicActor( gZoneInfo[ id ][ gZoneAc_2AC ] ) )
					DestroyDynamicActor( gZoneInfo[ id ][ gZoneAc_2AC ] );

		       	gZoneInfo[ id ][ gZoneAc_2Pos_X ] = Pos[ 0 ];
				gZoneInfo[ id ][ gZoneAc_2Pos_Y ] = Pos[ 1 ];
				gZoneInfo[ id ][ gZoneAc_2Pos_Z ] = Pos[ 2 ];
				gZoneInfo[ id ][ gZoneAc_2Pos_A ] = Pos[ 3 ];

				gZoneInfo[ id ][ gZoneAc_2AC ] = CreateDynamicActor( gZoneInfo[ id ][ gZoneAc_2Skin ],
		    				    gZoneInfo[ id ][ gZoneAc_2Pos_X ],
		    				    gZoneInfo[ id ][ gZoneAc_2Pos_Y ],
		    				    gZoneInfo[ id ][ gZoneAc_2Pos_Z ],
		    				    gZoneInfo[ id ][ gZoneAc_2Pos_A ],
		    				    0, 100.0, 0);

				if( gZoneInfo[ id ][ gZoneAc_2Anim ] > 0 ) {
					ApplyDynamicActorAnimation( gZoneInfo[ id ][ gZoneAc_2AC ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_2Anim ] ][ acanim_animlib ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_2Anim ] ][ acanim_animname ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_2Anim ] ][ acanim_fdelta ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_2Anim ] ][ acanim_loop ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_2Anim ] ][ acanim_lockx ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_2Anim ] ][ acanim_locky ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_2Anim ] ][ acanim_freeze ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_2Anim ] ][ acanim_ime ]);
				}
				else ClearDynamicActorAnimations( gZoneInfo[ id ][ gZoneAc_2AC ] );

				sql_update_gzone_actor( id, 2 );
            }
            if( listitem == 8 ) {

            	if( GetNearestGZone( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti u teritoriji." );
	    		new id = GetNearestGZone( playerid );

            	new Float:Pos[ 4 ];
		       	GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		       	GetPlayerFacingAngle( playerid, Pos[ 3 ]);

		       	if( IsValidDynamicActor( gZoneInfo[ id ][ gZoneAc_3AC ] ) )
					DestroyDynamicActor( gZoneInfo[ id ][ gZoneAc_3AC ] );

		       	gZoneInfo[ id ][ gZoneAc_3Pos_X ] = Pos[ 0 ];
				gZoneInfo[ id ][ gZoneAc_3Pos_Y ] = Pos[ 1 ];
				gZoneInfo[ id ][ gZoneAc_3Pos_Z ] = Pos[ 2 ];
				gZoneInfo[ id ][ gZoneAc_3Pos_A ] = Pos[ 3 ];

				gZoneInfo[ id ][ gZoneAc_3AC ] = CreateDynamicActor( gZoneInfo[ id ][ gZoneAc_3Skin ],
		    				    gZoneInfo[ id ][ gZoneAc_3Pos_X ],
		    				    gZoneInfo[ id ][ gZoneAc_3Pos_Y ],
		    				    gZoneInfo[ id ][ gZoneAc_3Pos_Z ],
		    				    gZoneInfo[ id ][ gZoneAc_3Pos_A ],
		    				    0, 100.0, 0);

				if( gZoneInfo[ id ][ gZoneAc_3Anim ] > 0 ) {
					ApplyDynamicActorAnimation( gZoneInfo[ id ][ gZoneAc_3AC ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_3Anim ] ][ acanim_animlib ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_3Anim ] ][ acanim_animname ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_3Anim ] ][ acanim_fdelta ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_3Anim ] ][ acanim_loop ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_3Anim ] ][ acanim_lockx ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_3Anim ] ][ acanim_locky ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_3Anim ] ][ acanim_freeze ],
				        									actoranims[ gZoneInfo[ id ][ gZoneAc_3Anim ] ][ acanim_ime ]);
				}
				else ClearDynamicActorAnimations( gZoneInfo[ id ][ gZoneAc_3AC ] );

				sql_update_gzone_actor( id, 3 );
            }
			if( listitem == 9 ) {
	            if( GetNearestGZone( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti u teritoriji." );
				new id = GetNearestGZone( playerid );

				if(gZoneInfo[id][gZoneType] == 0) {
					gZoneInfo[id][gZoneType] = 1;
					SendInfoMessage(playerid, "Promijenili ste tip zone da se moze zauzimati samo na pickupu zone.");
				}
				else {
					gZoneInfo[id][gZoneType] = 0;
					SendInfoMessage(playerid, "Promijenili ste tip zone da se moze zauzimati na cijeloj zoni.");
				}

	            new q[ 128 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `gangzones` SET `gtype` = '%d' WHERE `gzone_id` = '%d'",
						gZoneInfo[ id ][ gZoneType ],
						gZoneInfo[ id ][ gZone_ID ] );

			   	mysql_pquery( _dbConnector, q, "", "");

            }
		}
	}
    else if( dialogid == dialog_gangzACAList ) {

	    if( !response ) return true;
        if( response ) {

	        if( GetNearestGZone( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti u teritoriji." );
	    	new id = GetNearestGZone( playerid );

        	new actorNumber = getTargetedGZoneActor( id, playerid );
        	if( actorNumber == -1 ) return SendErrorMessage( playerid, "Morate gledati u actora kome zelite da postavite animaciju." );

        	if( listitem == 41 ) {
        		SendErrorMessage( playerid, "Ovu animaciju ne mozete koristiti za actore u gang zonama." );
        		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				for( new i = 0; i < MAX_ACANIMS; i++ ) {
					strcat( DialogStrgEx, actoranims[ i ][ anim_comamnd ] );
					if( i != MAX_ACANIMS-1 ) strcat( DialogStrgEx, "\n" );
				}
				SPD( playerid, dialog_gangzACAList, DSL, "Izaberite animaciju za actora", DialogStrgEx, D_ODABERI, D_NAZAD );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				return true;
        	}

        	if( actorNumber == 1 ) {

	        	gZoneInfo[ id ][ gZoneAc_1Anim ] = listitem;
	        	if( listitem > 0 ) {
	        		ApplyDynamicActorAnimation( gZoneInfo[ id ][ gZoneAc_1AC ],
	        									actoranims[ listitem ][ acanim_animlib ],
	        									actoranims[ listitem ][ acanim_animname ],
	        									actoranims[ listitem ][ acanim_fdelta ],
	        									actoranims[ listitem ][ acanim_loop ],
	        									actoranims[ listitem ][ acanim_lockx ],
	        									actoranims[ listitem ][ acanim_locky ],
	        									actoranims[ listitem ][ acanim_freeze ],
	        									actoranims[ listitem ][ acanim_ime ]);

				   	SendInfoMessage( playerid, "Uspjesno ste postavili actoru 1 gang zone, animaciju '%s'.", actoranims[ listitem ][ anim_comamnd ] );

	        	}
	        	else ClearDynamicActorAnimations( gZoneInfo[ id ][ gZoneAc_1AC ] );
	        	sql_update_gzone_actor( id, 1 );
	        }
	        else if( actorNumber == 2 ) {

	        	gZoneInfo[ id ][ gZoneAc_2Anim ] = listitem;
	        	if( listitem > 0 ) {
	        		ApplyDynamicActorAnimation( gZoneInfo[ id ][ gZoneAc_2AC ],
	        									actoranims[ listitem ][ acanim_animlib ],
	        									actoranims[ listitem ][ acanim_animname ],
	        									actoranims[ listitem ][ acanim_fdelta ],
	        									actoranims[ listitem ][ acanim_loop ],
	        									actoranims[ listitem ][ acanim_lockx ],
	        									actoranims[ listitem ][ acanim_locky ],
	        									actoranims[ listitem ][ acanim_freeze ],
	        									actoranims[ listitem ][ acanim_ime ]);

				   	SendInfoMessage( playerid, "Uspjesno ste postavili actoru 2 gang zone, animaciju '%s'.", actoranims[ listitem ][ anim_comamnd ] );

	        	}
	        	else ClearDynamicActorAnimations( gZoneInfo[ id ][ gZoneAc_2AC ] );
	        	sql_update_gzone_actor( id, 2 );
	        }
	        else if( actorNumber == 3 ) {

	        	gZoneInfo[ id ][ gZoneAc_3Anim ] = listitem;
	        	if( listitem > 0 ) {
	        		ApplyDynamicActorAnimation( gZoneInfo[ id ][ gZoneAc_3AC ],
	        									actoranims[ listitem ][ acanim_animlib ],
	        									actoranims[ listitem ][ acanim_animname ],
	        									actoranims[ listitem ][ acanim_fdelta ],
	        									actoranims[ listitem ][ acanim_loop ],
	        									actoranims[ listitem ][ acanim_lockx ],
	        									actoranims[ listitem ][ acanim_locky ],
	        									actoranims[ listitem ][ acanim_freeze ],
	        									actoranims[ listitem ][ acanim_ime ]);

				   	SendInfoMessage( playerid, "Uspjesno ste postavili actoru 3 gang zone, animaciju '%s'.", actoranims[ listitem ][ anim_comamnd ] );

	        	}
	        	else ClearDynamicActorAnimations( gZoneInfo[ id ][ gZoneAc_3AC ] );
	        	sql_update_gzone_actor( id, 3 );
	        }
        }
    }

	else if( dialogid == dialog_AUTOSEDIT ) {
	    if( !response ) return true;
        if( response ) {
            switch( listitem ) {
				case 0: {
	                new as = GetNearestSalon( playerid );
	            	if( as == -1 ) return SendErrorMessage( playerid, "Moras biti pored pickupa za kupovinu u salonu." );

					new coordsstring[ 64 ];
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, "Unesite za broj modela vozila i kolicinu.\nPrimer: 1 4\n" );
					strcat( DialogStrgEx, "Kolicina ne moze ici ispod 1.Kolicina koju unesete dodaje se sa postojecom\n\n" );
					for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
					    if( AutoSalon[ as ][ aVehModel ][ i ] != 0 ) {
					        format( coordsstring, sizeof( coordsstring ), "Model %d - %s - %d komada\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ], AutoSalon[ as ][ aVehAmmount ][ i ] );
							strcat( DialogStrgEx, coordsstring );
					    }
					}
					SPD( playerid, dialog_ASEDITAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	            }
	            case 1:{
	                new as = GetNearestSalon( playerid );
	            	if( as == -1 ) return SendErrorMessage( playerid, "Moras biti pored pickupa za kupovinu u salonu." );

	            	SPD( playerid, dialog_ASCONNECTBUSSINES, DSI, D_NASLOV, "Unesi id firme sa kojom povezujes ovaj auto salon.", D_ODABERI, D_NAZAD );
	            }
	            case 2:{
	                new as = GetNearestSalon( playerid );
	            	if( as == -1 ) return SendErrorMessage( playerid, "Moras biti pored pickupa za kupovinu u salonu." );

	            	SPD( playerid, dialog_ASEDITNAME, DSI, D_NASLOV, "Unesite novo ime salona.", D_ODABERI, D_NAZAD );
	            }
            }
        }
	}
	else if( dialogid == dialog_ASEDITNAME ) {
	    if( !response ) return true;
        if( response ) {

        	new as = GetNearestSalon( playerid );
	       	if( as == -1 ) return SendErrorMessage( playerid, "Moras biti pored pickupa za kupovinu u salonu." );

        	new salon_name[ 32 ];
        	if( sscanf( inputtext, "s[32]", salon_name ) ) return SPD( playerid, dialog_ASEDITNAME, DSI, D_NASLOV, "Unesite novo ime salona.", D_ODABERI, D_NAZAD );

        	strmid( AutoSalon[ as ][ aSalonName ], salon_name, 0, strlen( salon_name ), 32);

        	new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `vehicle_salon` SET `salon_name` = '%e' WHERE `salon_id` = '%d' LIMIT 1",
				AutoSalon[ as ][ aSalonName ],
				AutoSalon[ as ][ aSalon_ID ] );
			mysql_pquery( _dbConnector, q, "", "" );

			SendInfoMessage( playerid, "Promenio si ime ovog salona u %s.", salon_name);
        }
    }
	else if( dialogid == dialog_ASCONNECTBUSSINES ) {
	    if( !response ) return true;
        if( response ) {
	        new as = GetNearestSalon( playerid );
	       	if( as == -1 ) return SendErrorMessage( playerid, "Moras biti pored pickupa za kupovinu u salonu." );
			new bussinesID;

	       	if( sscanf( inputtext, "d", bussinesID ) ) {
	            SPD( playerid, dialog_ASCONNECTBUSSINES, DSI, D_NASLOV, "Unesi id firme sa kojom povezujes ovaj auto salon.", D_ODABERI, D_NAZAD );
                return 1;
            }

            if( BussinesInfo[ bussinesID ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

			AutoSalon[ as ][ aBussinesID ] = BussinesInfo[ bussinesID ][ b_ID ];

			new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `vehicle_salon` SET `s_bussines_id` = '%d' WHERE `salon_id` = '%d' LIMIT 1",
				AutoSalon[ as ][ aBussinesID ],
				AutoSalon[ as ][ aSalon_ID ] );
			mysql_pquery( _dbConnector, q, "", "" );

			SendInfoMessage( playerid, "Povezao si salon ID:%d, sa firmom %s.", as,  BussinesInfo[ bussinesID ][ bName ] );
	    }
	}
	else if( dialogid == dialog_ASEDITAMMOUNT ) {
	    if( !response ) return true;
        if( response ) {
            new as = GetNearestSalon( playerid ), model, kolicina, model2;
           	if( as == -1 ) return SendErrorMessage( playerid, "Moras biti pored pickupa za kupovinu u salonu." );

			if( sscanf( inputtext, "dd", model, kolicina ) ) {

                new coordsstring[ 64 ];
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				strcat( DialogStrgEx, "Unesite za broj modela vozila i kolicinu.\nPrimer: 1 4\n" );
				strcat( DialogStrgEx, "Kolicina ne moze ici ispod 1.Kolicina koju unesete dodaje se sa postojecom\n\n" );
				for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
				    if( AutoSalon[ as ][ aVehModel ][ i ] != 0 ) {
				        format( coordsstring, sizeof( coordsstring ), "Model %d - %s - %d komada\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ], AutoSalon[ as ][ aVehAmmount ][ i ] );
						strcat( DialogStrgEx, coordsstring );
				    }
				}
				SPD( playerid, dialog_ASEDITAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
                return 1;
            }
            if( kolicina < 1 ) return SendErrorMessage( playerid, "Kolicina ne moze ici ispod 1." );
            if( model < 1 ) return SendErrorMessage( playerid, "Model ne moze ici ispod 1." );
            if( model > AutoSalon[ as ][ aMaxVehModel ] ) return SendErrorMessage( playerid, "Uneli ste broj nepostojeceg modela." );
			model2 = model-1;

			AutoSalon[ as ][ aVehAmmount ][ model2 ] += kolicina;

			new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `vehicle_salon` SET `veh_amount_%d` = '%d' WHERE `salon_id` = '%d' LIMIT 1",
				model,
				AutoSalon[ as ][ aVehAmmount ][ model2 ],
				AutoSalon[ as ][ aSalon_ID ] );
			mysql_pquery( _dbConnector, q, "", "" );

			SendInfoMessage( playerid, "Dodao si jos %d %s koja mogu da se kupe.", kolicina, ImeVozila[ (AutoSalon[ as ][ aVehModel ][ model2 ]- 400) ] );
        }
	}
	else if( dialogid == dialog_SPORTEDIT ) {
	    if( !response ) return true;
        if( response ) {
            if( listitem ==  0 ) {
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    for( new i = 0; i < MAX_SPORTS; i++ ) {
					if( supportInfo[ i ][ supportCreated ] == 1 ) {
				    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, supportInfo[ i ][ supportName ] );
					}
				}
				SPD( playerid, dialog_IZMENAIMENASPORT, DSL, "Izaberi hport", DialogStrgEx, D_ODABERI, D_ODUSTANI );
            }
            if( listitem ==  1 ) {
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    for( new i = 0; i < MAX_SPORTS; i++ ) {
					if( supportInfo[ i ][ supportCreated ] == 1 ) {
				    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, supportInfo[ i ][ supportName ] );
					}
				}
				SPD( playerid, dialog_IZMENAPOZSPORT, DSL, "Izaberi hport", DialogStrgEx, D_ODABERI, D_ODUSTANI );
            }
		}
	}
	else if( dialogid == dialog_IZMENAIMENASPORT ) {
	    if( !response ) return true;
        if( response ) {
            gpsid[ playerid ] = listitem;
            SPD( playerid, dialog_IZMENAIMENASPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog gamesage porta.", D_ODABERI, D_ODUSTANI );
        }
	}
	else if( dialogid == dialog_IZMENAIMENASPORT2 ) {
	    if( !response ) return true;
        if( response ) {
            new aportname[ 50 ];
            if( sscanf( inputtext, "s[50]", aportname ) ) return SPD( playerid, dialog_IZMENAIMENASPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog gamesage porta.", D_ODABERI, D_ODUSTANI );
            if( gpsid[ playerid ] == -1 ) return SendErrorMessage( playerid, "Nemas izabranu gamesage port lokaciju." );
			new id = gpsid[ playerid ];

			strmid( supportInfo[ id ][ supportName ], aportname, 0, strlen( aportname ), 50 );
			SaveSports( );

			SendInfoMessage( playerid, "Uspjesno si promjenio ime gamesage porta u '%s'.", aportname );
			gpsid[ playerid ] = -1;
        }
	}
	else if( dialogid == dialog_IZMENAPOZSPORT ) {
	    if( !response ) return true;
        if( response ) {
            new IDaport = listitem, Float:Pos[ 3 ];

            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

            supportInfo[ IDaport ][ supportPos_X ] = Pos[ 0 ];
            supportInfo[ IDaport ][ supportPos_Y ] = Pos[ 1 ];
            supportInfo[ IDaport ][ supportPos_Z ] = Pos[ 2 ];

			SaveSports( );

			SendInfoMessage( playerid, "Uspjesno si promjenio poziciju gamesage porta '%s' na tvoju poziciju.", supportInfo[ IDaport ][ supportName ] );
        }
	}
	else if( dialogid == dialog_APORTEDIT ) {
	    if( !response ) return true;
        if( response ) {
            if( listitem ==  0 ) {
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    for( new i = 0; i < MAX_APORTS; i++ ) {
					if( aportInfo[ i ][ aportCreated ] == 1 ) {
				    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, aportInfo[ i ][ aportName ] );
					}
				}
				SPD( playerid, dialog_IZMENAIMENAAPORT, DSL, "Izaberi aport", DialogStrgEx, D_ODABERI, D_ODUSTANI );
            }
            if( listitem ==  1 ) {
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    for( new i = 0; i < MAX_APORTS; i++ ) {
					if( aportInfo[ i ][ aportCreated ] == 1 ) {
				    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, aportInfo[ i ][ aportName ] );
					}
				}
				SPD( playerid, dialog_IZMENAPOZAPORT, DSL, "Izaberi aport", DialogStrgEx, D_ODABERI, D_ODUSTANI );
            }
		}
	}
	else if( dialogid == dialog_IZMENAIMENAAPORT ) {
	    if( !response ) return true;
        if( response ) {
            gpsid[ playerid ] = listitem;
            SPD( playerid, dialog_IZMENAIMENAAPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog ADMIN porta.", D_ODABERI, D_ODUSTANI );
        }
	}
	else if( dialogid == dialog_IZMENAIMENAAPORT2 ) {
	    if( !response ) return true;
        if( response ) {
            new aportname[ 50 ];
            if( sscanf( inputtext, "s[50]", aportname ) ) return SPD( playerid, dialog_IZMENAIMENAAPORT2, DSI, D_NASLOV, "Unesite novo ime izabranog ADMIN porta.", D_ODABERI, D_ODUSTANI );
            if( gpsid[ playerid ] == -1 ) return SendErrorMessage( playerid, "Nemas izabran ADMIN port lokaciju." );
			new id = gpsid[ playerid ];

			strmid( aportInfo[ id ][ aportName ], aportname, 0, strlen( aportname ), 50 );
			SaveAports( );

			SendInfoMessage( playerid, "Uspjesno si promjenio ime ADMIN porta u '%s'.", aportname );
			gpsid[ playerid ] = -1;
        }
	}
	else if( dialogid == dialog_IZMENAPOZAPORT ) {
	    if( !response ) return true;
        if( response ) {
            new IDaport = listitem, Float:Pos[ 3 ];

            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

            aportInfo[ IDaport ][ aportPos_X ] = Pos[ 0 ];
            aportInfo[ IDaport ][ aportPos_Y ] = Pos[ 1 ];
            aportInfo[ IDaport ][ aportPos_Z ] = Pos[ 2 ];

			SaveAports( );

			SendInfoMessage( playerid, "Uspjesno si promjenio poziciju ADMIN porta '%s' na tvoju poziciju.", aportInfo[ IDaport ][ aportName ] );
        }
	}
	else if( dialogid == dialog_GPSEDIT ) {
	    if( !response ) return true;
        if( response ) {
            if( listitem ==  0 ) {
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    for( new i = 0; i < MAX_GPS; i++ ) {
					if( gpsInfo[ i ][ gpsbaseID ] != 0 ) {
				    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, i+1, gpsInfo[ i ][ gpsName ] );
					}
				}
				SPD( playerid, dialog_IZMENAIMENAGPS, DSL, "Izaberi GPS", DialogStrgEx, D_ODABERI, D_ODUSTANI );
            }
            if( listitem ==  1 ) {
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    for( new i = 0; i < MAX_GPS; i++ ) {
		            if( gpsInfo[ i ][ gpsbaseID ] != 0 ) {
				    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, gpsInfo[ i ][ gpsName ] );
					}
				}
				SPD( playerid, dialog_IZMENAPOZGPS, DSL, "Izaberi GPS", DialogStrgEx, D_ODABERI, D_ODUSTANI );
            }
		}
	}
	else if( dialogid == dialog_IZMENAIMENAGPS ) {
	    if( !response ) return true;
        if( response ) {
            gpsid[ playerid ] = listitem;
            SPD( playerid, dialog_IZMENAIMENAGPS2, DSI, D_NASLOV, "Unesite novo ime gps lokacije", D_ODABERI, D_ODUSTANI );
        }
	}
	else if( dialogid == dialog_IZMENAIMENAGPS2 ) {
	    if( !response ) return true;
        if( response ) {
            new gpsname[ 50 ];
            if( sscanf( inputtext, "s[50]", gpsname ) ) return SPD( playerid, dialog_IZMENAIMENAGPS2, DSI, D_NASLOV, "Unesite novo ime gps lokacije", D_ODABERI, D_ODUSTANI );
            if( gpsid[ playerid ] == -1 ) return SendErrorMessage( playerid, "Nemas izabranu gps lokaciju." );
			if( gpsInfo[ gpsid[ playerid ] ][ gpsbaseID ] == 0 )  return SendErrorMessage( playerid, "Izabrana GPS lokacija ne postoji u bazi podataka." );

			strmid( gpsInfo[ gpsid[ playerid ] ][ gpsName ], gpsname, 0, strlen( gpsname ), 50 );


			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `gps` SET `gps_name` = '%e' WHERE `gpsID` = '%d' LIMIT 1", gpsInfo[ gpsid[ playerid ] ][ gpsName ], gpsInfo[ gpsid[ playerid ] ][ gpsbaseID ] );
	    	mysql_pquery( _dbConnector, sql_str, "", "");


			SendInfoMessage( playerid, "Uspjesno si promjenio ime GPS lokacije u '%s'.", gpsname );
			gpsid[ playerid ] = -1;
        }
	}
	else if( dialogid == dialog_IZMENAPOZGPS ) {
	    if( !response ) return true;
        if( response ) {
            new IDgps = listitem, Float:Pos[ 3 ];
            if( IDgps == -1 ) return SendErrorMessage( playerid, "Nemas izabranu gps lokaciju." );
			if( gpsInfo[ IDgps ][ gpsbaseID ] == 0 )  return SendErrorMessage( playerid, "Izabrana GPS lokacija ne postoji u bazi podataka." );

            GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

            gpsInfo[ IDgps ][ gpsPos_X ] = Pos[ 0 ];
            gpsInfo[ IDgps ][ gpsPos_Y ] = Pos[ 1 ];
            gpsInfo[ IDgps ][ gpsPos_Z ] = Pos[ 2 ];

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `gps` SET `gps_x` = '%f', `gps_y` = '%f', `gps_z` = '%f' WHERE `gpsID` = '%d' LIMIT 1", gpsInfo[ IDgps ][ gpsPos_X ], gpsInfo[ IDgps ][ gpsPos_Y ], gpsInfo[ IDgps ][ gpsPos_Z ], gpsInfo[ IDgps ][ gpsbaseID ] );
	    	mysql_pquery( _dbConnector, sql_str, "", "");

			SendInfoMessage( playerid, "Uspjesno si promjenio poziciju GPS lokacije '%s' na tvoju poziciju.", gpsInfo[ IDgps ][ gpsName ] );
        }
	}
	else if( dialogid == dialog_GEDIT ) {
	    if( !response ) return true;
        if( response ) {
            if( listitem ==  0 ) {
		        SPD( playerid, dialog_GEPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu garaze!", D_ODABERI, D_ODUSTANI );
		    }
		    if( listitem ==  1 ) {
		        SPD( playerid, dialog_GELEVEL, DSI, D_NASLOV, "Unesite zeljeni level garaze!", D_ODABERI, D_ODUSTANI );
		    }
		    if( listitem ==  2 ) {
				new id = GetNearestGarage( playerid );
	   	 		if( GetNearestGarage( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema garaze u blizini!");
				if( garageInfo[ id ][ garagePropertySqlID ] != 0 ) return SendErrorMessage( playerid, "Ne mozes prodati garazu koja je vezana za imovinu!");

				new string1[ 128 ];
				format( string1, sizeof( string1 ), "Admin %s je prodao garazu ID: %d na buy", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogEdit.log", string1 );

				garageInfo[ id ][ garageOwner_SqlID ] = 0;
	    		strmid( garageInfo[ id ][ garageOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );

				mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `garages` SET `owner_id` = '%d' WHERE `garage_id` = '%d'",
					garageInfo[ id ][ garageOwner_SqlID ],
					garageInfo[ id ][ garageSqlID ] );

		   		mysql_pquery( _dbConnector, sql_str, "", "");


	    		SendInfoMessage( playerid, "Garaza uspesno prodana!" );
	    		Garage_Refresh( id );
		    }
		    if( listitem ==  3 ) {
	   	 		if( GetNearestGarage( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema garaze u blizini!");

	   	 		SPD( playerid, dialog_GPROPOWNER, DSI, D_NASLOV, "Unesite ID Imovine kojoj postavljate vlasnistvo ove garaze.\nUkoliko unesete 0 skidate.", D_ODABERI, D_ODUSTANI );
		    }
        }
	}
	else if( dialogid == dialog_GPROPOWNER && response ) {

		new broj, id = GetNearestGarage( playerid );
		if( id == -1 ) return SendErrorMessage( playerid, "Nema garaze u vasoj blizini!" );
		if( garageInfo[ id ][ garageOwner_SqlID ] != 0 ) return SendErrorMessage( playerid, "Neki igrac je vlasnik ove garaze, ne mozes to." );
		if( sscanf( inputtext, "i", broj ) ) return SPD( playerid, dialog_GPROPOWNER, DSI, D_NASLOV, "Unesite ID Imovine kojoj postavljate vlasnistvo ove garaze.\nUkoliko unesete 0 skidate.", D_ODABERI, D_ODUSTANI );
		if( broj < 0 ) return SendErrorMessage( playerid, "ID imovine ne moze ici ispod 0." );

		if( broj == 0 ) {

            if( garageInfo[ id ][ garagePropertySqlID ] != 0 && garageInfo[ id ][ garageProperty ] != -1 ) {
            	new propID = garageInfo[ id ][ garageProperty ];

            	II[ propID ][ iGarageSqlID ] = 0;

            	new q[ 128 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `property` SET `p_garageID` = '%d' WHERE `propID` = '%d'",
						II[ propID ][ iGarageSqlID ],
						II[ propID ][ ibaseID ] );

			  	mysql_pquery( _dbConnector, q, "", "");
            }

            garageInfo[ id ][ garagePropertySqlID ] = 0;
            garageInfo[ id ][ garageProperty ] = -1;
			strmid( garageInfo[ id ][ garageOwner ], "Drzava", 0, strlen( "Drzava" ), MAX_PLAYER_NAME );

		 	mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `garages` SET `g_property` = '%d' WHERE `garage_id` = '%d'",
				garageInfo[ id ][ garagePropertySqlID ],
				garageInfo[ id ][ garageSqlID ] );

			mysql_pquery( _dbConnector, sql_str, "", "");

			Garage_Refresh( id );
        }
        else {

        	if( II[ broj ][ ibaseID ] == 0 ) return SendErrorMessage( playerid, "Imovina sa tim IDem ne postoji u bazi podataka." );
			if( II[ broj ][ iGarageSqlID ] != 0 ) return SendErrorMessage( playerid, "Ova imovina vec ima neku garazu u vlasnistvu." );

            if( II[ broj ][ iEnter_X ] != 0 ) {

               	garageInfo[ id ][ garagePropertySqlID ] = II[ broj ][ ibaseID ] ;
               	garageInfo[ id ][ garageProperty ] = broj;

               	if( II[ broj ][ iOwnerbaseID ] != 0 ) strmid( garageInfo[ id ][ garageOwner ], II[ broj ][ iOwner ], 0, strlen( II[ broj ][ iOwner ] ), MAX_PLAYER_NAME );
				else  {
				    format( globalstring, sizeof( globalstring ), "IMOVINA - ID: %d", broj );
					strmid( garageInfo[ id ][ garageOwner ], globalstring, 0, strlen( globalstring ), MAX_PLAYER_NAME );
				}

				II[ broj ][ iGarageSqlID ] = garageInfo[ id ][ garageSqlID ];

			    new q[ 128 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `property` SET `p_garageID` = '%d' WHERE `propID` = '%d'",
						II[ broj ][ iGarageSqlID ],
						II[ broj ][ ibaseID ] );

			  	mysql_pquery( _dbConnector, q, "", "");

			  	mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `garages` SET `g_property` = '%d' WHERE `garage_id` = '%d'",
					garageInfo[ id ][ garagePropertySqlID ],
					garageInfo[ id ][ garageSqlID ] );

				mysql_pquery( _dbConnector, sql_str, "", "");

				Garage_Refresh( id );
			}
			else {
				garageInfo[ id ][ garagePropertySqlID ] = 0;
            	garageInfo[ id ][ garageProperty ] = -1;
				strmid( garageInfo[ id ][ garageOwner ], "Drzava", 0, strlen( "Drzava" ), MAX_PLAYER_NAME );

			  	mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `garages` SET `g_property` = '%d' WHERE `garage_id` = '%d'",
					garageInfo[ id ][ garagePropertySqlID ],
					garageInfo[ id ][ garageSqlID ] );

				mysql_pquery( _dbConnector, sql_str, "", "");

				Garage_Refresh( id );
			}
        }
	}
	else if( dialogid == dialog_GEPRICE && response ) {

	    new cena, garaza = GetNearestGarage( playerid );
		if( GetNearestGarage( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema garaze u vasoj blizini!" );
		if( garageInfo[ garaza ][ garageOwner_SqlID ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da izmjenis cijenukupljene garaze." );
		if( sscanf( inputtext, "d", cena ) ) return SPD( playerid, dialog_GEPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenugaraze!", D_ODABERI, D_ODUSTANI );

		garageInfo[ garaza ][ garagePrice ] = cena; Garage_Refresh( garaza );
		SendInfoMessage( playerid, "Promenili ste cijenugaraze. ID = %d | Cijena = %d.", garaza, cena );

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `garages` SET `g_price` = '%d' WHERE `garage_id` = '%d'",
			garageInfo[ garaza ][ garagePrice ],
			garageInfo[ garaza ][ garageSqlID ] );

		mysql_pquery( _dbConnector, sql_str, "", "");

        new string[ 128 ];
		format( string, sizeof( string ), "Admin %s je promjenio cijenu garaze (ID:%d) u %d", ImeIgraca( playerid ), garaza, cena );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_GELEVEL && response ) {

		new level, garaza = GetNearestGarage( playerid );
		if( GetNearestGarage( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema garaze u vasoj blizini!" );
		if( garageInfo[ garaza ][ garageOwner_SqlID ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da izmjenis level kupljene garaze." );
		if( sscanf( inputtext, "d", level ) ) return SPD( playerid, dialog_GELEVEL, DSI, D_NASLOV, "Unesite zeljeni level garaze!", D_ODABERI, D_ODUSTANI );

		garageInfo[ garaza ][ garageLevel ] = level; Garage_Refresh( garaza );
		SendInfoMessage( playerid, "Promenili ste level garaze ID = %d | Level = %d.", garaza, level );

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `garages` SET `g_level` = '%d' WHERE `garage_id` = '%d'",
			garageInfo[ garaza ][ garagePrice ],
			garageInfo[ garaza ][ garageSqlID ] );

		mysql_pquery( _dbConnector, sql_str, "", "");

		new string[ 128 ];
		format( string, sizeof( string ), "Admin %s je promjenio level garaze (ID:%d) u %d", ImeIgraca( playerid ), garaza, level );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_HEDIT ) {
	    if( !response ) return true;
        if( response ) {
		    if( listitem ==  0 ) {
		        SPD( playerid, dialog_HEPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu hotela!", D_ODABERI, D_ODUSTANI );
		    }
		    if( listitem ==  1 ) {
		        SPD( playerid, dialog_HELEVEL, DSI, D_NASLOV, "Unesite zeljeni level hotela!", D_ODABERI, D_ODUSTANI );
		    }
		    if( listitem ==  2 ) {
				new id = GetNearestHotel( playerid );
	   	 		if( GetNearestHotel( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema hotela u blizini!");

	            new string1[ 128 ];
				format( string1, sizeof( string1 ), "Admin %s je prodao hotel ID %d na buy", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogEdit.log", string1 );

				hotelInfo[ id ][ hOwnerSQL ] = 0;
	    		strmid( hotelInfo[ id ][ hOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );
	    		hotelInfo[ id ][ hLocked ] = 0;

				mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `hotels` SET `h_userid` = '%d', `h_locked` = '%d' WHERE `hID` = '%d' LIMIT 1",
								hotelInfo[ id ][ hOwnerSQL ],
								hotelInfo[ id ][ hLocked ],
								hotelInfo[ id ][ hbaseID ] );
				mysql_pquery( _dbConnector, sql_str, "", "" );

	    		SendInfoMessage( playerid, "Uspjesno ste prodali hotel!" );
	    		HotelRefresh( id );
		    }
        }
	}
	else if( dialogid == dialog_SEDIT ) {
	    if( !response ) return true;
        if( response ) {
		    if( listitem ==  0 ) {
		        SPD( playerid, dialog_SEPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu ulice!", D_ODABERI, D_ODUSTANI );
		    }
		    if( listitem ==  1 ) {
		        SPD( playerid, dialog_SELEVEL, DSI, D_NASLOV, "Unesite zeljeni level ulice!", D_ODABERI, D_ODUSTANI );
		    }
			if( listitem ==  2 ) {
		        SPD( playerid, dialog_SENAME, DSI, D_NASLOV, "Unesite zeljeno ime ulice!", D_ODABERI, D_ODUSTANI );
		    }
		    if( listitem ==  3 ) {
				new id = GetNearestStreet( playerid );
	   	 		if( GetNearestStreet( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema ulice u blizini!");

	            new string1[ 128 ];
				format( string1, sizeof( string1 ), "Admin %s je prodao ulicu ID %d na buy", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogEdit.log", string1 );

				streetInfo[ id ][ sOwnerSQL ] = 0;
	    		strmid( streetInfo[ id ][ sOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );

				mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `streets` SET `s_userid` = '%d' WHERE `sID` = '%d' LIMIT 1",
								streetInfo[ id ][ sOwnerSQL ],
								streetInfo[ id ][ sbaseID ] );
				mysql_pquery( _dbConnector, sql_str, "", "" );

	    		SendInfoMessage( playerid, "Uspjesno ste prodali ulicu!" );
	    		StreetRefresh( id );
		    }
        }
	}
	else if( dialogid == dialog_FURNITUREEDIT ){
		if( !response ) return 1;
		else if( response ){
			switch( listitem ){
				case 0: {
					if( Furniture_Editing[ playerid ] != -1 ) return SendErrorMessage( playerid, "Vec editirate jedan objekt ( ID: %d )", Furniture_Editing[ playerid ] );

					new furnitureid = Furniture_GetNearest( playerid );
					if( furnitureid != -1 ) Furniture_Edit( playerid, furnitureid );
				}
			}
		}
	}
	else if( dialogid == dialog_HEPRICE && response ) {

	    new cena, hotel = GetNearestHotel( playerid );
		if( GetNearestHotel( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema hotela u vasoj blizini!" );
		if( hotelInfo[ hotel ][ hOwnerSQL ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da izmjenis cijenukupljenog hotela." );
		if( sscanf( inputtext, "d", cena ) ) return SPD( playerid, dialog_HEPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenuhotela!", D_ODABERI, D_ODUSTANI );

		hotelInfo[ hotel ][ hPrice ] = cena;

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `hotels` SET `h_Price` = '%d' WHERE `hID` = '%d' LIMIT 1",
						hotelInfo[ hotel ][ hPrice ],
						hotelInfo[ hotel ][ hbaseID ] );
		mysql_pquery( _dbConnector, sql_str, "", "" );

		HotelRefresh( hotel );

		SendClientMessageEx( playerid, ZUTA, "Promenili ste cijenuhotel. ID = %d | Cijena = %d.", hotel, cena );
        new string[ 128 ];
		format( string, sizeof( string ), "Admin %s je promjenio cijenu hotela (ID:%d) u %d", ImeIgraca( playerid ), hotel, cena );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_SEPRICE && response ) {

	    new cena, street = GetNearestStreet( playerid );
		if( GetNearestStreet( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema ulice u vasoj blizini!" );
		if( streetInfo[ street ][ sOwnerSQL ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da izmjenis cijenu kupljene ulice." );
		if( sscanf( inputtext, "d", cena ) ) return SPD( playerid, dialog_SEPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu ulice!", D_ODABERI, D_ODUSTANI );

		streetInfo[ street ][ sPrice ] = cena;

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `streets` SET `s_Price` = '%d' WHERE `sID` = '%d' LIMIT 1",
						streetInfo[ street ][ sPrice ],
						streetInfo[ street ][ sbaseID ] );
		mysql_pquery( _dbConnector, sql_str, "", "" );

		StreetRefresh( street );

		SendClientMessageEx( playerid, ZUTA, "Promenili ste cijenu ulice. ID = %d | Cijena = %d.", street, cena );
        new string[ 128 ];
		format( string, sizeof( string ), "Admin %s je promjenio cijenu ulice(ID:%d) u %d", ImeIgraca( playerid ), street, cena );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_HELEVEL && response ) {
	    new level, hotel = GetNearestHotel( playerid );
		if( GetNearestHotel( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema hotela u vasoj blizini!" );
		if( hotelInfo[ hotel ][ hOwnerSQL ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da izmjenis level kupljenog hotela." );
		if( sscanf( inputtext, "d", level ) ) return SPD( playerid, dialog_HELEVEL, DSI, D_NASLOV, "Unesite zeljeni level hotela!", D_ODABERI, D_ODUSTANI );

		hotelInfo[ hotel ][ hLevel ] = level;

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `hotels` SET `h_level` = '%d' WHERE `hID` = '%d' LIMIT 1",
						hotelInfo[ hotel ][ hLevel ],
						hotelInfo[ hotel ][ hbaseID ] );
		mysql_pquery( _dbConnector, sql_str, "", "" );

		HotelRefresh( hotel );

		SendClientMessageEx( playerid, ZUTA, "Promenili ste level hotela ID = %d | Level = %d.", hotel, level );

        new string[ 128 ];
		format( string, sizeof( string ), "Admin %s je promjenio level hotela(ID:%d) u %d", ImeIgraca( playerid ), hotel, level );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_SELEVEL && response ) {
	    new level, street = GetNearestStreet( playerid );
		if( GetNearestStreet( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema ulice u vasoj blizini!" );
		if( streetInfo[ street ][ sOwnerSQL ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da izmjenis level kupljene ulice." );
		if( sscanf( inputtext, "d", level ) ) return SPD( playerid, dialog_SELEVEL, DSI, D_NASLOV, "Unesite zeljeni level ulice!", D_ODABERI, D_ODUSTANI );

		streetInfo[ street ][ sLevel ] = level;

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `streets` SET `s_level` = '%d' WHERE `sID` = '%d' LIMIT 1",
						streetInfo[ street ][ sLevel ],
						streetInfo[ street ][ sbaseID ] );
		mysql_pquery( _dbConnector, sql_str, "", "" );

		StreetRefresh( street );

		SendClientMessageEx( playerid, ZUTA, "Promenili ste level ulice ID = %d | Level = %d.", street, level );

        new string[ 128 ];
		format( string, sizeof( string ), "Admin %s je promjenio level ulice(ID:%d) u %d", ImeIgraca( playerid ), street, level );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_SENAME && response ) {
	    new name[32], street = GetNearestStreet( playerid );
		if( GetNearestStreet( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema ulice u vasoj blizini!" );
		if( sscanf( inputtext, "s[32]", name ) ) return SPD( playerid, dialog_SENAME, DSI, D_NASLOV, "Unesite zeljeno ime ulice!", D_ODABERI, D_ODUSTANI );

		strmid( streetInfo[ street ][ sName ], name, 0, strlen( name ), 32);
		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `streets` SET `s_name` = '%e' WHERE `sID` = '%d' LIMIT 1",
						streetInfo[ street ][ sName ],
						streetInfo[ street ][ sbaseID ] );
		mysql_pquery( _dbConnector, sql_str, "", "" );
		StreetRefresh( street );

		SendClientMessageEx( playerid, ZUTA, "Promenili ste ime ulice ID = %d | Ime = %s.", street, name );

        new string[ 128 ];
		format( string, sizeof( string ), "Admin %s je promjenio ime ulice(ID:%d) u %s", ImeIgraca( playerid ), street, name );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_IEDIT ) {
	    if( !response ) return true;
        if( response ) {
		    if( listitem ==  0 ) {
		        SPD( playerid, dialog_ICPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenuimovine!", D_ODABERI, D_ODUSTANI );
		    }
		    else if( listitem ==  1 ) {
		        SPD( playerid, dialog_IOPEN, DSI, D_NASLOV, "Unesite id imovine koju zelite otkljucati.", D_ODABERI, D_ODUSTANI ); }
		    else if( listitem ==  2 ) {
		        SPD( playerid, dialog_ICLOSE, DSI, D_NASLOV, "Unesite id imovine koju zelite zakljucati.", D_ODABERI, D_ODUSTANI ); }
		    else if( listitem ==  3 ) {
		        if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
		        SPD( playerid, dialog_ISELL, DSI, D_NASLOV, "Unesite id imovine koju zelite prodati", D_ODABERI, D_ODUSTANI );
			}
			else if( listitem == 4 ){
				SPD( playerid, dialog_IINT, DSI, D_NASLOV, ""col_white"Unesite id imovine, x, y, z koordinate, interior id, vrsta imovine\n\
				Dostupne vrste: 1 - Mala kuca, 2 - Srednja kuca, 3 - Velika kuca, 4 - Vila, 5 - Stan, 6 - Elitni Stan, 7 - Vikendica\nPrimjer: 69 1856.6660 -1005.3994 36.1739 10 3", D_ODABERI, D_ODUSTANI);
			}
		}
	}
	else if( dialogid == dialog_ICPRICE && response ) {
	    new cena, imovina = GetNearestProperty( playerid );
		if( GetNearestProperty( playerid ) == -1 ) return SendErrorMessage( playerid, "Nema imovine u vasoj blizini!" );
		if( II[ imovina ][ iOwnerbaseID ] != 0 ) return SendErrorMessage( playerid, "Ne mozes da izmjenis cijenukupljene kuce." );
		if( sscanf( inputtext, "d", cena ) ) return SPD( playerid, dialog_ICPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenuimovine!", D_ODABERI, D_ODUSTANI );
		II[ imovina ][ iPrice ] = cena;

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_price` = '%d' WHERE `propID` = '%d'",
				II[ imovina ][ iPrice ],
				II[ imovina ][ ibaseID ] );

		mysql_pquery( _dbConnector, sql_str, "", "");

		SendClientMessageEx( playerid, ZUTA, "Promenili ste cijenu imovine. ID = %d | Cijena = %d.", imovina, cena );
        new string[ 128 ];
		format( string, sizeof( string ), "Admin %s je promjenio cijenu imovine(ID:%d) u %d", ImeIgraca( playerid ), imovina, cena );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_IOPEN && response ) {
	    new id;
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_IOPEN, DSI, D_NASLOV, "Unesite id imovine koju zelite otkljucati.", D_ODABERI, D_ODUSTANI );
		if( II[ id ][ ibaseID ] == 0 ) return SendErrorMessage( playerid, "Ta imovina ne postoji u bazi podataka." );
		II[ id ][ iLocked ] = 0;
		NotifyPlayer(playerid, globalstring, "~w~status brave: ~g~otkljucano", 0);

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_locked` = '%d' WHERE `propID` = '%d'",
				II[ id ][ iLocked ],
				II[ id ][ ibaseID ] );

		mysql_pquery( _dbConnector, sql_str, "", "");

		SendInfoMessage( playerid, "Otkljucali ste imovinu(ID: %d )!", id );
	}
	else if( dialogid == dialog_ICLOSE && response ) {
	    new id;
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_ICLOSE, DSI, D_NASLOV, "Unesite id imovine koju zelite zakljucati.", D_ODABERI, D_ODUSTANI );
        if( II[ id ][ ibaseID ] == 0 ) return SendErrorMessage( playerid, "Ta imovina ne postoji u bazi podataka." );
		II[ id ][ iLocked ] = 1;
		NotifyPlayer(playerid, globalstring, "~w~status brave: ~r~zakljucano", 0);

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_locked` = '%d' WHERE `propID` = '%d'",
				II[ id ][ iLocked ],
				II[ id ][ ibaseID ] );

		mysql_pquery( _dbConnector, sql_str, "", "");

		SendInfoMessage( playerid, "Zakljucali ste imovinu(ID: %d )!", id );
	}
	else if( dialogid == dialog_ISELL && response ) {
	    new id;
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_ISELL, DSI, D_NASLOV, "Unesti id imovine koju zelite prodati", D_ODABERI, D_ODUSTANI );
        if( II[ id ][ ibaseID ] == 0 ) return SendErrorMessage( playerid, "Ta imovina ne postoji u bazi podataka." );
		II[ id ][ iOwnerbaseID ] = 0;
        II[ id ][ iNeaktivnost ] = 0;
    	strmid( II[ id ][ iOwner ], "Drzava", 0, strlen( "Drzava" ), 32);

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_userid` = '%d', `p_neaktivnost` = '%d' WHERE `propID` = '%d'",
				II[ id ][ iOwnerbaseID ],
				II[ id ][ iNeaktivnost ],
				II[ id ][ ibaseID ] );

		mysql_pquery( _dbConnector, sql_str, "", "");

    	PropertyRefresh( id );
    	SendInfoMessage( playerid, "Prodali ste imovinu(ID: %d )!", id );

    	Property_checkGarage( id );
    	new string[ 128 ];
		format( string, sizeof( string ), "Admin %s je prodao imovinu(ID:%d)", ImeIgraca( playerid ), id );
		LogSave( "Ostalo/LogEdit.log", string );
    }
	else if( dialogid == dialog_IINT && response ) {
		new id, Float:x, Float:y, Float:z, int, vrsta;
		if(sscanf( inputtext, "ifffii", id, x, y, z, int, vrsta ) ) return SPD( playerid, dialog_IINT, DSI, D_NASLOV, ""col_white"Unesite id imovine, x, y, z koordinate, interior id, vrsta imovine\n\
		Dostupne vrste: 1 - Mala kuca, 2 - Srednja kuca, 3 - Velika kuca, 4 - Vila, 5 - Stan, 6 - Elitni Stan, 7 - Vikendica\nPrimjer: 69 1856.6660 -1005.3994 36.1739 10 3", D_ODABERI, D_ODUSTANI);
		if( II[ id ][ ibaseID ] == 0 ) return SendErrorMessage( playerid, "Ta imovina ne postoji u bazi podataka." );
		if( int < 0 || ( vrsta < 0 || vrsta > 7 ) ) return SendErrorMessage( playerid, "Interior ne moze biti manji od 0, a vrsta ne moze biti manja od 0 i veca od 7!" );
		II[ id ][ iExit_X ] = x;
		II[ id ][ iExit_Y ] = y;
		II[ id ][ iExit_Z ] = z;
		II[ id ][ iInterior ] = int;
		if( vrsta >= 1 && vrsta <= 4 ) II[ id ][ iVrsta ] = vrsta;
		else if( vrsta == 5 ) II[ id ][ iUsage ] = IMOVINA_STAN;
		else if( vrsta == 6 ) II[ id ][ iUsage ] = IMOVINA_ELITNI_STAN;
		else if( vrsta == 7 ) II[ id ][ iUsage ] = IMOVINA_VIKENDICA;

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_exit_x` = '%f', `p_exit_y` = '%f', `p_exit_z` = '%f', `p_interior` = '%d', `p_type` = '%d', `p_usage` = '%d' WHERE `propID` = '%d'",
				II[ id ][ iExit_X ],
				II[ id ][ iExit_Y ],
				II[ id ][ iExit_Z ],
				II[ id ][ iInterior ],
				II[ id ][ iVrsta ],
				II[ id ][ iUsage ],
				II[ id ][ ibaseID ] );

		mysql_pquery( _dbConnector, sql_str, "", "");

    	PropertyRefresh( id );

		SendInfoMessage( playerid, "Izmjenili ste interior imovine ID: %d | X: %.3f , Y: %.3f , Z: %.3f | Int: %d | Vrsta: %s ", id, x, y, z, int, vrsta );
		new string[ 256 ];
		format( string, sizeof( string ), "Admin %s je editao int imovine: %d | X: %.3f , Y: %.3f , Z: %.3f | Int: %d | Vrsta: %d", ImeIgraca( playerid ), id, x, y, z, int, vrsta );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_VEDIT ) {
	    if( !response ) return true;
        if( response ) {
		    if( listitem ==  0 ) {
		        SPD( playerid, dialog_VPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu vozila!", D_ODABERI, D_ODUSTANI );
		    }
		    if( listitem == 1 ) {
    			if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
    			if( VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u server side vozilu." );

				new autoid = GetPlayerVehicleID( playerid );

                GetVehiclePos( autoid, VehicleInfo[ autoid ][ vLokacijaX ], VehicleInfo[ autoid ][ vLokacijaY ], VehicleInfo[ autoid ][ vLokacijaZ ] );
				GetVehicleZAngle( autoid, VehicleInfo[ autoid ][ vLokacijaA ] );

		        VehicleInfo[ autoid ][ vVirtualWorld ] = GetPlayerVirtualWorld( playerid );
				VehicleInfo[ autoid ][ vInterior ] = GetPlayerInterior( playerid );

                new q[ 256 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `vehicles` SET `v_pos_x` = '%f', `v_pos_y` = '%f', `v_pos_z` = '%f', `v_pos_a` = '%f', `v_virtualw` = '%d', `v_interior` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
						VehicleInfo[ autoid ][ vLokacijaX ],
						VehicleInfo[ autoid ][ vLokacijaY ],
						VehicleInfo[ autoid ][ vLokacijaZ ],
						VehicleInfo[ autoid ][ vLokacijaA ],
						VehicleInfo[ autoid ][ vVirtualWorld ],
						VehicleInfo[ autoid ][ vInterior ],
						VehicleInfo[ autoid ][ vSqlID ] );

			   	mysql_pquery( _dbConnector, q, "park_vehicleCheckID", "iii", -1, 1, autoid );

				SendInfoMessage( playerid, "Preparkirali ste vozilo. ID = %d.", autoid );

		    }
		    if( listitem == 2 ) {
		        if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");

    			if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
    			if( VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u server side privatnom vozilu." );

            	new izbor = GetPlayerVehicleID( playerid );

			    strmid( VehicleInfo[ izbor ][ vOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );

				SendInfoMessage( playerid, "Prodali ste vozilo. ID = %d.", izbor );

				/*VehicleInfo[ izbor ][ vVirtualWorld ] = 0;
				VehicleInfo[ izbor ][ vInterior ] = 0;

				VehicleInfo[ izbor ][ vOwner_sqlID ] = 0;
				VehicleInfo[ izbor ][ vPrice ] = -1;

				VehicleInfo[ izbor ][ vLokacijaX ] = -2112.0281;
				VehicleInfo[ izbor ][ vLokacijaY ] = 2729.6250;
				VehicleInfo[ izbor ][ vLokacijaZ ] = 166.0840;
				VehicleInfo[ izbor ][ vLokacijaA ] = 202.9713;

				sql_vehicles_update_auction( izbor );
				ResetVehicle( izbor );

				KGEyes_DestroyVehicle( izbor );*/
				KGEyes_DestroyVehicle( izbor );
				sql_vehicles_delete( izbor );
				ResetVehicle( izbor );
				SetVehicleLabels( izbor );
				format( globalstring, sizeof( globalstring ), "| PRODAJA VOZILA | %s je prodao vozilo ID: %d", ImeIgraca( playerid ), izbor );
				LogSave( "Ostalo/LogEdit.log", globalstring );

		    }
		    if( listitem == 3 ) {
		        if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");

    			if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
    			if( VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u server side vozilu." );

				SPD( playerid, dialog_VCOLOR, DSI, D_NASLOV, "Unesite zeljeni ide boje1 i id boje 1. Primer: 2 2!", D_ODABERI, D_ODUSTANI );
			}
		}
	}
	else if( dialogid == dialog_VCOLOR && response ) {
	    new boja1, boja2;

    	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
    	if( VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u server side vozilu." );

		if( sscanf( inputtext, "dd", boja1, boja2 ) ) return SPD( playerid, dialog_VCOLOR, DSI, D_NASLOV, "Unesite zeljeni ide boje1 i id boje 1. Primer: 2 2!", D_ODABERI, D_ODUSTANI );

        new vehicleid = GetPlayerVehicleID( playerid );

        VehicleInfo[ vehicleid ][ vColor1 ] = boja1; VehicleInfo[ vehicleid ][ vColor2 ] = boja2;

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_color_1` = '%d', `v_color_2` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
									VehicleInfo[ vehicleid ][ vColor1 ],
									VehicleInfo[ vehicleid ][ vColor2 ],
									VehicleInfo[ vehicleid ][ vSqlID ] );

		mysql_pquery( _dbConnector, sql_str, "", "" );

		KGEyes_ChangeVehicleColor( vehicleid, boja1, boja2 );

		SendInfoMessage( playerid, "Prebojali ste vozilo. ID = %d. u boje %d %d", vehicleid, boja1, boja2 );
	}
	else if( dialogid == dialog_VPRICE && response ) {
	    new cena;

    	if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Niste u vozilu!" );
    	if( VehicleInfo[ GetPlayerVehicleID( playerid ) ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Da bi koristili ovu komandu morate biti u server side privatnom vozilu." );
		if( sscanf( inputtext, "d", cena ) ) return SPD( playerid, dialog_VPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu vozila!", D_ODABERI, D_ODUSTANI );

        new vehicleid = GetPlayerVehicleID( playerid );

		VehicleInfo[ vehicleid ][ vPrice ] = cena;

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_price` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
									VehicleInfo[ vehicleid ][ vPrice ],
									VehicleInfo[ vehicleid ][ vSqlID ] );

		mysql_pquery( _dbConnector, sql_str, "", "" );

		SendInfoMessage( playerid, "Promenili ste cijenu vozila. ID = %d | Cijena = %d.", vehicleid, cena );
	}
	else if( dialogid == dialog_FEDIT ) {
	    if( !response ) return true;
        if( response ) {
		    if( listitem ==  0 ) {
		    	SPD( playerid, dialog_FNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime firme!", D_ODABERI, D_ODUSTANI ); }
		    if( listitem ==  1 ) {
		        SPD( playerid, dialog_FOPEN, DSI, D_NASLOV, "Unesite id firme koju zelite otkljucati.", D_ODABERI, D_ODUSTANI ); }
		    if( listitem ==  2 ) {
		        SPD( playerid, dialog_FCLOSE, DSI, D_NASLOV, "Unesite id firme koju zelite zakljucati.", D_ODABERI, D_ODUSTANI ); }
		    if( listitem ==  3 ) {
		        if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
		        SPD( playerid, dialog_FSELL, DSI, D_NASLOV, "Unesti id firme koju zelite prodati", D_ODABERI, D_ODUSTANI );
			}
			if( listitem ==  4 ) {

		    	SPD( playerid, dialog_FCORDEXIT, DSI, D_NASLOV, "Unesite id firme, kordinate x,y,z, int i vw\nPrimer: 2, 1323.2, 625.2, -2314, 0 1!", D_ODABERI, D_ODUSTANI );
			}
			if( listitem ==  5 ) {

			    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				strcat( DialogStrgEx, ""col_white"Unesite id firme i broj vrste firme koju zelite.\n" );
				strcat( DialogStrgEx, "Vrste: 1. Market 2. Firma bez ulaza 3. Burg 4. Clucking Bell 5. Binco 6. Zip 7. Victim 8. Suburban 9. GunShop 10. Gym\n" );
	            strcat( DialogStrgEx, "11. Bar 12. Restoran 13. Pizzeria 14. Nocni klub 15. Disco 16. Electronic Shop 17. Trafika 18. Firma za posao 19. Rent firma\n" );
				strcat( DialogStrgEx, "20. Pumpa 21. Javna Kuca 22. Kladionica 23. Oglas 24. Telekom 25. PayNspay 26. Komunalije 27. Vodovod 28. Elektrana 29. Lutrija\n" );
				strcat( DialogStrgEx, "30. Casino 31. Neon Shop 32. Auto Skola 33. Namjestaj 44. HotDog 45. Toplana 46. Sex Shop 47. Banka 48. Bilbord\n" );

				SPD( playerid, dialog_FEDITTYPE, DSI, D_NASLOV, DialogStrgEx, "U redu", "" );

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
			if( listitem == 6 ){
                SPD( playerid, dialog_FIRMAREKETADM, DSI, D_NASLOV, "U prazni prostor ispod unesite ID firme i ID igraca kojem zelis postaviti reket\nUpisi -1 za micanje reketa", "Postavi", D_ODUSTANI );
			}
		}
	}
	else if( dialogid == dialog_FEDITTYPE && response ) {

	    new id, vrsta;
		if(sscanf( inputtext, "ii", id, vrsta ) ) {

		    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

			strcat( DialogStrgEx, ""col_white"Unesite id firme i broj vrste firme koju zelite.\n" );
			strcat( DialogStrgEx, "Vrste: 1. Market 2. Firma bez ulaza 3. Burg 4. Clucking Bell 5. Binco 6. Zip 7. Victim 8. Suburban 9. GunShop 10. Gym\n" );
            strcat( DialogStrgEx, "11. Bar 12. Restoran 13. Pizzeria 14. Nocni klub 15. Disco 16. Electronic Shop 17. Trafika 18. Firma za posao 19. Rent firma\n" );
			strcat( DialogStrgEx, "20. Pumpa 21. Javna Kuca 22. Kladionica 23. Oglas 24. Telekom 25. PayNspay 26. Komunalije 27. Vodovod 28. Elektrana 29. Lutrija\n" );
			strcat( DialogStrgEx, "30. Casino 31. Neon Shop 32. Auto Skola 33. Namjestaj 44. HotDog 45. Toplana 46. Sex Shop 47. Banka 48. Bilbord\n" );

			SPD( playerid, dialog_FEDITTYPE, DSI, D_NASLOV, DialogStrgEx, "U redu", "" );

			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

			return true;
		}
        if( BussinesInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

		BussinesInfo[ id ][ bType ] = vrsta;

		sql_bussines_update_integer( id, "b_type", BussinesInfo[ id ][ bType ] );
		Bussines_Refresh( id );
		SendInfoMessage( playerid, "Promenili ste promjenili vrstu firme(ID: %d)!", id );

	}
	else if( dialogid == dialog_FCORDEXIT && response ) {
	    new id, Float:x, Float:y, Float:z, interior, vw;
		if(sscanf( inputtext, "ifffii", id, x, y, z, interior, vw ) ) return SPD( playerid, dialog_FCORDEXIT, DSI, D_NASLOV, "Unesite id firme, kordinate x,y,z, int i vw\nPrimer: 2, 1323.2, 625.2, -2314, 0 1!", D_ODABERI, D_ODUSTANI );

		if( BussinesInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

		BussinesInfo[ id ][ bInInt ] = interior;
	  	BussinesInfo[ id ][ bExitX ] = x;
	  	BussinesInfo[ id ][ bExitY ] = y;
	   	BussinesInfo[ id ][ bExitZ ] = z;
	    BussinesInfo[ id ][ bInVW ] = vw;

        new q[ 256 ];
		mysql_format( _dbConnector, q, sizeof(q), "UPDATE `bussines` SET `b_exit_x` = '%f', `b_exit_y` = '%f', `b_exit_z` = '%f', `b_exit_int` = '%d', `b_exit_vw` = '%d' WHERE `bussines_id` = '%d'",
			BussinesInfo[ id ][ bExitX ],
			BussinesInfo[ id ][ bExitY ],
			BussinesInfo[ id ][ bExitZ ],
			BussinesInfo[ id ][ bInInt ],
			BussinesInfo[ id ][ bInVW ],
			BussinesInfo[ id ][ b_ID ] );

	   	mysql_pquery( _dbConnector, q, "", "");

		Bussines_Refresh( id );
		SendInfoMessage( playerid, "Promenili ste promjenili izlazne kordinate firme(ID: %d )!", id );
	}
	else if( dialogid == dialog_FNAME && response ) {

	    new id, ime[ 64 ];
		if(sscanf( inputtext, "is[64]", id, ime ) ) return SPD( playerid, dialog_FNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime firme!", D_ODABERI, D_ODUSTANI );

		if( BussinesInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

		strmid( BussinesInfo[ id ][ bName ], ime, 0, strlen( ime ), 128);
		sql_bussines_update_string( id, "b_name", BussinesInfo[ id ][ bName ] );
		Bussines_Refresh( id );
		SendInfoMessage( playerid, "Promenili ste ime firme(ID: %d ) u %s!", id, ime );
	}
	else if( dialogid == dialog_FOPEN && response ) {

	    new id;
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_FOPEN, DSI, D_NASLOV, "Unesite id firme koju zelite otkljucati.", D_ODABERI, D_ODUSTANI );
        if( BussinesInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

		BussinesInfo[ id ][ bLocked ] = 0; GameTextForPlayer( playerid, "Firma ~g~otkljucana!", 3000, 3 );
		sql_bussines_update_integer( id, "b_locked", BussinesInfo[ id ][ bLocked ] );
		SendInfoMessage( playerid, "Otkljucali ste firmu(ID: %d )!", id );
	}
	else if( dialogid == dialog_FCLOSE && response ) {

	    new id;
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_FCLOSE, DSI, D_NASLOV, "Unesite id firme koju zelite zakljucati.", D_ODABERI, D_ODUSTANI );
        if( BussinesInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

		BussinesInfo[ id ][ bLocked ] = 1; GameTextForPlayer( playerid, "Firma ~r~zakljucana!", 3000, 3 );
		sql_bussines_update_integer( id, "b_locked", BussinesInfo[ id ][ bLocked ] );
		SendInfoMessage( playerid, "Zakljucali ste firmu(ID: %d )!", id );
	}
	else if( dialogid == dialog_FSELL && response ) {

	    new id;
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_FSELL, DSI, D_NASLOV, "Unesti id firme koju zelite prodati", D_ODABERI, D_ODUSTANI );
        if( BussinesInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

		BussinesInfo[ id ][ bOwner_sqlID ] = 0;
		BussinesInfo[ id ][ bReket_sqlID ] = 0;
    	strmid( BussinesInfo[ id ][ bOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
    	strmid( BussinesInfo[ id ][ bReket ], "Drzava", 0, strlen( "Drzava" ), 32);
    	BussinesInfo[ id ][ bNeaktivnost ] = 0;
		BussinesInfo[ id ][ bMoney ] = 0;
    	BussinesInfo[ id ][ bFacture ] = 100;
    	Bussines_Refresh( id );
    	SendInfoMessage( playerid, "Prodali ste firmu( ID: %d )!", id );

    	new q[ 256 ];
		mysql_format( _dbConnector, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `b_neaktivnost` = '%d', `b_facture` = '%d', `b_reket_sqlID` = '%d', `b_money` = '%d' WHERE `bussines_id` = '%d'",
				BussinesInfo[ id ][ bOwner_sqlID ],
				BussinesInfo[ id ][ bNeaktivnost ],
				BussinesInfo[ id ][ bFacture ],
				BussinesInfo[ id ][ bReket_sqlID ],
				BussinesInfo[ id ][ bMoney ],
				BussinesInfo[ id ][ b_ID ] );

	   	mysql_pquery( _dbConnector, q, "", "");
		format( globalstring, sizeof( globalstring ), "Admin %s je prodao firmu ID: %d", ImeIgraca( playerid ), id );
		LogSave( "Ostalo/LogEdit.log", globalstring );
    }
	else if( dialogid == dialog_VCREATE ) {
	    if( response ) {
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1) {
				SendClientMessageEx( playerid, ANTICHEAT, "(anticheat)"col_white"Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return SPD( playerid, dialog_VCREATE, DSI, D_NASLOV, "Unesite id zeljenog vozila, id boje1, id boje2!", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return SPD( playerid, dialog_VCREATE, DSI, D_NASLOV, "Unesite id zeljenog vozila, id boje1, id boje2!", D_ODABERI, D_NAZAD );
			if( VehPrice[ idauta-400 ][ 1 ] == 0 ) return SendErrorMessage( playerid, "Vozilo sa unetim IDem se ne moze kreirati zbog nedefinisane cene." );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            sql_create_vehicle( idauta, PRIVATNO_VOZILO, -1, -1, -1, PozX, PozY, PozZ, PozA, boja1, boja2 );

		    SendInfoMessage( playerid, "Uspjesno ste kreirali vozilo: ID Auta: %d, Cijena: %d", idauta, VehPrice[ idauta- 400 ][ 1 ] );
			format( globalstring, sizeof( globalstring ), "| NAPRAVIVOZILO | %s je kreirao privatno vozilo Model ID: %d", ImeIgraca( playerid ), idauta  );
			LogSave( "Ostalo/LogEdit.log", globalstring );
		}
	}
	else if( dialogid == dialog_PCREATE  ) {
	    if( response ) {
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, posao, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1)
		    {
				SendClientMessageEx( playerid, ANTICHEAT, "(anticheat)"col_white"Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iiii", idauta, posao, boja1, boja2 ) ) return SPD( playerid, dialog_PCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id posla, id boje1, id boje2.\nID posla: 1. Prevoznik Novca 2. Detektiv 3. Prevoznik sljunka 4. Kosac Trave 5. Komunalac 6. Prevoznik cementa 7.Dostavljac pizze\n8.Pilot 9.Farmer 10. Bus vozac 11. Rudar 12. Prevoznik drveca 13. Telohranitelj 14. Pepsi Dostavljac", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return SPD( playerid, dialog_PCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id posla, id boje1, id boje2.\nID posla: 1. Prevoznik Novca 2. Detektiv 3. Prevoznik sljunka 4. Kosac Trave 5. Komunalac 6. Prevoznik cementa 7.Dostavljac pizze\n8.Pilot 9.Farmer 10. Bus vozac 11. Rudar 12. Prevoznik drveca 13. Telohranitelj 14. Pepsi Dostavljac", D_ODABERI, D_NAZAD );
	        if( posao < 1 || posao > MAX_JOBS ) return SendErrorMessage( playerid, "Pogresan id posla!" );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            sql_create_vehicle( idauta, POSLOVNO_VOZILO, -1, posao, -1, PozX, PozY, PozZ, PozA, boja1, boja2 );

			SendInfoMessage( playerid, "Uspjesno ste kreirali poslovno vozilo: ID Auta: %d, PosaoID: %d",idauta,posao );
			format( globalstring, sizeof( globalstring ), "| NAPRAVIVOZILO | %s je kreirao poslovno vozilo Model ID: %d za posao ID: %d", ImeIgraca( playerid ), idauta, posao );
			LogSave( "Ostalo/LogEdit.log", globalstring );

		}
	}
	else if( dialogid == dialog_GRCREATE  ) {
	    if( response ) {
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1)
		    {
				SendClientMessageEx( playerid, ANTICHEAT, "(anticheat)"col_white"Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return SPD( playerid, dialog_GRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za gradonacelnikovo vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return SPD( playerid, dialog_GRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za gradonacelnikovo vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            sql_create_vehicle( idauta, GRADONACELNIKOVO_VOZILO, -1, -1, -1, PozX, PozY, PozZ, PozA, boja1, boja2 );

			SendInfoMessage( playerid, "Uspjesno ste kreirali gradonacelnikovo vozilo: ID Auta: %d.",idauta );
		}
	}
	else if( dialogid == dialog_IVCREATE  ) {

	    if( response ) {

	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1)
		    {
				SendClientMessageEx( playerid, ANTICHEAT, "(anticheat)"col_white"Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return SPD( playerid, dialog_IVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za izlozbeno vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return SPD( playerid, dialog_IVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za izlozbeno vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            sql_create_vehicle( idauta, IZLOZBENO_VOZILO, -1, -1, -1, PozX, PozY, PozZ, PozA, boja1, boja2 );

			SendInfoMessage( playerid, "Uspjesno ste kreirali izlozbeno vozilo: ID Auta: %d.",idauta );
			format( globalstring, sizeof( globalstring ), "| NAPRAVIVOZILO | %s je kreirao izlozbeno vozilo Model ID: %d", ImeIgraca( playerid ), idauta );
			LogSave( "Ostalo/LogEdit.log", globalstring );
		}
	}
	else if( dialogid == dialog_DMZVCREATE  ) {

	    if( response ) {

	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1)
		    {
				SendClientMessageEx( playerid, ANTICHEAT, "(anticheat)"col_white"Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return SPD( playerid, dialog_DMZVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za DMZ vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return SPD( playerid, dialog_DMZVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za DMZ vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            sql_create_vehicle_vw( idauta, DMZONA_VOZILO, -1, -1, -1, PozX, PozY, PozZ, PozA, boja1, boja2, 100, 0 );

			SendInfoMessage( playerid, "Uspjesno ste kreirali DMZ vozilo: ID Auta: %d.",idauta );
			format( globalstring, sizeof( globalstring ), "| NAPRAVIVOZILO | %s je kreirao DMZ vozilo Model ID: %d", ImeIgraca( playerid ), idauta );
			LogSave( "Ostalo/LogEdit.log", globalstring );
		}
	}
	else if( dialogid == dialog_VVCREATE  ) {
	    if( response ) {
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1) {
				SendClientMessageEx( playerid, ANTICHEAT, "(anticheat)"col_white"Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return SPD( playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return SPD( playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            sql_create_vehicle( idauta, VIP_VOZILO, -1, -1, -1, PozX, PozY, PozZ, PozA, boja1, boja2 );

			SendInfoMessage( playerid, "Uspjesno ste kreirali vip vozilo: ID Auta: %d.",idauta );
			format( globalstring, sizeof( globalstring ), "| NAPRAVIVOZILO | %s je kreirao VIP vozilo Model ID: %d", ImeIgraca( playerid ), idauta );
			LogSave( "Ostalo/LogEdit.log", globalstring );
		}
	}
	else if( dialogid == dialog_POLVCREATE  ) {
	    if( response ) {
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1) {
				SendClientMessageEx( playerid, ANTICHEAT, "(anticheat)"col_white"Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return SPD( playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return SPD( playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            sql_create_vehicle( idauta, POLAGANJE_VOZILO, -1, -1, -1, PozX, PozY, PozZ, PozA, boja1, boja2 );

			SendInfoMessage( playerid, "Uspjesno ste kreirali polaganje vozilo: ID Auta: %d.",idauta );
			format( globalstring, sizeof( globalstring ), "| NAPRAVIVOZILO | %s je kreirao polaganje vozilo Model ID: %d", ImeIgraca( playerid ), idauta );
			LogSave( "Ostalo/LogEdit.log", globalstring );
		}
	}
	else if( dialogid == dialog_PRCREATE  ) {
	    if( response ) {
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1) {
				SendClientMessageEx( playerid, ANTICHEAT, "(anticheat)"col_white"Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return SPD( playerid, dialog_PRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za promotersko vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return SPD( playerid, dialog_PRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za promotersko vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            sql_create_vehicle( idauta, PROMOTER_VOZILO, -1, -1, -1, PozX, PozY, PozZ, PozA, boja1, boja2 );

			SendInfoMessage( playerid, "Uspjesno ste kreirali promotersko vozilo: ID Auta: %d.",idauta );
			format( globalstring, sizeof( globalstring ), "| NAPRAVIVOZILO | %s je kreirao promoter vozilo Model ID: %d", ImeIgraca( playerid ), idauta );
			LogSave( "Ostalo/LogEdit.log", globalstring );
		}
	}
	else if( dialogid == dialog_AVCREATE  ) {
	    if( response ) {
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1) {
				SendClientMessageEx( playerid, ANTICHEAT, "(anticheat)"col_white"Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return SPD( playerid, dialog_AVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Admin vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return SPD( playerid, dialog_AVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Admin vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            sql_create_vehicle( idauta, ADMIN_VOZILO, -1, -1, -1, PozX, PozY, PozZ, PozA, boja1, boja2 );

			SendInfoMessage( playerid, "Uspjesno ste kreirali Admin vozilo: ID Auta: %d.",idauta );
			format( globalstring, sizeof( globalstring ), "| NAPRAVIVOZILO | %s je kreirao admin vozilo Model ID: %d", ImeIgraca( playerid ), idauta );
			LogSave( "Ostalo/LogEdit.log", globalstring );
		}
	}
	else if( dialogid == dialog_HVCREATE  ) {
	    if( response ) {
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1) {
				SendClientMessageEx( playerid, ANTICHEAT, "(anticheat)"col_white"Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return SPD( playerid, dialog_HVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za GameSage vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return SPD( playerid, dialog_HVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za GameSage vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            sql_create_vehicle( idauta, GAMESAGE_VOZILO, -1, -1, -1, PozX, PozY, PozZ, PozA, boja1, boja2 );

			SendInfoMessage( playerid, "Uspjesno ste kreirali GameSage vozilo: ID Auta: %d.",idauta );
			format( globalstring, sizeof( globalstring ), "| NAPRAVIVOZILO | %s je kreirao GameSage vozilo Model ID: %d", ImeIgraca( playerid ), idauta );
			LogSave( "Ostalo/LogEdit.log", globalstring );
		}
	}
	else if( dialogid == dialog_MVCREATE  ) {
	    if( response ) {
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1) {
				SendClientMessageEx( playerid, ANTICHEAT, "(anticheat)"col_white"Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return SPD( playerid, dialog_MVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Misija vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return SPD( playerid, dialog_MVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Misijee vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            sql_create_vehicle( idauta, MISIJA_VOZILO, -1, -1, -1, PozX, PozY, PozZ, PozA, boja1, boja2 );
			SendInfoMessage( playerid, "Uspjesno ste kreirali Misija vozilo: ID Auta: %d.",idauta );
			format( globalstring, sizeof( globalstring ), "| NAPRAVIVOZILO | %s je kreirao misija vozilo Model ID: %d", ImeIgraca( playerid ), idauta );
			LogSave( "Ostalo/LogEdit.log", globalstring );
		}
	}
	else if( dialogid == dialog_OVCREATE  ) {
	    if( response ) {
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, orga, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1)
		    {
				SendClientMessageEx( playerid, ANTICHEAT, "(anticheat)"col_white"Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iiii", idauta, orga, boja1, boja2 ) ) return SPD( playerid, dialog_OVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id organizacije, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return SPD( playerid, dialog_OVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id organizacije, id boje1, id boje2.", D_ODABERI, D_NAZAD );
	        if( orga < 1 ) return SendErrorMessage( playerid, "Pogresan id organizacije(1+)!" );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
			if( org_info[ orga ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

			if( org_info[ orga ][ oTip ] == ORG_TIP_BANDA || org_info[ orga ][ oTip ] == ORG_TIP_MAFIJA  || org_info[ orga ][ oTip ] == ORG_TIP_SR || org_info[ orga ][ oTip ] == ORG_TIP_MC || org_info[ orga ][ oTip ] == ORG_TIP_CARTEL ) {
				if( org_info[ orga ][ oVehColor ][ 0 ] == -1 || org_info[ orga ][ oVehColor ][ 1 ] == -1 ) return SendErrorMessage( playerid, "Organizaciji nije podesena boja vozila(/server->izmjeni)." );
                if( org_info[ orga ][ oVehSlots ] >= org_info[ orga ][ oMaxVehSlots ] ) return SendErrorMessage( playerid, "Ova orga ima popunjene sve aktivne slotove za vozila." );

               	sql_create_vehicle( idauta, ORGANIZACIJSKO_VOZILO, orga, -1, -1, PozX, PozY, PozZ, PozA, org_info[ orga ][ oVehColor ][ 0 ], org_info[ orga ][ oVehColor ][ 1 ] );
			}
			else sql_create_vehicle( idauta, ORGANIZACIJSKO_VOZILO, orga, -1, -1, PozX, PozY, PozZ, PozA, boja1, boja2 );

			SendInfoMessage( playerid, "Uspjesno ste kreirali organizacijsko vozilo: ID Auta: %d, OrgID: %d", idauta, orga );
			format( globalstring, sizeof( globalstring ), "| NAPRAVIVOZILO | %s je kreirao organizacijsko vozilo Model ID: %d | Organizacija: %s ID: %d", ImeIgraca( playerid ), idauta, org_info[orga][oName], orga );
			LogSave( "Ostalo/LogEdit.log", globalstring );
		}
	}
	else if( dialogid == dialog_RVCREATE ) {
	    if( response ) {
	        if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
		    new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    GetPlayerFacingAngle( playerid, PozA );
		    if(carspawntimer == 1)
		    {
				SendClientMessageEx( playerid, ANTICHEAT, "(anticheat)"col_white"Neko je spawnao/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
		    }
		    if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return SPD( playerid, dialog_RVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za rent vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return SPD( playerid, dialog_RVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za rent vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
            if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
    		if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            sql_create_vehicle( idauta, RENTANO_VOZILO, -1, -1, -1, PozX, PozY, PozZ, PozA, boja1, boja2 );

			SendInfoMessage( playerid, "Uspjesno ste kreirali rent vozilo: ID Auta: %d",idauta );
			format( globalstring, sizeof( globalstring ), "| NAPRAVIVOZILO | %s je kreirao rent vozilo Model ID: %d", ImeIgraca( playerid ), idauta );
			LogSave( "Ostalo/LogEdit.log", globalstring );
		}
	}
	else if( dialogid == dialog_ORGEDIT ) {
	    if( listitem ==  0 ) {
	    	SPD( playerid, dialog_ORGNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime vase organizacije!", D_ODABERI, D_ODUSTANI ); }
	    if( listitem ==  1 ) {
	        if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
	        SPD( playerid, dialog_ORGINT1, DSL, D_NASLOV, "Default Interior\nUnesi sam kordinate\nInterior bande\nInterior mafije\nInterior novinara\nInterior bolnice", D_ODABERI, D_ODUSTANI ); }
	    if( listitem ==  2 ) {
	        if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
	        SPD( playerid, dialog_ORGRANKS, DSL, D_NASLOV, "Rank 1\nRank 2\nRank 3\nRank 4\nRank 5\nRank 6", D_ODABERI, D_ODUSTANI ); }
	    if( listitem ==  3 ) {
	        if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
	        SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti\nTip: Parking Servis\nTip: Cartel", D_ODABERI, D_ODUSTANI ); }
        if( listitem ==  4 ) {
            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
            SPD( playerid, dialog_ORGSKINS, DSI, D_NASLOV, "Unesite id-ove muskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI ); }
        if( listitem ==  5 ) {
            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
            SPD( playerid, dialog_ORGPREFIX, DSI, D_NASLOV, "Unesite skracenicu organizacije. Primer: LSPD", D_ODABERI, D_ODUSTANI ); }
        if( listitem ==  6 ) {
            SPD( playerid, dialog_ORGDUTYP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite duty point.", D_ODABERI, D_ODUSTANI ); }
        if( listitem ==  7 ) {
			SPD( playerid, dialog_ORGEQUIPP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite equipment point.", D_ODABERI, D_ODUSTANI ); }
        if( listitem ==  8 ) {
			SPD( playerid, dialog_ORGPORTP, DSI, D_NASLOV, "Unesti ID orge, pozicije, int i virtual world gde ce se portati as ovog mjesta\n\nPrimer: 12 2323.123 756.341 12.24 2 3.", D_ODABERI, D_ODUSTANI );
		}
		if( listitem == 9 ) {
            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
            SPD( playerid, dialog_ORGZSKINS, DSI, D_NASLOV, "Unesite id-ove zenskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
		}
		if( listitem == 10 ) {
		    if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
			SPD( playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-50)", D_ODABERI, D_ODUSTANI );
        }
        if( listitem == 11 ) {
            if( inOrgInt[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u interijeru organizacije." );
			new id = inOrgInt[ playerid ], Float:Pos[ 3 ];

			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		    org_info[ id ][ oSafePos ][ 0 ] = Pos[ 0 ];
		    org_info[ id ][ oSafePos ][ 1 ] = Pos[ 1 ];
		    org_info[ id ][ oSafePos ][ 2 ] = Pos[ 2 ];

		    if( IsValidDynamic3DTextLabel( OrgSafe3d[ id ] ) )
				DestroyDynamic3DTextLabel( OrgSafe3d[ id ] );

			if( IsValidDynamicPickup( OrgSafePickup[ id ] ) )
				DestroyDynamicPickup( OrgSafePickup[ id ] );

		    new string[ 128 ];
			format( string, sizeof( string ), ""col_white"Sef za koriscenje /orgsef\n"col_server"%s", org_info[ id ][ oName ] );

			new pickupid = CreateInteractivePickup( org_info[ id ][ oSafePos ][ 0 ], org_info[ id ][ oSafePos ][ 1 ], org_info[ id ][ oSafePos ][ 2 ], org_info[ id ][ oInt ], org_info[ id ][ oVw ], string, 1550, 20.0, ORGSEF );

			OrgSafe3d[ id ] = InteractivePickup[ pickupid ][ IP_labelid ];
			OrgSafePickup[ id ] = InteractivePickup[ pickupid ][ IP_pickupid ];

		  

            new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `safe_pos_x` = '%f', `safe_pos_y` = '%f', `safe_pos_z` = '%f' WHERE `org_id` = '%d' LIMIT 1",
				org_info[ id ][ oSafePos ][ 0 ],
				org_info[ id ][ oSafePos ][ 1 ],
				org_info[ id ][ oSafePos ][ 2 ],
				org_info[ id ][ oID ] );
			mysql_pquery( _dbConnector, q, "", "" );

			SendInfoMessage( playerid, "Napravili ste sef za orgu %s.", org_info[ id ][ oName ] );
        }
        if( listitem == 12 ) {
            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
            SPD( playerid, dialog_ORGCOLOR, DSI, D_NASLOV, "Unesite boju za organizaciju(Vezano za zone ). Primer: FF00FF", D_ODABERI, D_ODUSTANI );
		}
		if( listitem == 13 ) {
            if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );

            new id = GetNearestOrganization( playerid );

            if( !org_info[ id ][ oSuspended ] ) {

				org_info[ id ][ oSuspended ] = 1;
				SendInfoMessage( playerid, "Zakljucao si organizaciju %s. ", org_info[ id ][ oName ] );
			}
            else if( org_info[ id ][ oSuspended ] ) {

				org_info[ id ][ oSuspended ] = 0;
				SendInfoMessage( playerid, "Otkljucao si organizaciju %s. ", org_info[ id ][ oName ] );
			}

            new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `suspended` = '%d' WHERE `org_id` = '%d' LIMIT 1",
					org_info[ id ][ oSuspended ],
					org_info[ id ][ oID ] );
			mysql_pquery( _dbConnector, q, "", "" );
		}
		if( listitem == 14 ) {
		    if( inOrgInt[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u interijeru organizacije." );
		    SPD( playerid, dialog_ORGSPAWNP, DSI, D_NASLOV, "Unesite id zeljenje organizacije koja ce se spawnati na mjestu gde stojite!", D_ODABERI, D_ODUSTANI );
		}
		if( listitem == 15 ){
		    if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
		    SPD( playerid, dialog_ORGBENTRANCE, DSI, D_NASLOV, "Ako je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", D_ODABERI, D_ODUSTANI );
		}
		if( listitem == 16 ){
		    if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );
		    SPD( playerid, dialog_ORGVEHCOLOR, DSI, D_NASLOV, "Unesite ID boje1 i ID boje2\nBoja1 je uglavno primarna boja.\nBoje vozila mozete pogledati ovde: http://wiki.sa-mp.com/wiki/Vehicle_Color_IDs\n\nPrimer: 1 3", D_ODABERI, D_ODUSTANI );
		}
		if( listitem == 17 ){
		    if( GetNearestOrganization( playerid ) == -1 ) return SendErrorMessage( playerid, "Morate biti na pickupu organizacije." );

		    new org_id = GetNearestOrganization( playerid );
			new maxslots;
			if( GetFactionType( playerid ) == ORG_TIP_PD || GetFactionType( playerid ) == ORG_TIP_MD || GetFactionType( playerid ) == ORG_TIP_CNN ||
				GetFactionType( playerid ) == ORG_TIP_HITM ) maxslots = 30;
			else maxslots = 15;
			if( org_info[ org_id ][ oMaxVehSlots ] >= maxslots ) return SendErrorMessage( playerid, "Ova organizacija vec ima maksimalan moguci broj slotova vozila - %d.", maxslots );

		    org_info[ org_id ][ oMaxVehSlots ]++;
		    sql_organization_update_integer( org_id, "maxvehslots", org_info[ org_id ][ oMaxVehSlots ] );

		    SendInfoMessage( playerid, "Uspjesno ste dodali jos jedan slot vozila za org, sada ima %d/%d.", org_info[ org_id ][ oMaxVehSlots ], maxslots );
		}
		if( listitem == 18 ) {
            if( inOrgInt[ playerid ] == -1 ) return SendErrorMessage( playerid, "Morate biti u interijeru organizacije." );
			new id = inOrgInt[ playerid ], Float:Pos[ 3 ];

			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		    org_info[ id ][ oPozOrmX ] = Pos[ 0 ];
		    org_info[ id ][ oPozOrmY ] = Pos[ 1 ];
		    org_info[ id ][ oPozOrmZ ] = Pos[ 2 ];

		    if( IsValidDynamic3DTextLabel( OrgOrm3d[ id ] ) )
				DestroyDynamic3DTextLabel( OrgOrm3d[ id ] );

			if( IsValidDynamicPickup( OrgOrmPickup[ id ] ) )
				DestroyDynamicPickup( OrgOrmPickup[ id ] );

		    new stringfield[ 128 ];
		    format( stringfield, sizeof( stringfield ), ""col_white"Ormar organizacije /ormarorg\n"col_server"%s", org_info[ id ][ oName ] );
		    OrgOrm3d[ id ] = CreateDynamic3DTextLabel( stringfield, -1, org_info[ id ][ oPozOrmX ], org_info[ id ][ oPozOrmY ], org_info[ id ][ oPozOrmZ ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, org_info[ id ][ oVw ], org_info[ id ][ oInt ], -1, 20.0);
			OrgOrmPickup[ id ] = CreateDynamicPickup( 1275, 1, org_info[ id ][ oPozOrmX ], org_info[ id ][ oPozOrmY ], org_info[ id ][ oPozOrmZ ], org_info[ id ][ oVw ], org_info[ id ][ oInt ], -1, 20.0 );

            new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `orm_pos_x` = '%f', `orm_pos_y` = '%f', `orm_pos_z` = '%f' WHERE `org_id` = '%d' LIMIT 1",
				org_info[ id ][ oPozOrmX ],
				org_info[ id ][ oPozOrmY ],
				org_info[ id ][ oPozOrmZ ],
				org_info[ id ][ oID ] );
			mysql_pquery( _dbConnector, q, "", "" );

			SendInfoMessage( playerid, "Napravili ste ormar za orgu %s.", org_info[ id ][ oName ] );
        }
	}
	else if( dialogid == dialog_ORGRANKS ) {
	    if(listitem ==  0) {
	    	SPD( playerid, dialog_ORGRANK1, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 1 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	    if(listitem ==  1) {
	    	SPD( playerid, dialog_ORGRANK2, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 2 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	    if(listitem ==  2) {
	    	SPD( playerid, dialog_ORGRANK3, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 3 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	    if(listitem ==  3) {
	    	SPD( playerid, dialog_ORGRANK4, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 4 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	    if(listitem ==  4) {
	    	SPD( playerid, dialog_ORGRANK5, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 5 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	    if(listitem ==  5) {
	    	SPD( playerid, dialog_ORGRANK6, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 6 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGNAME && response ) {
        new id, ime[ ORG_IME ];
		if(sscanf( inputtext, "is[64]", id, ime ) ) return SPD( playerid, dialog_ORGNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime vase organizacije!", D_ODABERI, D_ODUSTANI);
		if( id < 1 || org_info[ id ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
		if( OrgKreiranje[ playerid ] == 0 ) {
			strmid( org_info[ id ][ oName ], ime, 0, strlen( ime ), ORG_IME);
			Orge3D( id );

			new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `name` = '%e' WHERE `org_id` = '%d' LIMIT 1",
					org_info[ id ][ oName ],
					org_info[ id ][ oID ] );
			mysql_pquery( _dbConnector, q, "", "" );

			SendInfoMessage( playerid, "Promenili ste ime organizacije ( ID: %d ) u %s!", id, ime );

			if( org_info[ id ][ oEntFromBussines ] != -1 ) {
				Bussines_Refresh( org_info[ id ][ oEntFromBussines ] );
			}
		}
	}
	else if( dialogid == dialog_ORGSPAWNP && response ) {

        new id, Float:Pos[ 3 ];
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_ORGSPAWNP, DSI, D_NASLOV, "Unesite id zeljenje organizacije koja ce se spawnati na mjestu gde stojite!", D_ODABERI, D_ODUSTANI );
		if( id < 1 || org_info[ id ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
		if( inOrgInt[ playerid ] != id ) return SendErrorMessage( playerid, "Morate biti u interijeru izabrane organizacije." );

		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

		org_info[ id ][ oSpawnPoint_X ] = Pos[ 0 ];
		org_info[ id ][ oSpawnPoint_Y ] = Pos[ 1 ];
		org_info[ id ][ oSpawnPoint_Z ] = Pos[ 2 ];

		new q[ 256 ];
		mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `spawn_point_x` = '%f', `spawn_point_y` = '%f', `spawn_point_z` = '%f' WHERE `org_id` = '%d' LIMIT 1",
				org_info[ id ][ oSpawnPoint_X ],
				org_info[ id ][ oSpawnPoint_Y ],
				org_info[ id ][ oSpawnPoint_Z ],
				org_info[ id ][ oID ] );
		mysql_pquery( _dbConnector, q, "", "" );

		SendInfoMessage( playerid, "Promenili ste spawn point organizacije(ID: %d )!", id );
	}
	else if( dialogid == dialog_ORGDUTYP && response ) {
        new id, Float:Pos[ 3 ];
		if( sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_ORGDUTYP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite duty point.", D_ODABERI, D_ODUSTANI );
        if( id < 1 || org_info[ id ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
		if( org_info[ id ][ oTip ] != ORG_TIP_PD ) return SendErrorMessage( playerid, "Samo organizacije tipa PD/SWAT/FBI." );
		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		org_info[ id ][ oDutyPoint ][ 0 ] = Pos[ 0 ];
		org_info[ id ][ oDutyPoint ][ 1 ] = Pos[ 1 ];
		org_info[ id ][ oDutyPoint ][ 2 ] = Pos[ 2 ];
		org_info[ id ][ oDutyInt ] = GetPlayerInterior( playerid );
        org_info[ id ][ oDutyVW ] = GetPlayerVirtualWorld( playerid );

		if( IsValidDynamic3DTextLabel( OrgDuty3D[ id ] ) )
		    DestroyDynamic3DTextLabel( OrgDuty3D[ id ] );

		if( IsValidDynamicPickup( DutyPointPickup[ id ] ) )
			DestroyDynamicPickup( DutyPointPickup[ id ] );

		OrgDuty3D[ id ] = CreateDynamic3DTextLabel( ""col_server"[ /undercover ]", -1, org_info[ id ][ oDutyPoint ][ 0 ], org_info[ id ][ oDutyPoint ][ 1 ], org_info[ id ][ oDutyPoint ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, org_info[ id ][ oDutyVW ], org_info[ id ][ oDutyInt ], -1, 20.0);
		DutyPointPickup[ id ] = CreateDynamicPickup( 1581, 1, org_info[ id ][ oDutyPoint ][ 0 ], org_info[ id ][ oDutyPoint ][ 1 ], org_info[ id ][ oDutyPoint ][ 2 ], org_info[ id ][ oDutyVW ], org_info[ id ][ oDutyInt ], -1, 20.0 );

		new q[ 256 ];
		mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `duty_point_pos_x` = '%f', `duty_point_pos_y` = '%f', `duty_point_pos_z` = '%f', `duty_point_int` = '%d', `duty_point_vw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
			org_info[ id ][ oDutyPoint ][ 0 ],
			org_info[ id ][ oDutyPoint ][ 1 ],
			org_info[ id ][ oDutyPoint ][ 2 ],
			org_info[ id ][ oDutyInt ],
			org_info[ id ][ oDutyVW ],
			org_info[ id ][ oID ] );
		mysql_pquery( _dbConnector, q, "", "" );

		SendInfoMessage( playerid, "Kreirali ste duty point za organizaciju (ID: %d )!", id );
	}
	else if( dialogid == dialog_ORGEQUIPP && response ) {
        new id, Float:Pos[ 3 ];
		if(sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_ORGEQUIPP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite equipment point.", D_ODABERI, D_ODUSTANI );
        if( id < 1 || org_info[ id ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );
		if( org_info[ id ][ oTip ] != ORG_TIP_PD ) return SendErrorMessage( playerid, "Samo organizacije tipa PD/SWAT/FBI." );
		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

		org_info[ id ][ oEquipPoint ][ 0 ] = Pos[ 0 ];
		org_info[ id ][ oEquipPoint ][ 1 ] = Pos[ 1 ];
		org_info[ id ][ oEquipPoint ][ 2 ] = Pos[ 2 ];
		org_info[ id ][ oEquipInt ] = GetPlayerInterior( playerid );
        org_info[ id ][ oEquipVW ] = GetPlayerVirtualWorld( playerid );

		if( IsValidDynamic3DTextLabel( OrgEquip3D[ id ] ) )
		    DestroyDynamic3DTextLabel( OrgEquip3D[ id ] );

		if( IsValidDynamicPickup( EquipPointPickup[ id ] ) )
			DestroyDynamicPickup( EquipPointPickup[ id ] );

		OrgEquip3D[ id ] = CreateDynamic3DTextLabel( ""col_white"Da otvorite meni oruzja kucajte\n"col_server"| Lijevi ALT ili /eq |", -1, org_info[ id ][ oEquipPoint ][ 0 ], org_info[ id ][ oEquipPoint ][ 1 ], org_info[ id ][ oEquipPoint ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, org_info[ id ][ oEquipVW ], org_info[ id ][ oEquipInt ], -1, 20.0);
		EquipPointPickup[ id ] = CreateDynamicPickup( 2061, 1, org_info[ id ][ oEquipPoint ][ 0 ], org_info[ id ][ oEquipPoint ][ 1 ], org_info[ id ][ oEquipPoint ][ 2 ], org_info[ id ][ oEquipVW ], org_info[ id ][ oEquipInt ], -1, 20.0 );

		new q[ 256 ];
		mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `equip_point_pos_x` = '%f', `equip_point_pos_y` = '%f', `equip_point_pos_z` = '%f', `equip_point_int` = '%d', `equip_point_vw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
			org_info[ id ][ oEquipPoint ][ 0 ],
			org_info[ id ][ oEquipPoint ][ 1 ],
			org_info[ id ][ oEquipPoint ][ 2 ],
			org_info[ id ][ oEquipInt ],
			org_info[ id ][ oEquipVW ],
			org_info[ id ][ oID ] );
		mysql_pquery( _dbConnector, q, "", "" );

		SendInfoMessage( playerid, "Kreirali ste equipment point za organizaciju (ID: %d )!", id );
	}
	else if( dialogid == dialog_ORGPORTP && response ) {
        new id, Float:Pos[ 3 ], int1, vw1, Float:x, Float:y, Float:z;
		if( sscanf( inputtext, "ifffii", id, x, y, z, int1, vw1 ) ) return SPD( playerid, dialog_ORGPORTP, DSI, D_NASLOV, "Unesti ID orge, pozicije, int i virtual world gde ce se portati as ovog mjesta\n\nPrimer: 12 2323.123 756.341 12.24 2 3.", D_ODABERI, D_ODUSTANI );
        if( id < 1 || org_info[ id ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

		new portid = -1;
		for( new j = 0; j < 30; j++ ) {
			if( org_ports_info[ j ][ o_p_baseID ] == 0 ) {
			    portid = j;
			    break;
			}
		}
		if( portid == -1 ) return SendErrorMessage( playerid, "Vec ima kreiranih 30 org portova za organizacije." );

        org_ports_info[ portid ][ o_p_baseID ] = 0;
        org_ports_info[ portid ][ o_p_baseOrgID ] = org_info[ id ][ oID ];
        org_ports_info[ portid ][ o_p_orgID ] = id;

		org_ports_info[ portid ][ o_p_pos1_X ] = Pos[ 0 ];
		org_ports_info[ portid ][ o_p_pos1_Y ] = Pos[ 1 ];
		org_ports_info[ portid ][ o_p_pos1_Z ] = Pos[ 2 ];
		org_ports_info[ portid ][ o_p_int_1 ] = GetPlayerInterior( playerid );
		org_ports_info[ portid ][ o_p_vw_1 ] = GetPlayerVirtualWorld( playerid );

		org_ports_info[ portid ][ o_p_pos2_X ] = x;
		org_ports_info[ portid ][ o_p_pos2_Y ] = y;
		org_ports_info[ portid ][ o_p_pos2_Z ] = z;
		org_ports_info[ portid ][ o_p_int_2 ] = int1;
		org_ports_info[ portid ][ o_p_vw_2 ] = vw1;

		org_ports_info[ portid ][ o_p_pickup_1 ] = CreateDynamicPickup( 19605, 1, org_ports_info[ portid ][ o_p_pos1_X ], org_ports_info[ portid ][ o_p_pos1_Y ], org_ports_info[ portid ][ o_p_pos1_Z ], org_ports_info[ portid ][ o_p_vw_1 ], org_ports_info[ portid ][ o_p_int_1 ], -1, 20.0 );
        org_ports_info[ portid ][ o_p_pickup_2 ] = CreateDynamicPickup( 19605, 1, org_ports_info[ portid ][ o_p_pos2_X ], org_ports_info[ portid ][ o_p_pos2_Y ], org_ports_info[ portid ][ o_p_pos2_Z ], org_ports_info[ portid ][ o_p_vw_2 ], org_ports_info[ portid ][ o_p_int_2 ], -1, 20.0 );

        org_ports_info[ portid ][ o_p_3D_1 ] = CreateDynamic3DTextLabel( ""col_server"[ PORT POINT ]\n"col_white"Koristite 'ENTER'", -1, org_ports_info[ portid ][ o_p_pos1_X ], org_ports_info[ portid ][ o_p_pos1_Y ], org_ports_info[ portid ][ o_p_pos1_Z ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, org_ports_info[ portid ][ o_p_vw_1 ], org_ports_info[ portid ][ o_p_int_1 ], -1, 20.0);
		org_ports_info[ portid ][ o_p_3D_2 ] = CreateDynamic3DTextLabel( ""col_server"[ PORT POINT ]\n"col_white"Koristite 'ENTER'", -1, org_ports_info[ portid ][ o_p_pos2_X ], org_ports_info[ portid ][ o_p_pos2_Y ], org_ports_info[ portid ][ o_p_pos2_Z ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, org_ports_info[ portid ][ o_p_vw_2 ], org_ports_info[ portid ][ o_p_int_2 ], -1, 20.0);


        sql_create_portfororg( portid );
	}
	else if( dialogid == dialog_ORGDELETE && response ) {
	    new id;
	    if( !IsNumeric( inputtext ) ) return SendErrorMessage( playerid, "Unesi samo ID orge!" );
	    if( sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_ORGDELETE, DSI, D_NASLOV, "Unesite id organizacije koju zelite obrisati!", D_ODABERI, D_ODUSTANI );
        if( id < 1 || org_info[ id ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

		if( IsValidDynamic3DTextLabel( Org3D[ id ] ) )
			DestroyDynamic3DTextLabel( Org3D[ id ] );

    	if( IsValidDynamicPickup( OrgPickup[ id ] ) )
			DestroyDynamicPickup( OrgPickup[ id ] );

    	if( IsValidDynamic3DTextLabel( OrgSafe3d[ id ] ) )
			DestroyDynamic3DTextLabel( OrgSafe3d[ id ] );

		if( IsValidDynamicPickup( OrgSafePickup[ id ] ) )
			DestroyDynamicPickup( OrgSafePickup[ id ] );

		if( IsValidDynamic3DTextLabel( OrgField3d[ id ] ) )
			DestroyDynamic3DTextLabel( OrgField3d[ id ] );

		if( IsValidDynamicPickup( OrgFieldPickup[ id ] ) )
			DestroyDynamicPickup( OrgFieldPickup[ id ] );

        if( IsValidDynamic3DTextLabel( OrgEquip3D[ id ] ) )
		    DestroyDynamic3DTextLabel( OrgEquip3D[ id ] );

		if( IsValidDynamicPickup( EquipPointPickup[ id ] ) )
			DestroyDynamicPickup( EquipPointPickup[ id ] );

        if( IsValidDynamic3DTextLabel( OrgDuty3D[ id ] ) )
		    DestroyDynamic3DTextLabel( OrgDuty3D[ id ] );

		if( IsValidDynamicPickup( DutyPointPickup[ id ] ) )
			DestroyDynamicPickup( DutyPointPickup[ id ] );

		if( IsValidDynamic3DTextLabel( OrgOrm3d[ id ] ) )
			DestroyDynamic3DTextLabel( OrgOrm3d[ id ] );

		if( IsValidDynamicPickup( OrgOrmPickup[ id ] ) )
			DestroyDynamicPickup( OrgOrmPickup[ id ] );



        new query[ 128 ];
		mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `organizations` WHERE `org_id` = '%d'", org_info[ id ][ oID ] );
		mysql_pquery( _dbConnector, query, "", "" );

		if( org_info[ id ][ oTip ] == ORG_TIP_PD ) ServerInfo[ orgLawFactCounter ]--;
		else if( org_info[ id ][ oTip ] == ORG_TIP_BANDA ) ServerInfo[ orgGangCounter ]--;

    	org_info[ id ][ oID ] = 0;
		strmid( org_info[ id ][ oName ], "", 0, strlen( "" ), ORG_IME );
		strmid( org_info[ id ][ oPreFix ], "", 0, strlen( "" ), 10 );
		strmid( org_info[ id ][ oColor ], "", 0, strlen( "" ), 24 );

		org_info[ id ][ oTip ] = 0;
		org_info[ id ][ oSuspended ] = 0;
		org_info[ id ][ oMaxClanova ] = 0;
	    org_info[ id ][ oUbacenihClanova ] = 0;

	    org_info[ id ][ oSkin1 ] = 0;
		org_info[ id ][ oSkin2 ] = 0;
		org_info[ id ][ oSkin3 ] = 0;
		org_info[ id ][ oSkin4 ] = 0;
		org_info[ id ][ oSkin5 ] = 0;
		org_info[ id ][ oSkin6 ] = 0;

		org_info[ id ][ oZSkin1 ] = 0;
		org_info[ id ][ oZSkin2 ] = 0;
		org_info[ id ][ oZSkin3 ] = 0;
		org_info[ id ][ oZSkin4 ] = 0;
		org_info[ id ][ oZSkin5 ] = 0;
		org_info[ id ][ oZSkin6 ] = 0;


		strmid( org_info[ id ][ oRank1 ], "", 0, strlen( "" ), ORG_RANK );
		strmid( org_info[ id ][ oRank2 ], "", 0, strlen( "" ), ORG_RANK );
		strmid( org_info[ id ][ oRank3 ], "", 0, strlen( "" ), ORG_RANK );
		strmid( org_info[ id ][ oRank4 ], "", 0, strlen( "" ), ORG_RANK );
		strmid( org_info[ id ][ oRank5 ], "", 0, strlen( "" ), ORG_RANK );
		strmid( org_info[ id ][ oRank6 ], "", 0, strlen( "" ), ORG_RANK );

		org_info[ id ][ oPozExtX ] = 0;
		org_info[ id ][ oPozExtY ] = 0;
		org_info[ id ][ oPozExtZ ] = 0;

		org_info[ id ][ oPozIntX ] = 0;
		org_info[ id ][ oPozIntY ] = 0;
		org_info[ id ][ oPozIntZ ] = 0;

	    org_info[ id ][ oInt ] = 0;
		org_info[ id ][ oVw ] = 0;

		org_info[ id ][ oSpawnPoint_X ] = 0;
		org_info[ id ][ oSpawnPoint_Y ] = 0;
		org_info[ id ][ oSpawnPoint_Z ] = 0;

		org_info[ id ][ oDutyPoint ][ 0 ] = 0;
		org_info[ id ][ oDutyPoint ][ 1 ] = 0;
		org_info[ id ][ oDutyPoint ][ 2 ] = 0;
		org_info[ id ][ oDutyInt ] = 0;
		org_info[ id ][ oDutyVW ] = 0;
		org_info[ id ][ oEquipPoint ][ 0 ] = 0;
		org_info[ id ][ oEquipPoint ][ 1 ] = 0;
		org_info[ id ][ oEquipPoint ][ 2 ] = 0;
		org_info[ id ][ oEquipInt ] = 0;
		org_info[ id ][ oEquipVW ] = 0;

	    org_info[ id ][ oSavez ] = 0;
	    org_info[ id ][ oVehSlots ] = 0;
	    org_info[ id ][ oMaxVehSlots ] = 3;
	    org_info[ id ][ oVehColor ][ 0 ] = -1;
	    org_info[ id ][ oVehColor ][ 1 ] = -1;

		org_info[ id ][ oSafePos ][ 0 ] = 0;
		org_info[ id ][ oSafePos ][ 1 ] = 0;
		org_info[ id ][ oSafePos ][ 2 ] = 0;

		org_info[ id ][ oSafeMoney ] = 0;
		org_info[ id ][ oSafeDrugAmmount ][ 0 ] = 0;
		org_info[ id ][ oSafeDrugAmmount ][ 1 ] = 0;
		org_info[ id ][ oSafeDrugAmmount ][ 2 ] = 0;
		org_info[ id ][ oSafeDrugAmmount ][ 3 ] = 0;
		org_info[ id ][ oSafeMats ] = 0;
		org_info[ id ][ oEntFromBussines ] = -1;
		org_info[ id ][ oTagModelID ] = 18663;
		org_info[ id ][ oHQLocked ] = 0;
		org_info[ id ][ oSprayedTags ] = 0;
		org_info[ id ][ oEntVw ] = -1;
		org_info[ id ][ oEntInt ] = -1;

		org_info[ id ][ oPozOrmX ] = 0;
		org_info[ id ][ oPozOrmY ] = 0;
		org_info[ id ][ oPozOrmZ ] = 0;

		for( new i = 1; i < MAX_VEHICLES; i++ ) {
			if( VehicleInfo[ i ][ vUsage ] == ORGANIZACIJSKO_VOZILO && VehicleInfo[ i ][ vOrganization ] == id ) {
			    KGEyes_DestroyVehicle( i );
				sql_vehicles_delete( i );
				ResetVehicle( i );
			}
		}

		ServerInfo[ orgCounter ]--;

    	SendInfoMessage( playerid, "Uspjesno ste izbrisali organizaciju id %d, i njena vozila.", id );
	}
	else if( dialogid == dialog_FDELETE && response ) {

	    new id;
	    if( !IsNumeric( inputtext ) ) return SendErrorMessage( playerid, "Unesi samo ID firme!" );
	    if( sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_FDELETE, DSI, D_NASLOV, "Unesite id firme koju zelite obrisati!", D_ODABERI, D_ODUSTANI );
        if( BussinesInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

        if( IsValidDynamicPickup( FirmaPickup[ id ] ) )
			DestroyDynamicPickup( FirmaPickup[ id ] );

		if( IsValidDynamic3DTextLabel( FirmaLabel[ id ] ) )
			DestroyDynamic3DTextLabel( FirmaLabel[ id ] );

		new query[ 128 ];
		mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `bussines` WHERE `bussines_id` = '%d'", BussinesInfo[ id ][ b_ID ] );
		mysql_pquery( _dbConnector, query, "", "" );

		ServerInfo[ businessCounter ]--;

        BussinesInfo[ id ][ b_ID ] = 0;
		BussinesInfo[ id ][ bNeaktivnost ] = 0;
		BussinesInfo[ id ][ bFacture ] = 0;
		BussinesInfo[ id ][ bEnterX ] = 0;
		BussinesInfo[ id ][ bEnterY ] = 0;
		BussinesInfo[ id ][ bEnterZ ] = 0;
	 	BussinesInfo[ id ][ bLocked ] = 0;
		BussinesInfo[ id ][ bLevel ] = 0;
		BussinesInfo[ id ][ bJobID ] = 0;
		BussinesInfo[ id ][ bOwner_sqlID ] = 0;
		BussinesInfo[ id ][ bReket_sqlID ] = 0;

		BussinesInfo[ id ][ bInInt ] = 0;
		BussinesInfo[ id ][ bExitX ] = 0;
		BussinesInfo[ id ][ bExitY ] = 0;
		BussinesInfo[ id ][ bExitZ ] = 0;
		BussinesInfo[ id ][ bPrice ] = 0;
		strmid( BussinesInfo[ id ][ bName ], "", 0, strlen( "" ), 64);
		BussinesInfo[ id ][ bType ] = 0;
		BussinesInfo[ id ][ bInVW ] = 0;
		BussinesInfo[ id ][ bMoney ] = 0;
		BussinesInfo[ id ][ bInt ] = 0;
	    BussinesInfo[ id ][ bVW ] = 0;
	    strmid( BussinesInfo[ id ][ bOwner ], "", 0, strlen( "" ), 32);
	    strmid( BussinesInfo[ id ][ bReket ], "", 0, strlen( "" ), 32);

    	SendInfoMessage( playerid, "Uspjesno ste izbrisali firmu id %d", id );
	}
	else if( dialogid == dialog_IMDELETE && response ) {
	    new id;
	    if( !IsNumeric( inputtext ) ) return SendErrorMessage( playerid, "Unesi samo ID imovine!" );
	    if( sscanf( inputtext, "i", id ) ) return SPD( playerid, dialog_IMDELETE, DSI, D_NASLOV, "Unesite id imovine koju zelite obrisati!", D_ODABERI, D_ODUSTANI );
		if( II[ id ][ ibaseID ] == 0 ) return SendErrorMessage( playerid, "Ta imovina ne postoji u bazi podataka." );

    	new query[ 128 ];
		mysql_format( _dbConnector, query, sizeof( query ), "DELETE FROM `property` WHERE `propID` = '%d'", II[ id ][ ibaseID ] );
		mysql_pquery( _dbConnector, query, "", "" );

		II[ id ][ ibaseID ] = 0;
		II[ id ][ iExit_X ] = 0.0;
  		II[ id ][ iExit_Y ] = 0.0;
  		II[ id ][ iExit_Z ] = 0.0;
		II[ id ][ iEnter_X ] = 0.0;
		II[ id ][ iEnter_Y ] = 0.0;
	   	II[ id ][ iEnter_Z ] = 0.0;
	   	II[ id ][ iBuildingSqlID ] = 0;
	   	II[ id ][ iExtInt ] = 0;
	   	II[ id ][ iExtVW ] = 0;

		if( IsValidDynamicPickup( ImovinaPickup[ id ] ) )
			DestroyDynamicPickup( ImovinaPickup[ id ] );

		if( IsValidDynamic3DTextLabel( ImovinaLabel[ id ] ) )
			DestroyDynamic3DTextLabel( ImovinaLabel[ id ] );

		ServerInfo[ propCounter ]--;

    	SendInfoMessage( playerid, "Uspjesno ste obrisali imovinu id: %d.", id );
	}
	else if( dialogid == dialog_IMCREATE ) {
	    if( response ) {
			new vrsta;
	        if( sscanf( inputtext, "i", vrsta ) ) return SPD( playerid, dialog_IMCREATE, DSI, D_NASLOV, "Unesite vrstu kuce koju zelite.\nVrste: 1. Mala kuca 2. Srednja Kuca 3. Velika kuca 4. Vila!", D_ODABERI, D_NAZAD );
   			if( vrsta == MALA_KUCA ) {
			    sql_create_property( playerid, IMOVINA_KUCA, 5, MALA_KUCA );
			}
			else if( vrsta == SREDNJA_KUCA ) {
			    sql_create_property( playerid, IMOVINA_KUCA, 5, SREDNJA_KUCA );
			}
			else if( vrsta == VELIKA_KUCA ) {
			    sql_create_property( playerid, IMOVINA_KUCA, 5, VELIKA_KUCA );
			}
			else if( vrsta == VILA_KUCA ) {
			    sql_create_property( playerid, IMOVINA_KUCA, 5, VILA_KUCA );
			}
			else return SendErrorMessage( playerid, "Pogresna vrsta!" );
		}
		else { SPD( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nGameSage port\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nDrug Lab\nZgrada\nActor\nSpray Tag\nDealer\nRadar\nUlica", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_FCREATE ) {
	    if( response ) {
		    new vrsta, Float:PozX, Float:PozY, Float:PozZ, f_string[ 300 ];
			GetPlayerPos( playerid, PozX, PozY, PozZ );

			if( sscanf( inputtext, "i", vrsta ) ) {

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				strcat( DialogStrgEx, ""col_white"Unesite vrstu firme koju zelite.\n" );
				strcat( DialogStrgEx, "Vrste: 0. 24/7 1. Burg 2. Cluckin Bell 3. Binco 4. Firma bez ulaza 5. Zip 6. Victim 7. Suburban 8. Bar 9. Gym\n" );
	            strcat( DialogStrgEx, "10. Gun Shop 11. MRestoran 12. VRestoran 13. Pizza 14. Nocni klub 15. Disco 16. Electronic Shop 17. Trafika\n" );
				strcat( DialogStrgEx, "18. Firma za posao 19. Rent firma 20. Pumpa 21. Javna Kuca 22. Kladionica 23. Oglas 24. Telekom 25. PayNspay\n" );
				strcat( DialogStrgEx, "26. Komunalije 27. Vodovod 28. Elektrana 29. Lutrija 30. Casino 31. Neon Shop 32. Auto Skola 33. Namjestaj\n" );
				strcat( DialogStrgEx, "34. HotDog 35. Toplana 36. Sex Shop 37. Banka 38. Bilbordi" );

				SPD( playerid, dialog_FCREATE, DSI, D_NASLOV, DialogStrgEx, "U redu", "Nazad" );

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				return 1;
			}

            if( BussinesInfo[ (MAX_BUSSINES-1) ][ b_ID ] != 0 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj firmi." );
            if( vrsta == 33 ) return SendErrorMessage( playerid, "Izbaceno iz upotrebe." );
			if( vrsta < 0 || vrsta > 38 ) return SendErrorMessage( playerid, "Pogresna vrsta!" );

			for( new IDFirme = 1; IDFirme < MAX_BUSSINES; IDFirme++ ) {

				if( BussinesInfo[ IDFirme ][ b_ID ] == 0 ) {

                    BussinesInfo[ IDFirme ][ b_ID ] = -1;
		            BussinesInfo[ IDFirme ][ bNeaktivnost ] = 0;
		            BussinesInfo[ IDFirme ][ bFacture ] = 100;
		            BussinesInfo[ IDFirme ][ bOwnerOrg ] = -1;
				    BussinesInfo[ IDFirme ][ bEnterX ] = PozX;
				    BussinesInfo[ IDFirme ][ bEnterY ] = PozY;
			   		BussinesInfo[ IDFirme ][ bEnterZ ] = PozZ;
				    BussinesInfo[ IDFirme ][ bLocked ] = 0;
				    BussinesInfo[ IDFirme ][ bLevel ] = 5;
				    BussinesInfo[ IDFirme ][ bJobID ] = 0;
				    BussinesInfo[ IDFirme ][ bOwner_sqlID ] = 0;
				    BussinesInfo[ IDFirme ][ bReket_sqlID ] = 0;
					if( vrsta == 0 ) { // 24/7 Market
						BussinesInfo[ IDFirme ][ bInInt ] = 18;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 3569.8992;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 1980.4307;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 670.5250;
					    BussinesInfo[ IDFirme ][ bPrice ] = 500000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Prodavnica 24/7", 0, strlen( "Prodavnica 24/7" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_MARKET;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
					else if( vrsta == 1 ) { // Burg
						BussinesInfo[ IDFirme ][ bInInt ] = 10;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 363.1478;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -75.1698;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 1001.507812;
					    BussinesInfo[ IDFirme ][ bPrice ] = 350000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Burg", 0, strlen( "Burg" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_BURG;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			        else if( vrsta == 2 ) { // Clucking Bell
						BussinesInfo[ IDFirme ][ bInInt ] = 9;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 365.0046;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -11.8387;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 1001.8516;
					    BussinesInfo[ IDFirme ][ bPrice ] = 350000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Cluckin Bell", 0, strlen( "Cluckin Bell" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_CLUCK;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			        else if( vrsta == 3 ) { // Binco
						BussinesInfo[ IDFirme ][ bInInt ] = 15;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 207.7204;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -110.5464;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 1005.132812;
					    BussinesInfo[ IDFirme ][ bPrice ] = 450000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Binco", 0, strlen( "Binco" ), 128);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_BINCO;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
					else if( vrsta == 4 ) { // Bez ulaza firme
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 152364;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Promjeni Ime!", 0, strlen( "Promjeni Ime!" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_JFIRMA;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			        else if( vrsta == 5 ) { // Zip
						BussinesInfo[ IDFirme ][ bInInt ] = 18;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 161.410293;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -96.687202;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 1001.804687;
					    BussinesInfo[ IDFirme ][ bPrice ] = 450000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Zip", 0, strlen( "Zip" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_ZIP;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			        else if( vrsta == 6 ) { // Victim
						BussinesInfo[ IDFirme ][ bInInt ] = 5;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 227.342803;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -8.243800;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 1002.210876;
					    BussinesInfo[ IDFirme ][ bPrice ] = 450000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Victim", 0, strlen( "Victim" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_VICTIM;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			        else if( vrsta == 7 ) { // Suburban
						BussinesInfo[ IDFirme ][ bInInt ] = 1;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 203.895294;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -50.656700;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 1001.804687;
					    BussinesInfo[ IDFirme ][ bPrice ] = 450000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Suburban", 0, strlen( "Suburban" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_SUBURBAN;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			        else if( vrsta == 8 ) { // Bar
						BussinesInfo[ IDFirme ][ bInInt ] = 11;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 501.870788;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -67.582000;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 998.757812;
					    BussinesInfo[ IDFirme ][ bPrice ] = 150000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Bar", 0, strlen( "Bar" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_BAR;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			        else if( vrsta == 9 ) { // Gym
						BussinesInfo[ IDFirme ][ bInInt ] = 5;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 772.359375;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -5.515697;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 1000.728576;
					    BussinesInfo[ IDFirme ][ bPrice ] = 250000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Gym", 0, strlen( "Gym" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_GYM;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			        else if( vrsta == 10 ) { // Gun Shop
			            BussinesInfo[ IDFirme ][ bLevel ] = 10;
						BussinesInfo[ IDFirme ][ bInInt ] = 7;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 1243.1302;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -1314.4570;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 1006.0000;
					    BussinesInfo[ IDFirme ][ bPrice ] = 1000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Gun Shop", 0, strlen( "Gun Shop" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_GUNSHOP;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			        else if( vrsta == 11 ) { // MRestoran
						BussinesInfo[ IDFirme ][ bInInt ] = 4;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 460.265411;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -88.611503;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 999.554687;
					    BussinesInfo[ IDFirme ][ bPrice ] = 300000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Mali Restoran", 0, strlen( "Mali Restoran" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_RESTORAN;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			        else if( vrsta == 12 ) { // VRestoran
						BussinesInfo[ IDFirme ][ bInInt ] = 1;
			    		BussinesInfo[ IDFirme ][ bExitX ] = -794.850280;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 489.279693;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 1376.195312;
					    BussinesInfo[ IDFirme ][ bPrice ] = 350000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Veliki Restoran", 0, strlen( "Veliki Restoran" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_RESTORAN;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
					else if( vrsta == 13 ) { // Pizza
						BussinesInfo[ IDFirme ][ bInInt ] = 5;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 372.2682;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -133.5108;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 1001.4922;
					    BussinesInfo[ IDFirme ][ bPrice ] = 750000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Well stacked pizza", 0, strlen( "Well stacked pizza" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_PIZZA;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			        else if( vrsta == 14 ) { // Nocni klub
						BussinesInfo[ IDFirme ][ bInInt ] = 3;
			    		BussinesInfo[ IDFirme ][ bExitX ] = -2636.5781;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 1402.7936;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 906.4609;
					    BussinesInfo[ IDFirme ][ bPrice ] = 200000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Nocni klub", 0, strlen( "Nocni klub" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_NKLUB;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
					else if( vrsta == 15 ) { // Diskoteka
						BussinesInfo[ IDFirme ][ bInInt ] = 17;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 493.439300;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -24.916900;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 1000.671875;
					    BussinesInfo[ IDFirme ][ bPrice ] = 200000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Diskoteka", 0, strlen( "Diskoteka" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_DISCO;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			        else if( vrsta == 16 ) { // Electronic Shop
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 1031.7322;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 2662.5669;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = -46.5000;
					    BussinesInfo[ IDFirme ][ bPrice ] = 550000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Electronic Shop", 0, strlen( "Electronic Shop" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_ELEKTRONIK;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
		            else if( vrsta == 17 ) { // Trafika
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 200000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Trafika", 0, strlen( "Trafika" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_TRAFIKA;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
					}
					else if( vrsta == 18 ) { // Firma za posao
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 5000000;
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_POSAO;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;

					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

					    for( new i = 0; i < MAX_JOBS; i++ ) {
					        format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, i+1, jobsInfos[ i ][ jName ] );
						}

						SPD( playerid, dialog_CREATEJOBBUSSINES, DSL, "Izaberi posao:", DialogStrgEx, D_ODABERI, D_ODUSTANI );
					    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					}
					else if( vrsta == 19 ) { // Rent
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 400000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Rent a vehicle", 0, strlen( "Rent a vehicle" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_RENT;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
					}
					else if( vrsta == 20 ) { // Pumpa
						BussinesInfo[ IDFirme ][ bInInt ] = 6;
			    		BussinesInfo[ IDFirme ][ bExitX ] = -27.3661;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -58.0692;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 1003.5469;
					    BussinesInfo[ IDFirme ][ bPrice ] = 750000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Pumpa", 0, strlen( "Pumpa" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_PUMPA;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
					}
					else if( vrsta == 21 ) { // Javna Kuca
						BussinesInfo[ IDFirme ][ bInInt ] = 6;
			    		BussinesInfo[ IDFirme ][ bExitX ] = -2385.0266;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 999.6372;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = -20.5350;
					    BussinesInfo[ IDFirme ][ bPrice ] = 2000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Nocni Klub", 0, strlen( "Nocni Klub" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_JAVNAK;
					    BussinesInfo[ IDFirme ][ bInVW ] = 0;
					}
					else if( vrsta == 22 ) { // Kladionica
						BussinesInfo[ IDFirme ][ bInInt ] = 6;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 1630.8949;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -1176.3444;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 1025.5842;
					    BussinesInfo[ IDFirme ][ bPrice ] = 2000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Kladionica", 0, strlen( "Kladionica" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_KLAD;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
					}
					else if( vrsta == 23 ) { // Oglas
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 10000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Oglas", 0, strlen( "Oglas" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_OGLAS;
					    BussinesInfo[ IDFirme ][ bInVW ] = 0;
					}
					else if( vrsta == 24 ) { // Telekom
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 10000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Telekom", 0, strlen( "Telekom" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_TELEKOM;
					    BussinesInfo[ IDFirme ][ bInVW ] = 0;
					}
					else if( vrsta == 25 ) { // Pay 'n' Spray
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 10000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Pay 'n' Spray", 0, strlen( "Pay 'n' Spray" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_PAYSPRAY;
					    BussinesInfo[ IDFirme ][ bInVW ] = 0;
					}
					else if( vrsta == 26 ) { // Komunalije
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 10000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Komunalije", 0, strlen( "Komunalije" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_KOMUNALIJE;
					    BussinesInfo[ IDFirme ][ bInVW ] = 0;
					}
					else if( vrsta == 27 ) { // Vodovod
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 10000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Vodovod", 0, strlen( "Vodovod" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_VODOVOD;
					    BussinesInfo[ IDFirme ][ bInVW ] = 0;
					}
					else if( vrsta == 28 ) { // Elektrana
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 10000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Elektrana", 0, strlen( "Elektrana" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_ELEKTRANA;
					    BussinesInfo[ IDFirme ][ bInVW ] = 0;
					}
					else if( vrsta == 29 ) { // Lutrija
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 10000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Lutrija", 0, strlen( "Lutrija" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_LUTRIJA;
					    BussinesInfo[ IDFirme ][ bInVW ] = 0;
					}
					else if( vrsta == 30 ) { // Casino t
						BussinesInfo[ IDFirme ][ bInInt ] = 3;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 1141.8010;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -50.7018;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 996.5208;
					    BussinesInfo[ IDFirme ][ bPrice ] = 2000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Casino", 0, strlen( "Casino" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_CASINO;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
					}
					else if( vrsta == 31 ) { // Neon Shop
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 750000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Neon Shop", 0, strlen( "Neon Shop" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_NEON;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
					}
					else if( vrsta == 32 ) { // Auto Skola
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 750000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Auto Skola", 0, strlen( "Auto Skola" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_AUTOSK;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
					}
					else if( vrsta == 33 ) { // Namestaj
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 750000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Namestaj", 0, strlen( "Namestaj" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_NAMESTAJ;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
					}
                    else if( vrsta == 34 ) { // HotDog
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 1000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "HotDog", 0, strlen( "HotDog" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_HOTDOG;
					    BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
					}
					else if( vrsta == 35 ) { // Toplana
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 5000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Toplana", 0, strlen( "Toplana" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_TOPLANA;
					    BussinesInfo[ IDFirme ][ bInVW ] = 0;
					}
					else if( vrsta == 36 ) { // Sex Shop
						BussinesInfo[ IDFirme ][ bInInt ] = 3;
			    		BussinesInfo[ IDFirme ][ bExitX ] = -100.3448;
			    		BussinesInfo[ IDFirme ][ bExitY ] = -24.8577;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 1000.7188;
					    BussinesInfo[ IDFirme ][ bPrice ] = 5000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Sex Shop", 0, strlen( "Sex Shop" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_SEXSHOP;
					    BussinesInfo[ IDFirme ][ bInVW ] = 0;
					}
					else if( vrsta == 37 ) { // Banka
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 5000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Banka", 0, strlen( "Banka" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_BANKA;
					    BussinesInfo[ IDFirme ][ bInVW ] = 0;
					}
					else if( vrsta == 38 ) { // Bilbord
						BussinesInfo[ IDFirme ][ bInInt ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitX ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitY ] = 0;
			    		BussinesInfo[ IDFirme ][ bExitZ ] = 0;
					    BussinesInfo[ IDFirme ][ bPrice ] = 5000000;
						strmid( BussinesInfo[ IDFirme ][ bName ], "Bilbordi", 0, strlen( "Bilbordi" ), 64);
					    BussinesInfo[ IDFirme ][ bType ] = VRSTA_BILBORD;
					    BussinesInfo[ IDFirme ][ bInVW ] = 0;
					}
				    BussinesInfo[ IDFirme ][ bMoney ] = 0;
				    BussinesInfo[ IDFirme ][ bInt ] = GetPlayerInterior( playerid );
			        BussinesInfo[ IDFirme ][ bVW ] = GetPlayerVirtualWorld( playerid );
			        strmid( BussinesInfo[ IDFirme ][ bOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
			        strmid( BussinesInfo[ IDFirme ][ bReket ], "Drzava", 0, strlen( "Drzava" ), 32);

			        format( f_string, sizeof( f_string), "{00ffff}Firma na prodaju "col_white"[ID %d]{00ffff}\n{00ffff}Ime : "col_white"%s\n{00ffff}Cijena Firme : "col_white"%d$\n{00ffff}Vrsta Firme : "col_white"%s\n{00ffff}Potreban level: "col_white"%d\n{00ffff}Adresa Firme: "col_white"%s\n{00ffff}Za kupovinu upisite\n"col_zenolo"/kupifirmu", IDFirme, BussinesInfo[ IDFirme ][ bName ], BussinesInfo[ IDFirme ][ bPrice ], getBussinesType( IDFirme ), BussinesInfo[ IDFirme ][ bLevel ], UliceFirme( IDFirme ) );
					FirmaLabel[ IDFirme ] = CreateDynamic3DTextLabel( f_string, 0x33CCFFAA, PozX, PozY, PozZ, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
					FirmaPickup[ IDFirme ] = CreateDynamicPickup( 19135, 1, PozX, PozY, PozZ ); Bussines_Refresh( IDFirme );
					SendInfoMessage( playerid, "Uspjesno si kreirao firmu." );

					sql_create_bussines( IDFirme );
					break;
				}
			}
		}
		else { SPD( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nGameSage port\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nDrug Lab\nZgrada\nActor\nSpray Tag\nDealer\nRadar\nUlica", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_CREATEJOBBUSSINES  ) {

	    if( !response ) return 1;
	    if( response ) {

	        new jobid = (listitem+1), IDFirme = GetNearestBussines( playerid ), stringic[ 64 ];

			if( jobid < 1 || jobid > MAX_JOBS || jobid == 7 || jobsInfos[ jobid-1 ][ jIsIllegal ] ) {

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				for( new i = 0; i < MAX_JOBS; i++ ) {
			    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, i+1, jobsInfos[ i ][ jName ] );
				}

				SPD( playerid, dialog_CREATEJOBBUSSINES, DSL, "Izaberi posao:", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				SendErrorMessage( playerid, "Posao ID: 7 i ilegalni poslovi nemaju sistem za poslovne firme." );

				return 1;
			}

			format( stringic, sizeof( stringic ), "Firma - %s", getJobName( jobid ) );
            strmid( BussinesInfo[ IDFirme ][ bName ], stringic, 0, strlen( stringic ), 64);
            BussinesInfo[ IDFirme ][ bJobID ] = jobid;

            new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `bussines` SET `b_name` = '%e', `b_jobID` = '%d' WHERE `bussines_id` = '%d'", BussinesInfo[ IDFirme ][ bName ], BussinesInfo[ IDFirme ][ bJobID ], BussinesInfo[ IDFirme ][ b_ID ] );
		    mysql_pquery( _dbConnector, q, "", "");

			Bussines_Refresh( IDFirme );
		}
	}
	else if( dialogid == dialog_ORGCREATE  ) {
	    if( response ) {
		    new ime[ ORG_IME ], Float:PozX, Float:PozY, Float:PozZ;
		    GetPlayerPos( playerid, PozX, PozY, PozZ );
		    if(sscanf( inputtext, "s[64]", ime ) ) return SPD( playerid, dialog_ORGCREATE, DSI, D_NASLOV, "Unesite zeljeno ime vase organizacije!", D_ODABERI, D_NAZAD);

            new orga = 0;
			for( new j = 1; j < MAX_ORG; j++ ) {
				if( org_info[ j ][ oID ] == -1 ) {
				    orga = j;
				    break;
				}
			}
			if( orga != 0 ) return SendErrorMessage( playerid, "Vec je jedna organizacija u procesu kreiranja, nije dovrsena, sacekajte(sigurnost baze)." );

            if( org_info[ (MAX_ORG-1) ][ oID ] != 0 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj organizacija." );
			for( new id = 1; id < MAX_ORG; id++ ) {

				if( org_info[ id ][ oID ] == 0 ) {

		            strmid(org_info[ id ][ oName ], ime, 0, strlen(ime), ORG_IME);
					org_info[ id ][ oID ] = -1;

                    for( new i = 0; i < MAX_ORG_MEMBERS_LIDERS; i++ ) {

                        org_members_info[ id ][ i ][ o_m_type ] = 0;
                        strmid( org_members_info[ id ][ i ][ o_m_Name ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
                        org_members_info[ id ][ i ][ o_m_sqlID ] = 0;
                        org_members_info[ id ][ i ][ o_m_join_date ] = 0;

                    }

                    org_info[ id ][ oUbacenihClanova ] = 0;

		   			org_info[ id ][ oPozExtX ] = PozX;
				    org_info[ id ][ oPozExtY ] = PozY;
					org_info[ id ][ oPozExtZ ] = PozZ;

                    org_info[ id ][ oSpawnPoint_X ] = PozX;
					org_info[ id ][ oSpawnPoint_Y ] = PozY;
					org_info[ id ][ oSpawnPoint_Z ] = PozZ;

                    org_info[ id ][ oSavez ] = -1;
                    org_info[ id ][ oVehSlots ] = 0;
                    org_info[ id ][ oMaxVehSlots ] = 3;
	    			org_info[ id ][ oVehColor ][ 0 ] = -1;
	    			org_info[ id ][ oVehColor ][ 1 ] = -1;
                    org_info[ id ][ oEntVw ] = -1;
					org_info[ id ][ oEntInt ] = -1;
					org_info[ id ][ oEntFromBussines ] = -1;
					org_info[ id ][ oTagModelID ] = 18663;
					org_info[ id ][ oHQLocked ] = 1;
					org_info[ id ][ oSprayedTags ] = 0;

					OrgKreiranje[ playerid ] = id;

					new string[ 256 ];
					format( string, sizeof( string ),""col_white"%s\n{FF6200}Za ulaz u interijer pritisnite\n"col_white"'ENTER'", org_info[ id ][ oName ] );

                    Org3D[ id ] = CreateDynamic3DTextLabel( string, -1, org_info[ id ][ oPozExtX ], org_info[ id ][ oPozExtY ], org_info[ id ][ oPozExtZ ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, org_info[ id ][ oEntVw ], org_info[ id ][ oEntInt ], -1, 25.0);
					OrgPickup[ id ] = CreateDynamicPickup(19605, 1, org_info[ id ][ oPozExtX ], org_info[ id ][ oPozExtY ], org_info[ id ][ oPozExtZ ], org_info[ id ][ oEntVw ], org_info[ id ][ oEntInt ] );

					SPD( playerid, dialog_ORGPREFIX, DSI, D_NASLOV, "Unesite skracenicu organizacije. Primer: LSPD", D_ODABERI, D_ODUSTANI );
					break;
				}
			}
		}
		else { SPD( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nGameSage port\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking\nDrug Lab\nZgrada\nActor\nSpray Tag\nDealer\nRadar\nUlica", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_ORGPREFIX && response ) {
	    new id = GetNearestOrganization( playerid );
	    new prefix[ 10 ];
	    if( sscanf( inputtext, "s[10]", prefix ) ) return SPD( playerid, dialog_ORGPREFIX, DSI, D_NASLOV, "Unesite skracenicu organizacije. Primer: LSPD", D_ODABERI, D_ODUSTANI );
	    if( OrgKreiranje[ playerid ] == 0 ) {
	        strmid( org_info[ id ][ oPreFix ], prefix, 0, strlen( prefix ), 10 );

	        new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `prefix` = '%e' WHERE `org_id` = '%d' LIMIT 1",
					org_info[ id ][ oPreFix ],
					org_info[ id ][ oID ] );
			mysql_pquery( _dbConnector, q, "", "" );

	        SendInfoMessage( playerid, "Uspjesno ste promjenili prefix organizacije!" );
		}
		else {
		    strmid( org_info[ id ][ oPreFix ], prefix, 0, strlen( prefix ), 10 );

		    SPD( playerid, dialog_ORGINT1, DSL, D_NASLOV, "Default Interior\nUnesi sam kordinate\nInterior bande\nInterior mafije\nInterior novinara\nInterior bolnice", D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_ORGINT1 && response ) {
	    new id = GetNearestOrganization( playerid );
		if( listitem ==  0 ) {
	        if( OrgKreiranje[ playerid ] == 0 ) {
	            org_info[ id ][ oPozIntX ] = 246.7840;
			 	org_info[ id ][ oPozIntY ] = 63.9002;
			 	org_info[ id ][ oPozIntZ ] = 1003.6406;
	         	org_info[ id ][ oInt ] = 6;
	         	org_info[ id ][ oVw ] = id;

                new q[ 256 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `exit_pos_x` = '%f', `exit_pos_y` = '%f', `exit_pos_z` = '%f', `interior` = '%d', `virtualw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
					org_info[ id ][ oPozIntX ],
					org_info[ id ][ oPozIntY ],
					org_info[ id ][ oPozIntZ ],
					org_info[ id ][ oInt ],
					org_info[ id ][ oVw ],
					org_info[ id ][ oID ] );
				mysql_pquery( _dbConnector, q, "", "" );

				SendInfoMessage( playerid, "Uspjesno ste stavili default interior!" ); }
			else {
		        org_info[ id ][ oPozIntX ] = 246.7840;
			 	org_info[ id ][ oPozIntY ] = 63.9002;
			 	org_info[ id ][ oPozIntZ ] = 1003.6406;
	         	org_info[ id ][ oInt ] = 6;
	         	org_info[ id ][ oVw ] = id;

	         	SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti\nTip: Parking Servis\nTip: Cartel", D_ODABERI, D_ODUSTANI );
			}
		}
	    if( listitem ==  1 ) {
	        SPD( playerid, dialog_ORGINT2, DSI, D_NASLOV, "Unesi id interiora i kordinate interiora\n Primer: 6 246.7840 63.9002 1003.6406", D_ODABERI, D_ODUSTANI );
		}
		if( listitem ==  2 ) {
	        if( OrgKreiranje[ playerid ] == 0 ) {
	            org_info[ id ][ oPozIntX ] = 312.2877;
			 	org_info[ id ][ oPozIntY ] = 1486.0435;
			 	org_info[ id ][ oPozIntZ ] = -16.5524;
	         	org_info[ id ][ oInt ] = 6;
	         	org_info[ id ][ oVw ] = id;

                new q[ 256 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `exit_pos_x` = '%f', `exit_pos_y` = '%f', `exit_pos_z` = '%f', `interior` = '%d', `virtualw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
					org_info[ id ][ oPozIntX ],
					org_info[ id ][ oPozIntY ],
					org_info[ id ][ oPozIntZ ],
					org_info[ id ][ oInt ],
					org_info[ id ][ oVw ],
					org_info[ id ][ oID ] );
				mysql_pquery( _dbConnector, q, "", "" );
				SendInfoMessage( playerid, "Uspjesno ste stavili banda interior!" );
	 		}
			else {
		        org_info[ id ][ oPozIntX ] = 312.2877;
			 	org_info[ id ][ oPozIntY ] = 1486.0435;
			 	org_info[ id ][ oPozIntZ ] = -16.5524;
	         	org_info[ id ][ oInt ] = 6;
	         	org_info[ id ][ oVw ] = id;

	         	SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti\nTip: Parking Servis\nTip: Cartel", D_ODABERI, D_ODUSTANI );
			}
		 }
		if( listitem ==  3 ) {
	        if( OrgKreiranje[ playerid ] == 0 ) {
	            org_info[ id ][ oPozIntX ] = 228.0137;
			 	org_info[ id ][ oPozIntY ] = 1009.8492;
			 	org_info[ id ][ oPozIntZ ] = 1079.6399;
	         	org_info[ id ][ oInt ] = 6;
	         	org_info[ id ][ oVw ] = id;

                new q[ 256 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `exit_pos_x` = '%f', `exit_pos_y` = '%f', `exit_pos_z` = '%f', `interior` = '%d', `virtualw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
					org_info[ id ][ oPozIntX ],
					org_info[ id ][ oPozIntY ],
					org_info[ id ][ oPozIntZ ],
					org_info[ id ][ oInt ],
					org_info[ id ][ oVw ],
					org_info[ id ][ oID ] );
				mysql_pquery( _dbConnector, q, "", "" );

				SendInfoMessage( playerid, "Uspjesno ste stavili mafija interior!" );
	 		}
			else {
		        org_info[ id ][ oPozIntX ] = 228.0137;
			 	org_info[ id ][ oPozIntY ] = 1009.8492;
			 	org_info[ id ][ oPozIntZ ] = 1079.6399;
	         	org_info[ id ][ oInt ] = 6;
	         	org_info[ id ][ oVw ] = id;

	         	SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti\nTip: Parking Servis\nTip: Cartel", D_ODABERI, D_ODUSTANI );
			}
		}
		if( listitem ==  4 ) {
	        if( OrgKreiranje[ playerid ] == 0 ) {
	            org_info[ id ][ oPozIntX ] = 800.8161;
			 	org_info[ id ][ oPozIntY ] = -1328.6963;
			 	org_info[ id ][ oPozIntZ ] = 710.3300;
	         	org_info[ id ][ oInt ] = 3;
	         	org_info[ id ][ oVw ] = id;

                new q[ 256 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `exit_pos_x` = '%f', `exit_pos_y` = '%f', `exit_pos_z` = '%f', `interior` = '%d', `virtualw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
					org_info[ id ][ oPozIntX ],
					org_info[ id ][ oPozIntY ],
					org_info[ id ][ oPozIntZ ],
					org_info[ id ][ oInt ],
					org_info[ id ][ oVw ],
					org_info[ id ][ oID ] );
				mysql_pquery( _dbConnector, q, "", "" );

				SendInfoMessage( playerid, "Uspjesno ste stavili hitman interior!" );
	 		}
			else {
		        org_info[ id ][ oPozIntX ] = 800.8161;
			 	org_info[ id ][ oPozIntY ] = -1328.6963;
			 	org_info[ id ][ oPozIntZ ] = 710.3300;
	         	org_info[ id ][ oInt ] = 3;
	         	org_info[ id ][ oVw ] = id;

	         	SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti\nTip: Parking Servis\nTip: Cartel", D_ODABERI, D_ODUSTANI );
			}
		}
		if( listitem == 5 ) {
	        if( OrgKreiranje[ playerid ] == 0 ) {
	            org_info[ id ][ oPozIntX ] = -1305.8743;
			 	org_info[ id ][ oPozIntY ] = -40.1036;
			 	org_info[ id ][ oPozIntZ ] = 1501.0859;
	         	org_info[ id ][ oInt ] = 3;
	         	org_info[ id ][ oVw ] = id;

                new q[ 256 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `exit_pos_x` = '%f', `exit_pos_y` = '%f', `exit_pos_z` = '%f', `interior` = '%d', `virtualw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
					org_info[ id ][ oPozIntX ],
					org_info[ id ][ oPozIntY ],
					org_info[ id ][ oPozIntZ ],
					org_info[ id ][ oInt ],
					org_info[ id ][ oVw ],
					org_info[ id ][ oID ] );
				mysql_pquery( _dbConnector, q, "", "" );

				SendInfoMessage( playerid, "Uspjesno ste stavili interior!" );
	 		}
			else {
		        org_info[ id ][ oPozIntX ] = -1305.8743;
			 	org_info[ id ][ oPozIntY ] = -40.1036;
			 	org_info[ id ][ oPozIntZ ] = 1501.0859;
	         	org_info[ id ][ oInt ] = 3;
	         	org_info[ id ][ oVw ] = id;

	         	SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti\nTip: Parking Servis\nTip: Cartel", D_ODABERI, D_ODUSTANI );
			}
		}
		/*if( listitem == 6 ) {
	        if( OrgKreiranje[ playerid ] == 0 ) {
	            org_info[ id ][ oPozIntX ] = -2330.1714;
			 	org_info[ id ][ oPozIntY ] = 111.5213;
			 	org_info[ id ][ oPozIntZ ] = -5.3942;
	         	org_info[ id ][ oInt ] = 3;
	         	org_info[ id ][ oVw ] = id;

                new q[ 256 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `exit_pos_x` = '%f', `exit_pos_y` = '%f', `exit_pos_z` = '%f', `interior` = '%d', `virtualw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
					org_info[ id ][ oPozIntX ],
					org_info[ id ][ oPozIntY ],
					org_info[ id ][ oPozIntZ ],
					org_info[ id ][ oInt ],
					org_info[ id ][ oVw ],
					org_info[ id ][ oID ] );
				mysql_pquery( _dbConnector, q, "", "" );

				SendInfoMessage( playerid, "Uspjesno ste stavili interior bolnice!" );
	 		}
			else {
		        org_info[ id ][ oPozIntX ] = -2330.1714;
			 	org_info[ id ][ oPozIntY ] = 111.5213;
			 	org_info[ id ][ oPozIntZ ] = -5.3942;
	         	org_info[ id ][ oInt ] = 3;
	         	org_info[ id ][ oVw ] = id;

	         	SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti\nTip: Parking Servis\nTip: Cartel", D_ODABERI, D_ODUSTANI );
			}
		}
		if( listitem == 7 ) {
	        if( OrgKreiranje[ playerid ] == 0 ) {
	            org_info[ id ][ oPozIntX ] = 929.7870;
			 	org_info[ id ][ oPozIntY ] = -1022.8786;
			 	org_info[ id ][ oPozIntZ ] = -49.3566;
	         	org_info[ id ][ oInt ] = 3;
	         	org_info[ id ][ oVw ] = id;

                new q[ 256 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `exit_pos_x` = '%f', `exit_pos_y` = '%f', `exit_pos_z` = '%f', `interior` = '%d', `virtualw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
					org_info[ id ][ oPozIntX ],
					org_info[ id ][ oPozIntY ],
					org_info[ id ][ oPozIntZ ],
					org_info[ id ][ oInt ],
					org_info[ id ][ oVw ],
					org_info[ id ][ oID ] );
				mysql_pquery( _dbConnector, q, "", "" );

				SendInfoMessage( playerid, "Uspjesno ste stavili interior novinara!" );
	 		}
			else {
		        org_info[ id ][ oPozIntX ] = 929.7870;
			 	org_info[ id ][ oPozIntY ] = -1022.8786;
			 	org_info[ id ][ oPozIntZ ] = -49.3566;
	         	org_info[ id ][ oInt ] = 3;
	         	org_info[ id ][ oVw ] = id;

	         	SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti\nTip: Parking Servis\nTip: Cartel", D_ODABERI, D_ODUSTANI );
			}
		}*/
	}
	else if( dialogid == dialog_ORGINT2 && response) {
	    new id = GetNearestOrganization( playerid );
	    new Float:Poz[ 3 ];
	    new intid;
		if( sscanf( inputtext, "ifff", intid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] ) ) return SPD( playerid, dialog_ORGINT2, DSI, D_NASLOV, "Unesi id interiora i kordinate interiora\n Primer: 6 246.7840 63.9002 1003.6406", D_ODABERI, D_ODUSTANI );
	    if( OrgKreiranje[ playerid ] == 0 ) {
	    	org_info[ id ][ oPozIntX ] = Poz[ 0 ];
		 	org_info[ id ][ oPozIntY ] = Poz[ 1 ];
		 	org_info[ id ][ oPozIntZ ] = Poz[ 2 ];
	   		org_info[ id ][ oInt ] = intid;
	   		org_info[ id ][ oVw ] = id;

            new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `exit_pos_x` = '%f', `exit_pos_y` = '%f', `exit_pos_z` = '%f', `interior` = '%d', `virtualw` = '%d' WHERE `org_id` = '%d' LIMIT 1",
				org_info[ id ][ oPozIntX ],
				org_info[ id ][ oPozIntY ],
				org_info[ id ][ oPozIntZ ],
				org_info[ id ][ oInt ],
				org_info[ id ][ oVw ],
				org_info[ id ][ oID ] );
			mysql_pquery( _dbConnector, q, "", "" );

			SCM( playerid, CRVENA, "Uspjesno ste promjenili interior!" );
		}
		else {
			org_info[ id ][ oPozIntX ] = Poz[ 0 ];
		 	org_info[ id ][ oPozIntY ] = Poz[ 1 ];
		 	org_info[ id ][ oPozIntZ ] = Poz[ 2 ];
	   		org_info[ id ][ oInt ] = intid;
	   		org_info[ id ][ oVw ] = id;

		    SPD( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: PD/FBI/CIA\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti\nTip: Parking Servis\nTip: Cartel", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGTIP && response) {
	    new id = GetNearestOrganization( playerid );
	    if( OrgKreiranje[ playerid ] == 0 ) {
			if(listitem ==  0) {
				org_info[ id ][ oTip ] = ORG_TIP_PD;
	        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
	        	SendInfoMessage( playerid, "Tip : PD/FBI/CIA" ); }
			if(listitem ==  1) {
				org_info[ id][ oTip ] = ORG_TIP_BANDA;
	        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
	        	SendInfoMessage( playerid, "Tip : Banda" ); }
			if(listitem ==  2) {
				org_info[ id ][ oTip ] = ORG_TIP_MAFIJA;
	        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
	        	SendInfoMessage( playerid, "Tip : Mafija" ); }
            if(listitem ==  3) {
				org_info[ id ][ oTip ] = ORG_TIP_MC;
	        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
	        	SendInfoMessage( playerid, "Tip : Bajkeri" ); }
	        if(listitem ==  4) {
				org_info[ id ][ oTip ] = ORG_TIP_SR;
	        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
	        	SendInfoMessage( playerid, "Tip : Street Raceri" ); }
            if(listitem ==  5) {
				org_info[ id ][ oTip ] = ORG_TIP_MD;
	        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
	        	SendInfoMessage( playerid, "Tip : Bolnicari" ); }
            if(listitem ==  6) {
				org_info[ id ][ oTip ] = ORG_TIP_CNN;
	        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
	        	SendInfoMessage( playerid, "Tip : Novinari" ); }
	        if(listitem == 7 ) {
				org_info[ id ][ oTip ] = ORG_TIP_HITM;
	        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
	        	SendInfoMessage( playerid, "Tip : Hitmani" ); }
	        if( listitem == 8 ) {
				org_info[ id ][ oTip ] = ORG_TIP_ELEK;
	        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
	        	SendInfoMessage( playerid, "Tip : Elektricar" );
			}
			if( listitem == 9 ) {
				org_info[ id ][ oTip ] = ORG_TIP_TAXI;
	        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
	        	SendInfoMessage( playerid, "Tip : Taksisti" );
			}
			if( listitem == 10 ) {
				org_info[ id ][ oTip ] = ORG_TIP_PS;
	        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
	        	SendInfoMessage( playerid, "Tip : Parking Servis" );
			}
			if( listitem == 11 ) {
				org_info[ id ][ oTip ] = ORG_TIP_CARTEL;
	        	sql_organization_update_integer( id, "type", org_info[ id ][ oTip ] );
	        	SendInfoMessage( playerid, "Tip : Cartel" );
			}
		}
		else {
		    if(listitem ==  0) {
				org_info[ id ][ oTip ] = ORG_TIP_PD;

	        	SendInfoMessage( playerid, "Tip : PD/FBI/CIA" ); }
			if(listitem ==  1) {
				org_info[ id][ oTip ] = ORG_TIP_BANDA;

	        	SendInfoMessage( playerid, "Tip : Banda" ); }
			if(listitem ==  2) {
				org_info[ id ][ oTip ] = ORG_TIP_MAFIJA;

	        	SendInfoMessage( playerid, "Tip : Mafija" ); }
            if(listitem ==  3) {
				org_info[ id ][ oTip ] = ORG_TIP_MC;

	        	SendInfoMessage( playerid, "Tip : Bajkeri" ); }
	        if(listitem ==  4) {
				org_info[ id ][ oTip ] = ORG_TIP_SR;

	        	SendInfoMessage( playerid, "Tip : Street Raceri" ); }
            if(listitem ==  5) {
				org_info[ id ][ oTip ] = ORG_TIP_MD;

	        	SendInfoMessage( playerid, "Tip : Bolnicari" ); }
            if(listitem ==  6) {
				org_info[ id ][ oTip ] = ORG_TIP_CNN;

	        	SendInfoMessage( playerid, "Tip : Novinari" ); }
            if(listitem ==  7) {
				org_info[ id ][ oTip ] = ORG_TIP_HITM;

	        	SendInfoMessage( playerid, "Tip : Hitmani" ); }
            if( listitem ==  8 ) {
				org_info[ id ][ oTip ] = ORG_TIP_ELEK;

	        	SendInfoMessage( playerid, "Tip : Elektricar" );
			}
			if( listitem == 9 ) {
				org_info[ id ][ oTip ] = ORG_TIP_TAXI;

	        	SendInfoMessage( playerid, "Tip : Taksisti" );
			}
			if( listitem == 10 ) {
				org_info[ id ][ oTip ] = ORG_TIP_PS;

	        	SendInfoMessage( playerid, "Tip : Parking Servis" );
			}
			if( listitem == 11 ) {
				org_info[ id ][ oTip ] = ORG_TIP_CARTEL;

	        	SendInfoMessage( playerid, "Tip : Cartel" );
			}

			SPD( playerid, dialog_ORGRANK1, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 1 ove organizacije.", D_ODABERI, D_ODUSTANI );
		}
		return 1;
	}
	else if( dialogid == dialog_ORGRANK1 ) {
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return SPD( playerid, dialog_ORGRANK1, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 1 ove organizacije.", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
			strmid( org_info[ id ][ oRank1 ], ime, 0, strlen(ime), ORG_RANK);
			sql_organization_update_string( id, "rank_1", org_info[ id ][ oRank1 ] );
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", org_info[ id ][ oRank1 ] ); }
		else {
		    strmid( org_info[ id ][ oRank1 ], ime, 0, strlen(ime), ORG_RANK);

			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", org_info[ id ][ oRank1 ] );
			SPD( playerid, dialog_ORGRANK2, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 2 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGRANK2) {
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return SPD( playerid, dialog_ORGRANK2, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 2 ove organizacije.", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
			strmid( org_info[ id ][ oRank2 ], ime, 0, strlen(ime), ORG_RANK);
			sql_organization_update_string( id, "rank_2", org_info[ id ][ oRank2 ] );
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", org_info[ id ][ oRank2 ] ); }
		else {
			strmid( org_info[ id ][ oRank2 ], ime, 0, strlen(ime), ORG_RANK);

			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", org_info[ id ][ oRank2 ] );
			SPD( playerid, dialog_ORGRANK3, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 3 ove organizacije.", D_ODABERI, D_ODUSTANI); }
	}
	else if( dialogid == dialog_ORGRANK3) {
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return SPD( playerid, dialog_ORGRANK3, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 3 ove organizacije.", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
            strmid(org_info[ id ][ oRank3 ], ime, 0, strlen(ime), ORG_RANK);
			sql_organization_update_string( id, "rank_3", org_info[ id ][ oRank3 ] );
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", org_info[ id ][ oRank3 ] ); }
		else {
			strmid(org_info[ id ][ oRank3 ], ime, 0, strlen(ime), ORG_RANK);

			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", org_info[ id ][ oRank3 ] );
			SPD( playerid, dialog_ORGRANK4, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 4 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGRANK4) {
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return SPD( playerid, dialog_ORGRANK4, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 4 ove organizacije.", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
            strmid( org_info[ id][ oRank4 ], ime, 0, strlen(ime), ORG_RANK);
			sql_organization_update_string( id, "rank_4", org_info[ id ][ oRank4 ] );
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", org_info[ id ][ oRank4 ] ); }
		else {
			strmid( org_info[ id][ oRank4 ], ime, 0, strlen(ime), ORG_RANK);

			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", org_info[ id ][ oRank4 ] );
			SPD( playerid, dialog_ORGRANK5, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 5 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGRANK5) {
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return SPD( playerid, dialog_ORGRANK5, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 5 ove organizacije.", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
        	strmid( org_info[ id ][ oRank5 ], ime, 0, strlen(ime), ORG_RANK);
			sql_organization_update_string( id, "rank_5", org_info[ id ][ oRank5 ] );
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", org_info[ id ][ oRank5 ] ); }
		else {
			strmid( org_info[ id ][ oRank5 ], ime, 0, strlen(ime), ORG_RANK);

			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", org_info[ id ][ oRank5 ] );
			SPD( playerid, dialog_ORGRANK6, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 6 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGRANK6) {
	    new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if( sscanf( inputtext, "s[64]", ime ) ) return SPD( playerid, dialog_ORGRANK6, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 6 ove organizacije.", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
        	strmid( org_info[ id ][ oRank6 ], ime, 0, strlen(ime), ORG_RANK);
			sql_organization_update_string( id, "rank_6", org_info[ id ][ oRank6 ] );
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", org_info[ id ][ oRank6 ] ); }
		else {
			strmid( org_info[ id ][ oRank6 ], ime, 0, strlen(ime), ORG_RANK);

			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", org_info[ id ][ oRank6 ] );
			SPD( playerid, dialog_ORGSKINS, DSI, D_NASLOV, "Unesite id-ove muskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_ORGSKINS && response ) {
	    new id = GetNearestOrganization(playerid);
	    new rank1, rank2, rank3, rank4, rank5, rank6;
	    if(sscanf(inputtext, "iiiiii", rank1, rank2, rank3, rank4, rank5, rank6)) return SPD( playerid, dialog_ORGSKINS, DSI, D_NASLOV, "Unesite id-ove muskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
            org_info[ id ][ oSkin1 ] = rank1;
		    org_info[ id ][ oSkin2 ] = rank2;
		    org_info[ id ][ oSkin3 ] = rank3;
		    org_info[ id ][ oSkin4 ] = rank4;
		    org_info[ id ][ oSkin5 ] = rank5;
		    org_info[ id ][ oSkin6 ] = rank6;

		    new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `male_skin_1` = '%d', `male_skin_2` = '%d', `male_skin_3` = '%d',`male_skin_4` = '%d', `male_skin_5` = '%d', `male_skin_6` = '%d' WHERE `org_id` = '%d' LIMIT 1",
				org_info[ id ][ oSkin1 ],
				org_info[ id ][ oSkin2 ],
				org_info[ id ][ oSkin3 ],
				org_info[ id ][ oSkin4 ],
				org_info[ id ][ oSkin5 ],
				org_info[ id ][ oSkin6 ],
				org_info[ id ][ oID ] );
			mysql_pquery( _dbConnector, q, "", "" );

			SendInfoMessage( playerid, "Uspjesno ste promjenili id-ove muskih skinova za rankove!" );
			format( globalstring, sizeof( globalstring ), "| ORG SKINOVI | %s je promjenio muske skinove | Org ID: %d | Skinovi: %d %d %d %d %d %d", ImeIgraca( playerid ), id, rank1, rank2, rank3, rank4, rank5, rank6 );
			LogSave( "Ostalo/LogEdit.log", globalstring );
		}
        else {
			org_info[ id ][ oSkin1 ] = rank1;
		    org_info[ id ][ oSkin2 ] = rank2;
		    org_info[ id ][ oSkin3 ] = rank3;
		    org_info[ id ][ oSkin4 ] = rank4;
		    org_info[ id ][ oSkin5 ] = rank5;
		    org_info[ id ][ oSkin6 ] = rank6;

		    SendInfoMessage( playerid, "Uspjesno ste postavili id-ove muskih skinova za rankove!" );
		    SPD( playerid, dialog_ORGZSKINS, DSI, D_NASLOV, "Unesite id-ove zenskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_ORGZSKINS && response ) {
	    new id = GetNearestOrganization(playerid);
	    new rank1, rank2, rank3, rank4, rank5, rank6;
	    if(sscanf(inputtext, "iiiiii", rank1, rank2, rank3, rank4, rank5, rank6)) return SPD( playerid, dialog_ORGZSKINS, DSI, D_NASLOV, "Unesite id-ove zenskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
            org_info[ id ][ oZSkin1 ] = rank1;
		    org_info[ id ][ oZSkin2 ] = rank2;
		    org_info[ id ][ oZSkin3 ] = rank3;
		    org_info[ id ][ oZSkin4 ] = rank4;
		    org_info[ id ][ oZSkin5 ] = rank5;
		    org_info[ id ][ oZSkin6 ] = rank6;

		    new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `organizations` SET `female_skin_1` = '%d', `female_skin_2` = '%d', `female_skin_3` = '%d',`female_skin_4` = '%d', `female_skin_5` = '%d', `female_skin_6` = '%d' WHERE `org_id` = '%d' LIMIT 1",
				org_info[ id ][ oZSkin1 ],
				org_info[ id ][ oZSkin2 ],
				org_info[ id ][ oZSkin3 ],
				org_info[ id ][ oZSkin4 ],
				org_info[ id ][ oZSkin5 ],
				org_info[ id ][ oZSkin6 ],
				org_info[ id ][ oID ] );
			mysql_pquery( _dbConnector, q, "", "" );

			SendInfoMessage( playerid, "Uspjesno ste promjenili id-ove zenskih skinova za rankove!" );
			format( globalstring, sizeof( globalstring ), "| ORG SKINOVI | %s je promjenio zenske skinove | Org ID: %d | Skinovi: %d %d %d %d %d %d", ImeIgraca( playerid ), id, rank1, rank2, rank3, rank4, rank5, rank6 );
			LogSave( "Ostalo/LogEdit.log", globalstring );
		}
        else {
			org_info[ id ][ oZSkin1 ] = rank1;
		    org_info[ id ][ oZSkin2 ] = rank2;
		    org_info[ id ][ oZSkin3 ] = rank3;
		    org_info[ id ][ oZSkin4 ] = rank4;
		    org_info[ id ][ oZSkin5 ] = rank5;
		    org_info[ id ][ oZSkin6 ] = rank6;
		    SPD( playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-200)", D_ODABERI, D_ODUSTANI );

		    SendInfoMessage( playerid, "Uspjesno ste postavili id-ove zenskih skinova za rankove!" );
		}
	}
	else if( dialogid == dialog_ORGMAXMEMB && response ) {
	    new id = GetNearestOrganization( playerid ), maxmemb;
	    if( sscanf( inputtext, "i", maxmemb ) ) return SPD( playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-200)", D_ODABERI, D_ODUSTANI );
		if( maxmemb < 8 || maxmemb > 200 ) return SPD( playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-200)", D_ODABERI, D_ODUSTANI );
        if( OrgKreiranje[ playerid ] == 0 ) {
            SendInfoMessage( playerid, "Uspjesno ste postavili broj maksimalno clanova na %d!", maxmemb );
            org_info[ id ][ oMaxClanova ] = maxmemb;
            sql_organization_update_integer( id, "max_members", org_info[ id ][ oMaxClanova ] );
        }
        else {
			org_info[ id ][ oMaxClanova ] = maxmemb;

	        SendInfoMessage( playerid, "Uspjesno ste postavili broj maksimalno clanova na %d!", maxmemb );

	        SPD( playerid, dialog_ORGBENTRANCE, DSI, D_NASLOV, "Ako je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", D_ODABERI, D_ODUSTANI );
        }
	}
	else if( dialogid == dialog_ORGVEHCOLOR && response ) {
	    new id = GetNearestOrganization( playerid ), idboje1, idboje2;
	    if( sscanf( inputtext, "ii", idboje1, idboje2 ) ) return SPD( playerid, dialog_ORGVEHCOLOR, DSI, D_NASLOV, "Unesite ID boje1 i ID boje2\nBoja1 je uglavno primarna boja.\nBoje vozila mozete pogledati ovde: http://wiki.sa-mp.com/wiki/Vehicle_Color_IDs\n\nPrimer: 1 3", D_ODABERI, D_ODUSTANI );
		if( idboje1 < 0 || idboje1 > 255 || idboje2 < 0 || idboje2 > 255 ) return SPD( playerid, dialog_ORGVEHCOLOR, DSI, D_NASLOV, "ERROR: ID boje ne moze ici ispod 0 ili iznad 255.\n\nUnesite ID boje1 i ID boje2\nBoja1 je uglavno primarna boja.\nBoje vozila mozete pogledati ovde: http://wiki.sa-mp.com/wiki/Vehicle_Color_IDs\n\nPrimer: 1 3", D_ODABERI, D_ODUSTANI );

		org_info[ id ][ oVehColor ][ 0 ] = idboje1;
	    org_info[ id ][ oVehColor ][ 1 ] = idboje2;

		SendInfoMessage( playerid, "Uspjesno ste postavili boje vozila za organizaciju.Boja1: %d | Boja2: %d!", idboje1, idboje2 );

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `organizations` SET `vehcolor_1` = '%d', `vehcolor_2` = '%d' WHERE `org_id` = '%d'",
			org_info[ id ][ oVehColor ][ 0 ],
			org_info[ id ][ oVehColor ][ 1 ], org_info[ id ][ oID ] );
	    mysql_pquery( _dbConnector, sql_str, "", "" );
	}
	else if( dialogid == dialog_ORGBENTRANCE && response ) {
	    new id = GetNearestOrganization( playerid ), idfirme;
	    if( sscanf( inputtext, "i", idfirme ) ) return SPD( playerid, dialog_ORGBENTRANCE, DSI, D_NASLOV, "Ako je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", D_ODABERI, D_ODUSTANI );
		if( OrgKreiranje[ playerid ] == 0 ) {

            if( idfirme != -1 ) {

				if( idfirme < 1 ) return SPD( playerid, dialog_ORGBENTRANCE, DSI, D_NASLOV, "ERROR: Broj ne moze ispod 1.\nAko je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", D_ODABERI, D_ODUSTANI );

                if( BussinesInfo[ idfirme ][ b_ID ] == 0 ) return SPD( playerid, dialog_ORGBENTRANCE, DSI, D_NASLOV, "ERROR: Ta firma ne postoji u bazi podataka.\nAko je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", D_ODABERI, D_ODUSTANI );
                if( BussinesInfo[ idfirme ][ bOwner_sqlID ] != 0 ) return SPD( playerid, dialog_ORGBENTRANCE, DSI, D_NASLOV, "ERROR: Ova firma ima vlasnika ne mozes nju.\nAko je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", D_ODABERI, D_ODUSTANI );

                org_info[ id ][ oEntFromBussines ] = idfirme;

				org_info[ id ][ oEntInt ] = BussinesInfo[ idfirme ][ bInInt ];
			    org_info[ id ][ oEntVw ] = BussinesInfo[ idfirme ][ bInVW ];
			    Orge3D( id );

			    BussinesInfo[ idfirme ][ bOwnerOrg ] = id;
				Bussines_Refresh( idfirme );

			    SendInfoMessage( playerid, "Uspjesno ste postavili ulaz iz firme id %d!", idfirme );
			    sql_organization_update_integer( id, "ent_bussines", BussinesInfo[ org_info[ id ][ oEntFromBussines ] ][ b_ID ] );
			}
        }
        else {

            org_info[ id ][ oEntFromBussines ] = idfirme;

            if( idfirme != -1 ) {

            	if( idfirme < 1 ) return SPD( playerid, dialog_ORGBENTRANCE, DSI, D_NASLOV, "ERROR: Broj ne moze ispod 1.\nAko je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", D_ODABERI, D_ODUSTANI );

                if( BussinesInfo[ idfirme ][ b_ID ] == 0 ) return SPD( playerid, dialog_ORGBENTRANCE, DSI, D_NASLOV, "ERROR: Ta firma ne postoji u bazi podataka.\nAko je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", D_ODABERI, D_ODUSTANI );
                if( BussinesInfo[ idfirme ][ bOwner_sqlID ] != 0 ) return SPD( playerid, dialog_ORGBENTRANCE, DSI, D_NASLOV, "ERROR: Ova firma ima vlasnika ne mozes nju.\nAko je ulaz u organizaciju iz neke firme unesi ID firme.\nUkoliko nije unesi -1", D_ODABERI, D_ODUSTANI );

				org_info[ id ][ oEntInt ] = BussinesInfo[ idfirme ][ bInInt ];
			    org_info[ id ][ oEntVw ] = BussinesInfo[ idfirme ][ bInVW ];
			    Orge3D( id );

			    BussinesInfo[ idfirme ][ bOwnerOrg ] = id;
				Bussines_Refresh( idfirme );
			}

	        sql_create_organization( id );

	        SendInfoMessage( playerid, "Uspjesno ste postavili ulaz iz firme id %d!", idfirme );
	        SendInfoMessage( playerid, "Uspjesno ste zavrsili kreiranje organizacije." );
	        OrgKreiranje[ playerid ] = 0;
        }
	}
	else if( dialogid == dialog_ORG && response ) {
		switch( listitem ) {
		    case 0: {
		        new OrgID = PlayerInfo[ playerid ][ xClan ];

                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

                new string[ 128 ];
	         	format( string, sizeof( string ), ""col_white"Broj ubacenih clanova: "col_server"%d/%d\n\n", org_info[ OrgID ][ oUbacenihClanova ], org_info[ OrgID ][ oMaxClanova ] );
                strcat( DialogStrgEx, string );

                strcat( DialogStrgEx, ""col_server"[ ORG KAZNA ]\n"col_white"Ukoliko budete kikovani a nije proslo 10 sati kako ste u orgi dobijate 10 sati org kaznu.\nIsto ce se to desiti i ukoliko sami napustite a niste bili 10 sati.\n\n" );

                if( GetFactionType( playerid ) == ORG_TIP_PD ) {
                    strcat( DialogStrgEx, ""col_server"[ HAPSENJA I PLJACKE ]\n"col_white"Za svako ubistvo igraca sa wl dobijate "col_server"100$"col_white" po wlu, ako je wl>10 dobijate "col_server"2000$"col_white".\n" );
                    strcat( DialogStrgEx, "Ukoliko uhapsite igraca dobijate "col_server"400$"col_white" po wlu, ako je wl>10 dobijate "col_server"4000$"col_white".\n\n" );

                    strcat( DialogStrgEx, "Ukoliko ubijete igraca koji pljacka banku dobijate novac koji je opljackao u sef organizacije.\n" );
                    strcat( DialogStrgEx, "Isto tako i ako bilo koji policajac pokupi torbu koja je ispala, dobijate novac.\n\n" );
                }
                else if( GetFactionType( playerid ) == ORG_TIP_PS ) {
                    strcat( DialogStrgEx, "Za svako vozilo koje dovezete na parking dobijate "col_server"1000$"col_white", a u sef ide "col_server"4000$"col_white".\n\n" );
                    //strcat( DialogStrgEx, "Mozete popravljati i dopunjivati vozila gorivom. Komandom /proveriparking proveravate parkinge da li ima vozila za pauka.\n\n" );
                }
                else if( IsIllegalTypeOrg( playerid ) ) {

                    strcat( DialogStrgEx, ""col_server"[ ORUZJE ]\n"col_white"Svakih 15 minuta u hangar /gps > Hangar stizu oruzja.\n" );
					strcat( DialogStrgEx, "Da bi napravili oruzje od materijala potrebno je kucati /napravioruzje.\n\n" );
                    strcat( DialogStrgEx, ""col_server"[ DROGA ]\n"col_white"Da bi proizveli drogu kucajte /proizvodnjadroge\n" );
                    strcat( DialogStrgEx, ""col_server"[ GRAFITI ]\n"col_white"Grafiti se nalaze po cijeloj drzavi /grafiti, da bi ofarbali grafit treba vam spray iz ducana\n" );
                    strcat( DialogStrgEx, ""col_server"[ GRAFITI ]\n"col_white"Banda koja ima najvise grafita na serveru spawna se sa punim armorom\n" );
                    strcat( DialogStrgEx, ""col_server"[ PAKETI MATERIJALA ]\n"col_white"Materijali se spawnaju svakih pola sata info o njihovoj lokaciji dobijete putem sms poruke i /gps\n" );
                    strcat( DialogStrgEx, ""col_server"[ OTMICA HELP ]\n"col_white"Takoder mozete otimati ljude vise o tome na /otmicahelp\n" );


                    if( GetFactionType( playerid ) == ORG_TIP_SR ) {
                        strcat( DialogStrgEx, ""col_server"[ SISTEM UTRKA ]\n"col_white"Komande:\nUcitavanje utrke - "col_server"/utrkaucitaj"col_white".\nInvite igraca u utrku - "col_server"/utrkapozovi\n\
						"col_white"Pokretanje utrke - "col_server"/utrkastart\n"col_white"Unload ucitane utrke - "col_server"/utrkaunload" );
                        //strcat( DialogStrgEx, "Najvise 10 trka moze biti kreirano po organizaciji, a maximum 20 markera po trci.\n" );
                    }
                    else if( GetFactionType( playerid ) == ORG_TIP_CARTEL ) {

                    	if( GetFactionType( playerid ) == ORG_TIP_BANDA ) {
	                        strcat( DialogStrgEx, ""col_server"[ ORUZJE ]\n"col_white"Svakih 15 minuta u hangar /gps > Hangar stizu oruzja.\n" );
							strcat( DialogStrgEx, "Da bi napravili oruzje od materijala potrebno je kucati /napravioruzje.\n\n" );
                    		strcat( DialogStrgEx, ""col_server"[ DROGA ]\n"col_white"Da bi proizveli drogu kucajte /proizvodnjadroge\n" );
                    		strcat( DialogStrgEx, ""col_server"[ GRAFITI ]\n"col_white"Grafiti se nalaze po cijeloj drzavi /grafiti, da bi ofarbali grafit treba vam spray iz ducana\n" );
                    		strcat( DialogStrgEx, ""col_server"[ GRAFITI ]\n"col_white"Banda koja ima najvise grafita na serveru spawna se sa punim armorom\n" );
                    		strcat( DialogStrgEx, ""col_server"[ PAKETI MATERIJALA ]\n"col_white"Materijali se spawnaju svakih pola sata info o njihovoj lokaciji dobijete putem sms poruke i /gps\n" );
                    		strcat( DialogStrgEx, ""col_server"[ OTMICA HELP ]\n"col_white"Takoder mozete otimati ljude vise o tome na /otmicahelp\n" );
		         			format( globalstring, sizeof( globalstring ), ""col_white"Broj prefarbanih grafita: "col_server"%d/%d\n\n", org_info[ OrgID ][ oSprayedTags ], ServerInfo[ sprayTagsCounter ] );
	                        strcat( DialogStrgEx, globalstring );
	                    }

                        strcat( DialogStrgEx, "Svakih pola sata stize paket sa materijalima za oruzje /napravioruzje obavjestenje dobivate u SMS obliku na vise lokacija koje pisu na /gps > Paketi.\n" );


                    	strcat( DialogStrgEx, ""col_white"Da proverite statistiku u org dok ste u orgi "col_server"/orgstats"col_white".\n" );

                        strcat( DialogStrgEx, ""col_white"Za svaku teritoriju vasa orga dobija po "col_server"2.500$"col_white" svakog punog sata.\n" );
                        strcat( DialogStrgEx, "Zauzimanje je moguce od 09 ujutru do 01 ujutru, isto vazi i za dobijanje novca.\n" );
                        strcat( DialogStrgEx, "Zauzimanje pokrecete tako sto ubijate 3 cuvara u zoni ili kucate /zauzmiteritoriju, lokacije zona mozete naci na croherze.com\n" );

                    	strcat( DialogStrgEx, "Svercanjem sjemena dobijate 100 sjemena za 2.000$. Da bi od radnika dobili drogu na 1h, treba vam broj sjemena jednak levelu radnika.\n" );
                    	strcat( DialogStrgEx, "Uzimanjem sjemena iz laboratorije mozete saditi drogu.\n\n" );
                    }

                    else {
	                    strcat( DialogStrgEx, ""col_white"Lider i rank 4+ mogu tunirati vozila za organizacije, sve se cuva osim nitra i paintjoba.\n" );
                    }

                }

				format( string, sizeof( string ), "Tip organizacije: %s", getOrgTypeName( OrgID ) );
				SPD( playerid, 0, DSMSG, string, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		    }
		    case 1: {

                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				new OrgID = PlayerInfo[ playerid ][ xClan ], l_or_m[ 10 ], l_c = 0, m_c = 0;

				for( new i = 0; i < org_info[ OrgID ][ oMaxClanova ]+2; i++ ) {

                	if( org_members_info[ OrgID ][ i ][ o_m_type ] == 1 ) {
						l_or_m = "Lider"; l_c++;
						format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s %d: %s\n", DialogStrgEx, l_or_m, l_c, org_members_info[ OrgID ][ i ][ o_m_Name ] );
					}
            		else {
						l_or_m = "Clan"; m_c++;
						format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s %d: %s\n", DialogStrgEx, l_or_m, m_c, org_members_info[ OrgID ][ i ][ o_m_Name ] );
					}
				}

				SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
            }
		}
	}
	else if( dialogid == dialog_LIDER && response ) {
		switch( listitem ) {
		    case 0: {


		        new OrgID = PlayerInfo[ playerid ][ xLider ];

                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

                new string[ 128 ];
	         	format( string, sizeof( string ), ""col_white"Broj ubacenih clanova: "col_server"%d/%d\n\n", org_info[ OrgID ][ oUbacenihClanova ], org_info[ OrgID ][ oMaxClanova ] );
                strcat( DialogStrgEx, string );

                strcat( DialogStrgEx, ""col_white"Ukoliko kikujete igraca a nije bio 10 sati u org. Dobija 10 sati org kaznu.\nIsto ce se to desiti i ukoliko sam napusti a nije bio 10 sati.\n" );

                if( GetFactionType( playerid ) == ORG_TIP_PD ) {
                    strcat( DialogStrgEx, "Za svako ubojstvo igraca sa wl dobijate "col_server"200$"col_white" po wlu, ako je wl>10 dobijate "col_server"2000$"col_white".\n" );
                    strcat( DialogStrgEx, "Ukoliko uhapsite igraca dobijate "col_server"400$"col_white" po wlu, ako je wl>10 dobijate "col_server"4000$"col_white".\n" );

                    strcat( DialogStrgEx, "Ukoliko ubijete igraca koji pljacka banku dobijate novac koji je opljackao u sef organizacije.\n" );
                    format( globalstring, sizeof( globalstring ),  "Taj novac dijelite sa brojem "col_server"%d"col_white", zbog broja organizacija na serveru koje mogu da zaustave rob.\n", ServerInfo[ orgLawFactCounter ] );
                    strcat( DialogStrgEx, globalstring );
                    strcat( DialogStrgEx, "Isto tako i ako bilo koji policajac pokupi torbu koja je ispala, dobijate novac.\n\n" );

                }
                else if( GetFactionType( playerid ) == ORG_TIP_PS ) {
                    strcat( DialogStrgEx, "Za svako vozilo koje dovezete na parking dobijate "col_server"1000$"col_white", a u sef ide "col_server"4000$"col_white".\n\n" );
                    //strcat( DialogStrgEx, "Mozete popravljati i dopunjivati vozila gorivom. Komandom /proveriparking proveravate parkinge da li ima vozila za pauka.\n\n" );
                }
                else if( IsIllegalTypeOrg( playerid ) ) {

                    strcat( DialogStrgEx, "Svakih 15 minuta u hangar /gps > Hangar stizu oruzja.\n" );

                    strcat( DialogStrgEx, "Da bi napravili oruzje od materijala kucajte /napravioruzje.\n" );
                    strcat( DialogStrgEx, "Da bi svercali drogu ili materijale morate biti u nekom od ovih vozila:: Patriotu, Boxville, Burrito, Pony, Moonbeam, Benson.\n" );


                    if( GetFactionType( playerid ) == ORG_TIP_SR ) {
                        strcat( DialogStrgEx, "Sistem trka koje kreira lider i clanovi kojima dozvoli lider, komanda "col_server"/race"col_white".\n" );
                        strcat( DialogStrgEx, "Najvise 10 trka moze biti kreirano po organizaciji, a maximum 20 markera po trci.\n\n" );
                    }
                    else {

                    	if( GetFactionType( playerid ) == ORG_TIP_BANDA ) {
	                    	strcat( DialogStrgEx, ""col_server"[ GRAFITI ]\n "col_white"Banda koja ima najvise grafita na serveru spawna se sa punim armorom.\n" );
		         			format( globalstring, sizeof( globalstring ), ""col_white"Broj prefarbanih grafita: "col_server"%d/%d\n\n", org_info[ OrgID ][ oSprayedTags ], ServerInfo[ sprayTagsCounter ] );
	                        strcat( DialogStrgEx, globalstring );
	                  	}

						strcat( DialogStrgEx, ""col_white"Da proverite statistiku clana vase orge dok je u vasoj orgi "col_server"/gangstats "col_white"& "col_server"/offgangstats\n" );

                        strcat( DialogStrgEx, ""col_white"Za svaku teritoriju vasa organizacija dobija po "col_server"1.000$"col_white" svakog punog sata.\n" );
                        strcat( DialogStrgEx, "Zauzimanje je moguce od 09 ujutru do 01 ujutru, isto vazi i za dobijanje novca.\n" );
                        strcat( DialogStrgEx, "Zauzimanje pokrecete tako sto ubijate 3 cuvara u zoni ili kucate /zauzmiteritoriju, lokacije zona mozete naci na croherze.com.\n" );

                     	strcat( DialogStrgEx, "Svakih pola sata stize paket sa materijalima za oruzje /napravioruzje obavjestenje dobivate u SMS obliku na vise lokacija koje pisu na /gps > Paketi.\n" );


                    	strcat( DialogStrgEx, "Kao vlasnik laboratorije imate komandu "col_server"/druglab"col_white" kojom mozete da upravljate laboratorijem droge.\n" );
                    	strcat( DialogStrgEx, "Svakih sat vremena vam od jednog radnika dolazi onoliko grama koliki level je level radnika.\n" );
                    	strcat( DialogStrgEx, "Svercanjem sjemena dobijate 100 sjemena za 2.000$. Da bi od radnika dobili drogu na 1h, treba vam broj sjemena jednak levelu radnika.\n" );
                    	strcat( DialogStrgEx, "Svercanjem sjemena omogucujete clanovima da pored radnika i oni mogu da sade drogu.\n" );
                    	strcat( DialogStrgEx, "Zauzimanjem dilera /gps > Diler dobijate sljedece:\n" );
					    strcat( DialogStrgEx, "Kada igrac kupuje drogu od vaseg dilera, kolicina droga iz laboratorije mu je prikazana.\n" );
					    strcat( DialogStrgEx, "Sve sto igrac kupi se skida u laboratoriji a novac dobijate u organizaciji.\n" );
						strcat( DialogStrgEx, "Kada zauzmete dilera vas je sigurnih 4h.\n" );
						strcat( DialogStrgEx, "Ukoliko je zauzimanje neuspesno ne moze da se zauzima 2h taj diler, a vi ne mozete 30 minuta\n." );
                    }

                  
                }

				strcat( DialogStrgEx, ""col_server"[ VOZILA ] | /orgvhelp"col_white" - Info & komande vezane za organizacijska vozila.\n" );

				format( string, sizeof( string ), "Tip organizacije: %s", getOrgTypeName( OrgID ) );
				SPD( playerid, 0, DSMSG, string, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		    }
	 		case 1: {
	 			SPD( playerid, dialog_UBACIUORG, DSI, D_NASLOV, "Unesite id igraca kojeg zelite pozvati u vasu organizaciju", D_ODABERI, D_ODUSTANI); }
	 		case 2: {
	 			SPD( playerid, dialog_IZBACIIZORG, DSI, D_NASLOV, "Unesite id igraca kojeg zelite izbaciti iz vase organizacije", D_ODABERI, D_ODUSTANI); }
			case 3: {
	 			SPD( playerid, dialog_OFFIZBACIIZORG, DSI, D_NASLOV, "Unesite ime i prezime(Ime_Prezime) igraca kojeg zelite izbaciti iz vase organizacije", D_ODABERI, D_ODUSTANI); }
			case 4: {
	 			SPD( playerid, dialog_DODELIRANK, DSI, D_NASLOV, "Unesite id igraca i broj ranka koji zelite da date igracu", D_ODABERI, D_ODUSTANI); }
            case 5: {
	 			SPD( playerid, dialog_kazni_igraca, DSI, D_NASLOV, "Unesite id igraca kojeg zelite kazniti iz vase organizacije", D_ODABERI, D_ODUSTANI); }
			case 6 : {
				PlayerLiderPage[playerid] = 0;
				PlayerLiderMembers[playerid] = 0;
				PlayerLiderLiders[playerid] = 0;
				ShowMembersDialog(playerid, PlayerLiderPage[playerid], PlayerLiderMembers[playerid], PlayerLiderLiders[playerid]);
            }
            case 7: {

				if( GetFactionType( playerid ) == ORG_TIP_PD &&
					GetFactionType( playerid ) == ORG_TIP_MD &&
					GetFactionType( playerid ) == ORG_TIP_CNN &&
					GetFactionType( playerid ) == ORG_TIP_ELEK &&
					GetFactionType( playerid ) == ORG_TIP_TAXI ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju." );

		        new OrgID = PlayerInfo[ playerid ][ xLider ];
            	if( !org_info[ OrgID ][ oHQLocked ] ) {
            		org_info[ OrgID ][ oHQLocked ] = 1;
            		sql_organization_update_integer( OrgID, "hq_locked", org_info[ OrgID ][ oHQLocked ] );
            		SendInfoMessage( playerid, "Zakljucao si ulaz u HQ svoje organizacije." );
            	}
            	else {
            		org_info[ OrgID ][ oHQLocked ] = 0;
            		sql_organization_update_integer( OrgID, "hq_locked", org_info[ OrgID ][ oHQLocked ] );
            		SendInfoMessage( playerid, "Otkljucao si ulaz u HQ svoje organizacije." );
            	}
            }
			case 8: {
			    if( GetFactionType( playerid ) == ORG_TIP_PD && GetFactionType( playerid ) == ORG_TIP_MD && GetFactionType( playerid ) == ORG_TIP_CNN && GetFactionType( playerid ) == ORG_TIP_HITM && GetFactionType( playerid ) == ORG_TIP_ELEK && GetFactionType( playerid ) == ORG_TIP_TAXI ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu sekciju." );
			    SPD( playerid, dialog_WAR, DSL, D_NASLOV, "Zakazi War\nPozovi u War\nIzbaci iz Wara", D_ODABERI, D_ODUSTANI );
			}
			case 9: {
				if( ServerInfo[ RRVehicle ] == true  ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
				ServerInfo[ RRVehicle ] = true;
				SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 7 );
				format( globalstring, sizeof( globalstring ), ""col_server"| RESPAWN |"col_white" Lider %s je aktivirao respawn praznih organizacijskih vozila za 15 sekundi!", ImeIgraca( playerid ) );
				OrgPoruka( PlayerInfo[ playerid ][ xClan ], 0xFFC801C8, globalstring );
			}
			case 10: {
				SPD( playerid, dialog_ORGFIRMA, DSL, D_NASLOV, "Informacije\nPromeni Ime\nZakljucaj/Otkljucaj Firmu\nPodigni Novac\nOstavi Novac", D_ODABERI, D_ODUSTANI );
			}
		}
	}
   	else if( dialogid == dialog_orgListPages && !response ) {

		ShowMembersDialog(playerid, PlayerLiderPage[playerid], PlayerLiderMembers[playerid], PlayerLiderLiders[playerid]);

	}
	else if( dialogid == dialog_orgListPages_2 && !response ) {

		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		new OrgID = PlayerInfo[ playerid ][ xLider ], l_or_m[ 10 ], l_c = 0, m_c = 0, datetime[ 6 ];

		new page_size = org_info[ OrgID ][ oMaxClanova ];
		if( org_info[ OrgID ][ oMaxClanova ] > 31 ) page_size = 25;

		for( new i = 0; i < page_size+2; i++ ) {

			TimestampToDate( org_members_info[ OrgID ][ i ][ o_m_join_date ], datetime[ 0 ], datetime[ 1 ], datetime[ 2 ], datetime[ 3 ], datetime[ 4 ], datetime[ 5 ], 1 );

            if( org_members_info[ OrgID ][ i ][ o_m_type ] == 1 ) {
				l_or_m = "Lider"; l_c++;
				format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s %d: %s - Datum ulaska: "col_server"%02d/%02d/%d - %02d:%02d:%02d"col_white"\n", DialogStrgEx, l_or_m, l_c, org_members_info[ OrgID ][ i ][ o_m_Name ],  datetime[ 2 ], datetime[ 1 ], datetime[ 0 ], datetime[ 3 ], datetime[ 4 ], datetime[ 5 ] );
			}
           	else {
				l_or_m = "Clan"; m_c++;
				format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s %d: %s - Datum ulaska: "col_server"%02d/%02d/%d - %02d:%02d:%02d"col_white"\n", DialogStrgEx, l_or_m, m_c, org_members_info[ OrgID ][ i ][ o_m_Name ],  datetime[ 2 ], datetime[ 1 ], datetime[ 0 ], datetime[ 3 ], datetime[ 4 ], datetime[ 5 ] );
			}
		}

		SPD( playerid, dialog_orgListPages, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "Next" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	}
	
	else if( dialogid == dialog_ORGFIRMA && response ) {
	    if( listitem == 0 ) {

			new id = org_info[ PlayerInfo[ playerid ][ xLider ] ][ oEntFromBussines ];
			format( globalstring, sizeof( globalstring ), ""col_crvena"Ime Firme : "col_white"%s\n\n"col_crvena"Novac : "col_white"%d", BussinesInfo[ id ][ bName ], BussinesInfo[ id ][ bMoney ] );
			SPD( playerid, dialog_FINFO, DSMSG, D_NASLOV, globalstring, D_ODABERI, D_ODUSTANI );
		}
        if( listitem == 1 ) {
        	if( !allowChangeBusName[ playerid ] ) return SendErrorMessage( playerid, "Da bi promjenili ime firme morate dobiti dozvolu od Ownera." );
			SPD( playerid, dialog_OFCNAME, DSI, D_NASLOV, "Molimo vas da unesete novo ime koje zelite.", D_ODABERI, D_ODUSTANI );
		}
		if( listitem == 2 ) {
            SPD( playerid, dialog_OFLOCK, DSMSG, D_NASLOV, "Molimo vas da odaberete da li zelite da ?", "Otkljucate", "Zakljucate" );
		}
		if( listitem == 3 ) {
		    if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
  			SPD( playerid, dialog_OFPMONEY, DSI, D_NASLOV, "Molimo vas da unesete koliko zelite novca da podignete..", D_ODABERI, D_ODUSTANI );
  		}
		if( listitem == 4 ) {
  			if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
			SPD( playerid, dialog_OFOMONEY, DSI, D_NASLOV, "Molimo vas da unesete koliko zelite novca da ostavite...", D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_OFLOCK ) {
        new id = GetNearestBussines( playerid );
        if( id != org_info[ PlayerInfo[ playerid ][ xLider ] ][ oEntFromBussines ] ) return SendErrorMessage( playerid, "Ovo nije firma tvoje orge");
  		if( response ) {
            BussinesInfo[ id ][ bLocked ] = 0;
        	GameTextForPlayer( playerid, "Firma ~g~otkljucana!", 3000, 3 );
        	sql_bussines_update_integer( id, "b_locked", BussinesInfo[ id ][ bLocked ] );
		}
		else {
		    BussinesInfo[ id ][ bLocked ] = 1;
        	GameTextForPlayer( playerid, "Firma ~r~zakljucana!", 3000, 3 );
        	sql_bussines_update_integer( id, "b_locked", BussinesInfo[ id ][ bLocked ] );
		}
	}
	else if( dialogid == dialog_OFCNAME && response ) {
		if( !allowChangeBusName[ playerid ] ) return SendErrorMessage( playerid, "Da bi promjenili ime firme morate dobiti dozvolu od Ownera." );
	    new IDFirme = org_info[ PlayerInfo[ playerid ][ xLider ] ][ oEntFromBussines ], imefirme[64];
        if( IDFirme == -1 ) return SendErrorMessage( playerid, "Vasa organizacija ne poseduje firmu!");
        if( sscanf( inputtext, "s[64]", imefirme ) ) return SPD( playerid, dialog_OFCNAME, DSI, D_NASLOV, "Molimo vas da unesete novo ime koje zelite.", D_ODABERI, D_ODUSTANI );
		strmid( BussinesInfo[ IDFirme ][ bName ], imefirme, 0, strlen( imefirme ), 64);
		sql_bussines_update_string( IDFirme, "b_name", BussinesInfo[ IDFirme ][ bName ] );
		Bussines_Refresh( IDFirme );
		SendInfoMessage( playerid, "Uspjesno si promjenio ime firme." );
		allowChangeBusName[ playerid ] = false;
	}
	else if( dialogid == dialog_OFOMONEY ) {

		if( !response ) return true;
		if( response ) {

			new iznos, IDFirme = org_info[ PlayerInfo[ playerid ][ xLider ] ][ oEntFromBussines ];
			if( sscanf(inputtext, "i", iznos)) return SendErrorMessage( playerid, "Niste uneli kolicinu novca za ostavljanje!");
			if( iznos < 1 || iznos > 10000) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000!");
            if( iznos > PlayerInfo[ playerid  ][ xNovac ] ) return SendErrorMessage( playerid, "Nemate toliko novca kod sebe!");

			KGEyes_GivePlayerMoney( playerid, -iznos ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -iznos, "Ostavljanje u sef firme" );
			BussinesInfo[ IDFirme ][ bMoney ] += iznos;
			SendInfoMessage( playerid, "Ostavili ste %d$ u kasu firme!", iznos );
		    sql_bussines_update_integer( IDFirme, "b_money", BussinesInfo[ IDFirme ][ bMoney ] );
		}
	}
	else if( dialogid == dialog_OFPMONEY ) {

		if( !response ) return true;
		if( response ) {

			new iznos, IDFirme = org_info[ PlayerInfo[ playerid ][ xLider ] ][ oEntFromBussines ];
			if( sscanf(inputtext, "i", iznos)) return SendErrorMessage( playerid, "Niste uneli kolicinu novca za ostavljanje!");
			if( iznos < 1 || iznos > 10000) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000!");
            if( iznos > BussinesInfo[ IDFirme ][ bMoney ] ) return SendErrorMessage( playerid, "Nemate toliko novca u kasi!");

			KGEyes_GivePlayerMoney( playerid, iznos ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, iznos, "Uzimanje iz sefa firme" ); BussinesInfo[ IDFirme ][ bMoney ] -= iznos;
			SendInfoMessage( playerid, "Podigli ste %d$ iz kase firme!", iznos );
		    sql_bussines_update_integer( IDFirme, "b_money", BussinesInfo[ IDFirme ][ bMoney ] );
		}
	}
	else if( dialogid == dialog_UBACIUORG && response ) {
	    new igrac;
	    if( sscanf( inputtext, "u", igrac ) ) return SendErrorMessage( playerid, "Nepravilan ID!" );
	 	if( igrac == INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
	 	if( PlayerInfo[ igrac ][ xClan ] != 0 ) return SendErrorMessage( playerid, "Igrac je vec clan organizacije!" );
	 	if( PlayerInfo[ igrac ][ xLider ] != 0 ) return SendErrorMessage( playerid, "Igrac je vec clan organizacije!" );
		if( PlayerInfo[ igrac ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Za ulaz u organizacuju potreban je level 5." );
		if( PlayerInfo[ igrac ][ xKazneniUgovor ] != 0 ) return SendErrorMessage( playerid, "Igrac ima kazneni ugovor napustanja organizacije!");
		new OrgID = PlayerInfo[ playerid ][ xLider ];
		if( org_info[ OrgID ][ oUbacenihClanova ] >= org_info[ OrgID ][ oMaxClanova ] ) return SendErrorMessage( playerid, "Vec imas ubacenih maksimalnih %d clanova.", org_info[ OrgID ][ oMaxClanova ] );
        if( OrgID < 1 || org_info[ OrgID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

	    PonudioIgrac[ igrac ] = playerid;

	    new string[ 192 ];
	    format( string, sizeof( string ), "Lider %s vas je pozvao u svoju orgu %s.\nDa prihvatis pretisni na 'Prihvati'.\nDa odustanes pritisni na 'Odustani'", ImeIgraca( playerid ), getOrgName( OrgID ) );

	    SPD( igrac, dialog_UBACIUORG_2, DSMSG, D_NASLOV, string, D_ODABERI, D_ODUSTANI );
	}
	else if( dialogid == dialog_UBACIUORG_2 ) {
	    if( response ) {
		    new igrac = PonudioIgrac[ playerid ];

			new OrgID = PlayerInfo[ igrac ][ xLider ], slot_id = -1;

		    if( OrgID < 1 || org_info[ OrgID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

			for( new i = 0; i < org_info[ OrgID ][ oMaxClanova ]+2; i++ ) {
				if( strcmp( "Niko", org_members_info[ OrgID ][ i ][ o_m_Name ], true ) == 0 ) {
					slot_id = i;
					break;
				}
			}
            if( slot_id == -1 ) return SendErrorMessage( playerid, "Ova organizacija ima maksimalni broj clanova!" );

            strmid( org_members_info[ OrgID ][ slot_id ][ o_m_Name ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), MAX_PLAYER_NAME  );
			org_members_info[ OrgID ][ slot_id ][ o_m_sqlID ] = PlayerInfo[ playerid ][ xID ];
			org_members_info[ OrgID ][ slot_id ][ o_m_type ] = 0;
			org_members_info[ OrgID ][ slot_id ][ o_m_join_date ] = gettime();

            org_info[ OrgID ][ oUbacenihClanova ]++;

			PlayerInfo[ playerid ][ xClan ] = OrgID;
			PlayerInfo[ playerid ][ xRank ] = 1;
			PlayerInfo[ playerid ][ xSpawn ] = SPAWN_BAZA;

			sql_org_member_inser( org_info[ OrgID ][ oID ], 0, playerid, org_members_info[ OrgID ][ slot_id ][ o_m_join_date ] );

		    if( PlayerInfo[ playerid ][ xPol ] == 1 ) {
				PlayerInfo[ playerid ][ xSkin ] = org_info[ OrgID ][ oSkin1 ]; KGEyes_SetPlayerSkin( playerid, org_info[ OrgID ][ oSkin1 ] );
			}
			else if( PlayerInfo[ igrac ][ xPol ] == 2 ) {
				PlayerInfo[ playerid ][ xSkin ] = org_info[ OrgID ][ oZSkin1 ]; KGEyes_SetPlayerSkin( playerid, org_info[ OrgID ][ oZSkin1 ] );
			}

			if( GetFactionType( playerid ) == ORG_TIP_PD ) {

		    	new q[128];
				mysql_format(_dbConnector, q, sizeof(q), "SELECT * FROM `pdstats` WHERE `pd_user_id` = '%d' LIMIT 1", PlayerInfo[ playerid ][ xID ] );
				mysql_pquery(_dbConnector, q, "OnPDStatsLoad", "i", playerid );

			}

			PlayerInfo[ playerid ][ xOrgUgovor ] = 0;
			sql_user_update_org_variables( playerid );
		    SendInfoMessage( playerid, "Cestitamo, usli ste u organizaciju %s.", getOrgName( OrgID ) );
		    SendInfoMessage( igrac, "Igrac %s je prihvatio poziv u vasu organizaciju", ImeIgraca( playerid ) );

		    PonudioIgrac[ playerid ] = -1;
		}
		else if( !response ) {
		    new igrac = PonudioIgrac[ igrac ];

		    if( igrac != -1 ) {
		        SendInfoMessage( igrac, "Igrac %s je odbio poziv u vasu organizaciju", ImeIgraca( playerid ) );
		    }

		    SendInfoMessage( playerid, "Odbili ste poziv za ulazak u organizaciju." );
		    PonudioIgrac[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_OFFIZBACIIZORG && response ) {
	    new imeigraca[ 24 ], OrgID = PlayerInfo[ playerid ][ xLider ];
	    if( sscanf( inputtext, "s[24]", imeigraca ) ) return SCM( playerid, -1, "Nepravilno uneto ime i prezime( Ime_Prezime )!" );

        if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) ) {
			SendErrorMessage( playerid, "Taj igrac je online tako da skini ga online.");
			return 1;
		}

		new query[128];
		mysql_format( _dbConnector, query, sizeof(query), "SELECT `user_id`, `email` FROM `users` WHERE `p_name` = '%e' LIMIT 1", imeigraca );
		mysql_pquery( _dbConnector, query, "CheckPlayerOffOrgKick", "iiis", 0, OrgID, playerid, imeigraca );
	}
	else if( dialogid == dialog_IZBACIIZORG && response ) {

	    new igrac, OrgID = PlayerInfo[ playerid ][ xLider ];
	    if( sscanf( inputtext, "u", igrac ) ) return SendErrorMessage( playerid, "Nepravilan ID!" );
	 	if( igrac == INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
		if( igrac == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe." );
	 	if( PlayerInfo[ igrac ][ xClan ] != OrgID ) return SendErrorMessage( playerid, "Igrac nije clan vase organizacije!" );
        if( PlayerInfo[ igrac ][ xLider ] > 0  ) return SendErrorMessage( playerid, "Ne mozes to lideru." );
		new name[ MAX_PLAYER_NAME ];
		GetPlayerName( igrac, name, sizeof( name ) );
	    if( OrgID < 1 || org_info[ OrgID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

		for( new i = 0; i < MAX_ORG_MEMBERS_LIDERS; i++ ) {
			if( strcmp( name, org_members_info[ OrgID ][ i ][ o_m_Name ], true ) == 0 ) {
			    strmid( org_members_info[ OrgID ][ i ][ o_m_Name ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
			    org_members_info[ OrgID ][ i ][ o_m_sqlID ] = 0;
			    org_members_info[ OrgID ][ i ][ o_m_join_date ] = 0;
			    break;
			}
		}
		if( GetFactionType( playerid ) == ORG_TIP_PD ) SetPlayerDColor( igrac ); //SetPlayerColor( igrac, 0xFFFFFFAA );
	    SendInfoMessage( igrac, "Izbacen si iz organizcaije %s.", getOrgName( OrgID ) );
	    SendInfoMessage( playerid, "Izbacili ste igraca %s iz vase organizacije.", ImeIgraca( igrac ) );
		format( globalstring, sizeof( globalstring ), ""col_fchat"* |%s| Lider %s je kickao %s iz organizacije!", getOrgPrefix( OrgID ), ImeIgraca( playerid ), ImeIgraca( igrac ) );
		OrgPoruka( OrgID, BELA, globalstring );

		if( PlayerInfo[ igrac ][ xOrgUgovor ] < 10 ) {
		    SendInfoMessage( igrac, "Nisi bio 10 sati u organizaciji i dobio si 10 sati zabranu ulaska u org." );
			PlayerInfo[ igrac ][ xKazneniUgovor ] = 10;
		}

		sql_org_member_delete( org_info[ OrgID ][ oID ], PlayerInfo[ igrac ][ xID ] );
        org_info[ OrgID ][ oUbacenihClanova ]--;

        if( IsIllegalTypeOrg( igrac ) ) sql_gangstats_reset( igrac );

		ResetAllWeapons( igrac );
		PlayerInfo[ igrac ][ xClan ] = 0; PlayerInfo[ igrac ][ xRank ] = 0; PlayerInfo[ igrac ][ xSpawn ] = SPAWN_OBICAN_RANDOM;
        PlayerInfo[ igrac ][ xOrgUgovor ] = 0; PlayerInfo[ igrac ][ xSkin ] = SetSexSkin( igrac ); KGEyes_SetPlayerSkin( igrac, SetSexSkin( igrac ) );

        sql_user_update_org_variables( igrac );
		PlayerInfo[ igrac ][ xWarDozvola ] = 0;
		sql_user_update_integer( igrac, "ward", PlayerInfo[ igrac ][ xWarDozvola ] );
	}
	else if( dialogid == dialog_kazni_igraca && response ) {

	    new igrac, OrgID = PlayerInfo[ playerid ][ xLider ];
	    if( sscanf( inputtext, "u", igrac ) ) return SendErrorMessage( playerid, "Nepravilan ID!" );
	 	if( igrac == INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
		if( igrac == playerid ) return SendErrorMessage( playerid, "NE mozes sam sebe." );
	 	if( PlayerInfo[ igrac ][ xClan ] != OrgID ) return SendErrorMessage( playerid, "Igrac nije clan vase organizacije!" );
        if( PlayerInfo[ igrac ][ xLider ] > 0  ) return SendErrorMessage( playerid, "Ne mozes to lideru." );
		new name[ MAX_PLAYER_NAME ];
		GetPlayerName( igrac, name, sizeof( name ) );
	    if( OrgID < 1 || org_info[ OrgID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Ta organizacija ne postoji u bazi podataka." );

		for( new i = 0; i < MAX_ORG_MEMBERS_LIDERS; i++ ) {
			if( strcmp( name, org_members_info[ OrgID ][ i ][ o_m_Name ], true ) == 0 ) {
			    strmid( org_members_info[ OrgID ][ i ][ o_m_Name ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
			    org_members_info[ OrgID ][ i ][ o_m_sqlID ] = 0;
			    org_members_info[ OrgID ][ i ][ o_m_join_date ] = 0;
			    break;
			}
		}

        KGEyes_SetPlayerSkin( igrac, 137 );
		SendClientMessageEx( igrac, CRVENA, "Izbacen si iz organizacije od strane lidera %s.", getOrgName( OrgID ) );
	    SendClientMessageEx( playerid, CRVENA, "Izbacili ste igraca %s iz vase organizacije.", ImeIgraca( igrac ) );

		format( globalstring, sizeof( globalstring ), ""col_fchat"* |%s| Lider %s je kickao %s iz organizacije!", getOrgPrefix( OrgID ), ImeIgraca( playerid ), ImeIgraca( igrac ) );
		OrgPoruka( OrgID, BELA, globalstring );

		if( GetFactionType( playerid ) == ORG_TIP_PD ) SetPlayerDColor( igrac ); //SetPlayerColor( igrac, 0xFFFFFFAA );
	 	SCM( igrac, CRVENA, "LIDER VAS JE KAZNIO SA 10 SATI ZABRANE ULASKA U ORG I 50.0000$." );
		PlayerInfo[ igrac ][ xKazneniUgovor ] = 10;
		KGEyes_GivePlayerMoney( igrac, -50000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -50000, "Lider org kazna" );

		sql_org_member_delete( org_info[ OrgID ][ oID ], PlayerInfo[ igrac ][ xID ] );
        org_info[ OrgID ][ oUbacenihClanova ]--;

        if( IsIllegalTypeOrg( igrac ) ) sql_gangstats_reset( igrac );

		ResetAllWeapons( igrac );
		PlayerInfo[ igrac ][ xClan ] = 0; PlayerInfo[ igrac ][ xRank ] = 0; PlayerInfo[ igrac ][ xSpawn ] = SPAWN_OBICAN_RANDOM;
        PlayerInfo[ igrac ][ xOrgUgovor ] = 0; PlayerInfo[ igrac ][ xSkin ] = SetSexSkin( igrac ); KGEyes_SetPlayerSkin( igrac, SetSexSkin( igrac ) );

        sql_user_update_org_variables( igrac );
		PlayerInfo[ igrac ][ xWarDozvola ] = 0;
		sql_user_update_integer( igrac, "ward", PlayerInfo[ igrac ][ xWarDozvola ] );
	}
	else if( dialogid == dialog_DODELIRANK && response ) {
	    new clan, OrgID = PlayerInfo[ playerid ][ xLider ], rank;
	    if( sscanf( inputtext, "ui", clan, rank ) ) return SPD( playerid, dialog_DODELIRANK, DSI, D_NASLOV, "Unesite id igraca i broj ranka koji zelite da date igracu", D_ODABERI, D_ODUSTANI);
		if( clan == IPI ) return SendErrorMessage( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
		if( clan == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi." );
		if( PlayerInfo[ clan ][ xClan ] != OrgID ) return SendErrorMessage( playerid, "Igrac nije clan vase organizacije!" );
		if( PlayerInfo[ clan ][ xLider ] == OrgID ) return SendErrorMessage( playerid, "Ne mozes drugom lideru skinuti rank." );
	    if( PlayerInfo[ clan ][ xLider ] > 0  ) return SendErrorMessage( playerid, "Ne mozes to lideru." );
		if( OrgID < 1 || org_info[ OrgID ][ oID ] == 0 ) return SendErrorMessage( playerid, "Tvoja organizacija ne postoji u bazi podataka." );
		if( rank < 1 || rank > 6 ) return SendErrorMessage( playerid, "Ne mozes veci rank od 6 a manji od 1!" );

		if( GetFactionType( playerid ) == ORG_TIP_PD || GetFactionType( playerid ) == ORG_TIP_MD || GetFactionType( playerid ) == ORG_TIP_CNN ) {
			new potrebni_sati = 0;
			if( rank == 1 ) potrebni_sati = 0;
			else if( rank == 2 ) potrebni_sati = 50;
			else if( rank == 3 ) potrebni_sati = 80;
			else if( rank == 4 ) potrebni_sati = 120;
			else if( rank == 5 ) potrebni_sati = 150;
			else if( rank == 6 ) potrebni_sati = 200;

			if( PlayerInfo[ clan ][ xOrgUgovor ] < potrebni_sati && PlayerInfo[ clan ][ xRank ] < rank ) return SendErrorMessage( playerid, "Igrac nije bio %d sati u org da bi dobio rank %d.", potrebni_sati, rank );
		}

	

		PlayerInfo[ clan ][ xRank ] = rank;

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `org_members` SET `memb_rank` = '%d' WHERE `memb_sqlID` = '%d' LIMIT 1",
				PlayerInfo[ clan ][ xRank ],
				PlayerInfo[ clan ][ xID ] );

	   	mysql_pquery( _dbConnector, sql_str, "", "");

	    //sql_user_update_integer( clan, "skin_id", PlayerInfo[ clan ][ xSkin ] );

		SendInfoMessage( clan, "Lider te unapredio na rank %d!", rank );
		SendInfoMessage( playerid, "Unapredili ste igraca %s na rank %d!", ImeIgraca( clan ), rank );
	}
	
	else if( dialogid == dialog_dealerDrugBuy_2 && response ) {

		new dealerID = -1;
		for( new a = 0; a < MAX_DEALERS; a++ ) {
			if( IsPlayerInRangeOfPoint( playerid, 5.0, dealers_info[ a ][ dealer_acPos_X ] , dealers_info[ a ][ dealer_acPos_Y ], dealers_info[ a ][ dealer_acPos_Z ] ) ) {
				dealerID = a;
			    break;
			}
		}
		if( dealerID == -1 ) return SendErrorMessage( playerid, "Niste pored nijednog dilera." );

		if( dealers_info[ dealerID ][ dealer_cartelID ] == 0 ) return SendErrorMessage( playerid, "Ovaj diler nema droge kod sebe." );

		new dl = -1;
		for( new i = 0; i < MAX_DRUG_LABS; i++) {
			if( drug_lab[ i ][ dlOrgOwner ] == dealers_info[ dealerID ][ dealer_cartelID ] ) {
				dl = i;
				break;
			}
		}
		if( dl == -1 ) return SendErrorMessage( playerid, "Ovaj diler nema droge kod sebe." );

		new drugAmmount;
	    if( sscanf( inputtext, "i", drugAmmount ) ) {
	        new str[ 128 ];
			format( str, sizeof( str ), "Unesite koliko grama zelite da kupite.\nIma %dg droge.", drug_lab[ dl ][ dlSafeDrug ] );
			SPD( playerid, dialog_dealerDrugBuy_2, DSI, D_NASLOV, str, "Odaberi", "Izlaz" );
	        return true;
	    }
	    if( drugAmmount < 1 ) return SendErrorMessage( playerid, "Ne mozete kupiti manje od 1 grama droge." );
	    if( drug_lab[ dl ][ dlSafeDrug ] <= 0 ) return SendErrorMessage( playerid, "Nemamo vise droge." );
	    if( drug_lab[ dl ][ dlSafeDrug ] < drugAmmount) return SendErrorMessage( playerid, "Nemamo toliko grama droge." );

	    new id = -1;

		if( PlayerInfo[ playerid ][ xNovac ] < (drugAmmount*520) ) return SendErrorMessage( playerid, "Nemate %d$ za kupovinu %dg droge.", (drugAmmount*520), drugAmmount );
		id = Inventory_Add( playerid, "Droga", 1579, drugAmmount );
		if( id != -1 ) {

			SendInfoMessage( playerid, "Kupili ste %dg droge.", drugAmmount );
			drug_lab[ dl ][ dlSafeDrug ] -= drugAmmount;

			KGEyes_GivePlayerMoney( playerid, -(drugAmmount*520) ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -(drugAmmount*520), "Kupovina droge (diler)" );

			org_info[ dealers_info[ dealerID ][ dealer_cartelID ] ][ oSafeMoney ] += (drugAmmount*520);
			sql_organization_update_integer( dealers_info[ dealerID ][ dealer_cartelID ], "safe_money", org_info[ dealers_info[ dealerID ][ dealer_cartelID ] ][ oSafeMoney ] );

			format( globalstring, sizeof( globalstring ), "[DEALER] %s | Prodao %dg droge za %d$.", DealerLocation( dealerID ), drugAmmount, (drugAmmount*520) );
			OrgPoruka( dealers_info[ dealerID ][ dealer_cartelID ], 0x95b4a2FF, globalstring );

			new string[ 128 ];
			format( string, sizeof( string ), "DEALER - ID:%d | %dgr | Odlicna | %d$", dealerID, DealerLocation( dealerID ), drugAmmount, (drugAmmount*260) );
			LogSave( "Ostalo/LogDealerSell.log", string );

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `drug_labs` SET `dl_safe_drug` = '%d' WHERE `dl_sqlID` = '%d'", drug_lab[ dl ][ dlSafeDrug ], drug_lab[ dl ][ dlSqlID ] );
			mysql_tquery( _dbConnector, sql_str );

			//notoriety
			new org_id = dealers_info[dealerID][dealer_cartelID];
			if (org_id > 0 && PlayerInfo[playerid][xClan] != org_id) {
				org_notoriety(org_id, 1, "add");
			}

		} else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite drogu." );

	}
	else if( dialogid == dialog_druglab && response ) {
	    switch( listitem ) {
	        case 0: {

	            new dl = -1;
	            if( GetNearestDrugLab( playerid ) != -1 ) dl = GetNearestDrugLab( playerid );
	            else if( inDrugLab[ playerid ] != -1 ) dl = inDrugLab[ playerid ];

				if( dl == -1 ) return SendErrorMessage( playerid, "Ne nalazite se ispred/unutra nijedne laboratorije droge." );
				if( drug_lab[ dl ][ dlOrgOwner ] != PlayerInfo[ playerid ][ xLider ] ) return SendErrorMessage( playerid, "Ova laboratorija nije u vlasnistvu vase organizacije." );

                new str[ 128 ];

                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
                format( str, sizeof( str ), "sjemena za sadjenje: "col_server"%d\n\n\n", drug_lab[ dl ][ dlSeeds ] );
		        strcat( DialogStrgEx, str );

                strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
		       	format( str, sizeof( str ), "Droga u sefu: "col_server"%dg\n", drug_lab[ dl ][ dlSafeDrug ] );
		       	strcat( DialogStrgEx, str );
		        strcat( DialogStrgEx, "\n"col_server"__________________________"col_white"__________________________\n");
		        new needed_seeds = 0;
		        for( new a = 0; a < 10; a++) {
		            if( drug_lab[ dl ][ dlActorsUpgLevel ][ a ] > 0 ) {
		            	needed_seeds += drug_lab[ dl ][ dlActorsUpgLevel ][ a ];
		                format( str, sizeof( str ), ""col_white"Slot "col_server"%d"col_white": Radnik level "col_server"%d\n", a+1, drug_lab[ dl ][ dlActorsUpgLevel ][ a ] );
		                strcat( DialogStrgEx, str );
		            }
		            else { format( str, sizeof( str ), ""col_white"Slot "col_server"%d"col_white": Bez radnika\n", a+1 ); strcat( DialogStrgEx, str ); }
		        }

		        format( str, sizeof( str ), "\n"col_white"Potrebno sjemena na sat vremena: "col_server"%d"col_white"", needed_seeds );
		        strcat( DialogStrgEx, str );


                format( str, sizeof( str ), "Drug lab(ID:%d)", dl );
		        SPD( playerid, 0, DSMSG, str, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	        }
	        case 1: { // prodaja
	        	new dl = -1;
	            if( GetNearestDrugLab( playerid ) != -1 ) dl = GetNearestDrugLab( playerid );
	            else if( inDrugLab[ playerid ] != -1 ) dl = inDrugLab[ playerid ];

				if( dl == -1 ) return SendErrorMessage( playerid, "Ne nalazite se ispred/unutra nijedne laboratorije droge." );
				if( drug_lab[ dl ][ dlOrgOwner ] != PlayerInfo[ playerid ][ xLider ] ) return SendErrorMessage( playerid, "Ova laboratorija nije u vlasnistvu vase organizacije." );

				SendInfoMessage( playerid, "Kupovina sjemena sada ide preko /svercsjemena, mogu svi clanovi, 100 sjemena 2.000$.");


				/*SPD( playerid, dialog_druglabBuySeeds, DSI, "Buy Seeds", "Unesite koliko sjemena za sadjenje zelite da kupite.\nCijena jednog sjemena je 20$.\nMaximalno moze biti u laboratoriji 1000 sjemena.", "Potvrdi", "Odustani" );
				new str[ 192 ];
				format( str, sizeof( str ), "Da li ste sigurni da zelite da prodate laboratoriju za %d$?\nSva vasa ulaganja u laboratoriju ce propasti.", drug_lab[ dl ][ dlPrice ]/2 );
				SPD( playerid, dialog_druglabSell, DSMSG, "Sell lab", str, "Da", "Ne" );*/
	        }
	        case 2: { // sef
	            new dl = inDrugLab[ playerid ];
				if( dl == -1 ) return SendErrorMessage( playerid, "Niste ni u jednoj labaratoriji droge." );
				if( drug_lab[ dl ][ dlOrgOwner ] != PlayerInfo[ playerid ][ xLider ] ) return SendErrorMessage( playerid, "Ova laboratorija nije u vlasnistvu vase organizacije." );
				if( !IsPlayerInRangeOfPoint( playerid, 3.0, 123.3121, 98.5356, 882.3671 ) ) return SendErrorMessage( playerid, "Niste na pickupu za kontrolu sefa.");

				new str[ 128 ];
		        format( str, sizeof( str ), "Unesite kolliko grama zelite izvaditi iz sefa\nTrenutno ima: %dg", drug_lab[ dl ][ dlSafeDrug ] );

                SPD( playerid, dialog_druglabSafeTake, DSI, D_NASLOV, str, "Odaberi", "Izlaz" );
	        }
	        case 3: {

	            new dl = -1;
	            if( GetNearestDrugLab( playerid ) != -1 ) dl = GetNearestDrugLab( playerid );
	            else if( inDrugLab[ playerid ] != -1 ) dl = inDrugLab[ playerid ];

				if( dl == -1 ) return SendErrorMessage( playerid, "Ne nalazite se ispred/unutra nijedne laboratorije droge." );
				if( drug_lab[ dl ][ dlOrgOwner ] != PlayerInfo[ playerid ][ xLider ] ) return SendErrorMessage( playerid, "Ova laboratorija nije u vlasnistvu vase organizacije." );

                new str[ 128 ];
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		        strcat( DialogStrgEx, "Slot\tZaposlen\tLevel\n" );

				for( new a = 0; a < 10; a++) {
		            if( drug_lab[ dl ][ dlActorsUpgLevel ][ a ] > 0 ) {

                        if( a == 9 ) format( str, sizeof( str ), "%d\tDa\t%d", a+1, drug_lab[ dl ][ dlActorsUpgLevel ][ a ] );
                        else format( str, sizeof( str ), "%d\tDa\t%d\n", a+1, drug_lab[ dl ][ dlActorsUpgLevel ][ a ] );
						strcat( DialogStrgEx, str );
		            }
		            else {

						if( a == 9 ) format( str, sizeof( str ), "%d\tNe\t0", a+1 );
						else  format( str, sizeof( str ), "%d\tNe\t0\n", a+1 );
						strcat( DialogStrgEx, str );
					}
		        }

		        SPD( playerid, dialog_druglabActors, DIALOG_STYLE_TABLIST_HEADERS, D_NASLOV, DialogStrgEx, "Odaberi", "Izlaz" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	        }
	    }
	}
	else if( dialogid == dialog_druglabBuySeeds && response ) {

		new dl = -1;
	    if( GetNearestDrugLab( playerid ) != -1 ) dl = GetNearestDrugLab( playerid );
	    else if( inDrugLab[ playerid ] != -1 ) dl = inDrugLab[ playerid ];

		if( dl == -1 ) return SendErrorMessage( playerid, "Ne nalazite se ispred/unutra nijedne laboratorije droge." );
		if( drug_lab[ dl ][ dlOrgOwner ] != PlayerInfo[ playerid ][ xLider ] ) return SendErrorMessage( playerid, "Ova laboratorija nije u vlasnistvu vase organizacije." );

		new seeds;
		if( sscanf( inputtext, "i", seeds ) ) return SPD( playerid, dialog_druglabBuySeeds, DSI, "Buy Seeds", "Unesite koliko sjemena za sadjenje zelite da kupite.\nCijena jednog sjemena je 20$.\nMaximalno moze biti u laboratoriji 1000 sjemena.", "Potvrdi", "Odustani" );
		if( seeds < 1 || seeds > 1000 ) return SPD( playerid, dialog_druglabBuySeeds, DSI, "Buy Seeds", "Unesite koliko sjemena za sadjenje zelite da kupite.\nCijena jednog sjemena je 20$.\nMaximalno moze biti u laboratoriji 1000 sjemena.", "Potvrdi", "Odustani" );
		if( (seeds + drug_lab[ dl ][ dlSeeds ]) > 1000) return SendErrorMessage( playerid, "Mozete imati maksimalno 1000 sjemena u laboratoriji." );
		if( PlayerInfo[ playerid ][ xNovac ] < (seeds*20) ) return SendErrorMessage( playerid, "Nemate dovoljno novca kod sebe - %d$.", (seeds*20));

		KGEyes_GivePlayerMoney( playerid, -(seeds*20)), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -(seeds*20), "Kupovina sjemena za druglab" );
		drug_lab[ dl ][ dlSeeds ] += seeds;

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `drug_labs` SET `dl_seeds` = '%d' WHERE `dl_sqlID` = '%d'",  drug_lab[ dl ][ dlSeeds ], drug_lab[ dl ][ dlSqlID ] );
		mysql_tquery( _dbConnector, sql_str );

		drug_lab_Refresh( dl );

		SendInfoMessage( playerid, "Uspjesno ste kupili %d sjemena za %d$.", seeds, (seeds*20));
	}
	else if( dialogid == dialog_druglabSell && response ) {
	    new dl = GetNearestDrugLab( playerid );
		if( dl == -1 ) return SendErrorMessage( playerid, "Ne nalazite se na ulazu nijedne laboratorije droge." );
		if( drug_lab[ dl ][ dlOrgOwner ] != PlayerInfo[ playerid ][ xLider ] ) return SendErrorMessage( playerid, "Ova laboratorija nije u vlasnistvu vase organizacije." );

		KGEyes_GivePlayerMoney( playerid, drug_lab[ dl ][ dlPrice ]/2 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, drug_lab[ dl ][ dlPrice ]/2, "Prodaja druglaba" );

		drug_lab[ dl ][ dlOrgOwner ] = -1;
		drug_lab[ dl ][ dlOrgOwnerSqlID ] = 0;

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `drug_labs` SET `dl_org_sqlID` = '%d' WHERE `dl_sqlID` = '%d'",  drug_lab[ dl ][ dlOrgOwnerSqlID ], drug_lab[ dl ][ dlSqlID ] );
		mysql_tquery( _dbConnector, sql_str );

		SendInfoMessage( playerid, "Uspjesno ste prodali laboratoriju droge za %d$.", drug_lab[ dl ][ dlPrice ]/2 );

		for( new i = 0; i < 10; i++ ) {

			if( IsValidActor( drug_lab[ dl ][ dlActor ][ i ] ) )
        		DestroyActor( drug_lab[ dl ][ dlActor ][ i ] );

        	drug_lab[ dl ][ dlActorsUpgLevel ][ i ] = 0;
			drug_lab[ dl ][ dlActor ][ i ] = INVALID_ACTOR_ID;
		}
		drug_lab[ dl ][ dlSafeDrug ]= 0;
		drug_lab[ dl ][ dlSeeds ] = 0;

		sql_drug_lab_sell( dl );

		drug_lab_Refresh( dl );
	}
	else if( dialogid == dialog_druglabActors && response ) {
	    new dl = -1;
	    if( GetNearestDrugLab( playerid ) != -1 ) dl = GetNearestDrugLab( playerid );
	    else if( inDrugLab[ playerid ] != -1 ) dl = inDrugLab[ playerid ];

		if( dl == -1 ) return SendErrorMessage( playerid, "Ne nalazite se ispred/unutra nijedne laboratorije droge." );
		if( drug_lab[ dl ][ dlOrgOwner ] != PlayerInfo[ playerid ][ xLider ] ) return SendErrorMessage( playerid, "Ova laboratorija nije u vlasnistvu vase organizacije." );

        druglabChosenASlot[ playerid ] = listitem;
        if( drug_lab[ dl ][ dlActorsUpgLevel ][ listitem ] > 0 ) {
	        new str[ 128 ];
			format( str, sizeof( str ), "Radnik level: %d", drug_lab[ dl ][ dlActorsUpgLevel ][ listitem ] );
			SPD( playerid, dialog_druglabActorsList, DSL, str, "Upgrade Level\nOtpusti radnika", "Odaberi", "Izlaz" );
		}
		else {
		    SPD( playerid, dialog_druglabActorsBuy, DSMSG, D_NASLOV, "U ovom slotu nemate radnika.\nCijena zaposljavanja radnika je 200.000$.\nDa li zelite da zaposlite radnika? ", "Da", "Ne" );
		}
	}
	else if( dialogid == dialog_druglabActorsList && response ) {
		new dl = -1;
	    if( GetNearestDrugLab( playerid ) != -1 ) dl = GetNearestDrugLab( playerid );
	    else if( inDrugLab[ playerid ] != -1 ) dl = inDrugLab[ playerid ];

		if( dl == -1 ) return SendErrorMessage( playerid, "Ne nalazite se ispred/unutra nijedne laboratorije droge." );

        new actor_id = druglabChosenASlot[ playerid ];
        new ac_level = drug_lab[ dl ][ dlActorsUpgLevel ][ actor_id ], price = (ac_level+1)*100000;
        if( ac_level == 4 ) return SendErrorMessage( playerid, "Vas radnik ima maksimalni level rada." );
        switch( listitem ) {

        	case 0: {
        		new str[ 192 ];
				format( str, sizeof( str ), "Trenutni level vaseg radnika je %d.\nUpgrade levela radnika na %d, iznosi %d$.\nDa li zelite da povecate level vaseg radnika ?", drug_lab[ dl ][ dlActorsUpgLevel ][ actor_id ], (drug_lab[ dl ][ dlActorsUpgLevel ][ actor_id ]+1), price );
				SPD( playerid, dialog_druglabActorsUpgrade, DSMSG, "Level Upgrade", str, "Da", "Ne" );
        	}
        	case 1 : {
				SPD( playerid, dialog_druglabActorsRemove, DSMSG, "Level Upgrade", "Otpustanjem radnika nemate dobita.\nDa li ste sigurni da zelite da otpustite radnika ?", "Da", "Ne" );
        	}
        }
	}
	else if( dialogid == dialog_druglabActorsBuy && response ) {
		new dl = -1;
	    if( GetNearestDrugLab( playerid ) != -1 ) dl = GetNearestDrugLab( playerid );
	    else if( inDrugLab[ playerid ] != -1 ) dl = inDrugLab[ playerid ];

		if( dl == -1 ) return SendErrorMessage( playerid, "Ne nalazite se ispred/unutra nijedne laboratorije droge." );
		if( drug_lab[ dl ][ dlOrgOwner ] != PlayerInfo[ playerid ][ xLider ] ) return SendErrorMessage( playerid, "Ova laboratorija nije u vlasnistvu vase organizacije." );

        new actor_id = druglabChosenASlot[ playerid ];
        if( PlayerInfo[ playerid ][ xNovac ] < 150000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(150.000$).");

        new number_of_employeez = 0, emp_lvl_2 = 0, emp_lvl_3 = 0, emp_lvl_4 = 0;
        for( new i = 0; i < 10; i++ ) {
        	if( drug_lab[ dl ][ dlActorsUpgLevel ][ i ] != 0 ) {
        		number_of_employeez++;

        		if( drug_lab[ dl ][ dlActorsUpgLevel ][ i ] == 2 ) emp_lvl_2++;
        		else if( drug_lab[ dl ][ dlActorsUpgLevel ][ i ] == 3 ) { emp_lvl_2++; emp_lvl_3++; }
        		else if( drug_lab[ dl ][ dlActorsUpgLevel ][ i ] == 4 ) { emp_lvl_2++; emp_lvl_3++; emp_lvl_4++; }
        	}
        }

        if( number_of_employeez > 2 ) {

        	switch(number_of_employeez+1 ) {
        		case 4: if( emp_lvl_2 < 3 ) return SendErrorMessage( playerid, "Da bi kupio 4og radnika moras imati 3 radnika sa levelom 2." );
        		case 5: if( emp_lvl_2 < 4 ) return SendErrorMessage( playerid, "Da bi kupio 5og radnika moras imati 4 radnika sa levelom 2." );
        		case 6: if( emp_lvl_3 < 4 ) return SendErrorMessage( playerid, "Da bi kupio 6og radnika moras imati 4 radnika sa levelom 3." );
        		case 7: if( emp_lvl_3 < 5 ) return SendErrorMessage( playerid, "Da bi kupio 7og radnika moras imati 5 radnika sa levelom 3." );
        		case 8: if( emp_lvl_4 < 5 ) return SendErrorMessage( playerid, "Da bi kupio 8og radnika moras imati 5 radnika sa levelom 4." );
        		case 9: if( emp_lvl_4 < 6 ) return SendErrorMessage( playerid, "Da bi kupio 9og radnika moras imati 6 radnika sa levelom 4." );
        		case 10: if( emp_lvl_4 < 7 ) return SendErrorMessage( playerid, "Da bi kupio 10og radnika moras imati 7 radnika sa levelom 4." );
        	}
        }

        KGEyes_GivePlayerMoney( playerid, -150000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -150000, "Kupovina druglab radnika" );

        drug_lab[ dl ][ dlActorsUpgLevel ][ actor_id ] = 1;
        drug_lab_ActorRefresh( dl );
        SendInfoMessage( playerid, "Uspjesno ste zaposlili jos jednog radnika.");

        new sql_f_name[ 24 ];
        format( sql_f_name, sizeof( sql_f_name ), "dl_actor_%d", actor_id+1 );

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `drug_labs` SET `%s` = '%d' WHERE `dl_sqlID` = '%d'", sql_f_name, drug_lab[ dl ][ dlActorsUpgLevel ][ actor_id ], drug_lab[ dl ][ dlSqlID ] );
		mysql_tquery( _dbConnector, sql_str );
    }
	else if( dialogid == dialog_druglabActorsRemove && response ) {
		new dl = -1;
	    if( GetNearestDrugLab( playerid ) != -1 ) dl = GetNearestDrugLab( playerid );
	    else if( inDrugLab[ playerid ] != -1 ) dl = inDrugLab[ playerid ];

		if( dl == -1 ) return SendErrorMessage( playerid, "Ne nalazite se ispred/unutra nijedne laboratorije droge." );
		if( drug_lab[ dl ][ dlOrgOwner ] != PlayerInfo[ playerid ][ xLider ] ) return SendErrorMessage( playerid, "Ova laboratorija nije u vlasnistvu vase organizacije." );

        new actor_id = druglabChosenASlot[ playerid ];

        drug_lab[ dl ][ dlActorsUpgLevel ][ actor_id ] = 0;
        SendInfoMessage( playerid, "Uspjesno ste otpustili radnika.");

        if( IsValidActor( drug_lab[ dl ][ dlActor ][ 0 ] ) )
        	DestroyActor( drug_lab[ dl ][ dlActor ][ 0 ] );

        new sql_f_name[ 24 ];
        format( sql_f_name, sizeof( sql_f_name ), "dl_actor_%d", actor_id+1 );

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `drug_labs` SET `%s` = '%d' WHERE `dl_sqlID` = '%d'", sql_f_name, drug_lab[ dl ][ dlActorsUpgLevel ][ actor_id ], drug_lab[ dl ][ dlSqlID ] );
		mysql_tquery( _dbConnector, sql_str );
    }
	else if( dialogid == dialog_druglabActorsUpgrade && response ) {
		new dl = -1;
	    if( GetNearestDrugLab( playerid ) != -1 ) dl = GetNearestDrugLab( playerid );
	    else if( inDrugLab[ playerid ] != -1 ) dl = inDrugLab[ playerid ];

		if( dl == -1 ) return SendErrorMessage( playerid, "Ne nalazite se ispred/unutra nijedne laboratorije droge." );
		if( drug_lab[ dl ][ dlOrgOwner ] != PlayerInfo[ playerid ][ xLider ] ) return SendErrorMessage( playerid, "Ova laboratorija nije u vlasnistvu vase organizacije." );

        new actor_id = druglabChosenASlot[ playerid ];
        new ac_level = drug_lab[ dl ][ dlActorsUpgLevel ][ actor_id ], price = (ac_level+1)*100000;
        if( PlayerInfo[ playerid ][ xNovac ] < price ) return SendErrorMessage( playerid, "Nemate dovoljno novca(%d$).", price);

        KGEyes_GivePlayerMoney( playerid, -price ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -price, "Upgrade druglab radnika" );
        drug_lab[ dl ][ dlActorsUpgLevel ][ actor_id ]++;

        drug_lab_ActorRefresh( dl, actor_id );

        new sql_f_name[ 24 ];
        format( sql_f_name, sizeof( sql_f_name ), "dl_actor_%d", actor_id+1 );

		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `drug_labs` SET `%s` = '%d' WHERE `dl_sqlID` = '%d'", sql_f_name, drug_lab[ dl ][ dlActorsUpgLevel ][ actor_id ], drug_lab[ dl ][ dlSqlID ] );
		mysql_tquery( _dbConnector, sql_str );

		SendInfoMessage( playerid, "Uspjesno ste povecali level vaseg radnika u slotu %d, za %d$.", actor_id+1, price );
	}
	
	else if( dialogid == dialog_druglabSafeTake && response ) {
		new dl = inDrugLab[ playerid ];
		if( dl == -1 ) return SendErrorMessage( playerid, "Ne nalazite se ni u jednoj laboratorije droge." );
		if( drug_lab[ dl ][ dlOrgOwner ] != PlayerInfo[ playerid ][ xLider ] ) return SendErrorMessage( playerid, "Ova laboratorija nije u vlasnistvu vase organizacije." );

		new drugAmmount;
	    if( sscanf( inputtext, "i", drugAmmount ) ) {
	        new str[ 128 ];
			format( str, sizeof( str ), "Unesite koliko grama zelite da uzmeme.\nU sefu ima %dg.", drug_lab[ dl ][ dlSafeDrug ] );
			SPD( playerid, dialog_druglabSafeTake, DSI, D_NASLOV, str, "Odaberi", "Izlaz" );
	        return true;
	    }
	    if( drugAmmount < 1 ) return SendErrorMessage( playerid, "Ne mozete uzeti manje od 1 grama droge." );
	    if( drug_lab[ dl ][ dlSafeDrug ] <= 0 ) return SendErrorMessage( playerid, "U ovom slotu nema droge." );
	    if( drug_lab[ dl ][ dlSafeDrug ] < drugAmmount ) return SendErrorMessage( playerid, "Nema toliko droge u sefu." );

	    new id = -1;

		id = Inventory_Add( playerid, "Droga", 1579, drugAmmount );
		if( id != -1 ) {

			SendInfoMessage( playerid, "Uzeli ste iz sefa %dg droge.", drugAmmount );
			drug_lab[ dl ][ dlSafeDrug ] -= drugAmmount;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `drug_labs` SET `dl_safe_drug` = '%d' WHERE `dl_sqlID` = '%d'", drug_lab[ dl ][ dlSafeDrug ], drug_lab[ dl ][ dlSqlID ] );
			mysql_tquery( _dbConnector, sql_str );

		} else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite drogu." );
	}
	else if( dialogid == dialog_topFive && response ) {
		switch( listitem ) {
			case 0: mysql_pquery( _dbConnector, "SELECT`p_name`, `money`, `bank_money` FROM `users` WHERE `admin_lvl` = '0' ORDER BY (`money`+`bank_money`) DESC LIMIT 10", "TopFive", "ii", playerid, listitem );
			case 1: mysql_pquery( _dbConnector, "SELECT `p_name`, `level` FROM `users` WHERE `admin_lvl` = '0' ORDER BY `level` DESC LIMIT 10", "TopFive", "ii", playerid, listitem );
			case 2: mysql_pquery( _dbConnector, "SELECT `p_name`, `hours_online` FROM `users` WHERE `admin_lvl` = '0' ORDER BY `hours_online` DESC LIMIT 10", "TopFive", "ii", playerid, listitem );
			case 3: mysql_pquery( _dbConnector, "SELECT `p_name`, `arrested` FROM `users` WHERE `admin_lvl` = '0' ORDER BY `arrested` DESC LIMIT 10", "TopFive", "ii", playerid, listitem );
			case 4: mysql_pquery( _dbConnector, "SELECT `p_name`, `dm_event_kills` FROM `users` WHERE `admin_lvl` = '0' ORDER BY `dm_event_kills` DESC LIMIT 10", "TopFive", "ii", playerid, listitem );
			case 5: mysql_pquery( _dbConnector, "SELECT `p_name`, `event_first_place`, `event_second_place`, `event_third_place` FROM `users` WHERE `admin_lvl` = '0' ORDER BY `event_first_place`*3+`event_second_place`*2+`event_third_place` DESC LIMIT 10 ", "TopFive", "ii", playerid, listitem );
			case 6: mysql_pquery( _dbConnector, "SELECT users.p_name, pdstats.pd_arrests FROM `pdstats` LEFT JOIN `users` ON `pd_user_id` = `user_id` ORDER BY `pd_arrests` DESC LIMIT 10", "TopFive", "ii", playerid, listitem );
			case 7: mysql_pquery( _dbConnector, "SELECT `p_name`, `hitman_kills` FROM `users` WHERE `admin_lvl` = '0' ORDER BY `hitman_kills` DESC LIMIT 10", "TopFive", "ii", playerid, listitem );
			case 8: mysql_pquery( _dbConnector, "SELECT org.name, \
                                                ( \
                                                    SELECT ifnull(sum(gs.g_gzones), 0) \
                                                    FROM gangstats AS gs JOIN org_members AS om ON gs.g_user_id = om.memb_sqlID \
                                                    WHERE org.org_id = om.org_id \
                                                ) BrojZona \
                                                FROM organizations AS org \
                                                GROUP BY org.name \
                                                ORDER BY BrojZona DESC LIMIT 10", "TopFive", "ii", playerid, listitem );
			case 9: mysql_pquery( _dbConnector, "SELECT `p_name`, `thief` FROM `users` WHERE `admin_lvl` = '0' ORDER BY `thief` DESC LIMIT 10", "TopFive", "ii", playerid, listitem );
			case 10: mysql_pquery( _dbConnector, "SELECT `name`, `war_wins` FROM `organizations` WHERE `war_wins` > '1' ORDER BY `war_wins` DESC LIMIT 10", "TopFive", "ii", playerid, listitem );
			case 11: { }
			case 12: mysql_pquery( _dbConnector, "SELECT `p_name`, ( IF(`property_id_1` > '0', '1', '0') + IF(`property_id_2` > '0', '1', '0') + IF(`property_id_3` > '0', '1', '0') +\
												IF(`bussines_id` > '0', '1', '0') + IF(`hotel_id` > '0', '1', '0') + IF(`street_id` > '0', '1', '0') ) AS `Kolicina`, \
												`property_id_1`, `property_id_2`, `property_id_3`, `bussines_id`, `hotel_id`, `street_id` FROM `users` \
												WHERE `property_id_1` > '0' || `property_id_2` > '0' || `property_id_3` > '0' || `bussines_id` > '0' || \
												`hotel_id` > '0' || `street_id` > '0' ORDER BY `Kolicina` DESC LIMIT 20", "TopFive", "ii", playerid, listitem );
			case 13: mysql_pquery( _dbConnector, "SELECT `p_name`, `materials` FROM `users` WHERE `materials` > '0' ORDER BY `materials` DESC LIMIT 10", "TopFive", "ii", playerid, listitem );
			case 14: mysql_pquery( _dbConnector, "SELECT `propID`, `p_money` FROM `property` WHERE `p_money` > '0' ORDER BY `p_money` DESC LIMIT 10", "TopFive", "ii", playerid, listitem );
			case 15: mysql_pquery( _dbConnector, "SELECT `propID`, `p_mats` FROM `property` WHERE `p_mats` > '0' ORDER BY `p_mats` DESC LIMIT 10", "TopFive", "ii", playerid, listitem );
			case 16: mysql_pquery( _dbConnector, "SELECT `bussines_id`, `b_type`, `b_money` FROM `bussines` WHERE `b_money` > '0' ORDER BY `b_money` DESC LIMIT 10", "TopFive", "ii", playerid, listitem );
		}
	}
	else if( dialogid == dialog_FIRMA && response ) {
	    if( listitem == 0 ) {

			new id = PlayerInfo[ playerid ][ xFirmaID ], string[264];
			format( string, sizeof( string ), ""col_crvena"Ime Firme : "col_white"%s\n\n"col_crvena"Novac : "col_white"%d\n\n"col_crvena"Fakture : "col_white"%d\n\n"col_crvena"Reket : "col_white"%s"col_white"",
			BussinesInfo[ id ][ bName ], BussinesInfo[ id ][ bMoney ], BussinesInfo[ id ][ bFacture ], BussinesInfo[ id ][ bReket ] );
			SPD( playerid, dialog_FINFO, DSMSG, D_NASLOV, string, D_ODABERI, D_ODUSTANI ); }
        if( listitem == 1 ) {
			SPD( playerid, dialog_FCNAME, DSI, D_NASLOV, "Molimo vas da unesete novo ime koje zelite.", D_ODABERI, D_ODUSTANI ); }
		if( listitem == 2 ) {
            SPD( playerid, dialog_FLOCK, DSMSG, D_NASLOV, "Molimo vas da odaberete da li zelite da ?", "Otkljucate", "Zakljucate" ); }
		if( listitem == 3 ) {
		    if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
  			SPD( playerid, dialog_FPMONEY, DSI, D_NASLOV, "Molimo vas da unesete koliko zelite novca da podignete..", D_ODABERI, D_ODUSTANI ); }
		if( listitem == 4 ) {
  			if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
			SPD( playerid, dialog_FOMONEY, DSI, D_NASLOV, "Molimo vas da unesete koliko zelite novca da ostavite...", D_ODABERI, D_ODUSTANI ); }
		if( listitem == 5 ) {

   	 		if( PlayerInfo[ playerid ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Ne posjedujes firmu!");
            if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");

			SPD( playerid, dialog_FIRMASELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vasu firmu drzavi?", "Da", "Ne" );
		}
		if( listitem == 6 ) {

		    if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");

			SPD( playerid, dialog_FIRMASELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu firme", "Ponudi", D_ODUSTANI );
		}
		if( listitem == 7 ) {

		    new id = PlayerInfo[ playerid ][ xFirmaID ];

		    if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");

			if( !KupljeneFakture[ playerid ] ) return SendErrorMessage( playerid, "Niste kupili fakture." );
			if( BussinesInfo[ id ][ bFacture ] > 600 ) return SendErrorMessage( playerid, "Maksimalno faktura u biznisu je 600." );

			KupljeneFakture[ playerid ] = false;

            BussinesInfo[ id ][ bFacture ] += 100;

            sql_bussines_update_integer( id, "b_facture", BussinesInfo[ id ][ bFacture ] );
    		SendInfoMessage( playerid, "Uspjesno si ubacio 100 faktura u biznis, trenutno imas %d!", BussinesInfo[ id ][ bFacture ] );
    		Bussines_Refresh( id );

		}
		if( listitem == 8 ) {

		    if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");

			SPD( playerid, dialog_FIRMAREKET, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca", "Postavi", D_ODUSTANI );
			SendInfoMessage(playerid, "Upisite -1 ako ne zelite dati reket!");
		}
	}
	else if( dialogid == dialog_FIRMAREKET ) {

	   	if( !response ) return 1;
	    if( response ) {
	        new id = PlayerInfo[ playerid ][ xFirmaID ];
	        new idigraca;
	        if( sscanf( inputtext, "i", idigraca ) ) return SPD( playerid, dialog_FIRMAREKET, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca", "Postavi", D_ODUSTANI );
			if( idigraca == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
			if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi dati reket!");
			if( idigraca == -1 )
			{
				new bool:found = false;
				foreach(Player, i)
				{
					if(PlayerInfo[i][xID] == BussinesInfo[ id ][ bReket_sqlID ])
					{
						found = true;
						PlayerInfo[i][xReketFirme] = 0;
						sql_user_update_integer( idigraca, "reket_firme", PlayerInfo[ idigraca ][ xReketFirme ]);
						break;
					}
				}
				if(!found) {
					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `users` SET `reket_firme` = '0' WHERE `user_id` = '%d' LIMIT 1",
						BussinesInfo[ id ][ bReket_sqlID ] );
					mysql_pquery( _dbConnector, sql_str, "", "" );
				}

				BussinesInfo[ id ][ bReket_sqlID ] = 0;
				strmid( BussinesInfo[ id ][ bReket], "Drzava", 0, strlen( "Drzava" ), 255);
				sql_bussines_update_integer( id, "b_reket_sqlID", BussinesInfo[ id ][ bReket_sqlID ] );
				Bussines_Refresh( id );
			}
			else
			{
				if( PlayerInfo[ idigraca ][ xReketFirme ] != 0 ) return SendErrorMessage(playerid, "Igrac vec ima reket firme!");
				BussinesInfo[ id ][ bReket_sqlID ] = PlayerInfo[ idigraca ][ xID ];
				PlayerInfo[ idigraca ][ xReketFirme ] = id;
				sql_user_update_integer( idigraca, "reket_firme", PlayerInfo[ idigraca ][ xReketFirme ]);
				strmid( BussinesInfo[ id ][ bReket], ImeIgraca( idigraca ), 0, strlen( ImeIgraca( idigraca ) ), 255);
				sql_bussines_update_integer( id, "b_reket_sqlID", BussinesInfo[ id ][ bReket_sqlID ] );
				Bussines_Refresh( id );
			}

	    }
	}
	else if( dialogid == dialog_FIRMAREKETADM ){
		if( !response ) return 1;
		if( response ) {
	        new id, idigraca;
	        if( sscanf( inputtext, "id", id, idigraca ) ) return SPD( playerid, dialog_FIRMAREKETADM, DSI, D_NASLOV, "U prazni prostor ispod unesite ID firme i ID igraca", "Postavi", D_ODUSTANI );
			if( idigraca == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
			if( BussinesInfo[ id ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");
			if( idigraca == -1 )
			{
				new bool:found = false;
				foreach(Player, i)
				{
					if(PlayerInfo[i][xID] == BussinesInfo[ id ][ bReket_sqlID ])
					{
						found = true;
						PlayerInfo[i][xReketFirme] = 0;
						sql_user_update_integer( i, "reket_firme", 0);
						SendInfoMessage( playerid, "Reket maknut online igracu %s sa firme ID: %d", ImeIgraca( i ), id  );
						break;
					}
				}
				if(!found) {
					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `users` SET `reket_firme` = '0' WHERE `user_id` = '%d' LIMIT 1",
						BussinesInfo[ id ][ bReket_sqlID ] );
					mysql_pquery( _dbConnector, sql_str, "", "" );
					SendInfoMessage( playerid, "Reket maknut offline igracu SQLid: %d sa firme ID: %d", BussinesInfo[ id ][ bReket_sqlID ], id  );
				}

				BussinesInfo[ id ][ bReket_sqlID ] = 0;
				strmid( BussinesInfo[ id ][ bReket ], "Drzava", 0, strlen( "Drzava" ), 255);
				sql_bussines_update_integer( id, "b_reket_sqlID", BussinesInfo[ id ][ bReket_sqlID ] );
				Bussines_Refresh( id );
				format( globalstring, sizeof( globalstring ), "| FIRMA-REKET | %s je maknuo reket na firmi ID: %d", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogEdit.log", globalstring );
			}
			else
			{
				if( PlayerInfo[ idigraca ][ xReketFirme ] != 0 ) return SendErrorMessage(playerid, "Igrac vec ima reket firme!");
				BussinesInfo[ id ][ bReket_sqlID ] = PlayerInfo[ idigraca ][ xID ];
				PlayerInfo[ idigraca ][ xReketFirme ] = id;
				sql_user_update_integer( idigraca, "reket_firme", PlayerInfo[ idigraca ][ xReketFirme ]);
				strmid( BussinesInfo[ id ][ bReket], ImeIgraca( idigraca ), 0, strlen( ImeIgraca( idigraca ) ), 255);
				sql_bussines_update_integer( id, "b_reket_sqlID", BussinesInfo[ id ][ bReket_sqlID ] );
				Bussines_Refresh( id );
				format( globalstring, sizeof( globalstring ), "| FIRMA-REKET | %s je postavio reket igracu %s na firmi ID: %d", ImeIgraca( playerid ), ImeIgraca( idigraca ), id );
				LogSave( "Ostalo/LogEdit.log", globalstring );
			}

		}

	}
	else if( dialogid == dialog_FIRMASELLDRZAVA ) {

	    if( response ) {

	        new id = PlayerInfo[ playerid ][ xFirmaID ];
   	 		if( PlayerInfo[ playerid ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Ne posjedujes firmu!");
            if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza firme!");
			if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas firmu dok ne izadjes iz minusa u banci." );
            new string1[ 128 ];
			format( string1, sizeof( string1 ), "Igrac %s je prodao firmu ID %d na buy", ImeIgraca( playerid ), id );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

			BussinesInfo[ id ][ bOwner_sqlID ] = 0;
			BussinesInfo[ id ][ bReket_sqlID ] = 0;
			BussinesInfo[ id ][ bNeaktivnost ] = 0;
			BussinesInfo[ id ][ bFacture ] = 100;
    		strmid( BussinesInfo[ id ][ bOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
    		strmid( BussinesInfo[ id ][ bReket ], "Drzava", 0, strlen( "Drzava" ), 32);
    		BussinesInfo[ id ][ bLocked ] = 1;
    		KGEyes_GivePlayerMoney( playerid, BussinesInfo[ id ][ bPrice ]/2, false), PlayerMoneyTrackSave( playerid, MONEY_HANDS, BussinesInfo[ id ][ bPrice ]/2, "Prodaja firme na buy" );
    		PlayerInfo[ playerid ][ xFirmaID ] = -1;
    		PlayerInfo[ playerid ][ xBussinesSqlID ] = 0;

			foreach( Player, i ){
				if( PlayerInfo[ i ][ xReketFirme ] == id ){
					PlayerInfo[ i ][ xReketFirme ] = 0;
				}
				else {
					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `users` SET `reket_firme` = '0' WHERE `reket_firme` = '%d'", id );
					mysql_pquery( _dbConnector, sql_str, "", "");
				}
			}

    		new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `b_neaktivnost` = '%d', `b_facture` = '%d', `b_reket_sqlID` = '%d' WHERE `bussines_id` = '%d'",
					BussinesInfo[ id ][ bOwner_sqlID ],
					BussinesInfo[ id ][ bNeaktivnost ],
					BussinesInfo[ id ][ bFacture ],
					BussinesInfo[ id ][ bReket_sqlID ], BussinesInfo[ id ][ b_ID ] );

		   	mysql_pquery( _dbConnector, q, "", "");

    		SendInfoMessage( playerid, "Firma uspesno prodana!" );
    		Bussines_Refresh( id );

    		sql_user_update_intandmoney( playerid, "bussines_id", PlayerInfo[ playerid ][ xBussinesSqlID ] );
		}
		if( !response ) {
		    SCM( playerid, -1, "Odustali ste od prodaje firme drzavi." );
		}
	}
	else if( dialogid == dialog_FIRMASELLTP ) {
	    if( !response ) return 1;
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas firmu dok ne izadjes iz minusa u banci." );
	        new id = PlayerInfo[ playerid ][ xFirmaID ];
	        new idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
	        if( sscanf( inputtext, "ui", idigraca, cena ) ) return SPD( playerid, dialog_FIRMASELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu firme", "Ponudi", D_ODUSTANI );
            GetPlayerPos( idigraca, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) ) return SendErrorMessage( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return SendErrorMessage( playerid, "Cijena ne moze biti manja od 1$!");
			if( idigraca == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
			if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi prodati firmu!");
			if( PlayerInfo[ idigraca ][ xFirmaID ] != -1 )return SendErrorMessage( playerid, "Igrac vec ima firmu!");
            if( PlayerInfo[ idigraca ][ xLevel ] < BussinesInfo[ id ][ bLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Igrac mora biti level %d+ da bi ste mu prodali firmu.", BussinesInfo[ id ][ bLevel ] );
			SendClientMessageEx( playerid, SVIJETLOPLAVA, "Ponudili ste igracu %s firmu po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCijena[ idigraca ] = cena;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegovu firmu za %d", ImeIgraca( playerid ), cena );
			SPD( idigraca, dialog_ACCEPTFRIMA, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );
	    }
	}
	else if( dialogid == dialog_ACCEPTFRIMA ) {
	    if( response ) {
	        new id = PlayerInfo[ GlobalProdaja[ playerid ] ][ xFirmaID ];
	        if( PlayerInfo[ playerid ][ xNovac ] < GlobalCijena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca.");

            new string1[ 128 ];
			format( string1, sizeof( string1 ), "Igrac %s je prodao firmu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCijena[ playerid ] );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

			SendClientMessageEx( playerid, SVIJETLOPLAVA, "Uspjesno ste kupili firmu od igraca %s za $%d.", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCijena[ playerid ] );

			PlayerInfo[ GlobalProdaja[ playerid ] ][ xFirmaID ] = -1;
			PlayerInfo[ GlobalProdaja[ playerid ] ][ xBussinesSqlID ] = 0;
			PlayerInfo[ playerid ][ xFirmaID ] = id;
			PlayerInfo[ playerid ][ xBussinesSqlID ] = BussinesInfo[ id ][ b_ID ];
			BussinesInfo[ id ][ bOwner_sqlID ] = PlayerInfo[ playerid ][ xID ];
			BussinesInfo[ id ][ bReket_sqlID ] = 0;
			strmid( BussinesInfo[ id ][ bOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `bussines` SET `b_owner_sqlID` = '%d', `b_reket_sqlID` = '%d' WHERE `bussines_id` = '%d'",
					BussinesInfo[ id ][ bOwner_sqlID ],
					BussinesInfo[ id ][ bReket_sqlID ],
					BussinesInfo[ id ][ b_ID ] );

		   	mysql_pquery( _dbConnector, sql_str, "", "");

			foreach( Player, i ){
				if( PlayerInfo[ i ][ xReketFirme ] == id ){
					PlayerInfo[ i ][ xReketFirme ] = 0;
				}
				else {
					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `users` SET `reket_firme` = '0' WHERE `reket_firme` = '%d'", id );
					mysql_pquery( _dbConnector, sql_str, "", "");
				}
			}

			Bussines_Refresh( id );

			KGEyes_GivePlayerMoney( GlobalProdaja[ playerid ], GlobalCijena[ playerid ], false ), PlayerMoneyTrackSave( GlobalProdaja[ playerid ], MONEY_HANDS, GlobalCijena[ playerid ], "Prodaja firme igracu" );
			KGEyes_GivePlayerMoney( playerid, -GlobalCijena[ playerid ], false ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -GlobalCijena[ playerid ], "Kupovina firme od igraca" );

			sql_user_update_intandmoney( playerid, "bussines_id", PlayerInfo[ playerid ][ xBussinesSqlID ] );
			sql_user_update_intandmoney( GlobalProdaja[ playerid ], "bussines_id", PlayerInfo[ GlobalProdaja[ playerid ] ][ xBussinesSqlID ] );

			format( globalstring, sizeof( globalstring ), "Prodali ste firmu igracu %s za %d!", ImeIgraca( playerid ), GlobalCijena[ playerid ] );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			SCM( playerid, -1, "Kupili ste firmu!" );
			GlobalProdaja[ playerid ] = -1;
			GlobalCijena[ playerid ] = -1;
	    }
	    else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu firme!", ImeIgraca( playerid ) );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			SCM( playerid, -1, "Odbili ste ponudu!");
			GlobalProdaja[ playerid ] = -1;
			GlobalCijena[ playerid ] = -1;
	    }
	}
	else if( dialogid == dialog_FLOCK ) {
        new id = GetNearestBussines( playerid );
        if( id != PlayerInfo[ playerid ][ xFirmaID ]) return SendErrorMessage( playerid, "Ovo nije tvoja firma");
  		if( response ) {
            BussinesInfo[ id ][ bLocked ] = 0;
        	GameTextForPlayer( playerid, "Firma ~g~otkljucana!", 3000, 3 );
        	sql_bussines_update_integer( id, "b_locked", BussinesInfo[ id ][ bLocked ] );
		}
		else {
		    BussinesInfo[ id ][ bLocked ] = 1;
        	GameTextForPlayer( playerid, "Firma ~r~zakljucana!", 3000, 3 );
        	sql_bussines_update_integer( id, "b_locked", BussinesInfo[ id ][ bLocked ] );
		}
	}
	else if( dialogid == dialog_FCNAME && response ) {
	    new IDFirme = PlayerInfo[ playerid ][ xFirmaID ], imefirme[30];
        if( IDFirme == -1 ) return SendErrorMessage( playerid, "Ne posjedujes firmu!" );
        if( sscanf( inputtext, "s[30]", imefirme ) ) return SPD( playerid, dialog_FCNAME, DSI, D_NASLOV, "Molimo vas da unesete novo ime koje zelite.\nMax. 30 znakova!", D_ODABERI, D_ODUSTANI );
		strmid( BussinesInfo[ IDFirme ][ bName ], imefirme, 0, strlen( imefirme ), 64);
		sql_bussines_update_string( IDFirme, "b_name", BussinesInfo[ IDFirme ][ bName ] );
		Bussines_Refresh( IDFirme );
		SendInfoMessage( playerid, "Uspjesno si promjenio ime firme." );
		format( globalstring, sizeof( globalstring ), "Igrac %s je promjenio ime firme ID: %d u %s", ImeIgraca( playerid ), IDFirme, imefirme );
		LogSave( "Ostalo/LogEdit.log", globalstring );
	}
	else if( dialogid == dialog_SCNAME && response ) {
		//if( !allowChangeBusName[ playerid ] ) return SendErrorMessage( playerid, "Da bi promjenili ime ulice morate dobiti dozvolu od vlasnika." );
	    new IDStreet = PlayerInfo[ playerid ][ xStreetID ], imeulice[32];
        if( IDStreet == -1 ) return SendErrorMessage( playerid, "Ne posjedujes ulicu!");
        if( sscanf( inputtext, "s[32]", imeulice ) ) return SPD( playerid, dialog_SCNAME, DSI, D_NASLOV, "Molimo vas da unesete novo ime koje zelite.", D_ODABERI, D_ODUSTANI );
		strmid( streetInfo[ IDStreet ][ sName ], imeulice, 0, strlen( imeulice ), 32);
		mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `streets` SET `s_name` = '%e' WHERE `sID` = '%d' LIMIT 1",
						streetInfo[ IDStreet ][ sName ],
						streetInfo[ IDStreet ][ sbaseID ] );
		mysql_pquery( _dbConnector, sql_str, "", "" );
		StreetRefresh( IDStreet );
		SendInfoMessage( playerid, "Uspjesno si promjenio ime ulice." );
		//allowChangeBusName[ playerid ] = false;
	}
	else if( dialogid == dialog_FOMONEY ) {

		if( !response ) return true;
		if( response ) {

			new iznos, IDFirme = PlayerInfo[ playerid ][ xFirmaID ];
			if( sscanf(inputtext, "i", iznos)) return SendErrorMessage( playerid, "Niste uneli kolicinu novca za ostavljanje!");
			if( iznos < 1 || iznos > 10000000) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000000$!");
            if( iznos > PlayerInfo[ playerid  ][ xNovac ] ) return SendErrorMessage( playerid, "Nemate toliko novca kod sebe!");

			KGEyes_GivePlayerMoney( playerid, -iznos ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -iznos, "Ostavljanje u sef firme" ); BussinesInfo[ IDFirme ][ bMoney ] += iznos;
			SendInfoMessage( playerid, "Ostavili ste %d$ u kasu firme!", iznos );
		    sql_bussines_update_integer( IDFirme, "b_money", BussinesInfo[ IDFirme ][ bMoney ] );

		    new string[ 128 ];
			format( string, sizeof( string ), "Igrac %s je ostavio %d$ u firmu %s ID:%d", ImeIgraca( playerid ), iznos, BussinesInfo[ IDFirme ][ bName ], IDFirme );
			LogSave( "Ostalo/LogFirmaNovac.log", string );
		}
	}
	else if( dialogid == dialog_FPMONEY ) {

		if( !response ) return true;
		if( response ) {

			new iznos, IDFirme = PlayerInfo[ playerid ][ xFirmaID ];
			if( sscanf(inputtext, "i", iznos)) return SendErrorMessage( playerid, "Niste uneli kolicinu novca za ostavljanje!");
			if( iznos < 1 || iznos > 10000000 ) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000000$!");
            if( iznos > BussinesInfo[ IDFirme ][ bMoney ] ) return SendErrorMessage( playerid, "Nemate toliko novca u kasi!");

			KGEyes_GivePlayerMoney( playerid, iznos ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, iznos, "Uzimanje iz sefa firme" ); BussinesInfo[ IDFirme ][ bMoney ] -= iznos;
			SendInfoMessage( playerid, "Podigli ste %d$ iz kase firme!", iznos );
		    sql_bussines_update_integer( IDFirme, "b_money", BussinesInfo[ IDFirme ][ bMoney ] );

		    new string[ 128 ];
			format( string, sizeof( string ), "Igrac %s je podigao %d$ iz firme %s ID:%d", ImeIgraca( playerid ), iznos, BussinesInfo[ IDFirme ][ bName ], IDFirme );
			LogSave( "Ostalo/LogFirmaNovac.log", string );
		}
	}
	else if( dialogid == dialog_RESTORAN ) {
		if( !response ) return 1;

		switch( listitem ) {
			case 0: {
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return SendErrorMessage( playerid, "Nemate dovoljno novca 150$!");

				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 150 );
				KGEyes_GivePlayerMoney( playerid, -150 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -150, "Restoran" );
				DodajIgracuHP( playerid, 60 );
				format( globalstring, sizeof(globalstring), "* %s jede juhu.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 1: {
				if( PlayerInfo[ playerid ][ xNovac ] < 220) return SendErrorMessage( playerid, "Nemate dovoljno novca 220$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 220 );

				KGEyes_GivePlayerMoney( playerid, -220 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -220, "Restoran" );
				DodajIgracuHP( playerid, 80 );

				format(globalstring, sizeof(globalstring), "* %s jede Piletinu.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 2:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 350) return SendErrorMessage( playerid, "Nemate dovoljno novca 350$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 350 );

				KGEyes_GivePlayerMoney( playerid, -350 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -350, "Restoran" );
				DodajIgracuHP( playerid, 100 );

				format(globalstring, sizeof(globalstring), "* %s jede pecenog morskog psa na salati.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		    case 3:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 410) return SendErrorMessage( playerid, "Nemate dovoljno novca 410$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 410 );
				KGEyes_GivePlayerMoney( playerid, -410), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -410, "Restoran" );
				DodajIgracuHP( playerid, 100 );


				format(globalstring, sizeof(globalstring), "* %s jede spagete.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		    case 4:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 630) return SendErrorMessage( playerid, "Nemate dovoljno novca 630$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 630 );
				KGEyes_GivePlayerMoney( playerid, -630 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -630, "Restoran" );
				DodajIgracuHP( playerid, 100 );

				format(globalstring, sizeof(globalstring), "* %s jede kolac.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		    case 5:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 50) return SendErrorMessage( playerid, "Nemate dovoljno novca 50$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 50 );
				KGEyes_GivePlayerMoney( playerid, -50 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -50, "Restoran" );


				format(globalstring, sizeof(globalstring), "* %s pije coca colu.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
			case 6:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 25) return SendErrorMessage( playerid, "Nemate dovoljno novca 25$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 25 );
				KGEyes_GivePlayerMoney( playerid, -25 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -25, "Restoran" );

				format(globalstring, sizeof(globalstring), "* %s pije vodu.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
		}
	}
	else if( dialogid == dialog_CLUCKIN)
	{
		if( !response ) return 1;

		switch( listitem )
		{
			case 0:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return SendErrorMessage( playerid, "Nemate dovoljno novca 100$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 90 );
				KGEyes_GivePlayerMoney( playerid, -100 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -100, "Cluckin bell" );
				DodajIgracuHP( playerid, 40 );


				format(globalstring, sizeof(globalstring), "* %s jede Topli Sendvic.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 1:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return SendErrorMessage( playerid, "Nemate dovoljno novca 150$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 120 );
				KGEyes_GivePlayerMoney( playerid, -150 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -150, "Cluckin bell" );
				DodajIgracuHP( playerid, 60 );


				format(globalstring, sizeof(globalstring), "* %s jede Cevape.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 2:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return SendErrorMessage( playerid, "Nemate dovoljno novca 100$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 100 );
				KGEyes_GivePlayerMoney( playerid, -100 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -100, "Cluckin bell" );
				DodajIgracuHP( playerid, 40 );


				format(globalstring, sizeof(globalstring), "* %s jede Filete.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 3:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return SendErrorMessage( playerid, "Nemate dovoljno novca 100$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 80 );
				KGEyes_GivePlayerMoney( playerid, -100 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -100, "Cluckin bell" );
				DodajIgracuHP( playerid, 40 );

				format(globalstring, sizeof(globalstring), "* %s jede Vocnu salatu.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		    case 4:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 120) return SendErrorMessage( playerid, "Nemate dovoljno novca 120$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 100 );
				KGEyes_GivePlayerMoney( playerid, -120 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -120, "Cluckin bell" );
				DodajIgracuHP( playerid, 50 );


				format(globalstring, sizeof(globalstring), "* %s jede Kebab.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 5:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 50) return SendErrorMessage( playerid, "Nemate dovoljno novca 50$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 40 );
				KGEyes_GivePlayerMoney( playerid, -50 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -50, "Cluckin bell" );


				format(globalstring, sizeof(globalstring), "* %s pije sprite.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
			case 6:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 25 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 25$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 10 );
				KGEyes_GivePlayerMoney( playerid, -25 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -25, "Cluckin bell" );

				format(globalstring, sizeof(globalstring), "* %s pije vodu.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
		}
	}
	else if( dialogid == dialog_PIZZA ) {

		if( !response ) return 1;

		switch( listitem )
		{
			case 0:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return SendErrorMessage( playerid, "Nemate dovoljno novca 100$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 100);
				KGEyes_GivePlayerMoney( playerid, -100 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -100, "Pizza" );


				format(globalstring, sizeof(globalstring), "* %s jede Pizzetu.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 1:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return SendErrorMessage( playerid, "Nemate dovoljno novca 150$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 150);
				KGEyes_GivePlayerMoney( playerid, -150 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -150, "Pizza" );


				format(globalstring, sizeof(globalstring), "* %s jede Veliku pizzu.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 2:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 45) return SendErrorMessage( playerid, "Nemate dovoljno novca 45$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 40);
				KGEyes_GivePlayerMoney( playerid, -45 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -45, "Pizza" );


				format(globalstring, sizeof(globalstring), "* %s jede Topli sendvic.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 3:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 40) return SendErrorMessage( playerid, "Nemate dovoljno novca 40$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 40);
				KGEyes_GivePlayerMoney( playerid, -40 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -40, "Pizza" );

				format(globalstring, sizeof(globalstring), "* %s jede salatu.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		   	case 4:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 250) return SendErrorMessage( playerid, "Nemate dovoljno novca 250$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 230);
				KGEyes_GivePlayerMoney( playerid, -250 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -250, "Pizza" );


				format(globalstring, sizeof(globalstring), "* %s jede Jumbo Pizzu.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
		    case 5:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 50) return SendErrorMessage( playerid, "Nemate dovoljno novca 50$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 45);
				KGEyes_GivePlayerMoney( playerid, -50 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -50, "Pizza" );


				format(globalstring, sizeof(globalstring), "* %s pije Sprite.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
			case 6:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 25) return SendErrorMessage( playerid, "Nemate dovoljno novca 25$!");
				if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 20);
				KGEyes_GivePlayerMoney( playerid, -25 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -25, "Pizza" );

				format(globalstring, sizeof(globalstring), "* %s pije vodu.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
		}
	}
	else if( dialogid == dialog_DRINK ) {

	    new drunklevel = GetPlayerDrunkLevel( playerid );
		if( !response ) return 1;

		switch( listitem ) {
			case 0: {
				if( PlayerInfo[ playerid ][ xNovac ] < 200) return SendErrorMessage( playerid, "Nemate dovoljno novca 200$!");

				if( uFirmi[ playerid ] != -1 && PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ] , 200 );

				KGEyes_GivePlayerMoney( playerid, -200 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -200, "Drink Menu" );

				SetPlayerDrunkLevel( playerid, drunklevel + 1000);
				if( drunklevel > 2000 ) {
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije viski.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_BEER);
			}
			case 1: {
				if( PlayerInfo[ playerid ][ xNovac ] < 170) return SendErrorMessage( playerid, "Nemate dovoljno novca 170$!");
				if( uFirmi[ playerid ] != -1 && PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 170 );

				KGEyes_GivePlayerMoney( playerid, -170 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -170, "Drink Menu" );

				SetPlayerDrunkLevel( playerid, drunklevel + 500);
				if( drunklevel > 2000 ) {
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije vodku.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 2: {
				if( PlayerInfo[ playerid ][ xNovac ] < 85) return SendErrorMessage( playerid, "Nemate dovoljno novca 85$!");
				if( uFirmi[ playerid ] != -1 && PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 85 );


				KGEyes_GivePlayerMoney( playerid, -85 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -85, "Drink Menu" );

				SetPlayerDrunkLevel( playerid, drunklevel + 200);
				if( drunklevel > 2000 ) {
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije Heineken pivo.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 3: {
				if( PlayerInfo[ playerid ][ xNovac ] < 120) return SendErrorMessage( playerid, "Nemate dovoljno novca 120$!");
				if( uFirmi[ playerid ] != -1 && PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 120 );


				KGEyes_GivePlayerMoney( playerid, -120 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -120, "Drink Menu" );

				SetPlayerDrunkLevel( playerid, drunklevel + 800);
				if( drunklevel > 2000 ) {
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije Konjak.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 4: {
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return SendErrorMessage( playerid, "Nemate dovoljno novca 150$!");
				if( uFirmi[ playerid ] != -1 && PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 150 );


				KGEyes_GivePlayerMoney( playerid, -150 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -150, "Drink Menu" );

				SetPlayerDrunkLevel( playerid, drunklevel + 500);
				if( drunklevel > 2000 ) {
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije tekilu.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 5: {
				if( PlayerInfo[ playerid ][ xNovac ] < 290) return SendErrorMessage( playerid, "Nemate dovoljno novca 290$!");
				if( uFirmi[ playerid ] != -1 && PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 290 );


				KGEyes_GivePlayerMoney( playerid, -290 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -290, "Drink Menu" );

				SetPlayerDrunkLevel( playerid, drunklevel + 700);
				if( drunklevel > 2000 ) {
					GameTextForPlayer( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije Jack Daniels.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 6: {
				if( PlayerInfo[ playerid ][ xNovac ] < 60 )  return SendErrorMessage( playerid, "Nemate dovoljno novca 60$!");
				if( uFirmi[ playerid ] != -1 && PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 60 );


				KGEyes_GivePlayerMoney( playerid, -60 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -60, "Drink Menu" );

				format( globalstring, sizeof( globalstring ), "* %s pije mineralnu vodu.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 7: {
				if( PlayerInfo[ playerid ][ xNovac ] < 80 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 80$!");
				if( uFirmi[ playerid ] != -1 && PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 80 );

				KGEyes_GivePlayerMoney( playerid, -80 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -80, "Drink Menu" );

				format( globalstring, sizeof( globalstring ), "* %s pije Cedevitu od Narandze.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 8: {
				if( PlayerInfo[ playerid ][ xNovac ] < 50 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 50$!");
				if( uFirmi[ playerid ] != -1 && PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 50 );

				KGEyes_GivePlayerMoney( playerid, -50 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -50, "Drink Menu" );

				format( globalstring, sizeof( globalstring ), "* %s pije coca colu.", RPImeIgraca( playerid ) );
			    PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
			    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
		}
	}
	if( dialogid == dialog_acceptJob ) {
		if( !response ) return 1;
        if( response ) {
        	if( PlayerInfo[ playerid ][ xPosao ] == 0 ) {

				if( GetPlayerState( playerid ) == 1 ) {

					if( ChosenJob[ playerid ] != 0 ) {

					    if( !IsPlayerInRangeOfPoint( playerid, 5.0, jobsInfos[ ChosenJob[ playerid ]-1 ][ jTakeJobPos ][ 0 ], jobsInfos[ ChosenJob[ playerid ]-1 ][  jTakeJobPos ][ 1 ], jobsInfos[ ChosenJob[ playerid ]-1 ][ jTakeJobPos ][ 2 ] ) ) return SendErrorMessage( playerid, "Morate stajati na pickupu da bi uzeli posao!");

					
						SendJobMessage( playerid, "Zaposlivsi se potpisali ste ugovor od 3h." );

						PlayerInfo[ playerid ][ xPosao ] = ChosenJob[ playerid ];
						PlayerInfo[ playerid ][ xUgovor ] = 0;


						mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `users` SET `job_id` = '%d', `contract` = '%d' WHERE `user_id` = '%d' LIMIT 1",
							PlayerInfo[ playerid ][ xPosao ],
							PlayerInfo[ playerid ][ xUgovor ],
							PlayerInfo[ playerid ][ xID ] );
						mysql_pquery( _dbConnector, sql_str, "", "" );

		            } else SendErrorMessage( playerid, "Morate stajati na pickupu da bi uzeli posao!");

				} else SendErrorMessage( playerid, "Ne smete biti u vozilu!");

			} else SendErrorMessage( playerid, "Vec imate posao! Koristite /otkaz da date otkaz!");

        }
    }
	if( dialogid == dialog_gunDealer ) {
		if( !response ) return 1;
        if( response ) {

        	if( PlayerInfo[ playerid ][ xNovac ] < 15000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 15.000$!");
			KGEyes_GivePlayerMoney( playerid, -15000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -15000, "Diler oruzja" );
			GiveWeaponToPlayer( playerid, 22, 100);
			format( globalstring, sizeof( globalstring ), "* %s je kupio Pistol 9mm.", RPImeIgraca( playerid ) );
			PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );


			if( IsPlayerInRangeOfPoint( playerid, 3.0, 1889.1891,-2107.8833,13.5843 ) ) {
				ApplyDynamicActorAnimation( dealerActors[ 0 ], "DEALER", "DEALER_DEAL", 3.0, 0, 0, 0, 0, 0);
			}
			else if( IsPlayerInRangeOfPoint( playerid, 3.0, 2445.0466,-1962.9554,13.5469 ) ) {
				ApplyDynamicActorAnimation( dealerActors[ 1 ], "DEALER", "DEALER_DEAL", 3.0, 0, 0, 0, 0, 0);
			}
			else if( IsPlayerInRangeOfPoint( playerid, 3.0, 2263.3477,-1700.7568,13.7042 ) ) {
				ApplyDynamicActorAnimation( dealerActors[ 2 ], "DEALER", "DEALER_DEAL", 3.0, 0, 0, 0, 0, 0);
			}
			else if( IsPlayerInRangeOfPoint( playerid, 3.0, 2542.4360,-1433.4398,24.0257 ) ) {
				ApplyDynamicActorAnimation( dealerActors[ 3 ], "DEALER", "DEALER_DEAL", 3.0, 0, 0, 0, 0, 0);
			}
        }
    }
	if( dialogid == dialog_purge ) {
		if( !response ) return 1;
        if( response ) {

        	if( PlayerInfo[ playerid ][ xNovac ] < 300000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 300.000$!");
			KGEyes_GivePlayerMoney( playerid, -300000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -300000, "Purge paket" );

			GiveWeaponToPlayer( playerid, 16, 10);

			GiveWeaponToPlayer( playerid, 35, 10);
			format( globalstring, sizeof( globalstring ), "* %s je kupio double paket.", RPImeIgraca( playerid ) );
			PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
        }
    }
	else if( dialogid == dialog_GUNSHOP ) {

        if( response ) {

            switch( listitem ) {

				case 0: {

					if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 500$!");
					KGEyes_GivePlayerMoney( playerid, -500 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -500, "Gun shop - 1" );
					GiveWeaponToPlayer( playerid, 4, 1);
					format( globalstring, sizeof( globalstring ), "* %s je kupio noz.", RPImeIgraca( playerid ) );
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 250);
        		}
        		case 1:  {

					if( PlayerInfo[ playerid ][ xNovac ] < 500) return SendErrorMessage( playerid, "Nemate dovoljno novca 500$!");
					KGEyes_GivePlayerMoney( playerid, -500 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -500, "Gun shop - 2" );
					GiveWeaponToPlayer( playerid, 5, 1 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio palicu.", RPImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 250);
        		}
                case 2:  {

					if( PlayerInfo[ playerid ][ xNovac ] < 1000) return SendErrorMessage( playerid, "Nemate dovoljno novca 1.000$!");
					KGEyes_GivePlayerMoney( playerid, -1000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -1000, "Gun shop - 3" );
					GiveWeaponToPlayer( playerid, 22, 100 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Colt 45.", RPImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 500 );
        		}
        		case 3: {

					if( PlayerInfo[ playerid ][ xNovac ] < 3000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 3.000$!");
					KGEyes_GivePlayerMoney( playerid, -3000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -3000, "Gun shop - 4" );
					GiveWeaponToPlayer( playerid, 24, 100 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Desert Eagle.", RPImeIgraca( playerid ) );
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 1500 );
        		}
        		case 4: {

					if( PlayerInfo[ playerid ][ xNovac ] < 4000) return SendErrorMessage( playerid, "Nemate dovoljno novca 4.000$!");
					KGEyes_GivePlayerMoney( playerid, -4000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -4000, "Gun shop - 5" );
					GiveWeaponToPlayer( playerid, 25, 50 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Shotgun.", RPImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 2000 );
        		}
        		case 5: {

					if( PlayerInfo[ playerid ][ xNovac ] < 5000) return SendErrorMessage( playerid, "Nemate dovoljno novca 5.000$!");
					KGEyes_GivePlayerMoney( playerid, -5000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -5000, "Gun shop - 6" );
					GiveWeaponToPlayer( playerid, 33, 50 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Country Rifle.", RPImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 2500 );
        		}
        		case 6: {

					if( PlayerInfo[ playerid ][ xNovac ] < 5000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 5.000$!");
					KGEyes_GivePlayerMoney( playerid, -5000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -5000, "Gun shop - 7" );
					GiveWeaponToPlayer( playerid, 29, 200 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio MP5.", RPImeIgraca( playerid ) );
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 2500 );
        		}
        		case 7: {

					if( PlayerInfo[ playerid ][ xNovac ] < 6000) return SendErrorMessage( playerid, "Nemate dovoljno novca 6.000$!");
					KGEyes_GivePlayerMoney( playerid, -6000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -6000, "Gun shop - 8" );
					GiveWeaponToPlayer( playerid, 31, 150 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio M4.", RPImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 3000 );
        		}
        		case 8: {

					if( PlayerInfo[ playerid ][ xNovac ] < 8000) return SendErrorMessage( playerid, "Nemate dovoljno novca 8.000$!");
					KGEyes_GivePlayerMoney( playerid, -8000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -8000, "Gun shop - 9" );
					GiveWeaponToPlayer( playerid, 34, 50 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Sniper.", RPImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 4000 );
        		}
        		case 9: {

					if( PlayerInfo[ playerid ][ xNovac ] < 3000) return SendErrorMessage( playerid, "Nemate dovoljno novca 3.000$!");
					KGEyes_GivePlayerMoney( playerid, -3000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -3000, "Gun shop - 10" );
					KGEyes_SetPlayerArmour( playerid, 100 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio pancir.", RPImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 1500 );
        		}
				case 10: {

					if( PlayerInfo[ playerid ][ xNovac ] < 1000) return SendErrorMessage( playerid, "Nemate dovoljno novca 1.000$!");
					KGEyes_GivePlayerMoney( playerid, -1000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -1000, "Gun shop - 11" );
					GiveWeaponToPlayer( playerid, 8, 1 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio katanu.", RPImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 500 );
        		}
			}
		}
	}
	else if( dialogid == dialog_SEXSHOP ) {

        if( response ) {

            switch( listitem ) {

				case 0: {

					if( PlayerInfo[ playerid ][ xNovac ] < 100000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 100.000$!");
					KGEyes_GivePlayerMoney( playerid, -100000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -100000, "Sex Shop - Dildo" );
					GiveWeaponToPlayer( playerid, 10, 1);
					format( globalstring, sizeof( globalstring ), "* %s je kupio Purple dildo.", RPImeIgraca( playerid ) );
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 10000);
        		}
        		case 1:  {

					if( PlayerInfo[ playerid ][ xNovac ] < 90000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 90.000$!");
					KGEyes_GivePlayerMoney( playerid, -90000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -90000, "Sex Shop - Dildo" );
					GiveWeaponToPlayer( playerid, 11, 1 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Dildo.", RPImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 9000);
        		}
                case 2:  {

					if( PlayerInfo[ playerid ][ xNovac ] < 90000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 90.000$!");
					KGEyes_GivePlayerMoney( playerid, -90000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -90000, "Sex Shop - Vibrator" );
					GiveWeaponToPlayer( playerid, 12, 1 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Vibrator.", RPImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 9000 );
        		}
        		case 3: {

					if( PlayerInfo[ playerid ][ xNovac ] < 100000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 100.000$!");
					KGEyes_GivePlayerMoney( playerid, -100000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -100000, "Sex Shop - Vibrator" );
					GiveWeaponToPlayer( playerid, 13, 1 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Silver Vibrator.", RPImeIgraca( playerid ) );
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], 10000 );
        		}
			}
		}
	}
	else if( dialogid == dialog_M_ISPIT)
	{
	    if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 1)
	    {
		    if( response )
		    {
		        SetPVarInt( playerid, "dialog_M_POLAGANJE", 2);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 2);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 2)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 3);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u nenaseljenim mjestima?", "130km/h", "50km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_M_POLAGANJE", 3);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u nenaseljenim mjestima?", "130km/h", "50km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 3)
	    {
		    if( response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 4);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_server"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_M_POLAGANJE", 4);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_server"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 4)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 5);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_server"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_M_POLAGANJE", 5);
				SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_server"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 5)
	    {
		    if( response )
		    {
				if(PolaganjeBodovi[ playerid ]  >= 4)
				{
					DeletePVar( playerid, "dialog_M_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_server"%d "col_white"bodova.\nDobili ste dozvolu za motor.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xMotorska ] = 1;

					sql_user_update_integer( playerid, "bike_license", PlayerInfo[ playerid ][ xMotorska ] );
				}
				else if(PolaganjeBodovi[ playerid ]  < 4)
				{
					SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_M_POLAGANJE");
				}
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				if(PolaganjeBodovi[ playerid ]  >= 4)
				{
					DeletePVar( playerid, "dialog_M_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_server"%d "col_white"bodova.\nDobili ste dozvolu za motor.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xMotorska ] = 1;

					sql_user_update_integer( playerid, "bike_license", PlayerInfo[ playerid ][ xMotorska ] );
				}
				else if(PolaganjeBodovi[ playerid ]  < 4)
				{
					SPD( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_M_POLAGANJE");
				}
		    }
		}
	}
	else if( dialogid == dialog_A_ISPIT)
	{
	    if(GetPVarInt( playerid, "dialog_POLAGANJE") == 1)
	    {
		    if( response )
		    {
		        SetPVarInt( playerid, "dialog_POLAGANJE", 2);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_POLAGANJE", 2);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 2)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_POLAGANJE", 3);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u nenaseljenim mjestima?", "130km/h", "50km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_POLAGANJE", 3);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u nenaseljenim mjestima?", "130km/h", "50km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 3)
	    {
		    if( response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_POLAGANJE", 4);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_server"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_POLAGANJE", 4);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_server"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 4)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_POLAGANJE", 5);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_server"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_POLAGANJE", 5);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_server"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 5)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_POLAGANJE", 6);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_server"Preticanje je dozvoljeno sa koje strane?\n\n"col_crvena"A) "col_white"Leve\n"col_crvena"B) "col_white"Desne", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_POLAGANJE", 6);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_server"Preticanje je dozvoljeno sa koje strane?\n\n"col_crvena"A) "col_white"Leve\n"col_crvena"B) "col_white"Desne", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 6)
	    {
		    if( response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_POLAGANJE", 7);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_server"Na raskrscu sa semaforima i policajcem , treba slusati?\n\n"col_crvena"A) "col_white"Semafor\n"col_crvena"B) "col_white"Policajac", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_POLAGANJE", 7);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_server"Na raskrscu sa semaforima i policajcem , treba slusati?\n\n"col_crvena"A) "col_white"Semafor\n"col_crvena"B) "col_white"Policajac", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 7)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_POLAGANJE", 8);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_server"Kada se vozilo krece unazad u desnoj traci:\n\n"col_crvena"A) "col_white"Ne treba ukljuciti sva 4 pokazivaca pravca\n"col_crvena"B) "col_white"Treba ukljuciti sva 4 pokazivaca pravca", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_POLAGANJE", 8);
				SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_server"Kada se vozilo krece unazad u desnoj traci?\n\n"col_crvena"A) "col_white"Ne treba ukljuciti sva 4 pokazivaca pravca\n"col_crvena"B) "col_white"Treba ukljuciti sva 4 pokazivaca pravca", "A", "B");
		    }
		}
	    else if( GetPVarInt( playerid, "dialog_POLAGANJE") == 8 ) {

		    if( response ) {

				if( PolaganjeBodovi[ playerid ]  >= 7 ) {

					DeletePVar( playerid, "dialog_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_server"%d "col_white"bodova.\nSada izadjite napolje i sedite u neko od vozila.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0; PlayerInfo[ playerid ][ xVozacka ] = 0;
                    Polaganje[ playerid ] = 1; CheckpointStatus[ playerid ] = 13; GreskaVoznja[ playerid ] = 0;
					KGEyes_SetPlayerCheckpoint( playerid, 2026.3416,-2142.0330,13.5417, 5.0 );
					SCM( playerid, -1, ""col_job"[INSTRUKTOR]: "col_white"Idi na poligon i uzmi vozilo da obavis voznju marker ti je oznacen na mapi!");
					SCM( playerid, -1, ""col_job"[INSTRUKTOR]: "col_white"PAZITE DA NE PREDJETE 100KM/H IMATE PRAVO NA 3 GRESKE." );
				}
				else if( PolaganjeBodovi[ playerid ]  < 7 ) {

					SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_POLAGANJE");
					Polaganje[ playerid ] = 0;
				}
		    }
		    else if( !response ) {

				PolaganjeBodovi[ playerid ] ++;
				if( PolaganjeBodovi[ playerid ]  >= 7 ) {

					DeletePVar( playerid, "dialog_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_server"%d "col_white"bodova.\nSada izadjite napolje i sedite u neko od vozila.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0; PlayerInfo[ playerid ][ xVozacka ] = 0;
					Polaganje[ playerid ] = 1; CheckpointStatus[ playerid ] = 13; GreskaVoznja[ playerid ] = 0;
					KGEyes_SetPlayerCheckpoint( playerid, 2026.3416,-2142.0330,13.5417, 5.0 );
					SCM( playerid, -1, ""col_job"[INSTRUKTOR]: "col_white"Idi na poligon i uzmi vozilo da obavis voznju!");
                	SCM( playerid, -1, ""col_job"[INSTRUKTOR]: "col_white"PAZITE DA NE PREDJETE 100KM/H IMATE PRAVO NA 3 GRESKE." );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					SPD( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_POLAGANJE");
					Polaganje[ playerid ] = 0;
				}
		    }
		}
	}
	else if( dialogid == dialog_K_ISPIT)
	{
	    if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 1)
	    {
		    if( response )
		    {
		        SetPVarInt( playerid, "dialog_K_POLAGANJE", 2);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 2);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 2)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 3);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u nenaseljenim mjestima?", "130km/h", "50km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_K_POLAGANJE", 3);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u nenaseljenim mjestima?", "130km/h", "50km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 3)
	    {
		    if( response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 4);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_server"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_K_POLAGANJE", 4);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_server"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 4)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 5);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_server"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_K_POLAGANJE", 5);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_server"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 5)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 6);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_server"Ukoliko skrecete lijevo na raskrizju bez semafora vi cete\n\n"col_crvena"A) "col_white"Pustiti automobil iz suprotnog smera da prodje\n"col_crvena"B) "col_white"Skrenuti pre njega", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_K_POLAGANJE", 6);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_server"Ukoliko skrecete lijevo na raskrizju bez semafora vi cete\n\n"col_crvena"A) "col_white"Pustiti automobil iz suprotnog smera da prodje\n"col_crvena"B) "col_white"Skrenuti pre njega", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 6)
	    {
		    if( response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 7);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_server"Ukoliko Vidite prometnu nesrecu sa ozljedenim osobama vi cete\n\n"col_crvena"A) "col_white"Zaustaviti se i pruziti prvu pomoc\n"col_crvena"B) "col_white"Nastaviti voziti", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_K_POLAGANJE", 7);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_server"Ukoliko Vidite prometnu nesrecu sa ozljedenim osobama vi cete\n\n"col_crvena"A) "col_white"Zaustaviti se i pruziti prvu pomoc\n"col_crvena"B) "col_white"Nastaviti voziti", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 7)
	    {
		    if( response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 8);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_server"Na raskrizju gde postoji semafor postujete?\n\n"col_crvena"A) "col_white"Pravila saobracaja\n"col_crvena"B) "col_white"Semafor", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_K_POLAGANJE", 8);
				SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_server"Na raskrizju gde postoji semafor postujete?\n\n"col_crvena"A) "col_white"Pravila saobracaja\n"col_crvena"B) "col_white"Semafor", "A", "B");
		    }
		}
	    else if( GetPVarInt( playerid, "dialog_K_POLAGANJE" ) == 8 ) {

		    if( response ) {

				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_K_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_server"%d "col_white"bodova.\nDobili ste dozvolu za kombi.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xKamionskaC1 ] = 1;

					sql_user_update_integer( playerid, "c1_license", PlayerInfo[ playerid ][ xKamionskaC1 ] );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_K_POLAGANJE");
				}
		    }
		    else if( !response ) {

				PolaganjeBodovi[ playerid ] ++;
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_K_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_server"%d "col_white"bodova.\nDobili ste dozvolu za kombi.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xKamionskaC1 ] = 1;

					sql_user_update_integer( playerid, "c1_license", PlayerInfo[ playerid ][ xKamionskaC1 ] );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					SPD( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_K_POLAGANJE");
				}
		    }
		}
	}
	else if( dialogid == dialog_C2_ISPIT )
	{
	    if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 1)
	    {
		    if( response )
		    {
		        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 2);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 2);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 2)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 3);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u nenaseljenim mjestima?", "130km/h", "50km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 3);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u nenaseljenim mjestima?", "130km/h", "50km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 3)
	    {
		    if( response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 4);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_server"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 4);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_server"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 4)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 5);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_server"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 5);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_server"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 5)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 6);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_server"Zabranjeno je da vozilom u saobrac'aju upravlja pod dejstvom alkohola vozac:\n\n"col_crvena"A) "col_white"Motornog vozila bilo koje kategorije \n"col_crvena"B) "col_white"Motornog vozila samo C i D kategorije ", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 6);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_server"Zabranjeno je da vozilom u saobrac'aju upravlja pod dejstvom alkohola vozac:\n\n"col_crvena"A) "col_white"Motornog vozila bilo koje kategorije \n"col_crvena"B) "col_white"Motornog vozila samo C i D kategorije ", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 6)
	    {
		    if( response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 7);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_server"Oznaka na vozilu kojom se oznacava da je vozilo upisano u jedinstveni registar vozila je:\n\n"col_crvena"A) "col_white"Registarska tablica \n"col_crvena"B) "col_white"Saobracajna dozvola", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 7);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_server"Oznaka na vozilu kojom se oznacava da je vozilo upisano u jedinstveni registar vozila je:\n\n"col_crvena"A) "col_white"Registarska tablica \n"col_crvena"B) "col_white"Saobracajna dozvola", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 7)
	    {
		    if( response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 8);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_server"Za vrijeme upravljanja vozilom, vozac kod sebe:\n\n"col_crvena"A) "col_white"Ne mora imati saobracajnu dozvolu \n"col_crvena"B) "col_white"Mora imati saobracajnu dozvolu", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_C2_POLAGANJE", 8);
				SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_server"Za vrijeme upravljanja vozilom, vozac kod sebe:\n\n"col_crvena"A) "col_white"Ne mora imati saobracajnu dozvolu \n"col_crvena"B) "col_white"Mora imati saobracajnu dozvolu", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 8)
	    {
		    if( response )
		    {
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_C2_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_server"%d "col_white"bodova.\nDobili ste dozvolu za kamion.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xKamionskaC2 ] = 1;

					sql_user_update_integer( playerid, "c2_license", PlayerInfo[ playerid ][ xKamionskaC2 ] );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_C2_POLAGANJE");
				}
		    }
		    else if( !response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_C2_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_server"%d "col_white"bodova.\nDobili ste dozvolu za kamion.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xKamionskaC2 ] = 1;

					sql_user_update_integer( playerid, "c2_license", PlayerInfo[ playerid ][ xKamionskaC2 ] );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					SPD( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_C2_POLAGANJE");
				}
		    }
		}
	}
	else if( dialogid == dialog_C3_ISPIT )
	{
	    if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 1)
	    {
		    if( response )
		    {
		        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 2);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 2);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 2)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 3);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u nenaseljenim mjestima?", "130km/h", "50km/h");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 3);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u nenaseljenim mjestima?", "130km/h", "50km/h");
		    }
	    }
	    else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 3)
	    {
		    if( response )
		    {
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 4);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_server"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 4);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_server"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 4)
	    {
		    if( response )
		    {
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 5);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_server"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		    else if( !response )
		    {
				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 5);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_server"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 5)
	    {
		    if( response ) {
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 6);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_server"Zabranjeno je da vozilom u saobrac'aju upravlja pod dejstvom alkohola vozac:\n\n"col_crvena"A) "col_white"Motornog vozila bilo koje kategorije \n"col_crvena"B) "col_white"Motornog vozila samo C i D kategorije ", "A", "B");
		    }
		    else if( !response ) {

				PolaganjeBodovi[ playerid ] ++;
		        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 6);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_server"Zabranjeno je da vozilom u saobrac'aju upravlja pod dejstvom alkohola vozac:\n\n"col_crvena"A) "col_white"Motornog vozila bilo koje kategorije \n"col_crvena"B) "col_white"Motornog vozila samo C i D kategorije ", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 6)
	    {
		    if( response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 7);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_server"Oznaka na vozilu kojom se oznacava da je vozilo upisano u jedinstveni registar vozila je:\n\n"col_crvena"A) "col_white"Registarska tablica \n"col_crvena"B) "col_white"Saobracajna dozvola", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 7);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_server"Oznaka na vozilu kojom se oznacava da je vozilo upisano u jedinstveni registar vozila je:\n\n"col_crvena"A) "col_white"Registarska tablica \n"col_crvena"B) "col_white"Saobracajna dozvola", "A", "B");
		    }
		}
		else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 7)
	    {
		    if( response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 8);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_server"Za vrijeme upravljanja vozilom, vozac kod sebe:\n\n"col_crvena"A) "col_white"Ne mora imati saobracajnu dozvolu \n"col_crvena"B) "col_white"Mora imati saobracajnu dozvolu", "A", "B");
		    }
		    else if( !response )
		    {
		        SetPVarInt( playerid, "dialog_C3_POLAGANJE", 8);
				SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_server"Za vrijeme upravljanja vozilom, vozac kod sebe:\n\n"col_crvena"A) "col_white"Ne mora imati saobracajnu dozvolu \n"col_crvena"B) "col_white"Mora imati saobracajnu dozvolu", "A", "B");
		    }
		}
	    else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 8)
	    {
		    if( response )
		    {
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_C3_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_server"%d "col_white"bodova.\nDobili ste dozvolu za kamion sa prikolicom.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0; PlayerInfo[ playerid ][ xKamionskaC3 ] = 1;

					sql_user_update_integer( playerid, "c3_license", PlayerInfo[ playerid ][ xKamionskaC3 ] );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_C3_POLAGANJE");
				}
		    }
		    else if( !response )
		    {
		        PolaganjeBodovi[ playerid ] ++;
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_C3_POLAGANJE");
			        format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_server"%d "col_white"bodova.\nDobili ste dozvolu za kamion sa prikolicom.", PolaganjeBodovi[ playerid ] );
					SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0; PlayerInfo[ playerid ][ xKamionskaC3 ] = 1;

					sql_user_update_integer( playerid, "c3_license", PlayerInfo[ playerid ][ xKamionskaC3 ] );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					SPD( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_C3_POLAGANJE");
				}
		    }
		}
	}
	else if( dialogid == dialog_ORMAR ) {
	    if( response == 1 ) {
            switch( listitem ) {
                case 0: {
                    if( II[ inProperty[ playerid ] ][ iSkin_1 ] == 0 )
                    {
                        SCM( playerid, BELA, "Spremili ste trenutnu odjecu u ormar!");
	                    II[ inProperty[ playerid ] ][ iSkin_1 ] = GetPlayerSkin( playerid );
	                    KGEyes_SetPlayerSkin( playerid, 154 );
						PostaviIgracuSkin( playerid, 154 );

						mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_skin_1` = '%d' WHERE `propID` = '%d'",
								II[ inProperty[ playerid ] ][ iSkin_1 ],
								II[ inProperty[ playerid ] ][ ibaseID ] );

						mysql_pquery( _dbConnector, sql_str, "", "");
					}
					else if( II[ inProperty[ playerid ] ][ iSkin_2 ] == 0 )
                    {
                        SCM( playerid, BELA, "Spremili ste trenutnu odjecu u ormar!");
	                    II[ inProperty[ playerid ] ][ iSkin_2 ] = GetPlayerSkin( playerid );
	                    KGEyes_SetPlayerSkin( playerid, 154 );
						PostaviIgracuSkin( playerid, 154 );

						mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_skin_2` = '%d' WHERE `propID` = '%d'",
								II[ inProperty[ playerid ] ][ iSkin_2 ],
								II[ inProperty[ playerid ] ][ ibaseID ] );

						mysql_pquery( _dbConnector, sql_str, "", "");
					}
					else if( II[ inProperty[ playerid ] ][ iSkin_3 ] == 0 )
                    {
                        SCM( playerid, BELA, "Spremili ste trenutnu odjecu u ormar!");
	                    II[ inProperty[ playerid ] ][ iSkin_3 ] = GetPlayerSkin( playerid );
	                    KGEyes_SetPlayerSkin( playerid, 154 );
	                    PostaviIgracuSkin( playerid, 154 );

						mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_skin_3` = '%d' WHERE `propID` = '%d'",
								II[ inProperty[ playerid ] ][ iSkin_3 ],
								II[ inProperty[ playerid ] ][ ibaseID ] );

						mysql_pquery( _dbConnector, sql_str, "", "");
					}
					else return SendErrorMessage( playerid, "Nemate mjesta za vise odece u ormaru." );
                }
                case 1: {

			    	KGEyes_SetPlayerPos( playerid, 258.4893,-41.4008,1002.0234 );
					SetPlayerInterior( playerid, 14 );
					SetPlayerFacingAngle( playerid, 270.0 );
					SetPlayerCameraPos( playerid, 256.0815, -43.0475, 1004.0234 );
					SetPlayerCameraLookAt( playerid, 258.4893, -41.4008, 1002.0234 );
     				KGEyes_TogglePlayerControllable( playerid, false );
					ApplyAnimation( playerid, "CLOTHES","CLO_Pose_Legs",4.1,1,0,0,0,0, 1);

					OrmarTDControl( playerid, true );
				}
			}
		}
	}
	else if( dialogid == dialog_KUPIKARTICU ) {
	    new string[ 128 ];
	    if( response ) {
            switch( listitem )  {
                case 0: {

                    new randphone = 100000 + random(899999);
                    format( string, sizeof( string ), "064%d", randphone );
					PlayerInfo[ playerid ][ xBrojTelefona ] = strval( string );
					format( globalstring, sizeof( globalstring ), "Vas novi broj mobilnog telefona je %d", strval( string ) );
					SCM( playerid, ZUTA, globalstring);

					sql_user_update_integer( playerid, "phone_number", PlayerInfo[ playerid ][ xBrojTelefona ]);
                }
                case 1: {

                    new randphone = 100000 + random(899999);
                    format( string, sizeof( string ), "061%d", randphone );
					PlayerInfo[ playerid ][ xBrojTelefona ] = strval( string );
					format( globalstring, sizeof( globalstring ), "Vas novi broj mobilnog telefona je %d", strval( string ) );
					SCM( playerid, ZUTA, globalstring);

					sql_user_update_integer( playerid, "phone_number", PlayerInfo[ playerid ][ xBrojTelefona ]);
                }
                case 2: {

                    new randphone = 100000 + random(899999);
                    format( string, sizeof( string ), "063%d", randphone );
					PlayerInfo[ playerid ][ xBrojTelefona ] = strval( string );
					format( globalstring, sizeof( globalstring ), "Vas novi broj mobilnog telefona je %d", strval( string ) );
					SCM( playerid, ZUTA, globalstring);

					sql_user_update_integer( playerid, "phone_number", PlayerInfo[ playerid ][ xBrojTelefona ]);
                }
			}
		}
	}
	
    else if( dialogid == dialog_SEARCH_NAME && response && strlen( inputtext ) ) {

		if( GetPlayerIdFromName( inputtext ) == INVALID_PLAYER_ID ) {
			SCM( playerid, CRVENA, "Pogresno ime gradjanina.");
			return 1;
		}
		new SexTxt[ 7 ], ID = GetPlayerIdFromName( inputtext );

        if( PlayerInfo[ ID ][ xPol ] == 2 ) format( SexTxt, sizeof( SexTxt ), "Zensko" );
		else format( SexTxt, sizeof( SexTxt ), "Musko" );
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		format( DialogStrgEx, sizeof( DialogStrgEx ), "Ime i prezime: %s\nPol: %s\nGodine: %d\n\nPosao: %s\nBroj mobilnog: %d\n\nZlocin : %s\nPrijavio : %s",
		ImeIgraca( ID ), SexTxt, PlayerInfo[ ID ][ xGodine ], getJobName( PlayerInfo[ ID ][ xPosao ] ), PlayerInfo[ ID ][ xBrojTelefona ], ZlocinInfo[ ID ][ zZlocin ], ZlocinInfo[ ID ][ zPrijavio ] );

		SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		return true;
	}
	else if( dialogid == dialog_SEARCH_NUMBERPLATE && response && strlen( inputtext ) ) {

		new vehicleid = strval( inputtext );

    	if( vehicleid != INVALID_VEHICLE_ID ) return SendErrorMessage( playerid, "Krivi unos." );
        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		format( DialogStrgEx, sizeof( DialogStrgEx ), "Model: %s\nRegistracija: 'LS - %d'\nVlasnik: %s", ImeVozila[ VehicleInfo[ vehicleid ][ vModel ]-400 ], vehicleid, VehicleInfo[ vehicleid ][ vOwner ] );
		SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

		return true;
	}
	else if( dialogid == dialog_POSTAVIPOTERU && response && strlen( inputtext ) ) {

		new lala[ 32 ], tekst[ 64 ];
		if( sscanf( inputtext,"s[32]s[64]", lala, tekst ) ) return SendErrorMessage( playerid, "Krivi unos." );
        if( GetPlayerIdFromName( lala ) == INVALID_PLAYER_ID ) {
			SCM( playerid, CRVENA, "Pogresno ime gradjanina.");
			return 1;
		}
		new id = GetPlayerIdFromName( lala );
		if( id == playerid ) return SendErrorMessage( playerid, "Ne mozete sebi dati wanted level!");
    	if( GetFactionType( id ) == ORG_TIP_PD ) return SendErrorMessage( playerid, "Ne mozes dati wl policajcu.");
    	if( dsys_info[ id ][ ds_b_w ] ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu nad igracem koji je ranjen." );
    	if(  antiCheatCS[ id ][ AFKMinute ] > 5 ) return SendErrorMessage( playerid, "Ne mozes koristiti ovu komandu nad igracom koji je duze od 5 minuta AFK." );
		PostaviWanted( id, tekst, ImeIgraca( playerid ) );
		return true;
	}
	else if( dialogid == dialog_OCISTIDOSIJE && response && strlen( inputtext ) ) {

		if( GetPlayerIdFromName( inputtext ) == INVALID_PLAYER_ID)
  		{
			SCM( playerid, CRVENA, "Pogresno ime gradjanina.");
			return 1;
		}
		new ID = GetPlayerIdFromName( inputtext );
		if( GetFactionType( ID ) == ORG_TIP_PD ) return SendErrorMessage( playerid, "Ne mozes ocistiti WL PD/FBI/LSA clanu." );
		PlayerInfo[ ID ][ xWanted ] = 0;
	    KGEyes_SetPlayerWantedLevel( ID, PlayerInfo[ ID ][ xWanted ] );
	    strmid( ZlocinInfo[ ID ][zPrijavio], "Nema", 0, strlen("Nema"), 255);
		strmid( ZlocinInfo[ ID ][zPocinio], "Nema", 0, strlen("Nema"), 255);
		strmid( ZlocinInfo[ ID ][zZlocin], "Nema", 0, strlen("Nema"), 255);
	    SendClientMessageEx( playerid, BELA, "Obrisali ste dosije gradjaninu %s.", ImeIgraca( ID ) );

	    format( globalstring, sizeof( globalstring ), ""col_naracrvena"CLEARWL | %s je ocistio WL igracu %s.", ImeIgraca( playerid ), ImeIgraca( ID ) );
		AdminPoruka( BELA, globalstring );

		format( globalstring, sizeof globalstring, "| CLEARWL | %s je ocistio WL igracu %s.", ImeIgraca( playerid ), ImeIgraca( ID ) );
		OrgPorukaLeader( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, globalstring );

		sql_user_update_integer( ID, "wanted_level", PlayerInfo[ ID ][ xWanted ] );
		return true;
	}
	else if( dialogid == dialog_OPREMA ) {
	    if( response ) {
		    switch( listitem ) {
				case 0: {
				    ResetAllWeapons( playerid );
				    GiveWeaponToPlayer( playerid, 3, 1 );
					GiveWeaponToPlayer( playerid, 41, 500 );
					GiveWeaponToPlayer( playerid, 24, 100 );
					KGEyes_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
					format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo patrolnu opremu.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
				case 1: {
					ResetAllWeapons( playerid );
					GiveWeaponToPlayer( playerid, 3, 1 );
					GiveWeaponToPlayer( playerid, 24, 100 );
					GiveWeaponToPlayer( playerid, 25, 100 );
					KGEyes_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
					format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo standardnu opremu.", ImeIgraca( playerid ) );
					PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
				}
				case 2: {
				    if( PlayerInfo[ playerid ][ xRank ] >= 2 ) {
						ResetAllWeapons( playerid );
						GiveWeaponToPlayer( playerid, 3, 1 );
						GiveWeaponToPlayer( playerid, 24, 100 );
						GiveWeaponToPlayer( playerid, 25, 100 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						KGEyes_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
						format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo specijalnu opremu.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					} else return SendErrorMessage( playerid, "Nemate dovoljni rank(2+)." );

				}
				case 3: {
				    if( PlayerInfo[ playerid ][ xRank ] >= 1 ) {
						ResetAllWeapons( playerid );
						GiveWeaponToPlayer( playerid, 24, 100 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 31, 500 );
						KGEyes_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
						format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo profesionalnu opremu.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					} else return SendErrorMessage( playerid, "Nemate dovoljni rank(1+)." );
				}
				case 4: {
				    if( PlayerInfo[ playerid ][ xRank ] >= 3 ) {
				    	ResetAllWeapons( playerid );
						GiveWeaponToPlayer( playerid, 24, 100 );
						GiveWeaponToPlayer( playerid, 34, 100 );
						KGEyes_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
						format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo snajpersku opremu.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					} else return SendErrorMessage( playerid, "Nemate dovoljni rank(3+)." );
				}
				case 5: {
				    if( PlayerInfo[ playerid ][ xRank ] >= 5 ) {
				    	ResetAllWeapons( playerid );
						GiveWeaponToPlayer( playerid, 24, 100 );
						GiveWeaponToPlayer( playerid, 31, 500 );
						GiveWeaponToPlayer( playerid, 34, 100 );
						KGEyes_SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
						format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo High ranked opremu.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					} else return SendErrorMessage( playerid, "Nemate dovoljni rank(5+)." );
				}
				case 6: {
					KGEyes_SetPlayerArmour( playerid, 100 );
					SetPlayerHealth( playerid, 100 );
					format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
				case 7: {
					if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_LHAND ) ) {
	                	SCM( playerid, CRVENA, "Vec imas neki objekt u lijevoj ruci!");
	                    return 1;
					}
	                RiotShield[ playerid ] = true;
					SetPlayerAttachedObject( playerid, OBJECT_SLOT_LHAND, 18637, 3, 0.297411, -0.252804, -0.022625, 0.626678, 1.138009, 82.256072, 1, 1, 1);
					SendInfoMessage( playerid, "Uzeli ste Riot Shield iz Armoury-a.");
					format( globalstring, sizeof( globalstring ), "* %s je uzeo Riot Shield iz Armoury-a.", ImeIgraca( playerid ) );
					PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
	            }
				case 8: {
				    if( PlayerInfo[ playerid ][ xClan ] == 4 ) {
						KGEyes_SetPlayerSkin( playerid, 285 );
						SetPlayerHealth( playerid, 100 );
						KGEyes_SetPlayerArmour( playerid, 150 );
						format( globalstring, sizeof( globalstring ), "* %s je upravo obukao swat opremu.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
                    } else return SendErrorMessage( playerid, "Niste clan S.W.A.T." );
				}
				case 9: {
					BrojLisica[ playerid ] = 10;
					SendInfoMessage( playerid, "Uzeli ste 10 para lisica iz ormara.");
				    format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
				case 10: {
					TazerMetkovi[ playerid ] = 100;
					SendInfoMessage( playerid, "Uzeli ste 100 metkova tazera iz ormara.");
				    format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
				case 11: {
					if(!Maskuse[ playerid ])
					{
						if( Inventory_Count( playerid, "Maska" ) > 0 ) return SendErrorMessage( playerid, "Imas vec masku u ruksaku! ( /maskon )" );
						foreach(new i : Player) {
							ShowPlayerNameTagForPlayer(i, playerid, 0);
						}
						Maskuse[ playerid ] = true;
						SendInfoMessage( playerid, "Uzeli ste masku iz ormara.");
					}
					else
					{
						foreach(new i : Player) {
							ShowPlayerNameTagForPlayer(i, playerid, 1);
						}
						Maskuse[ playerid ] = false;
						SendInfoMessage( playerid, "Ostavili ste masku u ormaru.");
					}
				    format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
				case 12: {
					new weapon[13], bullets[13], bool:uzeo = false;
					for( new slot = 0; slot < 13; slot++) {
						GetPlayerWeaponData( playerid, slot, weapon[ slot ], bullets[ slot ] );
						if(weapon[ slot ] == 17 && bullets[ slot ] != 0)
							uzeo = true;
					}
					if(uzeo) return SendErrorMessage( playerid, "Vec imate suzavac.");
					GiveWeaponToPlayer( playerid, 17, 5 );
				}
			}
		}
	}
	else if( dialogid == dialog_VEHICLEWEPTAKE ) {
	    new wepname[ 32 ];
	    if( response == 1 )  {
	        switch( listitem ) {
	            case 0: {
	                if( VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ] == 0) {
	                    SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ] ] );
                    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	                GiveWeaponToPlayer( playerid, VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ], VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo1 ] );
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ] = 0;
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo1 ] = 0;

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_weapon_slot_1` = '%d', `v_weapon_ammo_1` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ],
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo1 ],
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vSqlID ] );

					mysql_pquery( _dbConnector, sql_str, "", "" );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz prtljaznika.", RPImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
	            }
	            case 1: {
           	 		if( VehicleInfo[TrunkVehicle[ playerid ] ][ vWeap2 ] == 0) {
						SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap2 ] ] );
                    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	                GiveWeaponToPlayer( playerid, VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap2 ], VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo2 ] );
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap2 ] = 0;
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo2 ] = 0;

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_weapon_slot_2` = '%d', `v_weapon_ammo_2` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap2 ],
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo2 ],
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vSqlID ] );

					mysql_pquery( _dbConnector, sql_str, "", "" );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz prtljaznika.", RPImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
	            }
	            case 2: {
           	 		if( VehicleInfo[TrunkVehicle[ playerid ]][vMelee] == 0) {
						SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ VehicleInfo[ TrunkVehicle[ playerid ] ][ vMelee ] ] );
                    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	                GiveWeaponToPlayer(playerid, VehicleInfo[ TrunkVehicle[ playerid ] ][ vMelee ], 1 );
	                VehicleInfo[ TrunkVehicle[ playerid ] ][ vMelee ] = 0;

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_weapon_melee` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vMelee ],
												VehicleInfo[ TrunkVehicle[ playerid ] ][ vSqlID ] );

					mysql_pquery( _dbConnector, sql_str, "", "" );

	               	format( globalstring, sizeof( globalstring ), "* %s vadi %s iz prtljaznika.", RPImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
				}
	        }
		}
	}
	else if( dialogid == dialog_MUNIFORM)
    {
        if(response == 1)
        {
            switch( listitem )
            {
                case 0:
                {
                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
		           	SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
		            format( globalstring, sizeof( globalstring ), "* %s oblaci svoju radnu uniformu i priprema se za posao.", RPImeIgraca( playerid ) );
		   			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
		   			KGEyes_SetPlayerSkin( playerid, 70 );
				}
                case 1:
                {
			        PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
		           	SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
		            format( globalstring, sizeof( globalstring ), "* %s oblaci svoju radnu uniformu i priprema se za posao.", RPImeIgraca( playerid ) );
		   			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
		   			KGEyes_SetPlayerSkin( playerid, 274 );
                }
                case 2:
                {
                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
		           	SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
		            format( globalstring, sizeof( globalstring ), "* %s oblaci svoju radnu uniformu i priprema se za posao.", RPImeIgraca( playerid ) );
		   			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
		   			KGEyes_SetPlayerSkin( playerid, 275 );
				}
				case 3:
                {
                    PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
		           	SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
		            format( globalstring, sizeof( globalstring ), "* %s oblaci svoju radnu uniformu i priprema se za posao.", RPImeIgraca( playerid ) );
			 		PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
		   			KGEyes_SetPlayerSkin( playerid, 276 );
				}
            }
		}
    }
    else if( dialogid == dialog_TAXIOFFER ) {
		if( response ) {
			new string[39];

			TaximetarUkljucen[ offeredByCabbie[ playerid ] ] = true;
			CijenaVoznje[ offeredByCabbie[ playerid ] ] = 1;
			VoziIgracaID[ offeredByCabbie[ playerid ] ] = playerid;

			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 0 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 1 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 2 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 3 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 4 ] );

			format( string, sizeof( string ), "%s", GetPlayerLocation( playerid ) );
			PlayerTextDrawSetString( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 6 ], string );

			format( string, sizeof( string ), "%s", GetPlayerLocation( playerid ) );
			PlayerTextDrawSetString( playerid, TaxistaTD[ playerid ][ 6 ], string );

			format( string, sizeof( string ), "%d$", CijenaVoznje[ offeredByCabbie[ playerid ] ] );
			PlayerTextDrawSetString( offeredByCabbie[ offeredByCabbie[ playerid ] ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 5 ], string );

			format( string, sizeof( string ), "%d$", CijenaVoznje[ offeredByCabbie[ playerid ] ] );
			PlayerTextDrawSetString( playerid, TaxistaTD[ playerid ][ 5 ], string );

			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 6 ] );
			PlayerTextDrawShow( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 6 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 5 ] );
			PlayerTextDrawShow( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 5 ] );

			SCM( offeredByCabbie[ playerid ], ZUTA, "Klijent je prihvatio voznju!");
			SCM( playerid, ZUTA, "Ukoliko taxista abjusa te ne zeli stati kucajte /stoptaxi te slikajte i prijaviti na forum.");
            SCM( playerid, ZUTA, "U suprutnom ne kucajte vec samo izadjite na lokaciji gdje vas odveze inace cete biti kaznjeni!");

			TaxiTimer[ offeredByCabbie[ playerid ] ] = SetTimerEx( "Taxitimer", 6000, true, "i", offeredByCabbie[ playerid ] );
		}
		else
		{
			SCM( playerid, ZUTA, "Odbio si voznju!" );

			if( offeredByCabbie[ playerid ] != IPI ) SCM( offeredByCabbie[ playerid ], ZUTA, "Klijent je odbio voznju!" );

			offeredByCabbie[ playerid ] = INVALID_PLAYER_ID;
		}
	}
	else if( dialogid == dialog_KIOSK ) {
	    if(response == 1) {
            switch( listitem ) {
               
                case 0: {
                    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return SendErrorMessage( playerid, "Nemate mobilni telefon ili karticu!");
				   	if( PlayerInfo[ playerid ][ xNovac ] < 50 ) return SendErrorMessage( playerid, " Nemate dovoljno novca 50$!");
					PlayerTimer[ playerid ][ xTelefonBon ] += 50;
					new q[ 120 ];
					mysql_format( _dbConnector, q, sizeof(q), "UPDATE `user_timers` SET `phone_credit` = '%d' WHERE `user_id` = '%d'", PlayerTimer[ playerid ][ xTelefonBon ], PlayerInfo[ playerid ][ xID ] );
					mysql_pquery( _dbConnector, q, "", "");
					KGEyes_GivePlayerMoney( playerid, -50 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -50, "Trafika - Kredit(50)" );
					
					SCM( playerid, BELA, "Kupili ste 50 kredita za 50$!") ;

					

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesTrafikaMoney( 25 );
               
                }
                case 1: {
                    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return SendErrorMessage( playerid, "Nemate mobilni telefon ili karticu!");
				   	if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, " Nemate dovoljno novca 500$!");
					PlayerTimer[ playerid ][ xTelefonBon ] += 500;
					new q[ 120 ];
					mysql_format( _dbConnector, q, sizeof(q), "UPDATE `user_timers` SET `phone_credit` = '%d' WHERE `user_id` = '%d'", PlayerTimer[ playerid ][ xTelefonBon ], PlayerInfo[ playerid ][ xID ] );
					mysql_pquery( _dbConnector, q, "", "");
					KGEyes_GivePlayerMoney( playerid, -500 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -500, "Trafika - Kredit(500)" );
					
					SCM( playerid, BELA, "Kupili ste 500 kredita za 500$!") ;

					

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesTrafikaMoney( 150 );
                }
				case 2: {
                    if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return SendErrorMessage( playerid, "Nemate mobilni telefon ili karticu!");
				   	if( PlayerInfo[ playerid ][ xNovac ] < 5000 ) return SendErrorMessage( playerid, " Nemate dovoljno novca 5000$!");
					PlayerTimer[ playerid ][ xTelefonBon ] += 5000;
					new q[ 120 ];
					mysql_format( _dbConnector, q, sizeof(q), "UPDATE `user_timers` SET `phone_credit` = '%d' WHERE `user_id` = '%d'", PlayerTimer[ playerid ][ xTelefonBon ], PlayerInfo[ playerid ][ xID ] );
					mysql_pquery( _dbConnector, q, "", "");
					KGEyes_GivePlayerMoney( playerid, -5000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -5000, "Trafika - Kredit(5000)" );
					
					SCM( playerid, BELA, "Kupili ste 5000 kredita za 5000$!") ;

					

					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesTrafikaMoney( 800 );
                }
                case 3: {
				   	if( PlayerInfo[ playerid ][ xNovac ] < 15 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 15$!");
					KGEyes_GivePlayerMoney( playerid, -15 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -15, "Trafika - Sprite" );
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK );
					SCM( playerid, BELA, "Kupili ste sprite za 15$!");
					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesTrafikaMoney( 8 );
				}
				case 4: {
				    if( PlayerInfo[ playerid ][ xNovac ] < 35 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 35$!");
				    new Float:Health; GetPlayerHealth( playerid, Health );
	                if( Health >= 100 ) return SendErrorMessage( playerid, "Vec imas 100HP.");

					format( globalstring, sizeof( globalstring ), "* %s jede cokoladicu.", RPImeIgraca( playerid ) );
				    PorukaRadius( 15.0, playerid, globalstring, LJUBICASTA );
				    OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0 );
				    DodajIgracuHP( playerid, 20 );
				    KGEyes_GivePlayerMoney( playerid, -35 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -35, "Trafika - Cokoladica" );
				    if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesTrafikaMoney( 11 );
				}
				case 5:
				{
				   	if( PlayerInfo[ playerid ][ xNovac ] < 85 ) return SendErrorMessage(playerid, "Nemate dovoljno novca 85$!");
					KGEyes_GivePlayerMoney( playerid, -85 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -85, "Trafika - Pivo" );
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_BEER);
					SCM(playerid,-1,"Kupili ste pivo za 85$!");
					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesTrafikaMoney( 30 );
				}
				case 6: {
				   	if( PlayerInfo[ playerid ][ xNovac ] < 52 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 52$!");
					KGEyes_GivePlayerMoney( playerid, -52 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -52, "Trafika - Coca Cola" );
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK );
					SCM( playerid, BELA, "Kupili ste coca colu za 52$!" );
					if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesTrafikaMoney( 18 );
				}
				case 7: {

					if( PlayerInfo[ playerid ][ xNovac ] < 35 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 35$!");
					new id = -1;

					id = Inventory_Add( playerid, "Cigarete", 19896, 20 );

					if( id != -1 ) {

						KGEyes_GivePlayerMoney( playerid, -35 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -35, "Trafika - Cigarete" );
						SCM( playerid, BELA, "Kupili ste kutiju cigareta koja sadrzi 20 cigare za 35$!");
						SCM( playerid, BELA, "Da pusis cigare koristi /ruksak -> klik na cigarete.");
						if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesTrafikaMoney( 17 );
					}
			    	else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite stvari." );
				}
				case 8: {
					if( Inventory_HasItem( playerid, "Upaljac" ) )  return SendErrorMessage( playerid, "Vec imate upaljac u inventoriju." );
				   	if( PlayerInfo[ playerid ][ xNovac] < 15 ) return SendErrorMessage( playerid, "Nemate dovoljno novca 15$!");
				   	new id = -1;

				   	id = Inventory_Add( playerid, "Upaljac", 19998 );

					if( id != -1 ) {

						KGEyes_GivePlayerMoney( playerid, -15 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -15, "Trafika - Upaljac" );
						SCM( playerid, BELA, "Kupili ste upaljac za 15$!");
						SCM( playerid, BELA, "Da pusis cigare koristi /ruksak -> klik na upaljac.");
						if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesTrafikaMoney( 7 );
					}
			    	else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite stvari." );
				}
			}
		}
	}
	else if( dialogid == dialog_SPAWNCHANGE ) {
		if( response ) {
		    switch( listitem ) {
			    case 0: {
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_OBICAN_RANDOM ) return SendErrorMessage(playerid, "Spawn ti je vec postavljen na uobicajni(LS,SF,LV - random)!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_RANDOM;
					sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					SCM(playerid, BELA, "Postavili ste spawn na uobicajni(LS,SF,LV - random)." );
			    }
                case 1: {
					if( PlayerInfo[ playerid ][ xClan ] < 1) return SendErrorMessage( playerid, "Nisi clan nijedne organizacije.");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_BAZA;
					sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					SCM( playerid, BELA, "Od sada cete se spawnati u bazi orge/mafije/bande." );
				}
			    case 2: {
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_1 ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na imovinu 1!");
					if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Nemas imovinu 1!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_IMOVINA_1;
					sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					SCM(playerid, BELA, "Od sada cete se spawnati u imovini 1." );
			    }
			    case 3: {
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_2 ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na imovinu 2!");
					if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) return SendErrorMessage( playerid, "Nemas imovinu 2!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_IMOVINA_2;
					sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					SCM(playerid, BELA, "Od sada cete se spawnati u imovini 2.");
			    }
			    case 4: {
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_3 ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na imovinu 3!");
					if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) return SendErrorMessage( playerid, "Nemas imovinu 3!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_IMOVINA_3;
					sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					SCM( playerid, BELA, "Od sada cete se spawnati u imovini 3.");
			    }
			    case 5: {
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_RENTHOTEL ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na hotelsku sobu!");
					if( PlayerInfo[ playerid ][ xHotelRoom ] == -1 ) return SendErrorMessage( playerid, "Ne mozete staviti spawn na sobu u hotelu jer je niste iznajmili.");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_RENTHOTEL;
					sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					SCM( playerid, BELA, "Od sada cete se spawnati u iznajmljenoj sobi u hotelu.");
			    }
			    case 6: {
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_RENT ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na iznajmljenu sobu!");
					if( PlayerInfo[ playerid ][ xRentID ] == -1 ) return SendErrorMessage( playerid, "Ne mozete staviti spawn na iznajmljenu sobu jer je niste iznajmili.");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_RENT;
					sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
					SCM( playerid, BELA, "Od sada cete se spawnati u iznajmljenoj sobi.");
			    }
				case 7: {
					if( PlayerInfo[ playerid ][ xMarried ] == 0 ) return SendErrorMessage( playerid, "Niste ozenjeni/udani." );
					SPD( playerid, dialog_SPAWNMARRIEDSET, DSI, "Promjena spawna", "Unesite ID imovine u vlasnistvu vaseg bracnog partnera u kojem se zelite spawnati.", D_ODABERI, D_ODUSTANI );
				}
			    case 8: {
			        if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_ADMIN ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na Admin bazu!");
			        if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
			        	PlayerInfo[ playerid ][ xSpawn ] = SPAWN_ADMIN;
						sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
						SCM( playerid, BELA, "Od sada cete se spawnati u Admin bazi.");
			        }
			        else SendErrorMessage( playerid, "Samo Admini." );
			    }
			    case 9: {
			        if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_GAMESAGE ) return SendErrorMessage( playerid, "Spawn ti je vec postavljen na GameSage bazu!");
			        if( PlayerInfo[ playerid ][ xGameSage ] >= 1 ) {
			        	PlayerInfo[ playerid ][ xSpawn ] = SPAWN_GAMESAGE;
						sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
						SCM( playerid, BELA, "Od sada cete se spawnati u GameSage bazi.");
			        }
			        else SendErrorMessage( playerid, "Samo GameSages." );
			    }
		    }
		}
	}
	else if( dialogid == dialog_KREDIT ) {
		if( !response ) return 1;
		if( response ){
			if( PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] > 0) return SendErrorMessage( playerid, "Vec imate podignut kredit!");
			switch( listitem ) {
				case 0: {
					if( PlayerInfo[ playerid ][ xLevel] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5+ za ovaj kredit!");
					PlayerInfo[ playerid ][ xIznosKredita ] = 50000;
					PlayerInfo[ playerid ][ xIznosRate ] = 2000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerMoneyTrackSave( playerid, MONEY_BANK, PlayerInfo[ playerid ][ xIznosKredita ], "Podizanje kredita" );
					SCM( playerid, ZUTA, "Podigli ste kredit u iznosu od 50000$ | INFO: /kredit.");
					UpdateBankTD( playerid );


					new q[ 256 ];
					mysql_format( _dbConnector, q, sizeof(q), "UPDATE `users` SET `bank_money` = '%d', `credit_rest` = '%d', `credit_amount` = '%d', `credit_installment` = '%d' WHERE `user_id` = '%d'",
                        PlayerInfo[ playerid ][ xBRacun ],
						PlayerInfo[ playerid ][ xPreostaloZaOtplatu ],
						PlayerInfo[ playerid ][ xIznosKredita ],
						PlayerInfo[ playerid ][ xIznosRate ],
						PlayerInfo[ playerid ][ xID ] );
	   				mysql_tquery( _dbConnector, q );


					new string[ 128 ];
					format( string, sizeof( string ), "Igrac: %s | Podigao kredit: 50000$", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogKredit.log", string );
				}
				case 1: {
					if( PlayerInfo[ playerid ][ xLevel ] < 10 ) return SendErrorMessage( playerid, "Morate biti level 10+ za ovaj kredit!");
					PlayerInfo[ playerid ][ xIznosKredita ] = 100000;
					PlayerInfo[ playerid ][ xIznosRate ] = 4000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita];
					PlayerMoneyTrackSave( playerid, MONEY_BANK, PlayerInfo[ playerid ][ xIznosKredita], "Podizanje kredita" );
					SCM( playerid, ZUTA, "Podigli ste kredit u iznosu od 100000$ | INFO: /kredit.");
					UpdateBankTD( playerid );


					new q[ 256 ];
					mysql_format( _dbConnector, q, sizeof(q), "UPDATE `users` SET `bank_money` = '%d', `credit_rest` = '%d', `credit_amount` = '%d', `credit_installment` = '%d' WHERE `user_id` = '%d'",
                        PlayerInfo[ playerid ][ xBRacun ],
						PlayerInfo[ playerid ][ xPreostaloZaOtplatu ],
						PlayerInfo[ playerid ][ xIznosKredita ],
						PlayerInfo[ playerid ][ xIznosRate ],
						PlayerInfo[ playerid ][ xID ] );
	   				mysql_tquery( _dbConnector, q );


					new string[ 128 ];
					format( string, sizeof( string ), "Igrac: %s | Podigao kredit: 100000$", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogKredit.log", string );
				}
				case 2: {

					if( PlayerInfo[ playerid ][ xLevel] < 15 ) return SendErrorMessage( playerid, "Morate biti level 15+ za ovaj kredit!");
				    PlayerInfo[ playerid ][ xIznosKredita ] = 350000;
					PlayerInfo[ playerid ][ xIznosRate ] = 14000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerMoneyTrackSave( playerid, MONEY_BANK, PlayerInfo[ playerid ][ xIznosKredita ], "Podizanje kredita" );
					SCM( playerid, ZUTA, "Podigli ste kredit u iznosu od 350000$ | INFO: /kredit.");
					UpdateBankTD( playerid );


					new q[ 256 ];
					mysql_format( _dbConnector, q, sizeof(q), "UPDATE `users` SET `bank_money` = '%d', `credit_rest` = '%d', `credit_amount` = '%d', `credit_installment` = '%d' WHERE `user_id` = '%d'",
                        PlayerInfo[ playerid ][ xBRacun ],
						PlayerInfo[ playerid ][ xPreostaloZaOtplatu ],
						PlayerInfo[ playerid ][ xIznosKredita ],
						PlayerInfo[ playerid ][ xIznosRate ],
						PlayerInfo[ playerid ][ xID ] );
	   				mysql_tquery( _dbConnector, q );


					new string[ 128 ];
					format( string, sizeof( string ), "Igrac: %s | Podigao kredit: 350000$", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogKredit.log", string );
				}
				case 3: {

					if( PlayerInfo[ playerid ][ xLevel ] < 20 ) return SendErrorMessage( playerid, "Morate biti level 20+ za ovaj kredit!");
					PlayerInfo[ playerid ][ xIznosKredita ] = 500000;
					PlayerInfo[ playerid ][ xIznosRate ] = 20000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerMoneyTrackSave( playerid, MONEY_BANK, PlayerInfo[ playerid ][ xIznosKredita ], "Podizanje kredita" );
					SCM( playerid, ZUTA, "Podigli ste kredit u iznosu od 500000$ | INFO: /kredit.");
					UpdateBankTD( playerid );


					new q[ 256 ];
					mysql_format( _dbConnector, q, sizeof(q), "UPDATE `users` SET `bank_money` = '%d', `credit_rest` = '%d', `credit_amount` = '%d', `credit_installment` = '%d' WHERE `user_id` = '%d'",
                        PlayerInfo[ playerid ][ xBRacun ],
						PlayerInfo[ playerid ][ xPreostaloZaOtplatu ],
						PlayerInfo[ playerid ][ xIznosKredita ],
						PlayerInfo[ playerid ][ xIznosRate ],
						PlayerInfo[ playerid ][ xID ] );
	   				mysql_tquery( _dbConnector, q );


					new string[ 128 ];
					format( string, sizeof( string ), "Igrac: %s | Podigao kredit: 500000$", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogKredit.log", string );
				}
			}
		}
	}
	else if( dialogid == dialog_INFOKREDIT && response ) {

		if( !response ) return 1;
	    switch( listitem ) {
			case 0: {
				format( globalstring, sizeof( globalstring ),"- Iznos Kredita: %d$\n- Iznos Rate Kredita: %d$\n- Preostalo za otplatu: %d$", PlayerInfo[ playerid ][ xIznosKredita ], PlayerInfo[ playerid ][ xIznosRate ], PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
				SPD( playerid, dialog_BALANCE, DSMSG, D_NASLOV, globalstring, D_ODABERI, D_ODUSTANI );
			}
			case 1: SPD( playerid, dialog_PROMENARATEKREDITA, DSI, D_NASLOV, "Upisite novi iznos rate koje cete otplacivati...", D_ODABERI, D_ODUSTANI );
			case 2: {
			    if( PlayerInfo[ playerid ][ xBRacun ] >= PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] ) {
			        SendInfoMessage( playerid, "Uspjesno ste otplatili ostatak kredita u iznosu od %d$.", PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
			        PlayerInfo[ playerid ][ xBRacun ] -= PlayerInfo[ playerid ][ xPreostaloZaOtplatu ];
					PlayerMoneyTrackSave( playerid, MONEY_BANK, PlayerInfo[ playerid ][ xPreostaloZaOtplatu ], "Otplata kredita" );
			        PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = 0;
			        PlayerInfo[ playerid ][ xIznosKredita ] = 0;
					PlayerInfo[ playerid ][ xIznosRate ] = 0;
					UpdateBankTD( playerid );

					new q[ 256 ];
					mysql_format( _dbConnector, q, sizeof(q), "UPDATE `users` SET `bank_money` = '%d', `credit_rest` = '%d', `credit_amount` = '%d', `credit_installment` = '%d' WHERE `user_id` = '%d'",
                        PlayerInfo[ playerid ][ xBRacun ],
						PlayerInfo[ playerid ][ xPreostaloZaOtplatu ],
						PlayerInfo[ playerid ][ xIznosKredita ],
						PlayerInfo[ playerid ][ xIznosRate ],
						PlayerInfo[ playerid ][ xID ] );
	   				mysql_tquery( _dbConnector, q );

			    }
			    else if( PlayerInfo[ playerid ][ xNovac ] > PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] ) {
			        SendInfoMessage( playerid, "Uspjesno ste otplatili ostatak kredita u iznosu od %d$.", PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
			        KGEyes_GivePlayerMoney( playerid, -PlayerInfo[ playerid ][ xPreostaloZaOtplatu ], false ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -PlayerInfo[ playerid ][ xPreostaloZaOtplatu ], "Otplata kredita" );
			        PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = 0;
			        PlayerInfo[ playerid ][ xIznosKredita ] = 0;
					PlayerInfo[ playerid ][ xIznosRate ] = 0;

					new q[ 256 ];
					mysql_format( _dbConnector, q, sizeof(q), "UPDATE `users` SET  `money` = '%d', `credit_amount` = '%d', `credit_installment` = '%d', `credit_rest` = '%d' WHERE `user_id` = '%d'",
							PlayerInfo[ playerid ][ xNovac ],
							PlayerInfo[ playerid ][ xIznosKredita ],
							PlayerInfo[ playerid ][ xIznosRate ],
							PlayerInfo[ playerid ][ xPreostaloZaOtplatu ],
							PlayerInfo[ playerid ][ xID ] );
	   				mysql_tquery( _dbConnector, q );


			    }
			    else return SendErrorMessage( playerid, "Nemate dovoljno novca za otplacivanje kredita." );
			}
		}
	}
	else if( dialogid == dialog_PROMENARATEKREDITA )
	{
		if( !response ) return 1;
		if( response ) {
			new iznos;
			if( sscanf( inputtext, "i", iznos ) ) return SPD( playerid, dialog_PROMENARATEKREDITA, DSI, D_NASLOV, "Upisite novi iznos rate koje cete otplacivati...", D_ODABERI, D_ODUSTANI );
			if( iznos < 1000 || iznos > 4000 )
			{
				SendErrorMessage( playerid, "Suma ne moze biti manja od 1000$ i veca od 4000$!");
				SPD( playerid, dialog_PROMENARATEKREDITA, DSI, D_NASLOV, "Upisite novi iznos rate koje cete otplacivati...", D_ODABERI, D_ODUSTANI );
				return 1;
			}
			PlayerInfo[ playerid ][ xIznosRate ] = iznos;
			sql_user_update_integer( playerid, "credit_installment", PlayerInfo[ playerid ][ xIznosRate ] );
			SendClientMessageEx( playerid, ZUTA, "Podesili ste iznos rate kredita na %d$.", iznos );
		}
		else SPD( playerid, dialog_INFOKREDIT, DSL, D_NASLOV, "Info Kredit\nPromjena Iznosa Rate", D_ODABERI, D_ODUSTANI );
	}
	else if( dialogid == dialog_RPTEST ) {
		if( response ) {
	        if( listitem == TacanOdgovor[ playerid ] ) {
	            KGEyes_KillTimer( TimerPitanje[ playerid ] );
	            if( PitanjeBroj[ playerid ] == 1 ) {
				    TacanOdgovor[ playerid ] = 3;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "2. Sto je Powergaming [PG] ?", "A) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nB) Koristenje OOC informacija u IC korist.\n C) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nD) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 2 ) {
				    TacanOdgovor[ playerid ] = 1;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "3. Sto je Deathmatch [DM] ?", "A) Koristenje OOC informacija u IC korist.\nB) Ubijanje ljudi bez ikakvog IC i RP razloga.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 3 ) {
				    TacanOdgovor[ playerid ] = 3;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "4. Sto je Roleplay 2 Win [RP2WIN] ?", "A) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nB) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nC) Koristenje OOC informacija u IC korist.\nD) RPanje nekakve situacije u svoju korist.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 4 ) {
				    TacanOdgovor[ playerid ] = 2;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "5. Sto je Drive By [DB] ?", "A) Koristenje OOC informacija u IC korist.\nB) Izvodjenje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) Pucanje iz vozila sa mjesta vozaca na pesake, motoriste i bicikliste.\nD) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 5 ) {
				    TacanOdgovor[ playerid ] = 1;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "6. Sto je Bunny Hopp [BH] ?", "A) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.\nB) Skakanje jednom ili vise puta prilikom trcanja sa ciljem brzeg trcanja.\nC) Koristenje OOC informacija u IC korist.\nD) Pisanje iste rijeci ili recenice dva ili vise puta za redom.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 6 ) {
				    TacanOdgovor[ playerid ] = 0;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "7. Sto je Revenge Kill [RK] ?", "A) Ubojstvo igraca iz osvete.\nB) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 7 ) {
				    TacanOdgovor[ playerid ] = 0;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "8. Sto je Non-Roleplay [NonRP] ?", "A) Ometanje RP radnji koje izvrsavaju drugi igraci.\nB) Izvodjenje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 8 ) {
				    TacanOdgovor[ playerid ] = 2;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "9. Sto je Spamming [SPAM] ?", "A) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nB) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Pucanje iz vozila sa mjesta vozaca na pesake,motoriste i bicikliste.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 9 ) {
				    TacanOdgovor[ playerid ] = 3;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "10. Sto je Hacking & Exploiting [Hack & Abuse] ?", "A) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nB) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nC) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.\nD) Koriscenje programa kojim se dobiva prednost u igri.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 10 ) {
				    TacanOdgovor[ playerid ] = 2;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "11. Sto je 'SpawnKill [SK] ?", "A) Mjesto gde se spawnate.Tamo ima puno ljudi i mozete naci prijatelje\nB) To je kada ubijete covjeka zato sto se spawno u vasoj kuci\nC) Ubojstvo igraca nakon sto se on tek spawnao\nD) Nista od navedenog.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 11 ) {
				    TacanOdgovor[ playerid ] = 2;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "12. Sto je Terrorist RP [Terror RP] ?", "A) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nB) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) RPanje terorista.\nD) Pucanje iz vozila sa mjesta vozaca na pesake,motoriste i bicikliste.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 12 ) {
				    TacanOdgovor[ playerid ] = 0;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "13. Sto je Admin/GameSage Abuse ?", "A) Koristenje Admin pozicije za pretnje ili za korist sebi,a na stetu drugima igracima.\nB) Izvodjenje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 13 ) {
				    TacanOdgovor[ playerid ] = 2;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "14. Netko vam prosljedi uvredu u '/b' chat, sta ce te uraditi?", "A) Opsovat cu i ja njemu i to duplo.\nB) Izudarati ga dok ne shvati sta je uradio i ubiti ga.\nC) Slikat cu to i postaviti zalbu na forumu na tu osobu.\nD) Zvati Admina.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 14 ) {
				    TacanOdgovor[ playerid ] = 0;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "15. Lovi vas policija i probuse vam gumu, kako ce te reagirati?", "A) Zaustavit cu vozilo RP i bez krsenja pravila nastaviti RPati.\nB) Vozit cu dok se ne slupam skroz i onda odem off.\nC) Zaustavit cu vozilo i spammati na OOC - 'nonRP'\nD) Zvati Admina!", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 15 ) {
				    TacanOdgovor[ playerid ] = 2;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "16. Uocite tucu izmedju dvije grupe u Comptonu, sta cete uraditi?", "A) Upalit cu cheat i pokazati im ko je glavni tu.\nB) Uletit cu medju njih i pobiti se sa njima\nC) RPat cu strah i pozvati LSPD\nD) Prici pored njih i poceti da RPam sa njima.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 16 ) {
				    TacanOdgovor[ playerid ] = 1;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "17. Napisete '/me pokusava udariti lika rukom u glavu',sto sljedece ide?", "A) Kako sam te opalio umro si, pukla ti glava.\nB) /do da li uspjevam da te udarim?\nC) Udario sam te padas, i u nesvjesti si.\nD) /do pao si na pod i lezis krvav .", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 17 ) {
				    TacanOdgovor[ playerid ] = 3;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "18. Policajac vam stavlja lisice i vodi u zatvor, sta ce te uraditi?", "A) Napisati mu na '/b' chat da je glup i da MGa.\nB) Pobjeci cu off, jer sam faca.\nC) Zvati Admina na /report .\nD) RPat cu iako grijesi, i o greskama razjasniti na forumu.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 18 ) {
				    TacanOdgovor[ playerid ] = 0;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "19. Osoba vam peri pistolj u glavu trazeci novac.sto ce te uciniti?", "A)Uradit cu sve sto mi kaze bez krsenja pravila.\nB)Skocit cu mu za vrat i iskopati mu oci.\nC)Pobjeci off ili samo crashati sam client.\nD)Pozvati policiju i reci da me netko pljacka i dati im lokaciju", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 19 ) {
				    TacanOdgovor[ playerid ] = 3;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "20. Upucani ste u nogu, sta ce te uciniti?", "A) Pocet cu trcati da izbjegnem metke kako bi se spasio.\nB) Otici cu sa servera svojom voljom.\nC) Nista od navedenog.\nD) RPat cu strasnu bol i past cu na zemlju.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 20 ) {
				    TacanOdgovor[ playerid ] = 1;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "21.Ukoliko napravite saobracajnu nesrecu, sta ce te uraditi?", "A) Reci cu mu na '/b' chat da koristi oci\nB) Pocet cu RPati tu nesrecu opsirno uz pomoc komandi\nC) Nastavit cu voziti\nD) Uslikati i prijaviti na forum pod zalbom za NonRP", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 21 ) {
				    TacanOdgovor[ playerid ] = 1;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "22./me udara lika te on pada na zemlju.sta smo prekrsili?", "A) Pustupili smo ispravno prema igracu i treba nastaviti Roleplay.\nB) RPali smo u svoju korist.\nC) Pocinili smo Drive By u uzem smislu.\nD) Izvrsili smo PG nad igracom.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 22 ) {
				    TacanOdgovor[ playerid ] = 0;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "23. Cemu koristi komanda /me i /do? ", "A) Radi boljeg Roleplaya i iskazivanja stvari koji se nevide.\nB) Radi iskoriscavanja drugih igraca\nC) Radi NonRoleplaya u igrici\nD) Nista od navedenog.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 23 ) {
				    TacanOdgovor[ playerid ] = 2;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "24. Smije li se RP-ati maloljetnika? ", "A) DA\nB) NE\nC) Dozvoljeno je ali nam to 'ne daje' nikakvu prednost nad ostalim igracima .\nD) Nista od navedenog.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 24 ) {
				    TacanOdgovor[ playerid ] = 1;
				    PitanjeBroj[ playerid ]++;
					SPD( playerid, dialog_RPTEST, DSL, "25. Smije li se RP-ati terorista? ", "A) Da\nB) Ne\nC) Samo ako su official organizacija.\nD) Nista od navedenog", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 25 ) {
				    PlayerInfo[ playerid ][ xRPLearn ] = 0; PlayerTimer[ playerid ][ xMute ] = 0;
                    PitanjeBroj[ playerid ] = 0;
					KGEyes_SetSpawnInfo( playerid );
    				SpawnPlayer( playerid );

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `users` SET `rp_learn` = '%d' WHERE `user_id` = '%d'", PlayerInfo[ playerid ][ xRPLearn ], PlayerInfo[ playerid ][ xID ] );
				    mysql_tquery( _dbConnector, sql_str );

				    SCM( playerid, SVETLOCRVENA, "Cestitamo! Na sva pitanja ste tocno odgovorili te ste spremni za igru." );
					SCM( playerid, SVETLOCRVENA, "Zelimo vam ugodnu zabavu i dobar RP. Posjetite nas forum www.croherze.com" );
				}
				TimerPitanje[ playerid ] = SetTimerEx( "Pitanje", 120000, 0, "i", playerid);
			}
			else {
			    PlayerInfo[ playerid ][ xRPLearn ] = 1;
     			KGEyes_KillTimer( TimerPitanje[ playerid ] );
     			KGEyes_TogglePlayerControllable( playerid, false );
        		TimerLearn[ playerid ] = SetTimerEx( "RolePlayTut", 1000, 0, "ii", playerid, 1);
				SCM( playerid, SVETLOCRVENA, "Netacan odgovor.Slijedi tutorijal ponovno!" );
				SCM( playerid, SVETLOCRVENA, "Ukoliko vam i dalje ne bude jasno odgovore na pitanja mozete pronaci na nasem forumu www.croherze.com" );
			}
		}
		else {
		    PlayerInfo[ playerid ][ xRPLearn ] = 1;
     		KGEyes_KillTimer( TimerPitanje[ playerid ] );
     		KGEyes_TogglePlayerControllable( playerid, false );
       		TimerLearn[ playerid ] = SetTimerEx( "RolePlayTut", 1000, 0, "ii", playerid, 1);
			SCM( playerid, SVETLOCRVENA, "Netacan odgovor.Slijedi tutorijal ponovno!" );
			SCM( playerid, SVETLOCRVENA, "Ukoliko vam i dalje ne bude jasno odgovore na pitanja mozete pronaci na nasem forumu www.croherze.com" );
		}
	}
	/*else if( dialogid == dialog_SigurnosniKod ) {
		if( !response ) return Kick( playerid );
	    if( response ) {

	    	new sigurnosnikod;
			if( sscanf( inputtext, "i", sigurnosnikod ) ) return Kick( playerid );
			if( sigurnosnikod < 1 ) return Kick( playerid );
	    	if( SigurnosniKodPromene[ playerid ] == sigurnosnikod ) {

	    		SendInfoMessage( playerid, "Kod koji ste uneli je tacan." );
	    		SPD( playerid, dialog_CHANGEPASSWORD_2, DSI, D_NASLOV, "Upisi novu sifru i dobro je zapamti!CH Admin team ne odgovara za nestale/ukradene sifre!", D_ODABERI, D_ODUSTANI );
	    	}
	    	else return Kick( playerid );
	    }
	}
	else if( dialogid == dialog_CHANGEPASSWORD_2 ) {
	    if( response ) {
	        if( strlen(inputtext) < 6 || strlen(inputtext) > 20 ) {
	    		SendErrorMessage( playerid, "Password moze sadrzavati minimalno 6 a maximalno 20 znakova" );
			    return 1;
			}
		    else {
		        new hash_pass[ 65 ];
    			SHA256_PassHash( inputtext, ImeIgraca( playerid ), hash_pass, sizeof hash_pass );

				strmid( PlayerInfo[ playerid ][ xLozinka ], hash_pass, 0, strlen( hash_pass ), 255 );
				format( globalstring, sizeof( globalstring ), "Nova lozinka: %s", inputtext );
				SCM( playerid, ZUTA, globalstring );

				new q[ 256 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `users` SET `password` = '%e' WHERE `p_name` = '%e' LIMIT 1", PlayerInfo[ playerid ][ xLozinka ], ImeIgraca( playerid ) );
				mysql_tquery( _dbConnector, q );


				format( globalstring, sizeof( globalstring ), "Prijavite se ponovno sa novom lozinkom: %s", inputtext );
				Kickovanje( playerid, globalstring );

				new playersip[ 128 ];
       			GetPlayerIp( playerid, playersip, sizeof( playersip ) );

				new string[ 256 ];
				format( string, sizeof( string ), "IP: %s | Igrac %s je promjenio lozinku u %s", playersip, ImeIgraca( playerid ), hash_pass );
				LogSave( "Ostalo/LogPromjenaLozinke.log", string );
    		}
	    }
	}*/
	else if( dialogid == dialog_CHANGEPASSWORD ) {
	    if( response ) {
			if( !IsValidPassword( playerid, inputtext ) ) return SPD( playerid, dialog_CHANGEPASSWORD, DSI, D_NASLOV,
				""col_red"Upisi novu sifru i dobro ju zapamti!\nCH Admin team ne odgovara za nestale/ukradene sifre!", D_ODABERI, D_ODUSTANI );
		    else {
		        new hash_pass[ 65 ];
    			SHA256_PassHash( inputtext, ImeIgraca( playerid ), hash_pass, sizeof hash_pass );

				strmid( PlayerInfo[ playerid ][ xLozinka ], hash_pass, 0, strlen( hash_pass ), 255 );
				format( globalstring, sizeof( globalstring ), "Nova lozinka: %s", inputtext );
				SCM( playerid, ZUTA, globalstring );
				sql_user_update_string( playerid, "password", PlayerInfo[ playerid ][ xLozinka ] );
				format( globalstring, sizeof( globalstring ), "Prijavite se ponovno sa novom lozinkom: %s", inputtext );
				Kickovanje( playerid, globalstring );

				new playersip[ 128 ];
       			GetPlayerIp( playerid, playersip, sizeof( playersip ) );

				new string[ 256 ];
				format( string, sizeof( string ), "IP: %s | Igrac %s je promjenio lozinku u %s", playersip, ImeIgraca( playerid ), hash_pass );
				LogSave( "Ostalo/LogPromjenaLozinke.log", string );
    		}
	    }
	}
	else if( dialogid == dialog_RENTANJE) {

		if( response ) {

			new vrijeme, price;

			if( IsVehicleBajs( GetPlayerVehicleID( playerid ) ) ) price = 15;
			else if( IsVehicleMotor( GetPlayerVehicleID( playerid ) ) ) price = 25;
			else if( IsVehicleAuto( GetPlayerVehicleID( playerid ) ) ) price = 40;
			else if( IsVehicleLetelica( GetPlayerVehicleID( playerid ) ) ) price = 200;

		    if( sscanf( inputtext, "i", vrijeme ) ) {

		        new string[ 384 ];
				format( string, sizeof( string ), ""col_white"Usli ste u rent vozilo.\n\n\
				        "col_white"Vozilo koje zelite rentati iznajmljujete na minute.\n\n\
				        "col_white"1 minut je %d$.\n\n\
				        "col_white"Unesite koliko minuta zelite da rentate ovo vozilo.\n\n\
						"col_white"Ukoliko zelite rentati ovo vozilo mozete koristiti sljedecu komandu:\n\n\
						"col_white"/unrent", price );
				SPD( playerid, dialog_RENTANJE, DSI, D_NASLOV, string, "Rentaj", D_ODUSTANI );

		        return 1;
		    }

		    if( vrijeme < 1 || vrijeme > 35 ) return SendErrorMessage( playerid, "Ne mozes ispod 1 ili iznad 35 min." ), KGEyes_RemovePlayerFromVehicle( playerid ), KGEyes_TogglePlayerControllable( playerid, true );

	        new engine, lights, alarm, doors, bonnet, boot, objective;
	        GetVehicleParamsEx( GetPlayerVehicleID( playerid ), engine, lights, alarm, doors, bonnet, boot, objective );

	        if( Rentano[ playerid ] != -1 ) return GameTextForPlayer( playerid, "~w~Vec si rentao neko vozilo kucaj /unrent.", 3000, 3 ), KGEyes_RemovePlayerFromVehicle( playerid ), KGEyes_TogglePlayerControllable( playerid, true );
	        if( !IsPlayerInAnyVehicle(playerid)) return SendErrorMessage( playerid, "Morate biti u vozilu!");
			if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mjestu vozaca!");

			foreach( Player, i ) {

		        if( Rentano[ i ] == GetPlayerVehicleID( playerid ) ) {

		     		SendErrorMessage( playerid, "To vozilo je vec rentano!" );
		     		KGEyes_RemovePlayerFromVehicle( playerid ); KGEyes_TogglePlayerControllable( playerid, true );
		     		return 1;
		       	}
		    }
			if( PlayerInfo[ playerid ][ xLevel ] < 3 ) SendInfoMessage( playerid, "Vi ste pocetnik pa je za vas rent besplatan!" );
		    else {
				if( PlayerInfo[ playerid ][ xNovac ] < price*vrijeme ) return SendErrorMessage( playerid, "Nemas dovoljno novca(%d$)!", price*vrijeme ), KGEyes_RemovePlayerFromVehicle( playerid ), KGEyes_TogglePlayerControllable( playerid, true );
		    	KGEyes_GivePlayerMoney( playerid, -price*vrijeme  ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -price*vrijeme, "Rent dialog 1" );
			}
		    Rentano[ playerid ] = GetPlayerVehicleID( playerid );
		    RentTimer[ playerid ] = SetTimerEx( "KrajRenta", vrijeme*60000, 0, "iii", playerid, GetPlayerVehicleID( playerid ), 1 );
		    if( PlayerInfo[ playerid ][ xNostalgija ] == 0){
			if( IsVehicleBajs( GetPlayerVehicleID( playerid ) ) ) {
				SetVehicleParamsEx( GetPlayerVehicleID( playerid ), 1, lights, alarm, doors, bonnet, boot, objective );
				GameTextForPlayer( playerid, "~w~Rentao si biciklu sada mozete krenuti", 3000, 3 );
			}
			else if( IsVehicleMotor( GetPlayerVehicleID( playerid ) ) ) {
				GameTextForPlayer( playerid, "~w~Rentao si motor sada mozete krenuti", 3000, 3 );
			}
			else if( IsVehicleAuto( GetPlayerVehicleID( playerid ) ) ) {
				GameTextForPlayer( playerid, "~w~Rentao si vozilo sada mozete krenuti", 3000, 3 );
			}
			}
			else{
				if( IsVehicleBajs( GetPlayerVehicleID( playerid ) ) ) {
				SetVehicleParamsEx( GetPlayerVehicleID( playerid ), 1, lights, alarm, doors, bonnet, boot, objective );
				}
				GameTextForPlayer(playerid, "~w~Iznajmili ste vozilo~n~Sada samo ~r~vi ~w~mozete voziti ovo vozilo", 5000, 3);
			}
			new rentid = GetNearestRent( playerid );
			BussinesMoney( rentid, price*vrijeme );
			//BussinesRentMoney( price*vrijeme );

			format( globalstring, sizeof( globalstring ), "Vrijeme trajanja: ~y~%d min", vrijeme );
			NotifyPlayer(playerid, "Uspjesno rentano vozilo", globalstring, 0);
	    }
	    else {

	        KGEyes_RemovePlayerFromVehicle( playerid ); KGEyes_TogglePlayerControllable( playerid, true );
	        GameTextForPlayer( playerid, "~w~Odbio si rentanje vozila!", 3000, 3 );
	    }
	}
	else if( dialogid == dialog_PROPERTYWEPTAKE ) {
	    new wepname[ 32 ];
	    if( response == 1 )
	    {
	        switch( listitem )
	        {
	            case 0:
	            {
	                if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ] == 0)
	                {
	                    SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ] ] );
                    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	                GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 0 ] );
	                II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ] = 0;
	                II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 0 ] = 0;

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_weap_1` = '%d', `p_ammo_1` = '%d' WHERE `propID` = '%d'",
								II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ],
								II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 0 ],
								II[ PropertySafeGun[ playerid ] ][ ibaseID ] );

					mysql_pquery( _dbConnector, sql_str, "", "");

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz sefa.", RPImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
	            }
	            case 1:
	            {
           	 		if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ] == 0)
	                {
	                    SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ] ] );
                    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	                GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 1 ] );
	                II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ] = 0;
	                II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 1 ] = 0;

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_weap_2` = '%d', `p_ammo_2` = '%d' WHERE `propID` = '%d'",
								II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ],
								II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 1 ],
								II[ PropertySafeGun[ playerid ] ][ ibaseID ] );

					mysql_pquery( _dbConnector, sql_str, "", "");

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz sefa.", RPImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
	            }
	            case 2:
	            {
           	 		if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ] == 0)
	                {
	                    SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ] ] );
                    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	                GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 2 ] );
	                II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ] = 0;
	                II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 2 ] = 0;

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_weap_3` = '%d', `p_ammo_3` = '%d' WHERE `propID` = '%d'",
								II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ],
								II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 2 ],
								II[ PropertySafeGun[ playerid ] ][ ibaseID ] );

					mysql_pquery( _dbConnector, sql_str, "", "");

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz sefa.", RPImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
				}
				case 3:
	            {
           	 		if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ] == 0)
	                {
	                    SendErrorMessage( playerid, "Nemate oruzja u tom slotu.");
	                    return 1;
	                }

	                format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ] ] );
                    antiCheatCS[ playerid ][ WeaponDetect ] = 3;
	                GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 3 ] );
	                II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ] = 0;
	                II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 3 ] = 0;

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_weap_4` = '%d', `p_ammo_4` = '%d' WHERE `propID` = '%d'",
								II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ],
								II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 3 ],
								II[ PropertySafeGun[ playerid ] ][ ibaseID ] );

					mysql_pquery( _dbConnector, sql_str, "", "");

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz sefa.", RPImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
				}
	        }
		}
	}
	else if( dialogid == dialog_JOBLIST ) {

	    if( response ) {

	    	if( listitem > 15 ) listitem += 3;
	        KGEyes_SetPlayerCheckpoint( playerid, jobsInfos[ listitem ][ jPos ][ 0 ], jobsInfos[ listitem ][ jPos ][ 1 ], jobsInfos[ listitem ][ jPos ][ 2 ], 5.0 );
			CheckpointStatus[ playerid ] = 15;
			SendClientMessageEx( playerid, ZUTA, "Posao %s, lokacija se nalazi na mapi.", jobsInfos[ listitem ][ jName ] );


			if( jobsInfos[ listitem ][ jType ] == POSAO_DETEKTIV ) SCM( playerid, ZUTA, "Posao Detektiva uzimate u policijskoj stanici." );
			else if( jobsInfos[ listitem ][ jType ] == POSAO_ADVOKAT ) SCM( playerid, ZUTA, "Posao Advokata uzimate u Opstini." );
			else if( jobsInfos[ listitem ][ jType ] == POSAO_BANKAR ) SCM( playerid, ZUTA, "Posao Prevoznika Novca uzimate u banci." );
			else if( jobsInfos[ listitem ][ jType ] == POSAO_TELOHRANITELJ ) SCM( playerid, ZUTA, "Posao Telohranitelja uzimate u teretani." );
		}
	}
	else if( dialogid == dialog_CREATEEVENT ) {
	    if( !response ) return 1;
	    format( EventName[ playerid ], 64, "%s", inputtext );
		SPD( playerid, dialog_CREATEEVENT2, DSI, D_NASLOV, "Unesti ID vozila za event", D_ODABERI, D_ODUSTANI );
	}
	else if( dialogid == dialog_CREATEEVENT2 ) {
	    if( !response ) return 1;
	    EventCarsCreate[ playerid ] = 1;
	    EventCP[ playerid ] = 1;
	    EventVehID[ playerid ] = strval( inputtext );
	    SCM( playerid, ZUTA, "Koristi LMB da postavis 2 reda vozila.");
	    SCM( playerid, ZUTA, "Prvo snimanje prvi red vozila, drugo snimanje drugi red vozila.");
	}
	else if( dialogid == dialog_EVENTSTART ) {
	    if( !response ) return 1;
	    if( response ) {

	        if( listitem < 10 ) {

	            new ideventa = (listitem+1) + (EventStranica[ playerid ]-10);
				if( Event[ ideventa ][ VehID ] == 0 ) return SendErrorMessage( playerid, "Izabrali ste event koji nepostoji." );
		       	if( EventInfo[ eID ] != 0 ) return SendErrorMessage( playerid, "Vec je ukljucen jedan event, koristi /eugasi." );

				EventInfo[ eID ] = ideventa;
				EventInfo[ ec_Started ] = 0;
				EventInfo[ es_Started ] = 0;
				EventInfo[ et_Started ] = 0;
				EventInfo[ edr_Started ] = 0;
				EventInfo[ Position ] = 0;
				EventInfo[ EventTime ] = MAX_TIME;
				EventInfo[ Drivers ] = 0;
				EventInfo[ EventGo ] = 0;
				EventInfo[ EventMin ] = 0;
		 		EventInfo[ EventSek ] = 0;

				Event[ EventInfo[ eID ] ][ PrivremeniX1 ] = Event[ EventInfo[ eID ] ][ TCPX ];
			 	Event[ EventInfo[ eID ] ][ PrivremeniY1 ] = Event[ EventInfo[ eID ] ][ TCPY ];
			 	Event[ EventInfo[ eID ] ][ PrivremeniX2 ] = Event[ EventInfo[ eID ] ][ TCPX2 ];
			 	Event[ EventInfo[ eID ] ][ PrivremeniY2 ] = Event[ EventInfo[ eID ] ][ TCPY2 ];

				for( new i=0; i < 30; i++ ){
					RacePos[i] = -1;
				}

				format( globalstring, sizeof( globalstring ), ""col_event"| EVENT | %s | "col_white"je poceo, imate "col_event"20"col_white" sekundi da se pridruzite "col_event"[ /join ].", Event[ EventInfo[ eID ] ][ Name ] );
				SCMA( -1, globalstring );
			//	new string[ 180 ];
				/*format( string, sizeof( string ), ""col_white"Rekord na Eventu "col_event"%s | "col_white"| Vrijeme "col_event"%d:%d | "col_white"postavio "col_event"%s", Event[ EventInfo[ eID ] ][ Name ], Event[ EventInfo[ eID ] ][ RekordMin ], Event[ EventInfo[ eID ] ][ RekordSek ], Event[ EventInfo[ eID ] ][ Rekorder ] );
				SCMA( -1, string );*/
			    format( globalstring, sizeof( globalstring ), ""col_unload"[Ucitavanje trke] %s | %s", ImeIgraca( playerid ), Event[ EventInfo[ eID ] ][ Name ] );
				AdminPoruka( 0xFFFFFFFF, globalstring );

			}
			else if( listitem == 10 ) {

			    if( EventStranica[ playerid ] == 100 ) return SendErrorMessage( playerid, "Ne moze dalje." );
			    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				EventStranica[ playerid ] += 10;
				for( new i = (EventStranica[ playerid ]-9); i <= EventStranica[ playerid ]; i++ ) {

	            	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, Event[ i ][ Name ] );

		        }

		       	format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->\n", DialogStrgEx );
               	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s<- Prethodna stranica", DialogStrgEx );


				SPD( playerid, dialog_EVENTSTART, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
	        else if( listitem == 11 ) {

                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				EventStranica[ playerid ] -= 10;

				for( new i = (EventStranica[ playerid ]-9); i <= EventStranica[ playerid ]; i++ ) {

	            	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, Event[ i ][ Name ] );

		        }

				if( EventStranica[ playerid ] > 10 ) {
                    format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->\n", DialogStrgEx );
					format( DialogStrgEx, sizeof( DialogStrgEx ), "%s<- Prethodna stranica", DialogStrgEx );
				}
				else if( EventStranica[ playerid ] <= 10 ) {
				    format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->", DialogStrgEx );
				}

				SPD( playerid, dialog_EVENTSTART, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
	            strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	        }
		}
	}
	else if( dialogid == dialog_EVENTIZBRISI ) {
	    if( !response ) return 1;
	    if( response ) {

	        if( listitem < 10 ) {

	            new ideventa = (listitem+1) + (EventStranica[ playerid ]-10);
				if( Event[ ideventa ][ VehID ] == 0 ) return SendErrorMessage( playerid, "Izabrali ste event koji nepostoji." );
		       	if( EventInfo[ eID ] != 0 ) return SendErrorMessage( playerid, "Vec je ukljucen jedan event, koristi /eugasi." );
				DeleteEvent(ideventa);
			    SendInfoMessage( playerid, "Uspjesno ste izbrisali event ID %d", ideventa);

			}
			else if( listitem == 10 ) {

			    if( EventStranica[ playerid ] == 100 ) return SendErrorMessage( playerid, "Ne moze dalje." );
			    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				EventStranica[ playerid ] += 10;
				for( new i = (EventStranica[ playerid ]-9); i <= EventStranica[ playerid ]; i++ ) {

	            	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, Event[ i ][ Name ] );

		        }

		       	format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->\n", DialogStrgEx );
               	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s<- Prethodna stranica", DialogStrgEx );


				SPD( playerid, dialog_EVENTIZBRISI, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
	        else if( listitem == 11 ) {

                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				EventStranica[ playerid ] -= 10;

				for( new i = (EventStranica[ playerid ]-9); i <= EventStranica[ playerid ]; i++ ) {

	            	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, Event[ i ][ Name ] );

		        }

				if( EventStranica[ playerid ] > 10 ) {
                    format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->\n", DialogStrgEx );
					format( DialogStrgEx, sizeof( DialogStrgEx ), "%s<- Prethodna stranica", DialogStrgEx );
				}
				else if( EventStranica[ playerid ] <= 10 ) {
				    format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->", DialogStrgEx );
				}

				SPD( playerid, dialog_EVENTIZBRISI, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
	            strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	        }
		}
	}
	else if( dialogid == dialog_BUY_GPS ) {
 		if( !response ) return true;

		new requiredMoney = 500,
			gpsLevel = 1,
			dString[ 128 ]
		;

		format( dString, sizeof( dString ), "Uspjesno ste kupili Osnovni GPS" );

		switch( listitem ) {
		    case 0: {
		        if( PlayerInfo[ playerid ][ xGpsLevel ] >= 1 ) return SendErrorMessage( playerid, "Vec imate Osnovni GPS." );
		    }
			case 1: {
		        if( PlayerInfo[ playerid ][ xGpsLevel ] >= 2 ) return SendErrorMessage( playerid, "Vec imate Srednji GPS." );
				format( dString, sizeof( dString ), "Uspjesno ste kupili Srednji GPS" );
				requiredMoney = 750;
				gpsLevel = 2;
			}
			case 2: {
		        if( PlayerInfo[ playerid ][ xGpsLevel ] >= 3 ) return SendErrorMessage( playerid, "Vec imate Napredni GPS." );
				format(dString, sizeof(dString), "Uspjesno ste kupili Napredni GPS");
				requiredMoney = 1000;
				gpsLevel = 3;
			}
		}

		if( PlayerInfo[ playerid ][ xNovac ] < requiredMoney ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );
		KGEyes_GivePlayerMoney( playerid, -requiredMoney, false ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -requiredMoney, "Kupovina GPSa" );
		if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], requiredMoney / 2 );

    	SCM( playerid, BELA, dString);
    	PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0 );
		PlayerInfo[ playerid ][ xGpsLevel ] = gpsLevel;
		sql_user_update_intandmoney( playerid, "gps_level", PlayerInfo[ playerid ][ xGpsLevel ] );
	}
	else if( dialogid == dialog_GPS_FIND ) {
	    pMappedType[ playerid ] = MAPPED_NONE;
	    if( !response ) return true;

		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	    switch( listitem ) {
	        case 0: {
				pMappedType[ playerid ] = MAPPED_JOB;

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

			    for( new i = 0; i < MAX_JOBS; i++ ) {
			        format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, i+1, jobsInfos[ i ][ jName ] );
				}

				SPD( playerid, dialog_GPS, DSL, "GPS", DialogStrgEx, D_ODABERI, D_ODUSTANI );
	        }
	        /*case 1: {
			    pMappedType[ playerid ] = MAPPED_AFKZONES;
			    for( new i = 0; i < 13; i++ ) {
				   	format( DialogStrgEx, sizeof( DialogStrgEx ), "%sAfk Zona %d\n", DialogStrgEx, i+1 );
				}
				SPD( playerid, dialog_GPS, DSL, "Izaberi lokaciju.", DialogStrgEx, D_ODABERI, D_ODUSTANI );
			}*/
				case 1: {
	            pMappedType[ playerid ] = MAPPED_IMPORTANT;
	            for( new i = 0; i < MAX_GPS; i++ ) {
					if( gpsInfo[ i ][ gpsbaseID ] != 0  ) {
						//format( DialogStrgEx, sizeof( DialogStrgEx ), "%s"col_server"%d %s\n", DialogStrgEx, i, gpsInfo[ i ][ gpsName ] ); // Boja
				    	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, i+1, gpsInfo[ i ][ gpsName ] );
					}
				}
				SPD( playerid, dialog_GPS, DSL, "GPS", DialogStrgEx, D_ODABERI, D_ODUSTANI );
			}
			case 2: {
				pMappedType[ playerid ] = MAPPED_ORG;
				for( new i = 1; i < MAX_ORG; i++ ){
					if( org_info[ i ][ oID ] > 0 && !org_info[ i ][ oSuspended ] )
					format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, i, org_info[ i ][ oName ] );
				}
				SPD( playerid, dialog_GPS, DSL, "GPS", DialogStrgEx, D_ODABERI, D_ODUSTANI );
			}
			case 3: {
			    pMappedType[ playerid ] = MAPPED_BUSINESS;
			    SPD( playerid, dialog_GPS, DSI, "GPS", "Unesite id firme do koje zelite da odete.", D_ODABERI, D_ODUSTANI );
			}
			case 4: {
	            pMappedType[ playerid ] = MAPPED_HOUSE;
				SPD( playerid, dialog_GPS, DSI, "GPS", "Unesite id imovine do koje zelite da odete.", D_ODABERI, D_ODUSTANI );
			    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
			case 5: {
				SPD( playerid, dialog_LOCATENEAREST, DSL, "GPS - Sto zelite locirati?", "Rent\nMarket\nTrafika\nBankomat\nGun Shop\nBenzinska pumpa\nPopravak vozila\nBilbord\nHotel", D_ODABERI, D_ODUSTANI );
			}
		}
		return true;
	}
	else if( dialogid == dialog_GPS ) {
	    if( !response ) return true;

		switch( pMappedType[ playerid ] ) {
		    case MAPPED_IMPORTANT: {
				setPlayerGps( playerid, gpsInfo[ listitem ][ gpsPos_X ], gpsInfo[ listitem ][ gpsPos_Y ], gpsInfo[ listitem ][ gpsPos_Z ] );
			/*}
			case MAPPED_AFKZONES: {
				setPlayerGps( playerid, UlaziAFKZone[ listitem ][ 0 ], UlaziAFKZone[ listitem ][ 1 ], UlaziAFKZone[ listitem ][ 2 ] );*/
			}
			case MAPPED_HOUSE: {
			    pMappedType[ playerid ] = MAPPED_HOUSE;
			    new broj;
			    if( sscanf( inputtext, "d", broj ) ) return SPD( playerid, dialog_GPS, DSI, "GPS.", "Unesite id imovine do koje zelite da odete.", D_ODABERI, D_ODUSTANI );
                if( II[ broj ][ ibaseID ] == 0 ) return SendErrorMessage( playerid, "Ta imovina ne postoji u bazi podataka." );
                if( II[ broj ][ iBuildingSqlID ] != 0 )  {

                	new buildID = II[ broj ][ iExtVW ];
                	if( buildingInfo[ buildID ][ buildbaseID ] != 0 ) {
                		setPlayerGps( playerid, buildingInfo[ buildID ][ buildEnter ][ 0 ], buildingInfo[ buildID ][ buildEnter ][ 1 ], buildingInfo[ buildID ][ buildEnter ][ 2 ] );
                	}
                	else setPlayerGps( playerid, II[ broj ][ iEnter_X ], II[ broj ][ iEnter_Y ], II[ broj ][ iEnter_Z ] );
                }
                else setPlayerGps( playerid, II[ broj ][ iEnter_X ], II[ broj ][ iEnter_Y ], II[ broj ][ iEnter_Z ] );
			}
			case MAPPED_JOB: {
                setPlayerGps( playerid, jobsInfos[ listitem ][ jPos ][ 0 ], jobsInfos[ listitem ][ jPos ][ 1 ], jobsInfos[ listitem ][ jPos ][ 2 ] );
			}
			case MAPPED_BUSINESS: {

			    pMappedType[ playerid ] = MAPPED_BUSINESS;
			    new broj;
			    if( sscanf( inputtext, "d", broj ) ) return SPD( playerid, dialog_GPS, DSI, "GPS.", "Unesite id firme do koje zelite da odete.", D_ODABERI, D_ODUSTANI );
                if( BussinesInfo[ broj ][ b_ID ] == 0 ) return SendErrorMessage( playerid, "Ta firma(ID) ne postoji u bazi podataka!");

				setPlayerGps( playerid, BussinesInfo[ broj ][ bEnterX ], BussinesInfo[ broj ][ bEnterY ], BussinesInfo[ broj ][ bEnterZ ] );
			}
			case MAPPED_ORG: {
				pMappedType[ playerid ] = MAPPED_ORG;
				setPlayerGps( playerid, org_info[ listitem+1 ][ oPozExtX ], org_info[ listitem+1 ][ oPozExtY ], org_info[ listitem+1 ][ oPozExtZ ] );
			}
		}
	}
	else if( dialogid == dialog_WAR && response ) {
        if( listitem == 0 ) { SPD( playerid, dialog_WAR_ZAKAZI_1, DSL, "Izaberi mapu", "Mapa 1 - Abandoned\nMapa 2 - RC Battlefield\nMapa 3 - Skladiste\nMapa 4 - United\nMapa 5 - Farma\nMapa 6 - Farma 2", "Odaberi", "Ponisti"); }
        if( listitem == 1 ) { SPD( playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca iz vaseg/saveznickog tima", "Uredu", "Ponisti"); }
        if( listitem == 2 ) { SPD( playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca iz vaseg/saveznickog tima", "Uredu", "Ponisti"); }
    }
    else if( dialogid == dialog_WARIZBACI && response ) {
        if( WARPInfo[ playerid ][ WARIgrac ] == -1 ) return SendErrorMessage( playerid, "Niste u waru." );
        new igrac, w = WARPInfo[ playerid ][ WARIgrac ];
		if( sscanf( inputtext, "u", igrac ) ) return SPD( playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca vaseg/saveznickog tima", "Uredu", "Ponisti");
        if( WARInfo[ w ][ WARAktivan ] == false ) return SendErrorMessage( playerid, "War nije jos startovan.");
        if( igrac == IPI ) return SPD( playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca vaseg/saveznickog tima", "Uredu", "Ponisti");
        if( PlayerInfo[ igrac ][ xClan ] != PlayerInfo[ playerid ][ xClan ] && PlayerInfo[ igrac ][ xClan ] != org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ]  )
			return SPD( playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
		if( WARPInfo[ igrac ][ WARIgrac ] == -1 ) return SPD( playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca vaseg/saveznickog tima", "Uredu", "Ponisti");
		SetPlayerHealth( igrac, 100 );
		KGEyes_SetPlayerArmour( igrac, 0);
		SetPlayerDColor( igrac );//SetPlayerColor( igrac, 0xFFFFFFAA );

        KGEyes_SetPlayerPos( igrac, PozicijaWAR[ igrac ][ 0 ], PozicijaWAR[ igrac ][ 1 ],  PozicijaWAR[ igrac ][ 2 ] );
		KGEyes_SetPlayerSkin( igrac, PlayerInfo[ igrac ][ xSkin ] );
        SetPlayerVirtualWorld( igrac, VirtualWWAR[ igrac ] );
        SetPlayerInterior( igrac, InteriorWAR[ igrac ] );
		SetPlayerWeather( igrac, ServerInfo[ Prognozasys ] );  // Dynamic Weather System
        antiCheatCS[ igrac ][ WeaponDetect ] = 3;
		ResetAllWeapons( igrac );
        WARPInfo[ igrac ][ WARIgrac ] = -1;
		//if( IsValidDynamic3DTextLabel( WARPInfo[ playerid ][ tdlabel ] ) )
		//	DestroyDynamic3DTextLabel( WARPInfo[ playerid ][ tdlabel ] );
        ResetujWarIgraca( igrac );
        if( WARPInfo[ playerid ][ WARTim ][ 0 ] == true ) { WARInfo[ w ][ WARTimClanovi ][ 0 ]--; }
        if( WARPInfo[ playerid ][ WARTim ][ 1 ] == true ) { WARInfo[ w ][ WARTimClanovi ][ 1 ]--; }

        SCM( playerid, -1, "Izbacio si clana." );

        WarTDControl( igrac, false );
	}
    else if( dialogid == dialog_WARUBACI && response ) {
		if( WARPInfo[ playerid ][ WARIgrac ] == -1 ) return SendErrorMessage( playerid, "Niste u waru." );
        new igrac, w = WARPInfo[ playerid ][ WARIgrac ];
		if( sscanf( inputtext, "u", igrac ) ) return SPD( playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca vaseg/saveznickog tima", "Uredu", "Ponisti");
        if( WARInfo[ w ][ WARAktivan ] == false ) return SendErrorMessage( playerid, "War nije jos startovan.");
		if( igrac == playerid ) return SPD( playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca vaseg/saveznickog tima", "Uredu", "Ponisti");
        if( igrac == IPI ) return SPD( playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca vaseg/saveznickog tima", "Uredu", "Ponisti");
		if( PlayerInfo[ igrac ][ xClan ] != PlayerInfo[ playerid ][ xClan ] && PlayerInfo[ igrac ][ xClan ] != org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ] )
			return SPD( playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca iz vaseg/saveznickog tima", "Uredu", "Ponisti");
		if( WARPInfo[ igrac ][ WARIgrac ] != -1 ) return SPD( playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca vaseg/saveznickog tima", "Uredu", "Ponisti");
		if( PlayerInfo[ igrac ][ xLevel ] < 1 ) return SendErrorMessage( playerid, "Igrac mora biti level 10+ da bi pristupio waru." );
        if( PlayerCP[ igrac ] > 0 ) return SendErrorMessage( playerid, "Ne mozete ubaciti igraca koji je na eventu." );
        if( PlayerInvited[ igrac ] > 0 ) return SendErrorMessage( playerid, "Ne mozete ubaciti igraca koji je na eventu." );
		//if( PlayerInfo[ igrac ][ xWanted ] > 0 ) return SendErrorMessage( playerid, "Ne mozete ubaciti igraca koji ima wanted level." );
		if( PlayerInfo[ igrac ][ xZatvor ] > 0 ) return SendErrorMessage( playerid, "Ne mozete ubaciti igraca koji je u zatvoru." );
		if( PlayerInfo[ igrac ][ xCiter ] == 1) return SendErrorMessage( playerid, " Taj igrac ima status citera i ne moze igrati war");
		if( WARPInfo[ playerid ][ WARTim ][ 0 ] == true ) {
			if( WARInfo[ w ][ WARTimClanovi ][ 0 ] >= WARInfo[ w ][ WARMaxClanova ] ) return SendErrorMessage(playerid, "Imate maksimalan broj clanova u waru!");

			GetPlayerPos( igrac, PozicijaWAR[ igrac ][ 0 ], PozicijaWAR[ igrac ][ 1 ],  PozicijaWAR[ igrac ][ 2 ] );
			VirtualWWAR[ igrac ] = GetPlayerVirtualWorld( igrac );
            InteriorWAR[ igrac ] = GetPlayerInterior( igrac );
            new rand1 = random( sizeof( RandomWARMapa11 ) );
            new rand21 = random( sizeof( RandomWARMapa21 ) );
            new rand31 = random( sizeof( RandomWARMapa31 ) );
            new rand41 = random( sizeof( RandomWARMapa41 ) );
            new rand51 = random( sizeof( RandomWARMapa51 ) );
			new rand61 = random( sizeof( RandomWARMapa61 ) );

            if(WARInfo[ w ][ WARMapa ] == 1 ) {
				KGEyes_SetPlayerPos( igrac, RandomWARMapa11[ rand1 ][ 0 ], RandomWARMapa11[ rand1 ][ 1 ],RandomWARMapa11[ rand1 ][ 2 ] );
                SetPlayerInterior( playerid, 0 );
			}
            else if(WARInfo[ w ][ WARMapa ] == 2 ) {
				KGEyes_SetPlayerPos( igrac, RandomWARMapa21[ rand21 ][ 0 ], RandomWARMapa21[ rand21 ][ 1 ],RandomWARMapa21[ rand21 ][ 2 ] );
				SetPlayerInterior( igrac, 10 );
			}
            else if(WARInfo[ w ][ WARMapa ] == 3 ) {
				KGEyes_SetPlayerPos( igrac, RandomWARMapa31[ rand31 ][ 0 ], RandomWARMapa31[ rand31 ][ 1 ],RandomWARMapa31[ rand31 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
            else if(WARInfo[ w ][ WARMapa ] == 4 ) {
				KGEyes_SetPlayerPos( igrac, RandomWARMapa41[ rand41 ][ 0 ], RandomWARMapa41[ rand41 ][ 1 ],RandomWARMapa41[ rand41 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
            else if(WARInfo[ w ][ WARMapa ] == 5 ) {
				KGEyes_SetPlayerPos( igrac, RandomWARMapa51[ rand51 ][ 0 ], RandomWARMapa51[ rand51 ][ 1 ],RandomWARMapa51[ rand51 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
			else if(WARInfo[ w ][ WARMapa ] == 6 ) {
				KGEyes_SetPlayerPos( igrac, RandomWARMapa61[ rand61 ][ 0 ], RandomWARMapa61[ rand61 ][ 1 ],RandomWARMapa61[ rand61 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}


			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 0 ], 400 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 1 ], 300 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 2 ], 500 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 3 ], 300 );
			KGEyes_SetPlayerSkin( igrac, 91 );
			SetPlayerVirtualWorld( igrac, w );
			SetPlayerWeather( igrac, DEFAULT_WEATHER );  // Dynamic Weather System
			SetPlayerHealth( igrac, 100 );
			if(WARInfo[ w ][ WARArmor ])
				KGEyes_SetPlayerArmour( igrac, 100 );
			//SetPlayerColor( igrac, 0xFFFFFF00 );
			WARInfo[ w ][ WARTimClanovi ][ 0 ]++;
			ResetujWarIgraca( igrac );
    		WARPInfo[ igrac ][ WARTim ][ 0 ] = true;
    		WARPInfo[ igrac ][ WARIgrac ] = w;
			//WARPInfo[ igrac ][ tdlabel ] = CreateDynamic3DTextLabel("[[     ROZI     ]]", 0xFF69B4FF, 0.0, 0.0, 0.1, 40.0, igrac);
    		new string[ 128 ];
    		format( string, sizeof( string ), ""col_server"WAR "col_white"| "col_server2"Bijeli Tim: "col_white"%s "col_white"| "col_warcrna"Crni Tim: "col_white"%s", getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
  		    SCM( igrac, -1, string );
    		SCM( igrac, -1, ""col_warljub"WAR "col_white"| Komande: /wp /warnapusti." );
    		SCM( playerid, -1, ""col_warljub"WAR "col_white"Ubacio si clana." );

    		WarTDControl( igrac, true );
    		SetWarStatsTD( w );
		}
		else if( WARPInfo[ playerid ][ WARTim ][ 1 ] == true ) {
			if( WARInfo[ w ][ WARTimClanovi ][ 1 ] >= WARInfo[ w ][ WARMaxClanova ] ) return SendErrorMessage(playerid, "Imate maksimalan broj clanova u waru!");

			GetPlayerPos( igrac, PozicijaWAR[ igrac ][ 0 ], PozicijaWAR[ igrac ][ 1 ],  PozicijaWAR[ igrac ][ 2 ] );
			VirtualWWAR[ igrac ] = GetPlayerVirtualWorld( igrac );
			InteriorWAR[ igrac ] = GetPlayerInterior( igrac );

		    new rand2 = random( sizeof( RandomWARMapa12 ) );
		    new rand22 = random( sizeof( RandomWARMapa22 ) );
		    new rand32 = random( sizeof( RandomWARMapa32 ) );
		    new rand42 = random( sizeof( RandomWARMapa42 ) );
		    new rand52 = random( sizeof( RandomWARMapa52 ) );
			new rand62 = random( sizeof( RandomWARMapa62 ) );
            if( WARInfo[ w ][ WARMapa ] == 1 ) {
				KGEyes_SetPlayerPos( igrac, RandomWARMapa12[ rand2 ][ 0 ], RandomWARMapa12[ rand2 ][ 1 ],RandomWARMapa12[ rand2 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
            else if( WARInfo[ w ][ WARMapa ] == 2 ) {
				KGEyes_SetPlayerPos( igrac, RandomWARMapa22[ rand22 ][ 0 ], RandomWARMapa22[ rand22 ][ 1 ],RandomWARMapa22[ rand22 ][ 2 ] );
				SetPlayerInterior( igrac, 10 );
			}
            else if( WARInfo[ w ][ WARMapa ] == 3 ) {
				KGEyes_SetPlayerPos( igrac, RandomWARMapa32[ rand32 ][ 0 ], RandomWARMapa32[ rand32 ][ 1 ],RandomWARMapa32[ rand32 ][ 2 ] );
                SetPlayerInterior( igrac, 0 );
			}
            else if( WARInfo[ w ][ WARMapa ] == 4 ) {
				KGEyes_SetPlayerPos( igrac, RandomWARMapa42[ rand42 ][ 0 ], RandomWARMapa42[ rand42 ][ 1 ],RandomWARMapa42[ rand42 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
            else if( WARInfo[ w ][ WARMapa ] == 5 ) {
				KGEyes_SetPlayerPos( igrac, RandomWARMapa52[ rand52 ][ 0 ], RandomWARMapa52[ rand52 ][ 1 ],RandomWARMapa52[ rand52 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 6 ) {
				KGEyes_SetPlayerPos( igrac, RandomWARMapa62[ rand62 ][ 0 ], RandomWARMapa62[ rand62 ][ 1 ],RandomWARMapa62[ rand62 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}

			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 0 ], 400 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 1 ], 300 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 2 ], 500 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 3 ], 300 );
			KGEyes_SetPlayerSkin( playerid, 141 );
			SetPlayerVirtualWorld( igrac, w );
			SetPlayerHealth( igrac, 100 );
			SetPlayerWeather( igrac, DEFAULT_WEATHER );  // Dynamic Weather System
			if(WARInfo[ w ][ WARArmor ])
				KGEyes_SetPlayerArmour( igrac, 100 );

			WARInfo[ w ][ WARTimClanovi ][ 1 ]++;
			//SetPlayerColor( igrac, 0xFFFFFF00 );
			ResetujWarIgraca( igrac );
    		WARPInfo[ igrac ][ WARTim ][ 1 ] = true;
    		WARPInfo[ igrac ][ WARIgrac ] = w;
			//WARPInfo[ igrac ][ tdlabel ] = CreateDynamic3DTextLabel("[[     ZUTI     ]]", 0xFFFF00FF, 0.0, 0.0, 0.1, 40.0, igrac);
    		new string[ 128 ];
    		format( string, sizeof( string ), ""col_warljub"WAR "col_white"| "col_warljub"Tim 1: "col_white"%s "col_white"| "col_warljub"Tim 2: "col_white"%s", getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
  		    SCM( igrac, -1, string );
    		SCM( igrac, -1, ""col_warljub"WAR "col_white"| Komande: /wp /warnapusti." );
    		SCM( playerid, -1, ""col_warljub"WAR "col_white"| Ubacio si clana." );

    		WarTDControl( igrac, true );
    		SetWarStatsTD( w );
		}
	}
    else if( dialogid == dialog_WAR_ZAKAZI_1 && response) {
		if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes u waru dok si u jailu." );
		if( PlayerInfo[ playerid ][ xCiter ] == 1) return SendErrorMessage( playerid, "Vi imate status citera i ne mozete zakazivati WARove");
        new warid = -1;
		for( new w = 1; w < MAX_WARS; w ++) {
			if( WARInfo[ w ][ WARAktivan ] == false && WARInfo[ w ][ WARKreiranje ] == false ) {
			    warid = w;
			    break;
			}
		}
		if( warid == -1 ) return SendErrorMessage( playerid, "Vec ima 10 warova u toku, sacekajte da se neki zavrsi." );
		if(KreiranjeWara[playerid] != -1)
		{
			new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
			//WARInfo[ w ][ WARAktivan ] = false;
		}
		KreiranjeWara[ playerid ] = warid;
		WARInfo[ warid ][ WARKreiranje ] = true;
        WARInfo[ warid ][ WARAktivan ] = false;
        WARInfo[ warid ][ WARCijena ] = 0;
        if( listitem == 0 ) { WARInfo[ warid ][ WARMapa ] = 1; }
		if( listitem == 1 ) { WARInfo[ warid ][ WARMapa ] = 2; }
		if( listitem == 2 ) { WARInfo[ warid ][ WARMapa ] = 3; }
		if( listitem == 3 ) { WARInfo[ warid ][ WARMapa ] = 4; }
		if( listitem == 4 ) { WARInfo[ warid ][ WARMapa ] = 5; }
		if( listitem == 5 ) { WARInfo[ warid ][ WARMapa ] = 6; }
		if( listitem == 6 ) { WARInfo[ warid ][ WARMapa ] = 7; }
        SPD( playerid, dialog_WAR_ZAKAZI_2, DSL, "Izaberi oruzje slot 1", "Deagle\nColt 45\nSilenced Pistol", "Odaberi", "Ponisti" );
	}
	else if( dialogid == dialog_WAR_ZAKAZI_2 ) {
		if( response ) {
		    new w = KreiranjeWara[ playerid ];
		    if( listitem == 0 ) { WARInfo[ w ][ WAROruzje ][ 0 ] = 24; }
		    if( listitem == 1 ) { WARInfo[ w ][ WAROruzje ][ 0 ] = 22; }
		    if( listitem == 2 ) { WARInfo[ w ][ WAROruzje ][ 0 ] = 23; }
		    SPD( playerid, dialog_WAR_ZAKAZI_3, DSL, "Izaberi oruzje slot 2", "Uzi\nMP5\nTec-9", "Odaberi", "Ponisti");
		}
		else if( !response ) {
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_3 ) {
		if( response ) {
		    new w = KreiranjeWara[ playerid ];
		    if( listitem == 0 ) { WARInfo[ w ][ WAROruzje ][ 1 ] = 28; }
		    if( listitem == 1 ) { WARInfo[ w ][ WAROruzje ][ 1 ] = 29; }
			if( listitem == 2 ) { WARInfo[ w ][ WAROruzje ][ 3 ] = 32; }
		    SPD( playerid, dialog_WAR_ZAKAZI_4, DSL, "Izaberi oruzje slot 3", "AK-47\nM4", "Odaberi", "Ponisti");
		}
		else if( !response ) {
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_4 ) {
		if( response ) {
		    new w = KreiranjeWara[ playerid ];
		    if( listitem == 0 ) { WARInfo[ w ][ WAROruzje ][ 2 ] = 30; }
		    if( listitem == 1 ) { WARInfo[ w ][ WAROruzje ][ 2 ] = 31; }
		    SPD( playerid, dialog_WAR_ZAKAZI_5, DSL, "Izaberi oruzje slot 4", "Country Rifle\nShotgun\nSawnoff Shotgun", "Odaberi", "Ponisti");
		}
		else if( !response ) {
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_5 ) {
		if( response ) {
		    new w = KreiranjeWara[ playerid ];
		    if( listitem == 0 ) { WARInfo[ w ][ WAROruzje ][ 3 ] = 33; }
		    if( listitem == 1 ) { WARInfo[ w ][ WAROruzje ][ 3 ] = 25; }
			if( listitem == 2 ) { WARInfo[ w ][ WAROruzje ][ 2 ] = 26; }
			SPD( playerid, dialog_WAR_ZAKAZI_9, DSI, "Ulaganje novca", "Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi(Ako uneses 0 onda nema uloga).", "Odaberi", "Ponisti");
		}
		else if( !response ) {
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_9 ) {
	    if( response ) {
	        new w = KreiranjeWara[ playerid ], novac;
	        if( sscanf( inputtext, "i", novac ) ) return SPD( playerid, dialog_WAR_ZAKAZI_9, DSI, "Ulaganje novca", "Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi(Ako uneses 0 onda nema uloga).", "Odaberi", "Ponisti");
	        if( PlayerInfo[ playerid ][ xNovac ] < novac ) return SPD( playerid, dialog_WAR_ZAKAZI_9, DSI, "Nemate dovoljno novca", "Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi(Ako uneses 0 onda nema uloga).", "Odaberi", "Ponisti");
			if( novac < 0 || novac > 1000000 ) return SPD( playerid, dialog_WAR_ZAKAZI_9, DSI, "Ulaganje novca", "Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi(Ako uneses 0 onda nema uloga).", "Odaberi", "Ponisti");

			WARInfo[ w ][ WARCijena ] = novac;
			SPD( playerid, dialog_WAR_ZAKAZI_6, DSI, "Maximum clanova", "Upisite koliko maximum clanova ce biti u waru(3-10).", "Odaberi", "Ponisti");
	    }
	    else if( !response ) {
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_6 ) {
	    if( response ) {
		    new maxigraca, w = KreiranjeWara[ playerid ];
			if( sscanf( inputtext, "i", maxigraca ) ) return SPD( playerid, dialog_WAR_ZAKAZI_6, DSI, "Maximum clanova", "Upisite koliko maximum clanova ce biti u waru(3-10).", "Odaberi", "Ponisti");
			if( maxigraca < 3 || maxigraca > 10 ) return SPD( playerid, dialog_WAR_ZAKAZI_6, DSI, "Maximum clanova", "Upisite koliko maximum clanova ce biti u waru(3-10).", "Odaberi", "Ponisti");
	        WARInfo[ w ][ WARMaxClanova ] = maxigraca;
			SPD( playerid, dialog_WAR_ZAKAZI_10, DSL, "Armorom", "War s armorom\nWar bez armora", "Odaberi", "Ponisti");
		}
		else if( !response ) {
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_10 ) {
	    if( response ) {
		    new w = KreiranjeWara[ playerid ];
			if( listitem == 0 ) { WARInfo[ w ][ WARArmor ] = true; }
		    if( listitem == 1 ) { WARInfo[ w ][ WARArmor ] = false; }
	        SPD( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera/ranka 5 protivnicke orge.", "Odaberi", "Ponisti" );
		}
		else if( !response ) {
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_7 ) {
	    if( response ) {
		    new id, w = KreiranjeWara[ playerid ], string[ 128 ];
			if( sscanf( inputtext, "u", id ) ) return SPD( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika ( error 1 )", "Upisite id lidera/ranka 5 protivnicke orge.", "Odaberi", "Ponisti" );
			if( id == IPI ) return SPD( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika ( error 2 )", "Upisite id lidera/ranka 5 protivnicke orge.", "Odaberi", "Ponisti" );
			//if( PlayerInfo[ id ][ xWarDozvola ] == PlayerInfo[ playerid ][ xWarDozvola ] ) return SPD( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika ( error 3 )", "Upisite id lidera/ranka 5 protivnicke orge.", "Odaberi", "Ponisti" );
			if( PlayerInfo[ id ][ xWarDozvola ] == 0 ) return SPD( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika ( error 4 )", "Upisite id lidera/ranka 5 protivnicke orge.", "Odaberi", "Ponisti" );
			if( id == playerid ) return SPD( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika ( error 5 )", "Upisite id lidera/ranka 5 protivnicke orge.", "Odaberi", "Ponisti" );
			if( PlayerInfo[ id ][ xCiter ] == 1) return SPD( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika ( error 6 )", "Upisite id lidera/ranka 5 protivnicke orge./n Igrac kojeg ste prethodno unijeli ima status citera i nmze orgati war", "Odaberi", "Ponisti" );
			if( !IsPlayerNearPlayer( 5.0, playerid, id ) ) return SPD( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika ( error 7 )", "Upisite id lidera/ranka 5 protivnicke orge./n Igrac kojeg ste prethodno unijeli nije u vasoj blizini", "Odaberi", "Ponisti" );

			if( org_info[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_PD &&
				org_info[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_MD &&
				org_info[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_CNN &&
				org_info[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_HITM &&
				org_info[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_ELEK &&
				org_info[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_TAXI ) return SPD( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika ( error 7 )", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti" );

			if( PlayerInfo[ id ][ xZatvor ] != 0 ) return SendErrorMessage( playerid, "Ne mozes u waru pozvati lidera/rank 5 koji je u jailu." );
			if( WARInfo[ w ][ WARKreiranje ] == false) return SendErrorMessage( playerid, "Isteklo je vrijeme za kreiranje wara." );
			WARInfo[ w ][ WARTimLider ][ 0 ] = playerid;
			WARInfo[ w ][ WARTimLider ][ 1 ] = id;
            KreiranjeWara[ id ] = w;

			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			format( string, sizeof( string ), ""col_server"Oruzje 1: "col_white"%s\n", WeaponInfos[ WARInfo[ w ][ WAROruzje ][ 0 ] ][ wName ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), ""col_server"Oruzje 2: "col_white"%s\n", WeaponInfos[ WARInfo[ w ][ WAROruzje ][ 1 ] ][ wName ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), ""col_server"Oruzje 3: "col_white"%s\n", WeaponInfos[ WARInfo[ w ][ WAROruzje ][ 2 ] ][ wName ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), ""col_server"Oruzje 4: "col_white"%s\n", WeaponInfos[ WARInfo[ w ][ WAROruzje ][ 3 ] ][ wName ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), ""col_server"Maksimalni broj clanova: "col_white"%d\n\n", WARInfo[ w ][ WARMaxClanova ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), ""col_server"Ulog novca: "col_white"%d$\n\n", WARInfo[ w ][ WARCijena ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), ""col_white"%s - %s "col_server"vam je poslao zahtjev za war.\nIzaberi:", getOrgName( PlayerInfo[ playerid ][ xClan ] ), ImeIgraca( playerid ) );
			strcat( DialogStrgEx, string );
			SPD( id, dialog_WAR_ZAKAZI_8, DSMSG, "Zahtjev za war", DialogStrgEx, "Prihvati", "Odbij" );
			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
        }
		else if( !response ) {
		    new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_8 ) {
	    if( response ) {
	        new w = KreiranjeWara[ playerid ];
	        if( PlayerInfo[ playerid ][ xNovac ] < WARInfo[ w ][ WARCijena ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca za ulog." );

		    SCM( WARInfo[ w ][ WARTimLider ][ 1 ], -1, ""col_warljub"WAR "col_white"| Prihvatio si poziv za war ubaci svoje igrace!");
	        SCM( WARInfo[ w ][ WARTimLider ][ 0 ], -1, ""col_warljub"WAR "col_white"| Igrac je prihvatio poziv za war ubaci svoje igrace!");

            KGEyes_GivePlayerMoney( WARInfo[ w ][ WARTimLider ][ 0 ], -WARInfo[ w ][ WARCijena ] ), PlayerMoneyTrackSave( WARInfo[ w ][ WARTimLider ][ 0 ], MONEY_HANDS, -WARInfo[ w ][ WARCijena ], "War ulog" );
            KGEyes_GivePlayerMoney( WARInfo[ w ][ WARTimLider ][ 1 ], -WARInfo[ w ][ WARCijena ] ), PlayerMoneyTrackSave( WARInfo[ w ][ WARTimLider ][ 1 ], MONEY_HANDS, -WARInfo[ w ][ WARCijena ], "War ulog" );

            GetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ 0 ], PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ 1 ],  PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ 2 ] );
			VirtualWWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ] = GetPlayerVirtualWorld( WARInfo[ w ][ WARTimLider ][ 0 ] );
            InteriorWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ] = GetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ] );

            GetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ 0 ], PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ 1 ],  PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ 2 ] );
            VirtualWWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ] = GetPlayerVirtualWorld( WARInfo[ w ][ WARTimLider ][ 0 ] );
            InteriorWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ] = GetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ] );

            if( WARInfo[ w ][ WARMapa ] == 1 ) {
                new rand1 = random( sizeof( RandomWARMapa11 ) );
		    	new rand2 = random( sizeof( RandomWARMapa12 ) );
                KGEyes_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa11[ rand1 ][ 0 ], RandomWARMapa11[ rand1 ][ 1 ],RandomWARMapa11[ rand1 ][ 2 ] );
            	KGEyes_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa12[ rand2 ][ 0 ], RandomWARMapa12[ rand2 ][ 1 ],RandomWARMapa12[ rand2 ][ 2 ] );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 0 );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 0 );
			}
            else if( WARInfo[ w ][ WARMapa ] == 2 ) {
                new rand1 = random( sizeof( RandomWARMapa21 ) );
		    	new rand2 = random( sizeof( RandomWARMapa22 ) );
		    	KGEyes_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa21[ rand1 ][ 0 ], RandomWARMapa21[ rand1 ][ 1 ],RandomWARMapa21[ rand1 ][ 2 ] );
		    	KGEyes_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa22[ rand2 ][ 0 ], RandomWARMapa22[ rand2 ][ 1 ],RandomWARMapa22[ rand2 ][ 2 ] );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 10 );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 10 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 3 ) {
			    new rand1 = random( sizeof( RandomWARMapa31 ) );
		    	new rand2 = random( sizeof( RandomWARMapa32 ) );
                KGEyes_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa31[ rand1 ][ 0 ], RandomWARMapa31[ rand1 ][ 1 ],RandomWARMapa31[ rand1 ][ 2 ] );
            	KGEyes_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa32[ rand2 ][ 0 ], RandomWARMapa32[ rand2 ][ 1 ],RandomWARMapa32[ rand2 ][ 2 ] );
             	SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 0 );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 0 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 4 ) {
			    new rand1 = random( sizeof( RandomWARMapa41 ) );
		    	new rand2 = random( sizeof( RandomWARMapa42 ) );
                KGEyes_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa41[ rand1 ][ 0 ], RandomWARMapa41[ rand1 ][ 1 ],RandomWARMapa41[ rand1 ][ 2 ] );
            	KGEyes_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa42[ rand2 ][ 0 ], RandomWARMapa42[ rand2 ][ 1 ],RandomWARMapa42[ rand2 ][ 2 ] );
            	SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 0 );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 0 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 5 ) {
			    new rand1 = random( sizeof( RandomWARMapa51 ) );
		    	new rand2 = random( sizeof( RandomWARMapa52 ) );
                KGEyes_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa51[ rand1 ][ 0 ], RandomWARMapa51[ rand1 ][ 1 ],RandomWARMapa51[ rand1 ][ 2 ] );
            	KGEyes_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa52[ rand2 ][ 0 ], RandomWARMapa52[ rand2 ][ 1 ],RandomWARMapa52[ rand2 ][ 2 ] );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 0 );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 0 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 6 ) {
			    new rand1 = random( sizeof( RandomWARMapa61 ) );
		    	new rand2 = random( sizeof( RandomWARMapa62 ) );
                KGEyes_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa61[ rand1 ][ 0 ], RandomWARMapa61[ rand1 ][ 1 ],RandomWARMapa61[ rand1 ][ 2 ] );
            	KGEyes_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa62[ rand2 ][ 0 ], RandomWARMapa62[ rand2 ][ 1 ],RandomWARMapa62[ rand2 ][ 2 ] );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 0 );
                SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 0 );
			}


			SetPlayerWeather( WARInfo[ w ][ WARTimLider ][ 0 ], DEFAULT_WEATHER );  // Dynamic Weather System
			SetPlayerWeather( WARInfo[ w ][ WARTimLider ][ 1 ], DEFAULT_WEATHER );  // Dynamic Weather System

			WARInfo[ w ][ WARAktivan ] = true;
			KreiranjeWara[WARInfo[ w ][ WARTimLider ][ 0 ]] = -1;
			KreiranjeWara[WARInfo[ w ][ WARTimLider ][ 1 ]] = -1;

			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 0 ], WARInfo[ w ][ WAROruzje ][ 0 ], 400 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 0 ], WARInfo[ w ][ WAROruzje ][ 1 ], 300 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 0 ], WARInfo[ w ][ WAROruzje ][ 2 ], 500 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 0 ], WARInfo[ w ][ WAROruzje ][ 3 ], 300 );
			KGEyes_SetPlayerSkin( WARInfo[ w ][ WARTimLider ][ 0 ], 91 );
			SetPlayerVirtualWorld( WARInfo[ w ][ WARTimLider ][ 0 ], w );
			SetPlayerHealth( WARInfo[ w ][ WARTimLider ][ 0 ], 100 );
			if(WARInfo[ w ][ WARArmor ])
				KGEyes_SetPlayerArmour( WARInfo[ w ][ WARTimLider ][ 0 ], 100 );

			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 1 ], WARInfo[ w ][ WAROruzje ][ 0 ], 400 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 1 ], WARInfo[ w ][ WAROruzje ][ 1 ], 300 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 1 ], WARInfo[ w ][ WAROruzje ][ 2 ], 500 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 1 ], WARInfo[ w ][ WAROruzje ][ 3 ], 300 );
			KGEyes_SetPlayerSkin( WARInfo[ w ][ WARTimLider ][ 1 ], 141 );
			SetPlayerVirtualWorld( WARInfo[ w ][ WARTimLider ][ 1 ], w );
			SetPlayerHealth( WARInfo[ w ][ WARTimLider ][ 1 ], 100 );
			if(WARInfo[ w ][ WARArmor ])
				KGEyes_SetPlayerArmour( WARInfo[ w ][ WARTimLider ][ 1 ], 100 );

            WARInfo[ w ][ WARTeamID ][ 0 ] = PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ];
			WARInfo[ w ][ WARTeamID ][ 1 ] = PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ];

			WARInfo[ w ][ WARTimClanovi ][ 0 ]++;
			WARInfo[ w ][ WARTimClanovi ][ 1 ]++;

			WARInfo[ w ][ WARTimer ] = SetTimerEx( "ZaustaviWAR", 10*60000, false, "d", w );
			WARInfo[ w ][ TimerWARMin ] = 1; WARInfo[ w ][ TimerWARSec ] = 0;
			WARInfo[ w ][ TimerWAROstaloVrijeme ] = SetTimerEx( "TimerWAROstaloVrijemeB", 1000, true, "d", w );

            ResetujWarIgraca( WARInfo[ w ][ WARTimLider ][ 0 ] );
    		WARPInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ WARTim ][ 0 ] = true;
    		WARPInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ WARIgrac ] = w;
			//WARPInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ tdlabel ] = CreateDynamic3DTextLabel("[[     ROZI     ]]", 0xFF69B4FF, 0.0, 0.0, 0.1, 40.0, WARInfo[ w ][ WARTimLider ][ 0 ]);

            ResetujWarIgraca( WARInfo[ w ][ WARTimLider ][ 1 ] );
    		WARPInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ WARTim ][ 1 ] = true;
			WARPInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ WARIgrac ] = w;
			//WARPInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ tdlabel ] = CreateDynamic3DTextLabel("[[     ZUTI     ]]", 0xFFFF00FF, 0.0, 0.0, 0.1, 40.0, WARInfo[ w ][ WARTimLider ][ 1 ]);

			/*SetPlayerColor( WARInfo[ w ][ WARTimLider ][ 0 ], 0xFFFFFF00 );
			SetPlayerColor( WARInfo[ w ][ WARTimLider ][ 1 ], 0xFFFFFF00 );*/

			new string[ 128 ];
    		format( string, sizeof( string ), ""col_warljub"WAR "col_white"| "col_warljub"Tim 1: "col_white"%s "col_white"| "col_warljub"Tim 2: "col_white"%s", getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
  		    SCM( WARInfo[ w ][ WARTimLider ][ 0 ], -1, string );
    		SCM( WARInfo[ w ][ WARTimLider ][ 0 ], -1, ""col_warljub"WAR "col_white"| Komande: /wp /warnapusti." );

    		format( string, sizeof( string ), ""col_warljub"WAR "col_white"| "col_warljub"Tim 1: "col_white"%s "col_white"| "col_warljub"Tim 2: "col_white"%s", getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
  		    SCM( WARInfo[ w ][ WARTimLider ][ 1 ], -1, string );
    		SCM( WARInfo[ w ][ WARTimLider ][ 1 ], -1, ""col_warljub"WAR "col_white"| Komande: /wp /warnapusti." );

    		WarTDControl( WARInfo[ w ][ WARTimLider ][ 0 ], true );
			WarTDControl( WARInfo[ w ][ WARTimLider ][ 1 ], true );
    		SetWarStatsTD( w );

    		format( globalstring, sizeof( globalstring ), ""col_warcrna"WAR | %s je pokrenuo war izmedju %s i %s", ImeIgraca( WARInfo[ w ][ WARTimLider ][ 0 ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
			AdminPoruka( BELA, globalstring );

			new string12[ 128 ];
			format( string12, sizeof( string12 ), "Igrac %s je pokrenuo war izmedju %s i %s", ImeIgraca( WARInfo[ w ][ WARTimLider ][ 0 ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
			LogSave( "Ostalo/LogWAR.log", string12 );

		}
		else if( !response ) {
		    new w = KreiranjeWara[ playerid ];
		    SCM( WARInfo[ w ][ WARTimLider ][ 0 ], -1, "Protivnicki Lider/Rank 5 je odbio poziv za war!" );
			WARInfo[ w ][ WARKreiranje ] = false;
	        WARInfo[ w ][ WARAktivan ] = false;
	        KreiranjeWara[ WARInfo[ w ][ WARTimLider ][ 0 ] ] = -1;
	        KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_PDOZVOLE ) {
	    if( response ) {
			new playerID = GlobalID[playerid];

			new text1[20], text2[20], text3[20], text4[20], text5[20], text6[20], text7[20], text8[20];

			if( PlayerInfo[ playerid ][ xVozacka ] > 0 ) { text1 = "Da"; } else { text1 = "Ne"; }
			if( PlayerInfo[ playerid ][ xMotorska ] > 0 ) { text4 = "Da"; } else { text4 = "Ne"; }
			if( PlayerInfo[ playerid ][ xKamionskaC1 ] > 0 ) { text2 = "Da"; } else { text2 = "Ne"; }
			if( PlayerInfo[ playerid ][ xKamionskaC2 ] > 0 ) { text3 = "Da"; } else { text3 = "Ne"; }
			if( PlayerInfo[ playerid ][ xKamionskaC3 ] > 0 ) { text5 = "Da"; } else { text5 = "Ne"; }
			if( PlayerInfo[ playerid ][ xBrodska ] > 0 ) { text6 = "Da"; } else { text6 = "Ne"; }
			if( PlayerInfo[ playerid ][ xLetelica ] > 0 ) { text7 = "Da"; } else { text7 = "Ne"; }
			if( PlayerInfo[ playerid ][ xGunLicense ] > 0 ) { text8 = "Da"; } else { text8 = "Ne"; }

			SendClientMessage( playerID, BELA, ""col_server"|__________ Dozvole __________|" );

			SendClientMessageEx(playerID, BELA, ""col_server"Ime: "col_white"%s.", ImeIgraca( playerid ) );


			SendClientMessageEx(playerID, BELA, ""col_server"Dozvola za motor[A]: "col_white"%s", text4 );
			SendClientMessageEx(playerID, BELA, ""col_server"Dozvola za auto[B]: "col_white"%s", text1 );
			SendClientMessageEx(playerID, BELA, ""col_server"Dozvola za kombi[C1]: "col_white"%s", text2 );
			SendClientMessageEx(playerID, BELA, ""col_server"Dozvola za kamion[C2]: "col_white"%s", text3 );
			SendClientMessageEx(playerID, BELA, ""col_server"Dozvola za kamion sa prikolicom[C3]: "col_white"%s", text5 );
			SendClientMessageEx(playerID, BELA, ""col_server"Dozvola za brod[D]: "col_white"%s", text6 );
			SendClientMessageEx(playerID, BELA, ""col_server"Dozvola za letelicu[F]: "col_white"%s",text7);
			SendClientMessageEx(playerID, BELA, ""col_server"Dozvola za oruzje: "col_white"%s",text8);


			format( globalstring, sizeof( globalstring ), "* %s pokazuje dozvole %s.", RPImeIgraca( playerid ), RPImeIgraca( playerID ) );
			PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );

		}
		else if( !response ) {
			PostaviWanted( playerid, "Nesuradnja", ImeIgraca(GlobalID[playerid]), 5);
		    GlobalID[playerid] = -1;
		}
	}
	else if( dialogid == dialog_DOGLAS ) {
	    if( !response ) return 1;
		if( response ) {
		    new CHB = 5;
		    if( PlayerInfo[ playerid ][ xVIPLevel ] < CHB ) return SendErrorMessage( playerid, "Nemate dovoljno SM bodova." );
		    new text[ 128 ];
			if( sscanf( inputtext, "s[128]", text ) ) return SPD( playerid, dialog_DOGLAS, DSI, D_NASLOV, "Unesi oglas koji zelite da objavite", D_ODABERI, D_ODUSTANI );
		    format( globalstring, sizeof( globalstring ), "Oglas: %s, Kontakt: %s Broj: %d",  text, ImeIgraca( playerid ), PlayerInfo[ playerid ][ xBrojTelefona ] );
			OOCNews( 0x00D900C8, globalstring );

			SCM( playerid, SVETLOCRVENA, "Dali ste oglas za bodove!" );
        }
	}
	else if( dialogid == dialog_IZMENABROJA ) {
	    if( !response ) return 1;
		if( response ) {

            //if( strlen( inputtext ) != 6 ) return SendErrorMessage( playerid, "Mora biti samo 6 cifara!" );
			if( !changeNumberAllowed[ playerid ]  ) return SendErrorMessage( playerid, "Nemate dozvolu za promenu broja telefona.");
            if( !IsNumeric( inputtext ) ) return SendErrorMessage( playerid, "Moze samo brojevi." );
			//if( strval( inputtext ) < 100000 ) return SendErrorMessage( playerid, "Pogresan broj." );
			if( strval( inputtext ) < 100 || strval( inputtext ) > 99999999 ) return SendErrorMessage( playerid, "Broj moze ici od 100 do 99999999(3-8 cifara)!" );

			new q[ 128 ];
			mysql_format(_dbConnector, q, sizeof(q), "SELECT user_id FROM `users` WHERE `phone_number` = '%d' LIMIT 1", strval( inputtext ) );
			mysql_pquery(_dbConnector, q, "OnPhoneNumberChange", "iii", playerid, strval( inputtext ), -1 );
			/*changeNumberAllowed[ playerid ] = false;
			PlayerInfo[ playerid ][ xBrojTelefona ] = strval( inputtext );

			SendClientMessageEx( playerid, SVETLOCRVENA, "Promenili ste svoj broj u "col_white"%s!", inputtext );

			sql_user_update_integer( playerid, "phone_number", PlayerInfo[ playerid ][ xBrojTelefona ]);*/
		}
	}
	else if( dialogid == dialog_EMAIL ) {
	    if( !response ) return 1;
		if( response ) {

            new mailstring = strfind( inputtext, "@", true ), tackastring = strfind( inputtext, ".", true );
	        if( mailstring == -1 || tackastring == -1 ) {
	            SPD( playerid, dialog_EMAIL, DSI, D_NASLOV, ""col_white"U prazni prostor ispod unesite vasu novu e-mail adresu.\n\n\
				"col_red"Error: Nepravilan unos.\n"col_siva"Primjer: imeprezime@gmail.com", "Unos", "Izlaz");
			}
			else if( strlen( inputtext ) > MAX_EMAIL ) {
				return SPD(playerid, dialog_MAIL, DSI, ""col_server"E-Mail", ""col_white"U prazni prostor ispod unesite vasu novu e-mail adresu.\n\n\
				"col_red"Error: Email je predugacak!", "Unos", "Izadji" );
			}
			else {
				new query[128];
				mysql_format( _dbConnector, query, sizeof(query), "SELECT `p_name`, `email` FROM `users` WHERE `email` = '%s' LIMIT 1", inputtext );
				mysql_pquery( _dbConnector, query, "DuplicateMailCheck", "is", playerid, inputtext );
			}

			/*strmid( PlayerInfo[ playerid ][ xEmail ], inputtext, 0, strlen( inputtext ), 34 );

			sql_user_update_string( playerid, "email", PlayerInfo[ playerid ][ xEmail ]);

			SendClientMessageEx( playerid, SVETLOCRVENA, "Promenili ste email u "col_white"%s!", inputtext );*/
		}
	}
	else if( dialogid == dialog_PROPERTYLIST ) {
	    if( !response ) return 1;
	    if( response ) {
	        switch( listitem ) {
				case 0: {
				    if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) return SendErrorMessage( playerid, "Nemate imovinu u slotu 1." );
					if( strcmp( ImeIgraca( playerid ), II[ PlayerInfo[ playerid ][ xProperty ][ 0 ] ][ iOwner ], true) == 0 ) {
						ChosenProperty[ playerid ] = PlayerInfo[ playerid ][ xProperty ][ 0 ];
						SPD( playerid, dialog_PROPCHOSEN, DSL, D_NASLOV, "Informacije\nZakljucaj/Otkljucaj\nUnapredi\nOrmar\nSef\n{F81414}Prodaj drzavi\n{F81414}Prodaj igracu\n{FFFFFF}Rentanje\nUzmi novac", D_ODABERI, D_ODUSTANI );
					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 1: {
				    if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) return SendErrorMessage( playerid, "Nemate imovinu u slotu 2." );
				    if( strcmp( ImeIgraca( playerid ), II[ PlayerInfo[ playerid ][ xProperty ][ 1 ] ][ iOwner ], true) == 0 ) {
						ChosenProperty[ playerid ] = PlayerInfo[ playerid ][ xProperty ][ 1 ];
						SPD( playerid, dialog_PROPCHOSEN, DSL, D_NASLOV, "Informacije\nZakljucaj/Otkljucaj\nUnapredi\nOrmar\nSef\n{F81414}Prodaj drzavi\n{F81414}Prodaj igracu\n{FFFFFF}Rentanje\nUzmi novac", D_ODABERI, D_ODUSTANI );
					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 2: {
				    if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) return SendErrorMessage( playerid, "Nemate imovinu u slotu 3." );
				    if( strcmp( ImeIgraca( playerid ), II[ PlayerInfo[ playerid ][ xProperty ][ 2 ] ][ iOwner ], true) == 0 ) {
						ChosenProperty[ playerid ] = PlayerInfo[ playerid ][ xProperty ][ 2 ];
						SPD( playerid, dialog_PROPCHOSEN, DSL, D_NASLOV, "Informacije\nZakljucaj/Otkljucaj\nUnapredi\nOrmar\nSef\n{F81414}Prodaj drzavi\n{F81414}Prodaj igracu\n{FFFFFF}Rentanje\nUzmi novac", D_ODABERI, D_ODUSTANI );
					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
	        }
	    }
	}
	else if( dialogid == dialog_PROPCHOSEN ) {
	    if( !response ) return 1;
	    if( response ) {
	        switch( listitem ) {
				case 0: {
				    new hid = ChosenProperty[ playerid ];
				    //if( GetNearestProperty( playerid ) != hid && inProperty[ playerid ] != hid ) return SendErrorMessage( playerid, "Niste pored svoje imovine ili u njoj!" );
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				    format( globalstring, sizeof( globalstring ), ""col_server"%s "col_white"- "col_server"ID: "col_white"%d - "col_server"SqlBaseID: "col_white"%d\n\n",  GetPropertyAName( hid ), hid, II[ hid ][ ibaseID ]);
					strcat( DialogStrgEx, globalstring);

					format( globalstring, sizeof( globalstring ), ""col_server"Novac: "col_white"%d\n", II[ hid ][ iMoney ] );
                    strcat( DialogStrgEx, globalstring );
					format( globalstring, sizeof( globalstring ), ""col_server"Broj rentova: "col_white"%d\n", II[ hid ][ iRentovano ] );
					strcat( DialogStrgEx, globalstring );
					strcat( DialogStrgEx, ""col_server"_____________"col_white"_____________\n" );
				    if( II[ hid ][ iLocked ] == 1 )
						strcat( DialogStrgEx, ""col_server"Status vrata: "col_white"Zakljucano\n");
					else
						strcat( DialogStrgEx, ""col_server"Status vrata: "col_white"Otkljucano\n");
                    strcat( DialogStrgEx, ""col_server"_____________"col_white"_____________\n" );
			        if( II[ hid ][ iLockLevel ] == 0)
						strcat( DialogStrgEx, ""col_server"Kvaliteta brave: "col_white"Nekvalitetna\n");
					else {
						format( globalstring, sizeof( globalstring ), ""col_server"Kvaliteta brave: "col_white"%d\n",  II[ hid ][ iLockLevel ] );
						strcat( DialogStrgEx, globalstring);
					}
					strcat( DialogStrgEx, ""col_server"_____________"col_white"_____________\n" );
			        if( II[ hid ][ iDoorLevel ] == 0 )
						strcat( DialogStrgEx, ""col_server"Kvalitet vrata: "col_white"Nekvalitetna\n");
					else {
					    format( globalstring, sizeof( globalstring ), ""col_server"Kvalitet vrata: "col_white"%d level\n",  II[ hid ][ iDoorLevel ] );
						strcat( DialogStrgEx, globalstring);
					}
					strcat( DialogStrgEx, ""col_server"_____________"col_white"_____________\n" );
					if( II[ hid ][ iOrmar ] > 0) {
					    strcat( DialogStrgEx, ""col_server"Ormar: "col_white"Ima\n" );
					} else strcat( DialogStrgEx, ""col_server"Ormar: "col_white"Nema\n" );
                    strcat( DialogStrgEx, ""col_server"_____________"col_white"_____________\n" );
					if( II[ hid ][ iAlarm ] > 0) {
						format( globalstring, sizeof( globalstring ), ""col_server"Alarm level: "col_white"%d",  II[ hid ][ iAlarm ] );
						strcat( DialogStrgEx, globalstring );
					} else strcat( DialogStrgEx, ""col_server"Alarm: "col_white"Nema" );
	                SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 1: {
				    new id = ChosenProperty[ playerid ];
				    if( GetNearestProperty( playerid ) != id && inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine ili u njoj!" );
			        if( strcmp( ImeIgraca( playerid ), II[ id ][ iOwner ], true) == 0 ) {
				        if( II[ id ][ iLocked ] == 0 ) {
				            II[ id ][ iLocked ] = 1;

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_locked` = '%d' WHERE `propID` = '%d'",
										II[ id ][ iLocked ],
										II[ id ][ ibaseID ] );

							mysql_pquery( _dbConnector, sql_str, "", "");

			                NotifyPlayer(playerid, "~w~Imovina", "~r~zakljucana", 0);
							PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0 );
							format( globalstring, sizeof( globalstring ), "* %s zakljucava %s.", RPImeIgraca( playerid ), GetPropertyName( id ) );
							PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
			            }
						else {
						    II[ id ][ iLocked ] = 0;

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_locked` = '%d' WHERE `propID` = '%d'",
										II[ id ][ iLocked ],
										II[ id ][ ibaseID ] );

							mysql_pquery( _dbConnector, sql_str, "", "");

			                NotifyPlayer(playerid, "~w~Imovina", "~g~otkljucana", 0);
							PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0 );
							format( globalstring, sizeof( globalstring ), "* %s otkljucava %s.", RPImeIgraca( playerid ), GetPropertyName( id ) );
							PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
						}
					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 2: {
				    new id = ChosenProperty[ playerid ];
				    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				    SPD( playerid, dialog_PROPUNAPREDI, DSI, D_NASLOV, "Izaberite broj: 1. ormar, 2. sef, 3. alarm, 4. brava, 5. vrata.\nCene:ormar(250$), sef(250$), alarm(500$), brava(300$), vrata(100$)", D_ODABERI, D_ODUSTANI );
				}
				case 3: {
				    new id = ChosenProperty[ playerid ];
				    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				    if( II[ inProperty[ playerid ] ][ iOrmar ] != 1 ) return SendErrorMessage( playerid, "U ovoj imovini nema ormara!");
					if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 ) {
				    	SPD( playerid, dialog_ORMAR, DSL, D_NASLOV, "Stavi trenutnu odjecu u ormar\nUdji u ormar\nIzbaci odjecu iz ormara", D_ODABERI, D_ODUSTANI );
				    } else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 4: {
				    new id = ChosenProperty[ playerid ];
				    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
					if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 ) {
						//new hid = inProperty[ playerid ];
						//new i = GetNearestFurniture( playerid, inProperty[ playerid ] );
						//if( GetNearestFurniture( playerid, inProperty[ playerid ] ) == -1 ) return SendErrorMessage( playerid, "Nema objekta u blizini." );
				    	//if( Furniture[ hid ][ i ][ f_Model ] != 2332 ) return SendErrorMessage( playerid, "Niste pored sefa." );
				    	SPD( playerid, dialog_SAFEALL, DSL, D_NASLOV, "Informacije\nPromeni lozinku\nOtkljucaj/Zakljucaj\nOstavi drogu\nUzmi drogu\nOstavi oruzje\nUzmi oruzje\nOstavi materijale\nUzmi materijale", D_ODABERI, D_ODUSTANI );
					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 5: {
				    new id = ChosenProperty[ playerid ];
				    if( GetNearestProperty( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine!" );
			        if( strcmp( ImeIgraca( playerid ), II[ GetNearestProperty( playerid ) ][ iOwner ], true) == 0 ) {
						SPD( playerid, dialog_PROPSELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vasu imovinu drzavi?", "Da", "Ne" );

					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 6: {
				    new id = ChosenProperty[ playerid ];
				    if( GetNearestProperty( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine!" );
				    SPD( playerid, dialog_PROPSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu imovina", "Ponudi", D_ODUSTANI );
				}
				case 7: {
				    new id = ChosenProperty[ playerid ];
				    if( GetNearestProperty( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine!" );
			        if( strcmp( ImeIgraca( playerid ), II[ GetNearestProperty( playerid ) ][ iOwner ], true) == 0 ) {

						SPD( playerid, dialog_RENTABLE, DSI, D_NASLOV, "Unesite cijenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cijena je 1000$", D_ODABERI, D_ODUSTANI );
					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 8: {
				    new id = ChosenProperty[ playerid ];
				    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				    SPD( playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI );
				}
				case 9: {
					if( inProperty[ playerid ] != ChosenProperty[ playerid ] ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
					SPD( playerid, dialog_FURNITURE_CONTROL, DSL, D_NASLOV, "Popis namjestaja u kuci\nPostavi novi namjestaj\nProdaj namjestaj", D_ODABERI, D_ODUSTANI );
				}
				/*case 9: {
				    new id = ChosenProperty[ playerid ];
				    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				    SPD( playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI );
				}*/
				/*case 10: {
					SendInfoMessage( playerid, "Za uredjivanje namestaja koristite /furniture." );
				}*/
	        }
	    }
	}
	else if( dialogid == dialog_PROPTAKEMONEY ) {
	    if( !response ) return 1;
	    if( response ) {
	        new novac, id = ChosenProperty[ playerid ];
	        if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
	        if( sscanf( inputtext, "i", novac ) ) return SPD( playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI );
			if( novac < 0 || novac > 10000000 ) return SPD( playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI );
			if( novac > II[ id ][ iMoney ] ) return SendErrorMessage( playerid, "Nemate toliko novca u kuci." );

			II[ id ][ iMoney ] -= novac;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_money` = '%d' WHERE `propID` = '%d'",
				II[ id ][ iMoney ],
				II[ id ][ ibaseID ] );

			mysql_pquery( _dbConnector, sql_str, "", "");

			KGEyes_GivePlayerMoney( playerid, novac ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, novac, "Uzimanje novca iz imovine" );
			SendInfoMessage( playerid, "Uzeli ste %d$ iz sefa.", novac );
		}
	}
	else if( dialogid == dialog_PROPPUTMONEY ) {
	    if( !response ) return 1;
	    if( response ) {
	        new novac, id = ChosenProperty[ playerid ];
	        if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
	        if( sscanf( inputtext, "i", novac ) ) return SPD( playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI );
			if( novac < 0 || novac > 100000000 ) return SPD( playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI );
			if( novac > PlayerInfo[ playerid ][ xNovac ] ) return SPD( playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI );

			II[ id ][ iMoney ] += novac;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_money` = '%d' WHERE `propID` = '%d'",
				II[ id ][ iMoney ],
				II[ id ][ ibaseID ] );

			mysql_pquery( _dbConnector, sql_str, "", "");

			KGEyes_GivePlayerMoney( playerid, -novac ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -novac, "Stavljanje novca u imovinu" );
			SendInfoMessage( playerid, "Ostavili ste %d$ u sef.", novac );
		}
	}
	else if( dialogid == dialog_RENTABLE ) {
	    if( !response ) return 1;
	    if( response ) {
	        new cena, id = ChosenProperty[ playerid ];
	        if( sscanf( inputtext, "i", cena ) ) return SPD( playerid, dialog_RENTABLE, DSI, D_NASLOV, "Unesite cijenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cijena je 1000$", D_ODABERI, D_ODUSTANI );
	        if( cena < 0 || cena > 1000 ) return SPD( playerid, dialog_RENTABLE, DSI, D_NASLOV, "Unesite cijenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cijena je 1000$", D_ODABERI, D_ODUSTANI );

			if( cena == 0 ) {
				II[ id ][ iRentPrice ] = 0;

				PropertyRefresh( id );

				mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_rprice` = '%d' WHERE `propID` = '%d'",
					II[ id ][ iRentPrice ],
					II[ id ][ ibaseID ] );

				mysql_pquery( _dbConnector, sql_str, "", "");

				SendInfoMessage( playerid, "Ugasili ste mogucnost rentanja." );
	        }
	        else if( cena > 0 ) {
				II[ id ][ iRentPrice ] = cena;

				PropertyRefresh( id );

				mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_rprice` = '%d' WHERE `propID` = '%d'",
					II[ id ][ iRentPrice ],
					II[ id ][ ibaseID ] );

				mysql_pquery( _dbConnector, sql_str, "", "");

				SendInfoMessage( playerid, "Ukljucili ste mogucnost rentanja za %d$.", cena );
	        }
	    }
	}
	else if( dialogid == dialog_PROPSELLDRZAVA ) {
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas imovinu dok ne izadjes iz minusa u banci." );
	        new id = ChosenProperty[ playerid ];
			if( GetNearestProperty( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje imovine!" );
			if( strcmp( ImeIgraca( playerid ), II[ GetNearestProperty( playerid ) ][ iOwner ], true) == 0 ) {

                new string1[ 128 ];
				format( string1, sizeof( string1 ), "Igrac %s je prodao imovinu ID %d na buy", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogProdajaImovine.log", string1 );

		        strmid( II[ GetNearestProperty( playerid ) ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);

			    KGEyes_GivePlayerMoney( playerid, (II[ GetNearestProperty( playerid ) ][ iPrice ]/2), false ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, (II[ GetNearestProperty( playerid ) ][ iPrice ]/2), "Prodaja imovine na buy" );

                II[ GetNearestProperty( playerid ) ][ iNeaktivnost ] = 0;
				II[ GetNearestProperty( playerid ) ][ iOwnerbaseID ] = 0; PlayerPlaySound( playerid, 1058, 0, 0, 0 );
				PropertyRefresh( GetNearestProperty( playerid ) );

				mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_userid` = '%d', `p_neaktivnost` = '%d' WHERE `propID` = '%d'",
					II[ GetNearestProperty( playerid ) ][ iOwnerbaseID ],
					II[ GetNearestProperty( playerid ) ][ iNeaktivnost ],
					II[ GetNearestProperty( playerid ) ][ ibaseID ] );

				mysql_pquery( _dbConnector, sql_str, "", "");

                Property_checkGarage( GetNearestProperty( playerid ) );
				if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == id ) {
					PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1;
					PlayerInfo[ playerid ][ xPropertySqlID ][ 0 ] = 0;
					sql_user_update_intandmoney( playerid, "property_id_1", PlayerInfo[ playerid ][ xPropertySqlID ][ 0 ] );
				}
			    else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == id ) {
					PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1;
					PlayerInfo[ playerid ][ xPropertySqlID ][ 1 ] = 0;
					sql_user_update_intandmoney( playerid, "property_id_2", PlayerInfo[ playerid ][ xPropertySqlID ][ 1 ] );
				}
			    else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == id ) {
					PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1;
					PlayerInfo[ playerid ][ xPropertySqlID ][ 2 ] = 0;
					sql_user_update_intandmoney( playerid, "property_id_3", PlayerInfo[ playerid ][ xPropertySqlID ][ 2 ] );
				}

			} else SendErrorMessage( playerid, "Ovo nije vase.." );
	    }
	    if( !response ) {
	        SCM( playerid, -1, "Odustali ste od prodaje imovine drzavi" );
	    }
	}
	else if( dialogid == dialog_PROPSELLTP ) {
	    if( !response ) return 1;
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas imovinu dok ne izadjes iz minusa u banci." );
	        new id = ChosenProperty[ playerid ];
	        new idigraca, cena, Float:Pos[ 3 ];
	        if( sscanf( inputtext, "ui", idigraca, cena ) ) return SPD( playerid, dialog_PROPSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu imovina", "Ponudi", D_ODUSTANI );
            GetPlayerPos( idigraca, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) ) return SendErrorMessage( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return SendErrorMessage( playerid, "Cijena ne moze biti manja od 1$!");
            if( idigraca == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
			if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi prodati kucu!");
			if( PlayerInfo[ idigraca ][ xProperty ][ 0 ] != -1 && PlayerInfo[ idigraca ][ xProperty ][ 1 ] != -1 && PlayerInfo[ idigraca ][ xProperty ][ 2 ] != -1 )return SendErrorMessage( playerid, "Igrac vec ima 3 imovine!");
            if( PlayerInfo[ idigraca ][ xLevel ] < II[ id ][ iLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Da bi ste tom igracu prodali ovu imovinu, on mora biti level %d+.", II[ id ][ iLevel ] );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCijena[ idigraca ] = cena;
			GlobalID[ idigraca ] = id;

			GlobalProdaja[ playerid ] = idigraca;
			GlobalCijena[ playerid ] = cena;
			new stringi[128];
			format(stringi, sizeof(stringi), "Jeste li sigurni da zelite prodati svoju imovinu igracu %s za %d$", ImeIgraca( idigraca ), cena);
			SPD( playerid, dialog_PROPSELLTP1, DSMSG, D_NASLOV, stringi, ""col_zenolo"DA", ""col_crvena"NE" );
	    }
	}

	else if( dialogid == dialog_PROPSELLTP1 ) {
	    if( response ) {
			new string[ 128 ];
			new idigraca = GlobalProdaja[ playerid ];
			new cena = GlobalCijena[ playerid ];
            SendClientMessageEx( playerid, SVIJETLOPLAVA, "Ponudili ste igracu %s imovinu po ceni od %d%.", ImeIgraca( idigraca ), cena );
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegovu imovinu za %d$.", ImeIgraca( playerid ), cena );
			SPD( idigraca, dialog_ACCEPTPROP, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );
			GlobalProdaja[ playerid ] = -1;
			GlobalCijena[ playerid ] = -1;
	    }
		else if( !response ) {
			new idigraca = GlobalProdaja[ playerid ];
			SCM( playerid, SVIJETLOPLAVA, "Odustali ste od prodaje imovine!");
			GlobalProdaja[ idigraca ] = -1;
			GlobalCijena[ idigraca ] = -1;
			GlobalID[ idigraca ] = -1;
			GlobalProdaja[ playerid ] = -1;
			GlobalCijena[ playerid ] = -1;
	    }
	}


	else if( dialogid == dialog_ACCEPTPROP) {
	    if( response ) {
	        new id = GlobalID[ playerid ];
	        if( PlayerInfo[ playerid ][ xNovac ] < GlobalCijena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca.");

	        new slot = -1;
	        for( new i = 0; i < 3; i++ ) {
		    	if( PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ i ] != -1 ) {
		    		if( PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ i ] == id  ) {
		    			slot = id;
		    			break;
		    		}
		    	}
		    }
		    if( slot == -1 ) return SendErrorMessage( playerid, "Igrac od kog kupujete imovinu, ustvari nema tu imovinu u statsu." );

	        /*for( new i = 0; i < 3; i++ ) {
		    	if( PlayerInfo[ playerid ][ xProperty ][ i ] != -1 ) {
		    		if(  II[ PlayerInfo[ playerid ][ xProperty ][ i ] ][ iUsage ] == II[ id ][ iUsage ]  ) {
		    			return SendErrorMessage( playerid, "Vi vec imate %s.", GetPropertyName( id ) );
		    		}
		    	}
		    }*/

		    if( PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 0 ] == id ) { PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 0 ] = -1; PlayerInfo[ GlobalProdaja[ playerid ] ][ xPropertySqlID ][ 0 ] = 0; }
			else if( PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 1 ] == id ) { PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 1 ] = -1; PlayerInfo[ GlobalProdaja[ playerid ] ][ xPropertySqlID ][ 1 ] = 0; }
			else if( PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 2 ] == id ) { PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 2 ] = -1; PlayerInfo[ GlobalProdaja[ playerid ] ][ xPropertySqlID ][ 2 ] = 0; }

   			//PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ slot ] = -1;
			//PlayerInfo[ GlobalProdaja[ playerid ] ][ xPropertySqlID ][ slot ] = 0;

			if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = id; PlayerInfo[ playerid ][ xPropertySqlID ][ 0 ] = II[ id ][ ibaseID ]; }
		    else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = id; PlayerInfo[ playerid ][ xPropertySqlID ][ 1 ] = II[ id ][ ibaseID ]; }
		    else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = id; PlayerInfo[ playerid ][ xPropertySqlID ][ 2 ] = II[ id ][ ibaseID ]; }

            new string1[ 128 ];
			format( string1, sizeof( string1 ), "Igrac %s je prodao imovinu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCijena[ playerid ] );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

            SendClientMessageEx( playerid, SVIJETLOPLAVA, "Uspjesno ste kupili imovinu od igraca %s za %d$.", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCijena[ playerid ] );
			strmid( II[ id ][ iOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
			II[ id ][ iOwnerbaseID ] = PlayerInfo[ playerid ][ xID ];
   			Property_checkGarage( id );

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_userid` = '%d' WHERE `propID` = '%d'",
				II[ id ][ iOwnerbaseID ],
				II[ id ][ ibaseID ] );

			mysql_pquery( _dbConnector, sql_str, "", "");
			PropertyRefresh( id );

			sql_user_update_property( playerid );
			sql_user_update_property( GlobalProdaja[ playerid ] );

			format( globalstring, sizeof( globalstring ), "Prodali ste kucu igracu %s za %d$!", ImeIgraca( playerid ), GlobalCijena[ playerid ] );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			KGEyes_GivePlayerMoney( GlobalProdaja[ playerid ], GlobalCijena[ playerid ] ), PlayerMoneyTrackSave( GlobalProdaja[ playerid ], MONEY_HANDS, GlobalCijena[ playerid ], "Prodaja kuce igracu" );
			KGEyes_GivePlayerMoney( playerid, -GlobalCijena[ playerid ] ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -GlobalCijena[ playerid ], "Kupovina kuce od igraca" );
			SCM( playerid, -1, "Kupili ste kucu!" );
			GlobalProdaja[ playerid ] = -1;
			GlobalCijena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
	    }
	    else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu imovine!", ImeIgraca( playerid ) );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			SCM( playerid, -1, "Odbili ste ponudu!");
			GlobalProdaja[ playerid ] = -1;
			GlobalCijena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
	    }
	}
	else if( dialogid == dialog_SAFEALL ) {
	    if( !response ) return 1;
	    if( response ) {
	        switch( listitem ) {
				case 0: {
				    new hid = inProperty[ playerid ];
				    new wepname1[32], wepname2[32], wepname3[32], wepname4[32];


					if( II[ hid ][ iOruzje ][ 0 ] != 0)
					    format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 0 ] ] );
					else
						strmid(wepname1, "None", 0, 5);

					if( II[ hid ][ iOruzje ][ 1 ] != 0)
					    format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 1 ] ] );
					else
					    strmid(wepname2, "None", 0, 5);

	                if( II[ hid ][ iOruzje ][ 2 ] != 0)
					    format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 2 ] ] );
					else
						strmid(wepname3, "None", 0, 5);

					if( II[ hid ][ iOruzje ][ 3 ] != 0)
					    format( wepname4, sizeof( wepname4 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 3 ] ] );
					else
					    strmid(wepname4, "None", 0, 5);

	                if( II[ hid ][ iSafeStatus ] == 1 ) {
	                    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	                    format( globalstring, sizeof( globalstring ), ""col_white"Novac: %d$\n\n", II[ hid ][ iMoney ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Materijali: %d\n", II[ hid ][ iMats ] );
						strcat( DialogStrgEx, globalstring );

						strcat( DialogStrgEx, ""col_red"______________DROGA______________\n" );

						format( globalstring, sizeof( globalstring ), ""col_white"Slot 1: (%dg) | Slot 2: (%dg)\n", II[ hid ][ iDrugAmmount ][ 0 ], II[ hid ][ iDrugAmmount ][ 1 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 3: (%dg) | Slot 4: (%dg)\n", II[ hid ][ iDrugAmmount ][ 2 ], II[ hid ][ iDrugAmmount ][ 3 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 5: (%dg) | Slot 6: (%dg)\n", II[ hid ][ iDrugAmmount ][ 4 ], II[ hid ][ iDrugAmmount ][ 5 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 7: (%dg) | Slot 8: (%dg)\n", II[ hid ][ iDrugAmmount ][ 6 ],  II[ hid ][ iDrugAmmount ][ 7 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 9: (%dg) | Slot 10: (%dg)\n\n", II[ hid ][ iDrugAmmount ][ 8 ], II[ hid ][ iDrugAmmount ][ 9 ] );
						strcat( DialogStrgEx, globalstring );

						strcat( DialogStrgEx, ""col_red"______________ORUZJE______________\n" );

						format( globalstring, sizeof( globalstring ), ""col_white"Slot 1:[%s]    |    Metaka: %d\n", wepname1, II[ hid ][ iMunicija ][ 0 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 2:[%s]    |    Metaka: %d\n", wepname2, II[ hid ][ iMunicija ][ 1 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 3:[%s]    |    Metaka: %d\n", wepname3, II[ hid ][ iMunicija ][ 2 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 4:[%s]    |    Metaka: %d", wepname4, II[ hid ][ iMunicija ][ 3 ] );
						strcat( DialogStrgEx, globalstring );

	                   	SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
	    				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

					}
					else return SendErrorMessage( playerid, "Sef je zakljucan!");
				}
				case 1: {
				    SPD( playerid, dialog_SAFECHANGEPASS, DSI, D_NASLOV, "Sifra mora biti u brojevima i mora biti u duzini od 6 karaktera.\nUnesi novu lozinku za sef.", D_ODABERI, D_ODUSTANI );
				}
				case 2: {
				    new hid = inProperty[ playerid ];
				    if( II[ hid ][ iSafeStatus ] == 1 ) {
				        II[ hid ][ iSafeStatus ] = 0;

						mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_sstatus` = '%d' WHERE `propID` = '%d'",
							II[ hid ][ iSafeStatus ],
							II[ hid ][ ibaseID ] );

						mysql_pquery( _dbConnector, sql_str, "", "");

		            	SCM( playerid, PLAVA, "Indetitet potvrdjen. Sef je zakljucan!");
				    }
				    else {
				        SPD( playerid, dialog_SAFEUNLOCK, DSI, D_NASLOV, "Unesi svoju lozinku sefa za otkljucavanje.", D_ODABERI, D_ODUSTANI );
				    }
				}
				case 3: {
				    new hid = inProperty[ playerid ];
				    if( II[ hid ][ iSafeStatus ] == 0 ) return SendErrorMessage( playerid, "Sef je zakljucan!");
				    SendInfoMessage( playerid, "Drogu u sef ubacujete preko inventorija." );
				}
				case 4: {
				    new hid = inProperty[ playerid ];
				    if( II[ hid ][ iSafeStatus ] == 0 ) return SendErrorMessage( playerid, "Sef je zakljucan!");
				    SPD( playerid, dialog_SAFETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u imovini i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
				}
				case 5: {
				    if( GetFactionType( playerid ) == ORG_TIP_PD || GetFactionType( playerid ) == ORG_TIP_HITM ) {
				        SendErrorMessage( playerid, "PD/FBI/CIA/HITMAN nema razloga ubacivati oruzja u sef!");
						return 1;
					}
					if( Na1v1[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na 1v1." );
					if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si u waru." );
                    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na dmu." );
					new wepname[32];
				    new hid = inProperty[ playerid ];

				    if( ForbiddenWeap( playerid ) ) return SendErrorMessage( playerid, "Ne mozes ubaciti zabranjena oruzja u sef." );
	                if( II[ hid ][ iSafeStatus ] == 0 ) return SendErrorMessage( playerid, "Sef je zakljucan!");
					if( II[ hid ][ iOruzje ][ 0 ] != 0 && II[ hid ][ iOruzje ][ 1 ] != 0 && II[ hid ][ iOruzje ][ 2 ] != 0 && II[ hid ][ iOruzje ][ 3 ] != 0 ) return SendErrorMessage( playerid, "Slotovi za oruzja su zauzeti!");
					if( II[ hid ][ iOruzje ][ 0 ] == 0) {
						if( ( II[ hid ][ iMunicija ][ 0 ] + GetPlayerAmmo( playerid ) ) < 501 ) {

	                        format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
                            antiCheatCS[ playerid ][ WeaponDetect ] = 3;
				            II[ hid ][ iMunicija ][ 0 ] = GetPlayerAmmo( playerid );
				            II[ hid ][ iOruzje ][ 0 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_weap_1` = '%d', `p_ammo_1` = '%d' WHERE `propID` = '%d'",
								II[ hid ][ iOruzje ][ 0 ],
								II[ hid ][ iMunicija ][ 0 ],
								II[ hid ][ ibaseID ] );

							mysql_pquery( _dbConnector, sql_str, "", "");

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u sef.", RPImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else SendErrorMessage( playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
					}
					else if( II[ hid ][ iOruzje ][ 1 ] == 0) {
						if( ( II[ hid ][ iMunicija ][ 1 ] + GetPlayerAmmo( playerid ) ) < 501 ) {
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
                            antiCheatCS[ playerid ][ WeaponDetect ] = 3;
				            II[ hid ][ iMunicija ][ 1 ] = GetPlayerAmmo( playerid );
				            II[ hid ][ iOruzje ][ 1 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_weap_2` = '%d', `p_ammo_2` = '%d' WHERE `propID` = '%d'",
								II[ hid ][ iOruzje ][ 1 ],
								II[ hid ][ iMunicija ][ 1 ],
								II[ hid ][ ibaseID ] );

							mysql_pquery( _dbConnector, sql_str, "", "");

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u sef.", RPImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else SendErrorMessage( playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
					}
					else if( II[ hid ][ iOruzje ][ 2 ] == 0) {
						if( ( II[ hid ][ iMunicija ][ 2 ] + GetPlayerAmmo( playerid ) ) < 501 ) {
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
                            antiCheatCS[ playerid ][ WeaponDetect ] = 3;
				            II[ hid ][ iMunicija ][ 2 ] = GetPlayerAmmo( playerid );
				            II[ hid ][ iOruzje ][ 2 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_weap_3` = '%d', `p_ammo_3` = '%d' WHERE `propID` = '%d'",
								II[ hid ][ iOruzje ][ 2 ],
								II[ hid ][ iMunicija ][ 2 ],
								II[ hid ][ ibaseID ] );

							mysql_pquery( _dbConnector, sql_str, "", "");

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u sef.", RPImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else SendErrorMessage( playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
					}
					else if( II[ hid ][ iOruzje ][ 3 ] == 0) {
						if( ( II[ hid ][ iMunicija ][ 3 ] + GetPlayerAmmo( playerid ) ) < 501 ) {
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
                            antiCheatCS[ playerid ][ WeaponDetect ] = 3;
				            II[ hid ][ iMunicija ][ 3 ] = GetPlayerAmmo( playerid );
				            II[ hid ][ iOruzje ][ 3 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_weap_4` = '%d', `p_ammo_4` = '%d' WHERE `propID` = '%d'",
								II[ hid ][ iOruzje ][ 3 ],
								II[ hid ][ iMunicija ][ 3 ],
								II[ hid ][ ibaseID ] );

							mysql_pquery( _dbConnector, sql_str, "", "");

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u sef.", RPImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else SendErrorMessage( playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
					}
				}
				case 6: {
				    new hid = inProperty[ playerid ];
				    if( II[ hid ][ iSafeStatus ] == 0 ) return SendErrorMessage( playerid, "Sef je zakljucan!");
				    new wepname1[32], wepname2[32], wepname3[32], wepname4[32];
				    if( II[ hid ][ iOruzje ][ 0 ] == 0 && II[ hid ][ iOruzje ][ 1 ] == 0 && II[ hid ][ iOruzje ][ 2 ] == 0 && II[ hid ][ iOruzje ][ 3 ] == 0 ) return SendErrorMessage( playerid, "Svi slotovi su prazni!");
					if( II[ hid ][ iOruzje ][ 0 ] != 0)
					    format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 0 ] ] );
					else
					    format(wepname1, sizeof(wepname1), "None");

					if( II[ hid ][ iOruzje ][ 1 ] != 0)
					    format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 1 ] ] );
					else
					    format(wepname2, sizeof(wepname2), "None");

				    if( II[ hid ][ iOruzje ][ 2 ] != 0)
					    format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 2 ] ] );
					else
					    format(wepname3, sizeof(wepname3), "None");

	                if( II[ hid ][ iOruzje ][ 3 ] != 0)
					    format( wepname4, sizeof( wepname4 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 3 ] ] );
					else
					    format(wepname4, sizeof(wepname4), "None");
				    PropertySafeGun[ playerid ] = hid;
				    format( globalstring, sizeof( globalstring ), "%s\n%s\n%s\n%s", wepname1, wepname2, wepname3, wepname4 );
					SPD( playerid, dialog_PROPERTYWEPTAKE, DSL, D_NASLOV, globalstring, D_ODABERI, D_ODUSTANI );
				}
				case 7: {
				    new hid = inProperty[ playerid ];
				    if( II[ hid ][ iSafeStatus ] == 0 ) return SendErrorMessage( playerid, "Sef je zakljucan!");
				    SPD( playerid, dialog_SAFEPUTMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za ostavljanje.", D_ODABERI, D_ODUSTANI );
				}
				case 8: {
				    new hid = inProperty[ playerid ];
				    if( II[ hid ][ iSafeStatus ] == 0 ) return SendErrorMessage( playerid, "Sef je zakljucan!");
				    SPD( playerid, dialog_SAFETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje.", D_ODABERI, D_ODUSTANI );
				}
			}
	    }
	}
	else if( dialogid == dialog_SAFEPUTMATS ) {

	    if( !response ) return 1;
		if( response ) {

		    new kolicina, izbor = inProperty[ playerid ];
		    if( sscanf( inputtext, "d", kolicina ) ) return SPD( playerid, dialog_SAFETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje.", D_ODABERI, D_ODUSTANI );

		    if( Inventory_Count( playerid, "Materijali" ) == 0 ) return SendErrorMessage( playerid, "Nemate materijale kod vas!" );
		    if( kolicina < 1 || kolicina > Inventory_Count( playerid, "Materijali" ) ) return SendErrorMessage( playerid, "Nemate toliko materijala kod vas!");

			if( (II[ izbor ][ iMats ]+kolicina) > 100000 ) return SendErrorMessage( playerid, "Najvise u sefu moze stati 10000 materijala." );

            //PlayerInfo[ playerid ][ xMaterijali ] -= kolicina;
            //sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );
			Inventory_Remove( playerid, "Materijali", kolicina );

		    format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u sef.", RPImeIgraca( playerid ) );
			PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		    SendClientMessageEx( playerid, PLAVA, "Stavili ste %d materijala u sef.", kolicina );

		    II[ izbor ][ iMats ] += kolicina;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_mats` = '%d' WHERE `propID` = '%d'",
								II[ izbor ][ iMats ],
								II[ izbor ][ ibaseID ] );

			mysql_pquery( _dbConnector, sql_str, "", "");

		}
	}
	else if( dialogid == dialog_SAFETAKEMATS ) {

	    if( !response ) return 1;
		if( response ) {

		    new kolicina, izbor = inProperty[ playerid ];
		    if( sscanf( inputtext, "d", kolicina ) ) return SPD( playerid, dialog_SAFETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje.", D_ODABERI, D_ODUSTANI );

		    if( II[ izbor ][ iMats ] == 0 ) return SendErrorMessage( playerid, "Nema materijala u sefu!" );
		    if( kolicina < 1 || kolicina > II[ izbor ][ iMats ] ) return SendErrorMessage( playerid, "Nemate toliko materijala u sefu!");

            //PlayerInfo[ playerid ][ xMaterijali ] += kolicina;
            //sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );
			Inventory_Add( playerid, "Materijali", 2061, kolicina );

		    format( globalstring, sizeof( globalstring ), "* %s uzima nesto iz sef.", RPImeIgraca( playerid ) );
			PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		    SendClientMessageEx( playerid, PLAVA, "Uzeli ste %d materijala iz sef.", kolicina );

		    II[ izbor ][ iMats ] -= kolicina;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_mats` = '%d' WHERE `propID` = '%d'",
								II[ izbor ][ iMats ],
								II[ izbor ][ ibaseID ] );

			mysql_pquery( _dbConnector, sql_str, "", "");
		}
	}
	else if( dialogid == dialog_SAFETAKEDRUG ) {
	    if( !response ) return 1;
	    if( response ) {
	        new slot, slot2, kolicina, hid = inProperty[ playerid ], id = -1;
			if( sscanf( inputtext, "dd", slot, kolicina ) ) return SPD( playerid, dialog_SAFETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u imovini i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
		    if( II[ hid ][ iSafeStatus ] == 0 ) return SendErrorMessage( playerid, "Sef je zakljucan!");
		    if( slot < 1 || slot > 10 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( II[ hid ][ iDrugAmmount ][ slot2 ] == 0 ) return SendErrorMessage( playerid, "Ova imovina nema drogu pod tim slotom!");

			if( II[ hid ][ iDrugAmmount ][ slot2 ] > 0 ) {
	       		if( kolicina < 1 || kolicina > II[ hid ][ iDrugAmmount ][ slot2 ] ) return SendErrorMessage( playerid, "Ova imovina nema toliko droge pod tim slotom!");

			    id = Inventory_Add( playerid, "Droga", 1579, kolicina );

				if( id != -1 ) {

					II[ hid ][ iDrugAmmount ][ slot2 ] -= kolicina;
				    format( globalstring, sizeof( globalstring ), "* %s uzima nesto iz sefa.", RPImeIgraca( playerid ) );
					PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
					SendClientMessageEx( playerid, PLAVA, "Uzeli ste %d grama droge iz sefa.", kolicina );

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_drug_%d` = '%d' WHERE `propID` = '%d'",
							slot,
							II[ hid ][ iDrugAmmount][ slot2 ],
							II[ hid ][ ibaseID ] );

					mysql_pquery( _dbConnector, sql_str, "", "");

				} else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite stvari." );
			}
	    }
	}
	else if( dialogid == dialog_SAFEUNLOCK ) {
	    if( !response ) return 1;
	    if( response ) {
	        new sifra, hid = inProperty[ playerid ];
			if( sscanf( inputtext, "d", sifra ) ) return SPD( playerid, dialog_SAFEUNLOCK, DSI, D_NASLOV, "Unesi svoju lozinku sefa za otkljucavanje.", D_ODABERI, D_ODUSTANI );
	   		if( II[ hid ][ iSafeStatus ] == 1 ) return SendErrorMessage( playerid, "Sef je vec otkljucan!" );
	   		if( sifra != II[ hid ][ iSafePass ] ) return SendErrorMessage( playerid, "Sifra je pogresna." );
			II[ hid ][ iSafeStatus ] = 1;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_sstatus` = '%d' WHERE `propID` = '%d'",
								II[ hid ][ iSafeStatus ],
								II[ hid ][ ibaseID ] );

			mysql_pquery( _dbConnector, sql_str, "", "");

		    SCM( playerid, PLAVA, "Indetitet potvrdjen. Sef je otkljucan!");
		}
	}
	else if( dialogid == dialog_SAFECHANGEPASS ) {
	    if( !response ) return 1;
	    if( response ) {
	        new sifra, hid = inProperty[ playerid ];
		    if( sscanf( inputtext, "d", sifra ) ) return SPD( playerid, dialog_SAFECHANGEPASS, DSI, D_NASLOV, "Unesi novu lozinku za sef.", D_ODABERI, D_ODUSTANI );
		    if( sifra < 111111 || sifra > 999999 ) return SendErrorMessage( playerid, "Nevaljana kombinacija. Sifra mora biti u brojevima i mora biti u duzini od 6 karaktera.");
			II[ hid ][ iSafePass ] = sifra;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_spass` = '%d' WHERE `propID` = '%d'",
								II[ hid ][ iSafePass ],
								II[ hid ][ ibaseID ] );

			mysql_pquery( _dbConnector, sql_str, "", "");

		    SCM( playerid, PLAVA, "Sifra je promjenjena. Nemojte je zaboravit!");
	        SendClientMessageEx( playerid, BELA, "Nova sifra: %d", sifra );
	    }
	}
	else if( dialogid == dialog_PROPUNAPREDI ) {
	    if( !response ) return 1;
	    if( response ) {
			new broj, id = ChosenProperty[ playerid ];
			if( sscanf( inputtext, "d", broj ) ) return SPD( playerid, dialog_PROPUNAPREDI, DSI, D_NASLOV, "Izaberite broj: 1. ormar, 2. sef, 3. alarm, 4. brava, 5. vrata.\nCene:ormar(250$), sef(250$), alarm(500$), brava(300$), vrata(100$)", D_ODABERI, D_ODUSTANI );
			if( broj == 1 ) {
			    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
	            if( PlayerInfo[ playerid  ][ xNovac ] < 250 ) return SendErrorMessage( playerid, "Nemate dovoljno novca!");
				if( II[ inProperty[ playerid ] ][ iOrmar ] == 1 ) return SendErrorMessage( playerid, "Vasa imovina vec ima ormar!");
				if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 ) {
		    	    KGEyes_GivePlayerMoney( playerid, -250 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -250, "Imovina - ormar" );
				    II[ inProperty[ playerid ] ][ iOrmar ] = 1;

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_ormar` = '%d' WHERE `propID` = '%d'",
										II[ inProperty[ playerid ] ][ iOrmar ],
										II[ inProperty[ playerid ] ][ ibaseID ] );

					mysql_pquery( _dbConnector, sql_str, "", "");

					SendInfoMessage( playerid, "Uspjesno ste kupili ormar za vasu imovinu.");
				} else SendErrorMessage( playerid, "Ovo nije vase.." );
			}
			else if( broj == 2 ) {
			    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				return SendErrorMessage( playerid, "Trenutno nedostupno!" );
			    // edit
			    //SendInfoMessage( playerid, "Da ugradis sef u kucu koristi /furniture -> Kupi objekt -> Ostalo -> Ostalo." );
			}
			else if( broj == 3 ) {
			    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				if( PlayerInfo[ playerid  ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(500$)!");
				if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 )
		    	{
		    	    if( II[ inProperty[ playerid ] ][ iAlarm ] == 4 ) return SendErrorMessage( playerid, "Vec imate najveci moguci level alarma!");
		    	    II[ inProperty[ playerid ] ][ iAlarm ] ++;
					KGEyes_GivePlayerMoney( playerid, -500 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -500, "Imovina - alarm" );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					SCM( playerid, SVIJETLOPLAVA, "Unapredili ste vas alarm za 1 level!");

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_alarm` = '%d' WHERE `propID` = '%d'",
										II[ inProperty[ playerid ] ][ iAlarm ],
										II[ inProperty[ playerid ] ][ ibaseID ] );

					mysql_pquery( _dbConnector, sql_str, "", "");
		    	} else SendErrorMessage( playerid, "Ovo nije vase.." );
			}
			else if( broj == 4 ) {
			    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				if( PlayerInfo[ playerid  ][ xNovac ] < 300 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(300$)!");
				if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 )
		    	{
		    	    if( II[ inProperty[ playerid ] ][ iLockLevel ] == 4 ) return SendErrorMessage( playerid, "Vec imate najveci moguci level brave!");
		    	    II[ inProperty[ playerid ] ][ iLockLevel ] ++;
					KGEyes_GivePlayerMoney( playerid, -300 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -300, "Imovina - brava" );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					SCM( playerid, SVIJETLOPLAVA, "Unapredili ste vasu bravu za 1 level!");

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_lock` = '%d' WHERE `propID` = '%d'",
										II[ inProperty[ playerid ] ][ iLockLevel ],
										II[ inProperty[ playerid ] ][ ibaseID ] );

					mysql_pquery( _dbConnector, sql_str, "", "");
		    	} else SendErrorMessage( playerid, "Ovo nije vase.." );
			}
			else if( broj == 5 ) {
			    if( inProperty[ playerid ] != id ) return SendErrorMessage( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				if( PlayerInfo[ playerid ][ xNovac ] < 100 ) return SendErrorMessage( playerid, "Nemate dovoljno novca(100$)!");
				if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 )
		    	{
		    	    if( II[ inProperty[ playerid ] ][ iDoorLevel ] == 5 ) return SendErrorMessage( playerid, "Vec imate najveci moguci level vrata!");
		    	    II[ inProperty[ playerid ] ][ iDoorLevel ] ++;
					KGEyes_GivePlayerMoney( playerid, -100 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -100, "Imovina - vrata" );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					SCM( playerid, SVIJETLOPLAVA, "Unapredili ste vasa vrata za 1 level!");

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_door` = '%d' WHERE `propID` = '%d'",
										II[ inProperty[ playerid ] ][ iDoorLevel ],
										II[ inProperty[ playerid ] ][ ibaseID ] );

					mysql_pquery( _dbConnector, sql_str, "", "");
		    	} else SendErrorMessage( playerid, "Ovo nije vase.." );
			}
			else SendErrorMessage( playerid, "Pogresan broj." );
	    }
	}
	else if( dialogid == dialog_INVLIST_ADMIN ) {

	    if( !response ) return 1;
		if( response ) {

		    new ID = ChosenPlayerInv[ playerid ];
		    if( ID == IPI ) return SendErrorMessage( playerid, "Nepostojeci ID igraca izabran." );

		    if( !inventoryInfo[ ID ][ listitem ][ invExists ] ) return SendErrorMessage( playerid, "Taj slot je vec prazan." );

		    SendInfoMessage( playerid, "Ocistili ste slot %d inventorija igracu %s.", listitem+1, ImeIgraca( ID ) );
		    SendInfoMessage( ID, "Administrato %s vam je ocistio slot %d inventorija.", ImeIgraca( playerid ), listitem+1 );

		    inventoryInfo[ ID ][ listitem ][ invExists ] = false;
		    inventoryInfo[ ID ][ listitem ][ invModel ] = 0;
		    inventoryInfo[ ID ][ listitem ][ invQuantity ] = 0;
		    strmid( inventoryInfo[ ID ][ listitem ][ invItem ], "None", 0, strlen( "None" ), 32 );

		    sql_inventory_remove_item( ID, listitem );

		    ChosenPlayerVeh[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_VEHLIST_START ) {

	    if( !response ) return 1;
		if( response ) {

		    new ID = ChosenPlayerVeh[ playerid ];

		    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

		    strcat( DialogStrgEx, "Slot\tIme vozila\tID vozila" );
		    for( new j = 0; j < MAX_VEH_SLOT; j ++ ) {
				if( (j+1) <= PlayerInfo[ ID ][ xSlotoviVozila ] && player_veh[ ID ][ vehicle_id ][ j ] != -1 ) {
					format( globalstring, sizeof( globalstring ), "\n%d\t%s\t%d", j+1, getVehicleName( player_veh[ ID ][ vehicle_id ][ j ] ), player_veh[ ID ][ vehicle_id ][ j ] );
				}
				else format( globalstring, sizeof( globalstring ), "\n%d\tPRAZAN\t-1", j+1 );
				strcat( DialogStrgEx, globalstring );
			}

		    format( globalstring, sizeof( globalstring ), "%s - VOZILA", ImeIgraca( ID ) );

			SPD( playerid, dialog_VEHLIST_ADMIN, DIALOG_STYLE_TABLIST_HEADERS, globalstring, DialogStrgEx, "Odaberi", "Izlaz" );

		    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		}
	}
	else if( dialogid == dialog_VEHLIST_ADMIN ) {

	    if( !response ) return 1;
		if( response ) {

		    ChosenVehicle[ playerid ] = listitem;

			format( globalstring, sizeof( globalstring ), "Slot - %d", (listitem+1) );
      		SPD( playerid, dialog_VEHCHOSEN_ADMIN, DSL, globalstring, "Informacije\nStvari u gepeku\nOcisti slot\nPostavi vozilo", "Odaberi", "Izadji" );
		}
	}
	else if( dialogid == dialog_VEHCHOSEN_ADMIN ) {
	    if( !response ) return 1;
		if( response ) {
		    new player_id = ChosenPlayerVeh[ playerid ];
		    new slot_id = ChosenVehicle[ playerid ];
			switch( listitem ) {
			    case 0: {

			        if( player_veh[ player_id ][ vehicle_id ][ slot_id ] == -1 ) return SendErrorMessage( playerid, "Igrac nema vozila u ovom slotu.");

                    new izbor = player_veh[ player_id ][ vehicle_id ][ slot_id ];

                    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
					format( globalstring, sizeof( globalstring ), ""col_white"___________"col_server"Vozilo: "col_white"%s ["col_server"Model ID: "col_white"%d]___________\n\n", ImeVozila[ VehicleInfo[ izbor ][ vModel ]-400 ],  VehicleInfo[ izbor ][ vModel ] );
					strcat( DialogStrgEx, globalstring);

					format( globalstring, sizeof( globalstring ), ""col_server"ID vozila: "col_white"%d(Promenljivi)\n", izbor );
					strcat( DialogStrgEx, globalstring);

					format( globalstring, sizeof( globalstring ), ""col_server"SqlBaseID vozila: "col_white"%d(Stalni)\n", VehicleInfo[ izbor ][ vSqlID ] );
					strcat( DialogStrgEx, globalstring);

                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

					if( VehicleInfo[ izbor ][ vReg ] == 1 ) {

					    new tablice[ 50 ];
						if( 10 > izbor ) { format( tablice, sizeof( tablice ), "LS 000%d.", izbor ); }
						else if( 10 <= izbor && izbor < 100 ) { format( tablice , sizeof( tablice ), "LS 00%d.", izbor ); }
						else if( 100 <= izbor && izbor < 1000 ) { format( tablice, sizeof( tablice ), "LS 0%d.", izbor ); }
				        else if( 1000 <= izbor && izbor < 2001 ) { format( tablice, sizeof( tablice ), "LS %d.", izbor ); }

					    format( globalstring, sizeof( globalstring ), ""col_server"Registracija: "col_white"%s\n",  tablice );
						strcat( DialogStrgEx, globalstring);
						format( globalstring, sizeof( globalstring ), ""col_server"Registrovan jos: "col_white"%dh\n",  VehicleInfo[ izbor ][ vRegVrijeme ] );
						strcat( DialogStrgEx, globalstring);
					}
					else if( VehicleInfo[ izbor ][ vReg ] == 2 ) {

					    format( globalstring, sizeof( globalstring ), ""col_server"Registracija: "col_white"%s\n",  VehicleInfo[ izbor ][ vTablice ] );
						strcat( DialogStrgEx, globalstring);
						format( globalstring, sizeof( globalstring ), ""col_server"Registrovan jos: "col_white"%dh\n",  VehicleInfo[ izbor ][ vRegVrijeme ] );
						strcat( DialogStrgEx, globalstring);
					}
					else {

					    format( globalstring, sizeof( globalstring ), ""col_server"Vozilo je neregistrovano. "col_white"%dh\n",  VehicleInfo[ izbor ][ vRegVrijeme ] );
						strcat( DialogStrgEx, globalstring);
					}

                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
					if( VehicleInfo[ izbor ][ vLocked ] == 1)
						strcat( DialogStrgEx, ""col_server"Status brave: "col_white"Zakljucano\n");
					else
						strcat( DialogStrgEx, ""col_server"Status brave: "col_white"Otkljucano\n");
                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
                    format( globalstring, sizeof( globalstring ), ""col_server"Vrsta goriva: "col_white"%s\n", GetVehicleFuelType( izbor ) );
					strcat( DialogStrgEx, globalstring);
                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
                    format( globalstring, sizeof( globalstring ), ""col_server"Predjena kilometraza: "col_white"%d\n", VehicleInfo[ izbor ][ vKilometri ] );
					strcat( DialogStrgEx, globalstring);
                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
					if( VehicleInfo[ izbor ][ vLock ] == 0)
						strcat( DialogStrgEx, ""col_server"Kvaliteta brave: "col_white"Nekvalitetna\n");
					else {
						format( globalstring, sizeof( globalstring ), ""col_server"Kvaliteta brave: "col_white"%d\n",  VehicleInfo[ izbor ][ vLock ] );
						strcat( DialogStrgEx, globalstring);
					}
                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
			        if( VehicleInfo[ izbor ][ vImobilizator ] == 0)
						strcat( DialogStrgEx, ""col_server"Imobilizator: "col_white"Nekvalitetan\n");
					else {
					    format( globalstring, sizeof( globalstring ), ""col_server"Imobilizator level: "col_white"%d\n",  VehicleInfo[ izbor ][ vImobilizator ] );
						SCM( playerid, BELA, globalstring);
					}
					strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

					if( VehicleInfo[ izbor ][ vAlarm ] > 0) {
						format( globalstring, sizeof( globalstring ), ""col_server"Alarm level: "col_white"%d\n",  VehicleInfo[ izbor ][ vAlarm] );
						strcat( DialogStrgEx, globalstring);
					} else strcat( DialogStrgEx, ""col_server"Alarm: "col_white"Nema\n");
                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
			        if( VehicleInfo[ izbor ][ vGPS ] > 0) {
					    if( VehicleInfo[ izbor ][ vGPS ] == 1)
					    	strcat( DialogStrgEx, ""col_server"GPS: "col_white"Jednostavan\n");
						else if( VehicleInfo[ izbor ][ vGPS ] == 2)
			                strcat( DialogStrgEx, ""col_server"GPS: "col_white"Napredan\n");
					} else strcat( DialogStrgEx, ""col_server"GPS: "col_white"Nema\n");

					strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________");
					SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 1: {

				    if( player_veh[ player_id ][ vehicle_id ][ slot_id ] == -1 ) return SendErrorMessage( playerid, "Igrac nema vozila u ovom slotu.");

                    new autoid = player_veh[ player_id ][ vehicle_id ][ slot_id ];

				    new wepname1[32],
						wepname2[32],
						wepname3[32];

	                if( VehicleInfo[ autoid ][ vWeap1 ] != 0 )
					    format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap1 ] ] );
					else
						strmid(wepname1, "None", 0, 5);

					if( VehicleInfo[ autoid ][ vWeap2 ] != 0)
					    format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap2 ] ] );
					else
					    strmid(wepname2, "None", 0, 5);

				    if( VehicleInfo[ autoid ][ vMelee ] != 0)
					    format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vMelee ] ] );
					else
						strmid(wepname3, "None", 0, 5);

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	                strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

	                format( globalstring, sizeof( globalstring ), "Materijali: %d\n", VehicleInfo[ autoid ][ vMaterijali ] );
	               	strcat( DialogStrgEx, globalstring );

	                strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
	                format( globalstring, sizeof( globalstring ), "Drug1: (%dg) | Drug2: (%dg)\n", VehicleInfo[ autoid ][ vDrugAmmount ][ 0 ], VehicleInfo[ autoid ][ vDrugAmmount ][ 1 ] );
	               	strcat( DialogStrgEx, globalstring );

	               	format( globalstring, sizeof( globalstring ), "Drug3: (%dg) | Drug4: (%dg)\n", VehicleInfo[ autoid ][ vDrugAmmount ][ 2 ], VehicleInfo[ autoid ][ vDrugAmmount ][ 3 ] );
	               	strcat( DialogStrgEx, globalstring );

	               	format( globalstring, sizeof( globalstring ), "Drug5: (%dg) | Drug6: (%dg)\n", VehicleInfo[ autoid ][ vDrugAmmount ][ 4 ], VehicleInfo[ autoid ][ vDrugAmmount ][ 5 ] );
	               	strcat( DialogStrgEx, globalstring );
                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
	               	format( globalstring, sizeof( globalstring ), "Melee:[%s]\n", wepname3 );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Slot 1:[%s]    |    Metaka: %d\n", wepname1, VehicleInfo[ autoid ][ vAmmo1 ] );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Slot 2:[%s]    |    Metaka: %d\n", wepname2, VehicleInfo[ autoid ][ vAmmo2 ] );
					strcat( DialogStrgEx, globalstring );
                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
	               	SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

				}
			    case 2: {

			        if( player_veh[ player_id ][ vehicle_id ][ slot_id ] == -1 ) return SendErrorMessage( playerid, "Igrac nema vozila u ovom slotu.");

					if( player_veh[ player_id ][ vehicle_id ][ slot_id ] != -1 && IsValidVehicle( player_veh[ player_id ][ vehicle_id ][ slot_id ] ) ) {

                        new c = player_veh[ player_id ][ vehicle_id ][ slot_id ];

						if( VehicleInfo[ c ][ vOwner_sqlID ] == PlayerInfo[ player_id ][ xID ] ) {

							/*VehicleInfo[ c ][ vVirtualWorld ] = 0;
							VehicleInfo[ c ][ vInterior ] = 0;

							VehicleInfo[ c ][ vOwner_sqlID ] = 0;
							VehicleInfo[ c ][ vPrice ] = -1;

							VehicleInfo[ c ][ vLokacijaX ] = -2112.0281;
							VehicleInfo[ c ][ vLokacijaY ] = 2729.6250;
							VehicleInfo[ c ][ vLokacijaZ ] = 166.0840;
							VehicleInfo[ c ][ vLokacijaA ] = 202.9713;

					    	strmid( VehicleInfo[ c ][ vOwner ], "Drzava", 0, strlen( "Drzava" ), 32);

							sql_vehicles_update_auction( c );

							ResetVehicle( c );

							KGEyes_DestroyVehicle( c );*/

							KGEyes_DestroyVehicle( c );
							sql_vehicles_delete( c );
							ResetVehicle( c );
							SetVehicleLabels( c );
						}
					}

					player_veh[ player_id ][ vehicle_id ][ slot_id ] = -1;

					SendInfoMessage( player_id, "Administrator %s vam je ocistio slot vozila %d.", ImeIgraca( playerid ), slot_id+1 );
					SendInfoMessage( playerid, "Ocistili ste %s-u slot vozila %d.", ImeIgraca( player_id ), slot_id+1 );

					format( globalstring, sizeof( globalstring ), "| VOZILO | %s je ocistio slot vozila igracu %s | Slot: %d", ImeIgraca( playerid ), ImeIgraca( player_id ), slot_id+1 );
					LogSave( "Ostalo/LogEdit.log", globalstring );
			    }
			    case 3: {

			        if( player_veh[ player_id ][ vehicle_id ][ slot_id ] != -1 ) return SendErrorMessage( playerid, "Igrac vec ima vozilo, prvo mu moras ocistiti slot.");

			        SPD( playerid, dialog_VEHSLOTSET_ADMIN, DSI, "Unesi id vozila", "Unesite id vozila koji zelite da postaviti igracu kao osobno vozilo.", "Odaberi", "Izadji" );

			    }
			}
		}
	}
	else if( dialogid == dialog_VEHSLOTSET_ADMIN ) {

	    if( !response ) return 1;
		if( response ) {

		    new player_id = ChosenPlayerVeh[ playerid ], slot_id = ChosenVehicle[ playerid ], veh_id;

		    if( sscanf( inputtext, "d", veh_id ) ) return SPD( playerid, dialog_VEHSLOTSET_ADMIN, DSI, "Unesi id vozila", "Unesite id vozila koji zelite da postaviti igracu kao osobno vozilo.", "Odaberi", "Izadji" );
			if( veh_id == INVALID_VEHICLE_ID ) return SPD( playerid, dialog_VEHSLOTSET_ADMIN, DSI, "Unesi id vozila", "Pogresan id vozila.\nUnesite id vozila koji zelite da postaviti igracu kao osobno vozilo.", "Odaberi", "Izadji" );
			if( VehicleInfo[ veh_id ][ vUsage ] != PRIVATNO_VOZILO ) return SPD( playerid, dialog_VEHSLOTSET_ADMIN, DSI, "Unesi id vozila", "Samo privatna vozila.\nUnesite id vozila koji zelite da postaviti igracu kao osobno vozilo.", "Odaberi", "Izadji" );
			if( VehicleInfo[ veh_id ][ vOwner_sqlID ] != 0 ) return SPD( playerid, dialog_VEHSLOTSET_ADMIN, DSI, "Unesi id vozila", "Ovo vozilo vec ima vlasnika.\nUnesite id vozila koji zelite da postaviti igracu kao osobno vozilo.", "Odaberi", "Izadji" );

			player_veh[ player_id ][ vehicle_id ][ slot_id ] = veh_id;

			VehicleInfo[ veh_id ][ vOwner_sqlID ] = PlayerInfo[ player_id ][ xID ];
			strmid( VehicleInfo[ veh_id ][ vOwner ], ImeIgraca( player_id ), 0, strlen( ImeIgraca( player_id ) ), 32 );

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `owner_sqlID` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
									VehicleInfo[ veh_id ][ vOwner_sqlID ],
									VehicleInfo[ veh_id ][ vSqlID ] );

			mysql_pquery( _dbConnector, sql_str, "", "" );

			SendInfoMessage( player_id, "Administrator %s vam je postavio vozilo %d na slot %d.", ImeIgraca( playerid ), veh_id, slot_id+1 );
			SendInfoMessage( playerid, "Postavili ste %s-u vozilo %d na slot %d.", ImeIgraca( player_id ), veh_id, slot_id+1 );
			format( globalstring, sizeof( globalstring ), "| VOZILO | %s je postavio vozilo igracu %s | Slot: %d | ID vozila: %d", ImeIgraca( playerid ), ImeIgraca( player_id ), slot_id+1, veh_id );
			LogSave( "Ostalo/LogEdit.log", globalstring );
		}
	}
	else if( dialogid == dialog_VEHLIST ) {

	    if( !response ) return 1;
		if( response ) {

		    if( player_veh[ playerid ][ vehicle_id ][ listitem ] == -1 ) return SendErrorMessage( playerid, "Ti ne posjedujes vozilo u ovom slotu.");
			if( player_veh[ playerid ][ vehicle_id ][ listitem ] == 0 ) return SendErrorMessage( playerid, "Ti ne posjedujes vozilo u ovom slotu.");

			if( VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ listitem ] ][ vSqlID ] != 0 ) {

				if( VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ listitem ] ][ vOwner_sqlID ] == PlayerInfo[ playerid ][ xID ] ) {

				    if( VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ listitem ] ][ vInterior ] == -3 ) return SendErrorMessage( playerid, "Ne mozete da upravljate svojim vozilom dok ga ne otkupite od parking servisa." );
				    if( VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ listitem ] ][ vInterior ] == -4 ) return SendErrorMessage( playerid, "Ne mozete da upravljate svojim vozilom dok ga ne otkupite od parking servisa zbog neplacenog parkinga." );

					ChosenVehicle[ playerid ] = player_veh[ playerid ][ vehicle_id ][ listitem ];
	          		SPD( playerid, dialog_VEHCHOSEN, DSL, "Vozilo", "-    Informacije\n-    Parkiraj\n-    Lociraj\n-    Prodaj igracu\n-    Prodaj drzavi\n-    Makni tuning\n-    Neon\n-    Gepek\n-    Promjeni boju\n-    Registruj\n-    Preuzmi tablice u policijskoj postaji\n-    Postavi tablice\n-    Postavi oglas", "Odaberi", "Nazad" );
	           	}
	       		else {
					SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Ovo vozilo nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
				}
			}
			else {
				SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Vase vozilo ne postoji u bazi podataka, obratite se na forumu ako mislite je greska." );
			}
		}
	}
	else if( dialogid == dialog_VEHCHOSEN ) {
	    if( !response ) return 1;
		if( response ) {
			switch( listitem ) {
			    case 0: {
			        new izbor = ChosenVehicle[ playerid ];

                    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
					format( globalstring, sizeof( globalstring ), ""col_white"___________"col_server"Vozilo: "col_white"%s ["col_server"Model ID: "col_white"%d]___________\n\n", ImeVozila[ VehicleInfo[ izbor ][ vModel ]-400 ],  VehicleInfo[ izbor ][ vModel ] );
					strcat( DialogStrgEx, globalstring);

					format( globalstring, sizeof( globalstring ), ""col_server"ID vozila: "col_white"%d(Promenljivi)\n", izbor );
					strcat( DialogStrgEx, globalstring);

					format( globalstring, sizeof( globalstring ), ""col_server"SqlBaseID vozila: "col_white"%d(Stalni)\n", VehicleInfo[ izbor ][ vSqlID ] );
					strcat( DialogStrgEx, globalstring);

                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

					if( VehicleInfo[ izbor ][ vReg ] == 1 ) {

					    new tablice[ 50 ];
						if( 10 > izbor ) { format( tablice, sizeof( tablice ), "LS 000%d.", izbor ); }
						else if( 10 <= izbor && izbor < 100 ) { format( tablice , sizeof( tablice ), "LS 00%d.", izbor ); }
						else if( 100 <= izbor && izbor < 1000 ) { format( tablice, sizeof( tablice ), "LS 0%d.", izbor ); }
				        else if( 1000 <= izbor && izbor < 2001 ) { format( tablice, sizeof( tablice ), "LS %d.", izbor ); }

					    format( globalstring, sizeof( globalstring ), ""col_server"Registracija: "col_white"%s\n",  tablice );
						strcat( DialogStrgEx, globalstring);
						format( globalstring, sizeof( globalstring ), ""col_server"Registrovan jos: "col_white"%dh\n",  VehicleInfo[ izbor ][ vRegVrijeme ] );
						strcat( DialogStrgEx, globalstring);
					}
					else if( VehicleInfo[ izbor ][ vReg ] == 2 ) {

					    format( globalstring, sizeof( globalstring ), ""col_server"Registracija: "col_white"%s\n",  VehicleInfo[ izbor ][ vTablice ] );
						strcat( DialogStrgEx, globalstring);
						format( globalstring, sizeof( globalstring ), ""col_server"Registrovan jos: "col_white"%dh\n",  VehicleInfo[ izbor ][ vRegVrijeme ] );
						strcat( DialogStrgEx, globalstring);
					}
					else {

					    format( globalstring, sizeof( globalstring ), ""col_server"Vase vozilo je neregistrovano. "col_white"%dh\n",  VehicleInfo[ izbor ][ vRegVrijeme ] );
						strcat( DialogStrgEx, globalstring);
					}
					//strcat( DialogStrgEx, "Na -100h vase vozilo se prodaje drzavi.\n" );

                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
					if( VehicleInfo[ izbor ][ vLocked ] == 1)
						strcat( DialogStrgEx, ""col_server"Status brave: "col_white"Zakljucano\n");
					else
						strcat( DialogStrgEx, ""col_server"Status brave: "col_white"Otkljucano\n");
                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
                    format( globalstring, sizeof( globalstring ), ""col_server"Vrsta goriva: "col_white"%s\n", GetVehicleFuelType( izbor ) );
					strcat( DialogStrgEx, globalstring);
                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
                    format( globalstring, sizeof( globalstring ), ""col_server"Predjena kilometraza: "col_white"%d\n", VehicleInfo[ izbor ][ vKilometri ] );
					strcat( DialogStrgEx, globalstring);
                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
					if( VehicleInfo[ izbor ][ vLock ] == 0)
						strcat( DialogStrgEx, ""col_server"Kvaliteta brave: "col_white"Nekvalitetna\n");
					else {
						format( globalstring, sizeof( globalstring ), ""col_server"Kvaliteta brave: "col_white"%d\n",  VehicleInfo[ izbor ][ vLock ] );
						strcat( DialogStrgEx, globalstring);
					}
                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
			        if( VehicleInfo[ izbor ][ vImobilizator ] == 0)
						strcat( DialogStrgEx, ""col_server"Imobilizator: "col_white"Nekvalitetan\n");
					else {
					    format( globalstring, sizeof( globalstring ), ""col_server"Imobilizator level: "col_white"%d\n",  VehicleInfo[ izbor ][ vImobilizator ] );
						SCM( playerid, BELA, globalstring);
					}
					strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

					if( VehicleInfo[ izbor ][ vAlarm ] > 0) {
						format( globalstring, sizeof( globalstring ), ""col_server"Alarm level: "col_white"%d\n",  VehicleInfo[ izbor ][ vAlarm] );
						strcat( DialogStrgEx, globalstring);
					} else strcat( DialogStrgEx, ""col_server"Alarm: "col_white"Nema\n");
                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
			        if( VehicleInfo[ izbor ][ vGPS ] > 0) {
					    if( VehicleInfo[ izbor ][ vGPS ] == 1)
					    	strcat( DialogStrgEx, ""col_server"GPS: "col_white"Jednostavan\n");
						else if( VehicleInfo[ izbor ][ vGPS ] == 2)
			                strcat( DialogStrgEx, ""col_server"GPS: "col_white"Napredan\n");
					} else strcat( DialogStrgEx, ""col_server"GPS: "col_white"Nema\n");

					strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________");
					SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
			    case 1: {
			        new izbor = ChosenVehicle[ playerid ], Float:HP;

                    if( carspawntimer == 1 ) {
						SendClientMessageEx( playerid, ANTICHEAT, "(anticheat)"col_white"Neko je kupio/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
						return 1;
				    }

					if( !IsPlayerInVehicle( playerid, izbor ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
                    if( GetPlayerVehicleSeat( playerid ) != 0) return SendErrorMessage( playerid, "Morate biti u svom vozilu na vozackom mjestu!");
                    //if( IsPlayerInArea( playerid, 1486.062, -1776.608, 1653.387, -1567.377 ) ) return SendErrorMessage( playerid, "Ne mozete parkirati auto u blizini policije!");
					if( IsPlayerInDynamicArea( playerid, zatvorparkzona ) ) return SendErrorMessage( playerid, "Ne mozete parkirati auto u blizini zatvora!");
					if( IsPlayerInDynamicArea( playerid, bankaparkzona  ) ) return SendErrorMessage( playerid, "Ne mozete parkirati auto u blizini banke/zlatare!");
					if( IsPlayerInDynamicArea( playerid, centarparkzona ) ) return SendErrorMessage( playerid, "Ne mozete parkirati auto u blizini centra grada!");
					if( IsPlayerInDynamicArea( playerid, spawnparkzona  ) ) return SendErrorMessage( playerid, "Ne mozete parkirati auto u blizini spawna!");
                    if( IsPlayerInDynamicArea( playerid, kolparkzona ) || IsPlayerInDynamicArea( playerid, vjecnicaparkzona )  || IsPlayerInDynamicArea( playerid, bolnicaparkzona )) return SendErrorMessage( playerid, "Ne mozete parkirati vozilo ovdje");

                    GetVehicleHealth( GetPlayerVehicleID( playerid ), HP );
					if( HP < 800.0 ) return SendErrorMessage( playerid, "Motor vam je previse ostecen, ne mozete ga parkirati.");

                    GetVehiclePos( izbor, VehicleInfo[ izbor ][ vLokacijaX ], VehicleInfo[ izbor ][ vLokacijaY ], VehicleInfo[ izbor ][ vLokacijaZ ]);
					GetVehicleZAngle( izbor, VehicleInfo[ izbor ][ vLokacijaA ] );

                    VehicleInfo[ izbor ][ vVirtualWorld ] = GetPlayerVirtualWorld( playerid );
					VehicleInfo[ izbor ][ vInterior ] = GetPlayerInterior( playerid );

					new q[ 256 ];
					mysql_format( _dbConnector, q, sizeof(q), "UPDATE `vehicles` SET `v_pos_x` = '%f', `v_pos_y` = '%f', `v_pos_z` = '%f', `v_pos_a` = '%f', `v_virtualw` = '%d', `v_interior` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
						VehicleInfo[ izbor ][ vLokacijaX ],
						VehicleInfo[ izbor ][ vLokacijaY ],
						VehicleInfo[ izbor ][ vLokacijaZ ],
						VehicleInfo[ izbor ][ vLokacijaA ],
						VehicleInfo[ izbor ][ vVirtualWorld ],
						VehicleInfo[ izbor ][ vInterior ],
						VehicleInfo[ izbor ][ vSqlID ] );

			   		mysql_pquery( _dbConnector, q, "park_vehicleCheckID", "iii", playerid, 0, izbor );

					SendInfoMessage( playerid, "Uspjesno ste parkirali vozilo!");
			    }
			    case 2: {
			        new vehicleid = ChosenVehicle[ playerid ];
					if( VehicleInfo[ vehicleid ][ vGPS ] == 0 ) return SendErrorMessage( playerid, "Ne posjedujete GPS na ovom vozilu.");
					if( GetPVarInt( playerid, "LocatingCar" ) == 0 ) {
			  			GameTextForPlayer( playerid, "~y~spajanje na satelit...", 4000, 1);
				        SetPVarInt( playerid, "GPSConnectTimer", SetTimerEx("GPSConnect", 5000, 0, "iii", playerid, 1, vehicleid ) );
				        SetPVarInt( playerid, "GPSTimerCalled", 1);
					}
					else if(GetPVarInt( playerid, "LocatingCar") == 1) {
				 		SetPVarInt( playerid, "LocatingCar", 0);
						GameTextForPlayer( playerid, "~r~gps ugasen", 4500, 1);
						CheckpointStatus[ playerid ] = 0;
						PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0);
						KGEyes_DisablePlayerCheckpoint( playerid );
					}
			    }
			   
			    case 3: {
			        new vehicleid = ChosenVehicle[ playerid ];
			        if( !IsPlayerInVehicle( playerid, vehicleid ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
                    SPD( playerid, dialog_VEHSELLTP, DSI, D_NASLOV, "Unesite id igraca kome zelite da prodate vozilo i cijenu.\nPrimer: 145 12003", D_ODABERI, D_ODUSTANI );
			    }
			    case 4: {

			        new vehicleid = ChosenVehicle[ playerid ];
			        if( !IsPlayerInVehicle( playerid, vehicleid ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
					new str[ 128 ];
					format( str, sizeof( str ), "Da li ste sigurni da zelite da prodate %s za %d?", GetVehicleNameEx( VehicleInfo[ vehicleid ][ vModel ] ), VehicleInfo[ vehicleid ][ vPrice ]/2 );
                    SPD( playerid, dialog_VEHSELLDRZAVI, DSMSG, D_NASLOV, str, "Da", "Ne" );
			    }
			    case 5: {
			       
					SendInfoMessage( playerid, "Tuning skidate u garazi ispred Parking Servisa ( /skinituning )." );
			    }
			    case 6: {
			        new izbor = ChosenVehicle[ playerid ];
					if( !IsPlayerInVehicle( playerid, izbor ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
				    if( GetPlayerVehicleSeat( playerid ) != 0) return SendErrorMessage( playerid, "Morate biti u svom vozilu na vozackom mjestu!");
				    if( VehicleInfo[ izbor ][ vNeon ] == 0 ) return SendErrorMessage( playerid, "Na ovom vozilu nije ugradjena neonka!");
					if( Neon[ izbor ] == 0 ) {
						Neon[ izbor ] = 1;
			          	NeonObject1[ izbor ] = CreateDynamicObject( VehicleInfo[ izbor ][ vNeon ], 0, 0, 1500, 0, 0, 0 );
			            NeonObject2[ izbor ] = CreateDynamicObject( VehicleInfo[ izbor ][ vNeon ], 0, 0, 1500, 0, 0, 0 );
			          	AttachDynamicObjectToVehicle( NeonObject1[ izbor ],  izbor , -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			          	AttachDynamicObjectToVehicle( NeonObject2[ izbor ],  izbor , 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						format( globalstring, sizeof( globalstring ), "* %s pritisce dugme na komodi i postavlja neonke.", RPImeIgraca( playerid ) );
			            PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					}
			        else if( Neon[ izbor ] == 1 ) {
			            Neon[ izbor ] = 0;
			            DestroyDynamicObject( NeonObject1[ izbor ] );
			            DestroyDynamicObject( NeonObject2[ izbor ] );
			            format( globalstring, sizeof( globalstring ), "* %s pritisce gumb na komodi i uvlaci neonke.", RPImeIgraca( playerid ) );
			            PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
			        }
			    }
			    case 7: {
			        SendInfoMessage( playerid, "Koristite /gepek za upravljanje gepekom." );
			    }
			    case 8: {
			        SPD( playerid, dialog_VEHCOLOR, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 vozila.\nPrimer: 1 2", D_ODABERI, D_ODUSTANI );
			    }
			    case 9: {
                    new vehicleid = ChosenVehicle[ playerid ];

					if( !IsPlayerInRangeOfPoint( playerid, 3.0, 1515.6665,-1944.1082,-47.8211 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morati biti u opstini." );
			        if( VehicleInfo[ vehicleid ][ vTeh ] < 1 ) return SendErrorMessage( playerid, "Vozilo nije proslo tehnicki pregled!");
					if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return SendErrorMessage( playerid, "Nemas dovoljno novca(1000$)." );
					KGEyes_GivePlayerMoney( playerid, - 1000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -1000, "Registracija v. - Ovjera papira" );
					VehicleInfo[ vehicleid ][ vTeh ] = 2;

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_teh` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ vehicleid ][ vTeh ],
														VehicleInfo[ vehicleid ][ vSqlID ] );

					mysql_pquery( _dbConnector, sql_str, "", "" );

					SCM( playerid, SVIJETLOPLAVA, "Overio si papire vozila, idi u policijsku stanicu da uzmes tablice." );
				}
				case 10: {

			        new izbor = ChosenVehicle[ playerid ];

					if( !IsPlayerInRangeOfPoint( playerid, 3.0, 234.5788,1926.4998,-41.6770 ) ) return SendErrorMessage( playerid, "Morate biti u policijskoj stanici." );
			        if( VehicleInfo[ izbor ][ vTeh ] != 2 ) return SendErrorMessage( playerid, "Nisi ovjerio papire u opstini!");
					if( PlayerInfo[ playerid ][ xNovac ] < 100 ) return SendErrorMessage( playerid, "Nemas dovoljno novca(300$)." );
			        KGEyes_GivePlayerMoney( playerid, - 300 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -300, "Registracija v. - Tablice" );

			        SPD( playerid, dialog_IZABERITABLICE_2, DSI, D_NASLOV, "Unesite zeljeni tekst, koji ce se nalaziti na vasim tablicama.\nMaksimum je 16 karaktera.", "Izaberi", "Odustani" );
				}
				case 11: {

			        new izbor = ChosenVehicle[ playerid ];

					new Float:x, Float:y, Float:z;
					GetVehiclePos( izbor, x, y, z );
					if( !IsPlayerInRangeOfPoint( playerid, 7.0, x, y, z ) ) {
						SendErrorMessage( playerid, "Nisi u blizini auta.");
						return 1;
					}
					if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Moras biti van auta!" );
			        if( VehicleInfo[ izbor ][ vTeh ] < 3 ) return SendErrorMessage( playerid, "Nisi uzeo tablice iz policijske stanice!");

					if( VehicleInfo[ izbor ][ vTeh ] == 3 ) VehicleInfo[ izbor ][ vReg ] = 1;
					else if( VehicleInfo[ izbor ][ vTeh ] == 4 ) VehicleInfo[ izbor ][ vReg ] = 2;

					VehicleInfo[ izbor ][ vTeh ] = 0; VehicleInfo[ izbor ][ vRegVrijeme ] = 720;

					new q[ 256 ];
					mysql_format( _dbConnector, q, sizeof(q), "UPDATE `vehicles` SET `v_teh` = '%d', `v_reg` = '%d', `v_reg_vreme` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ izbor ][ vTeh ],
														VehicleInfo[ izbor ][ vReg ],
														VehicleInfo[ izbor ][ vRegVrijeme ],
														VehicleInfo[ izbor ][ vSqlID ] );

					mysql_pquery( _dbConnector, q, "", "" );

					SendInfoMessage( playerid, "Vase vozilo je registrirano 30 dana (720 sati)." );
					SendInfoMessage( playerid, "Ukoliko vasem vozilu istekne registracija i dodje do -500 sati, prodaje se drzavi." );
					SetTimerEx( "Postaviotable", 5000, false, "ii", playerid, izbor );
					ApplyAnimation( playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0,5000, 0);
					ApplyAnimation( playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0,5000, 0);
					new string[ 128 ];
					format( string, sizeof( string ), "| Registracija | Igrac: %s ID vozila: %d SQLid: %d ", ImeIgraca( playerid ), izbor, VehicleInfo[ izbor ][ vSqlID ] );
					LogSave( "Ostalo/Registracijavozila.log", string );
				}
				case 12: {
			        new izbor = ChosenVehicle[ playerid ];
					if( !IsPlayerInVehicle( playerid, izbor ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
				    if( GetPlayerVehicleSeat( playerid ) != 0) return SendErrorMessage( playerid, "Morate biti u svom vozilu na vozackom mjestu!");

					if( VehicleInfo[ izbor ][ vSellPrice ] == 0 ) {
						//SendCHProtectMessage(playerid, "Trenutno onemoguceno");

						SPD( playerid, dialog_sellvehPrice, DSI, D_NASLOV, "Unesite cijenu za koju prodajete vozilo.\nPrimer: 24523", "Potvrdi", "Odustani" );
					}
			        else {

			        	//SendCHProtectMessage(playerid, "Trenutno onemoguceno");
			            VehicleInfo[ izbor ][ vSellPrice ] = 0;

			            mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_sprice` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ izbor ][ vSellPrice ],
														VehicleInfo[ izbor ][ vSqlID ] );

						mysql_pquery( _dbConnector, sql_str, "", "" );

			            SetVehicleLabels( izbor );
			            SendInfoMessage( playerid, "Skinuli ste oglas sa vaseg vozila." );
			        }
			    }
			}
		}
	}
	else if( dialogid == dialog_ACCEPTSKIN ) {
        if( response ) {

            new seller = GlobalProdaja[ playerid ];
            new skinid = GlobalID[ playerid ];

            if( seller == IPI  ) return SendErrorMessage( playerid, "Taj igrac je offline.");

            if( !IsPlayerNearPlayer( 5.0, playerid, seller ) ) return SendErrorMessage( playerid, "Niste blizu doktora koji vam zeli uraditi plasticnu operaciju.");
            if( PlayerInfo[ playerid ][ xNovac ] < GlobalCijena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca za operaciju.");
            if( !IsPlayerConnected( seller ) ) {
                SendErrorMessage( playerid, "Taj igrac je offline.");
                GlobalProdaja[ playerid ] = -1;
                GlobalCijena[ playerid ] = -1;
                GlobalID[ playerid ] = -1;
                return 1;
            }

            KGEyes_GivePlayerMoney( seller, 50000 ), PlayerMoneyTrackSave( seller, MONEY_HANDS, 50000, "Plasticna operacija" );
            KGEyes_GivePlayerMoney( playerid, -GlobalCijena[ playerid ] ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -GlobalCijena[ playerid ], "Plasticna operacija" );

            SendInfoMessage( seller, "Uspjesno ste izvrsili plasticnu operaciju i zaradili 50.000$." );
            SendInfoMessage( playerid, "Uspjesno ste uradili plasticnu operaciju, operacija vas je kostala 100.000$." );

            PostaviIgracuSkin( playerid, skinid ); KGEyes_SetPlayerSkin( playerid, skinid );

            GlobalProdaja[ playerid ] = -1;
            GlobalCijena[ playerid ] = -1;
            GlobalID[ playerid ] = -1;
        }
    }
	else if( dialogid == dialog_ACCEPTSPOL ) {
        if( response ) {

            new seller = GlobalProdaja[ playerid ];
            new skinid = GlobalID[ playerid ];

            if( seller == IPI  ) return SendErrorMessage( playerid, "Taj igrac je offline.");

            if( !IsPlayerNearPlayer( 5.0, playerid, seller ) ) return SendErrorMessage( playerid, "Niste blizu doktora koji vam zeli uraditi spolnu operaciju.");
            if( PlayerInfo[ playerid ][ xNovac ] < GlobalCijena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca za operaciju.");
            if( !IsPlayerConnected( seller ) ) {
                SendErrorMessage( playerid, "Taj igrac je offline.");
                GlobalProdaja[ playerid ] = -1;
                GlobalCijena[ playerid ] = -1;
                GlobalID[ playerid ] = -1;
                return 1;
            }

            KGEyes_GivePlayerMoney( seller, 50000 ), PlayerMoneyTrackSave( seller, MONEY_HANDS, 50000, "Spol operacija" );
            KGEyes_GivePlayerMoney( playerid, -GlobalCijena[ playerid ] ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -GlobalCijena[ playerid ], "Spol operacija" );

            SendInfoMessage( seller, "Uspjesno ste izvrsili spolnu operaciju i zaradili 50.000$." );
            SendInfoMessage( playerid, "Uspjesno ste uradili spolnu operaciju, operacija vas je kostala 100.000$." );

            PlayerInfo[ playerid ][ xPol ] = skinid;
			sql_user_update_integer( playerid, "sex", PlayerInfo[ playerid ][ xPol ] );

            GlobalProdaja[ playerid ] = -1;
            GlobalCijena[ playerid ] = -1;
            GlobalID[ playerid ] = -1;
        }
    }
	
	else if( dialogid == dialog_sellvehPrice ) {
	    if( response ) {
	    	//SendCHProtectMessage(playerid, "Trenutno onemoguceno");
	    	new izbor = ChosenVehicle[ playerid ];
			if( !IsPlayerInVehicle( playerid, izbor ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
			if( GetPlayerVehicleSeat( playerid ) != 0) return SendErrorMessage( playerid, "Morate biti u svom vozilu na vozackom mjestu!");
			new price;
			if( sscanf( inputtext, "i", price ) ) return SPD( playerid, dialog_sellvehPrice, DSI, D_NASLOV, "Unesite cijenu za koju prodajete vozilo.\nPrimer: 24523", "Potvrdi", "Odustani" );
			if( price < 1 || price > 9999999 ) return SPD( playerid, dialog_sellvehPrice, DSI, D_NASLOV, "Unesite cijenu za koju prodajete vozilo.\nPrimer: 24523", "Potvrdi", "Odustani" );

			VehicleInfo[ izbor ][ vSellPrice ] = price;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_sprice` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ izbor ][ vSellPrice ],
														VehicleInfo[ izbor ][ vSqlID ] );

			mysql_pquery( _dbConnector, sql_str, "", "" );

			SetVehicleLabels( izbor );
			SendInfoMessage( playerid, "Postavili ste oglas za prodaju na vase vozilo. Cijena %d$.", price );
		}
	}
	else if( dialogid == dialog_FakeDealer ) {
	    if( response ) {
			new seller = GetPVarInt( playerid, "FakeSeller");
			new novac = GetPVarInt( playerid, "FakeSellCar");

			if( PlayerInfo[ playerid ][ xNovac ] < novac ) return SendErrorMessage( playerid, "Nemate dovoljno novca za kupiti vozilo.");

			KGEyes_GivePlayerMoney( seller, novac ), PlayerMoneyTrackSave( seller, MONEY_HANDS, novac, "Diler auta - prodaja" );

			KGEyes_GivePlayerMoney( playerid, -novac ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -novac, "Diler auta - kupovina" );
			SendInfoMessage( playerid, "Uspjesno ste kupili vozilo." );
			SendInfoMessage( seller, "Uspjesno ste prodali vozilo." );
			FakeCarTimer[ seller ] = 600;

			SetPVarInt( playerid, "FakeSellCar", 0 );
			SetPVarInt( playerid, "FakeSeller", -1 );
	    }
	    else if( !response ) {
			new seller = GetPVarInt( playerid, "FakeSeller");
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu vozla!", ImeIgraca( playerid ) );
			SCM( seller, -1, globalstring );
			SCM( playerid, -1, "Odbili ste ponudu!");
			SetPVarInt( playerid, "FakeSellCar", 0 );
			SetPVarInt( playerid, "FakeSeller", -1 );
			FakeCarTimer[ seller ] = 600;
	    }
	}
	else if( dialogid == dialog_ACCEPTVEH )
	{
		if( response )
		{
			
			g_SaleCheck_Seller[playerid] = GlobalProdaja[playerid];
			g_SaleCheck_VehicleID[playerid] = GlobalID[playerid];
			g_SaleCheck_Price[playerid] = GlobalCijena[playerid];

			
			new query[256];
			mysql_format(_dbConnector, query, sizeof(query), "SELECT `owner_sqlID` FROM `vehicles` WHERE `veh_id` = %d LIMIT 1", g_SaleCheck_VehicleID[playerid]);
			mysql_pquery(_dbConnector, query, "OnVehicleSaleCheckResponse", "i", playerid); 
		}
		else 
		{
			new seller = GlobalProdaja[playerid];
			if(IsPlayerConnected(seller))
			{
				format(globalstring, sizeof(globalstring), "Igrac %s je odbio vasu ponudu za kupovinu vozila!", ImeIgraca(playerid));
				SCM(seller, -1, globalstring);
			}
			SCM(playerid, -1, "Odbili ste ponudu!");
		}
		
		GlobalProdaja[playerid] = -1;
		GlobalCijena[playerid] = -1;
		GlobalID[playerid] = -1;
		return 1;
	}
	
	else if( dialogid == dialog_VEHSELLDRZAVI ) {

	    if( !response ) return 1;
		if( response ) {

		   		 	new vehicleid = ChosenVehicle[ playerid ];
     				if( !IsPlayerInVehicle( playerid, vehicleid ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");
			        //if( !IsPlayerInRangeOfPoint( playerid, 10.0, 732.3741, -96.0712, 21.4718 ) ) return SendErrorMessage( playerid, "Da biste koristili ovu komandu morati biti na vagi na otpadu." );

                    new string1[ 128 ];
					format( string1, sizeof( string1 ), "Igrac %s je prodao vozilo %s na aukciju", ImeIgraca( playerid ), GetVehicleNameEx( VehicleInfo[ vehicleid ][ vModel ] ) );
					LogSave( "Ostalo/LogProdajaVozila.log", string1 );

			        KGEyes_GivePlayerMoney( playerid, VehicleInfo[ vehicleid ][ vPrice ]/2 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, VehicleInfo[ vehicleid ][ vPrice ]/2, "Prodaja vozila drzavi" );
					SendClientMessageEx( playerid, ZUTA, "Dobili ste %d$ za ovo vozilo.", VehicleInfo[ vehicleid ][ vPrice ]/2 );

				    for( new j = 0; j < MAX_VEH_SLOT; j ++ ) {
						if( player_veh[ playerid ][ vehicle_id ][ j ] == vehicleid  ) {
					  		player_veh[ playerid ][ vehicle_id ][ j ] = -1;
							break;
						}
					}


					KGEyes_DestroyVehicle( vehicleid );
					sql_vehicles_delete( vehicleid );
					ResetVehicle( vehicleid );
					SetVehicleLabels( vehicleid );

					SCM( playerid, BELA, "Vase vozilo je uspesno prodano drzavi!");
		}
	}
	else if( dialogid == dialog_VEHSELLTP ) {
	    if( !response ) return 1;
		if( response ) {
	        new idigraca, string[ 128 ], cena, autoid = ChosenVehicle[ playerid ];
			if( sscanf( inputtext, "ui", idigraca, cena ) ) return SPD( playerid, dialog_VEHSELLTP, DSI, D_NASLOV, "Unesite id igraca kome zelite da prodate vozilo i cijenu.\nPrimer: 145 12003", D_ODABERI, D_ODUSTANI );
			if( !IsPlayerConnected( idigraca ) || idigraca == INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Nevaljan ID igraca.");
			if( !IsPlayerNearPlayer( 5.0, playerid, idigraca ) ) return SendErrorMessage( playerid, "Taj igrac nije blizu vas !");
            if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi prodati vozilo!");

            new slot = -1;
			for( new j = 0; j < MAX_VEH_SLOT; j ++ ) {
				if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] != -1 && player_veh[ playerid ][ vehicle_id ][ j ] == autoid  ) {
			  		slot = j;
					break;
				}
			}
			if( slot == -1 ) return SendErrorMessage( playerid, "Ovo vozilo nije u vasem vlasnistvu." );

            slot = -1;
		    for( new j = 0; j < MAX_VEH_SLOT; j ++ ) {
				if( (j+1) <= PlayerInfo[ idigraca ][ xSlotoviVozila ] && player_veh[ idigraca ][ vehicle_id ][ j ] == -1 ) {
			  		slot = j;
					break;
				}
			}
			if( slot == -1 ) return SendErrorMessage( playerid, "Svi slotovi vozila izabranog igraca su zauzeti." );

			if( cena < ( VehicleInfo[ autoid ][ vPrice ]/2 ) ) return SendErrorMessage( playerid, "Cijena mora biti veca od polovine kupljene.");

	        if( !IsVehicleBajs( autoid ) ) {
				if( PlayerInfo[ idigraca ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Igrac mora biti level 5+ da bi ste mu prodali vozilo." );
			}

            SendClientMessageEx( playerid, SVIJETLOPLAVA, "Ponudili ste igracu %s vozilo po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCijena[ idigraca ] = cena;
			GlobalID[ idigraca ] = autoid;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegovo vozilo marke %s za %d", ImeIgraca( playerid ), GetVehicleNameEx( VehicleInfo[ autoid ][ vModel ] ), cena );
			SPD( idigraca, dialog_ACCEPTVEH, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );

	    }
	}
	else if( dialogid == dialog_VEHCOLOR ) {
	    if( !response ) return 1;
		if( response ) {
		    new boja1, boja2, vehicleid = ChosenVehicle[ playerid ];
		    if( sscanf( inputtext, "ii", boja1, boja2 ) ) SPD( playerid, dialog_VEHCOLOR, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 vozila.\nPrimer: 1 2", D_ODABERI, D_ODUSTANI );

	        if( boja1 < 0 || boja1 > 255 ) return SendErrorMessage( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
	    	if( boja2 < 0 || boja2 > 255 ) return SendErrorMessage( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

            if( !IsPlayerInVehicle( playerid, vehicleid ) ) return SendErrorMessage( playerid, "Morate biti u svom vozilu!");

			VehicleInfo[ vehicleid ][ vColor1 ] = boja1;
		    VehicleInfo[ vehicleid ][ vColor2 ] = boja2;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_color_1` = '%d', `v_color_2` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
										VehicleInfo[ vehicleid ][ vColor1 ],
										VehicleInfo[ vehicleid ][ vColor2 ],
										VehicleInfo[ vehicleid ][ vSqlID ] );

			mysql_pquery( _dbConnector, sql_str, "", "" );

			KGEyes_ChangeVehicleColor( vehicleid, boja1, boja2 );
			SendInfoMessage( playerid, "Promenili ste boju vozila u %d, %d.", boja1, boja2 );
		}
	}
	else if( dialogid == dialog_VEHICLEPUTMATS ) {

	    if( !response ) return 1;
		if( response ) {

		    new kolicina, vehicleid = ChosenVehicle[ playerid ];
		    if( sscanf( inputtext, "d", kolicina ) ) return SPD( playerid, dialog_VEHICLEPUTMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za ostavljanje.", D_ODABERI, D_ODUSTANI );

		    if( Inventory_Count( playerid, "Materijali" ) == 0 ) return SendErrorMessage( playerid, "Nemate materijale kod vas!" );
		    if( kolicina < 1 || kolicina > Inventory_Count( playerid, "Materijali" ) ) return SendErrorMessage( playerid, "Nemate toliko materijala kod vas!");

			if( (VehicleInfo[ vehicleid ][ vMaterijali ]+kolicina) > 100000 ) return SendErrorMessage( playerid, "Najvise u gepeku moze stati 10000 materijala." );

            //PlayerInfo[ playerid ][ xMaterijali ] -= kolicina;
            //sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );
			Inventory_Remove( playerid, "Materijali", kolicina );

		    format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u gepek.", RPImeIgraca( playerid ) );
			PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		    SendClientMessageEx( playerid, PLAVA, "Stavili ste %d materijala u gepek.", kolicina );

		    VehicleInfo[ vehicleid ][ vMaterijali ] += kolicina;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_mats` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ vehicleid ][ vMaterijali ],
														VehicleInfo[ vehicleid ][ vSqlID ] );

			mysql_pquery( _dbConnector, sql_str, "", "" );

		}
	}
	else if( dialogid == dialog_VEHICLETAKEMATS ) {

	    if( !response ) return 1;
		if( response ) {

		    new kolicina, vehicleid = ChosenVehicle[ playerid ];
		    if( sscanf( inputtext, "d", kolicina ) ) return SPD( playerid, dialog_VEHICLETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje iz gepeka.", D_ODABERI, D_ODUSTANI );

		    if( VehicleInfo[ vehicleid ][ vMaterijali ] == 0 ) return SendErrorMessage( playerid, "Nema materijala u gepeku!" );
		    if( kolicina < 1 || kolicina > VehicleInfo[ vehicleid ][ vMaterijali ] ) return SendErrorMessage( playerid, "Nemate toliko materijala u gepeku!");

            //PlayerInfo[ playerid ][ xMaterijali ] += kolicina;
            //sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );
			Inventory_Add( playerid, "Materijali", 2061, kolicina );

		    format( globalstring, sizeof( globalstring ), "* %s uzima nesto iz gepeka.", RPImeIgraca( playerid ) );
			PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
		    SendClientMessageEx( playerid, PLAVA, "Uzeli ste %d materijala iz gepeka.", kolicina );

		    VehicleInfo[ vehicleid ][ vMaterijali ] -= kolicina;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_mats` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ vehicleid ][ vMaterijali ],
														VehicleInfo[ vehicleid ][ vSqlID ] );

			mysql_pquery( _dbConnector, sql_str, "", "" );
		}
	}
	else if( dialogid == dialog_VEHICLETAKEDRUG ) {
	    if( !response ) return 1;
		if( response ) {
		    new slot, slot2, kolicina, izbor = ChosenVehicle[ playerid ], id = -1;
		    if( sscanf( inputtext, "dd", slot, kolicina ) ) return SPD( playerid, dialog_VEHICLETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u vozilu i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );

		   	if( slot < 1 || slot > 6 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
            if( VehicleInfo[ izbor ][ vDrugAmmount ][ slot2 ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo nema drogu pod tim slotom!");

            if( VehicleInfo[ izbor ][ vDrugAmmount ][ slot2 ] > 0 ) {
	       		if( kolicina < 1 || kolicina > VehicleInfo[ izbor ][ vDrugAmmount ][ slot2 ] ) return SendErrorMessage( playerid, "Ovo vozilo nema toliko droge pod tim slotom!");

				id = Inventory_Add( playerid, "Droga", 1579, kolicina );

				if( id != -1 ) {

					VehicleInfo[ izbor ][ vDrugAmmount ][ slot2 ] -= kolicina;
					if( VehicleInfo[ izbor ][ vDrugAmmount ][ slot2 ] == 40000 ) VehicleInfo[ izbor ][ vDrugAmmount ][ slot2 ] = 0;
				    format( globalstring, sizeof( globalstring ), "* %s uzima nesto iz gepeka.", RPImeIgraca( playerid ) );
					PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
					SendClientMessageEx( playerid, PLAVA, "Uzeli ste %d grama droge iz gepeka.", kolicina );

					new drug_amm_string[ 24 ];
					format( drug_amm_string, sizeof( drug_amm_string ), "v_drug_ammount_%d", slot );

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `%s` = '%d' WHERE `veh_id` = '%d' LIMIT 1",

						drug_amm_string, VehicleInfo[ izbor ][ vDrugAmmount ][ slot2 ],
						VehicleInfo[ izbor ][ vSqlID ] );
					mysql_pquery( _dbConnector, sql_str, "", "" );

				} else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite stvari." );
			}
		}
	}
	else if( dialogid == dialog_PORTABLE ) {
	    if( !response ) return 1;
		if( response ) {
		    switch( listitem ) {
		        case 0: {
		            if( PlayerInfo[ playerid ][ xRank ] < 1 ) return SendErrorMessage( playerid, "Samo Rank 1 Agencije ili preko moze da dodjeli mete !" );
				    SearchingHit( playerid );
		        }
		        case 1: {
		            if( PlayerInfo[ playerid ][ xRank ] < 1 ) return SendErrorMessage( playerid, "Samo Rank 1 Agencije ili preko moze da dodjeli mete !" );
				    if( hitfound == 0 ) return SendErrorMessage( playerid, "Trenutno nema pronadjenih meta, koristite prvo /portable da vidite dostupne mete!");
					SPD( playerid, dialog_GIVEHIT, DSI, D_NASLOV, "Unesite ID ubojice kojem dajete metu:", D_ODABERI, D_ODUSTANI );
				}
				case 2: {
				    SCM( playerid, BELA, "|__________________ Rankovi Agencije __________________|");
				    new string[ 64 ], OrgID = PlayerInfo[ playerid ][ xClan ];
					foreach( Player, i ) {
                        if( IsPlayerConnected( i ) && PlayerLogged[ i ] == true && PlayerInfo[ i ][ xClan ] == OrgID ) {
						    format( string, sizeof( string ), "* %s: Rank %d", ImeIgraca( i ), PlayerInfo[ i ][ xRank ] );
							SCM( playerid, SIVA, string );
						}
					}
				}
				case 3: {
					if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si u waru." );
    				SPD( playerid, dialog_HORDER, DSL, "Dostupni Paketi", "Paket 1($500)Rank 1+\nPaket 2($1000)Rank 2+\nPaket 3($1500)Rank 3+\nPaket 4($2000)Rank 4+\nPaket 5($2500)Rank 5+\nArmor (1000$)\nMaska (1500$)", D_ODABERI, D_ODUSTANI );
				}
				case 4: {

					if( VictimID[ playerid ] == -1 ) return SendErrorMessage(playerid, "Vi nemate metu");
					PlayerInfo[ VictimID[ playerid ] ][ xHitmenCijena ] = 0;
					HitmanID[ VictimID[ playerid ] ] = -1;
					Contracted[ VictimID[ playerid ] ] = false;
					VictimID[ playerid ] = -1;
					SendInfoMessage(playerid, "Odustali ste od mete");
				}
			}
		}
	}
	else if( dialogid == dialog_GIVEHIT ) {
	    if( !response ) return 1;
		if( response ) {
		    new id;
            if( sscanf( inputtext, "u", id ) ) return SendErrorMessage( playerid, "Krivi id" );
	        if( id == INVALID_PLAYER_ID ) return SendErrorMessage( playerid, "Krivi id" );
	        if( org_info[ PlayerInfo[ id ][ xClan ] ][ oTip ] != ORG_TIP_HITM ) return SendErrorMessage( playerid, "Taj igrac nije clan agencije!");
			if( VictimID[ id ] != -1 ) return SendErrorMessage( playerid, "Taj clan ima vec dodjeljenu metu !");
			if( PlayerInfo[ ahitid ][ xHitmenCijena ] == 0 ) return SendErrorMessage( playerid, "Prvo moras da vidis kontrakte." );
			if( IsPlayerConnected( ahitid ) ) {
                for( new a = 1; a < MAX_ORG; a++) {
		    		if( org_info[ a ][ oTip ] == ORG_TIP_HITM ) {
		    		    format( globalstring, sizeof( globalstring ), "* Hitman %s, je dodelio ubojici %s-u da ubije: %s(ID:%d), za $%d.", ImeIgraca( playerid ), ImeIgraca( id ), ImeIgraca( ahitid ), ahitid, PlayerInfo[ ahitid ][ xHitmenCijena ] );
                   		OrgPoruka( a, ZUTA, globalstring );
					}
				}
				VictimID[ id ] = ahitid;
				HitmanID[ ahitid ] = id;
				Contracted[ ahitid ] = true;
		   		ahitid = 0;
		   		hitfound = 0;
			}
			else return SendErrorMessage( playerid, "Meta je trenutno offline, potrazite nove !");
		}
	}
	else if( dialogid == dialog_HORDER ) {
	    if( !response ) return 1;
		if( response ) {
		    switch( listitem ) {
		    	case 0: {
		    	    if( PlayerInfo[ playerid ][ xRank ] < 1 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] >= 500 ) {
			        	SCM( playerid, SVIJETLOPLAVA, "* Narucili ste paket, cijena ovog paketa je 500$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 100 );
						GiveWeaponToPlayer( playerid, 4, 1 );
						GiveWeaponToPlayer( playerid, 34, 5 );
			            KGEyes_GivePlayerMoney( playerid, -500 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -500, "Hitman paket" );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 1: {
		    	    if( PlayerInfo[ playerid ][ xRank ] < 2 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] >= 1000 ) {
			        	SCM( playerid, SVIJETLOPLAVA, "* Narucili ste paket, cijena ovog paketa je 1000$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 31, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
						GiveWeaponToPlayer( playerid, 34, 10 );
			            KGEyes_GivePlayerMoney( playerid, -1000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -1000, "Hitman paket" );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 2: {
		    	    if( PlayerInfo[ playerid ][ xRank ] < 3 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] >= 1500 ) {
			        	SCM( playerid, SVIJETLOPLAVA, "* Narucili ste paket, cijena ovog paketa je 1500$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 30, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
						GiveWeaponToPlayer( playerid, 34, 15 );
			            KGEyes_GivePlayerMoney( playerid, -1500 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -1500, "Hitman paket" );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 3: {
		    	    if( PlayerInfo[ playerid ][ xRank ] < 4 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] >= 2000 ) {
			        	SCM( playerid, SVIJETLOPLAVA, "* Narucili ste paket, cijena ovog paketa je 2000$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 31, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
						GiveWeaponToPlayer( playerid, 34, 20 );
			            KGEyes_GivePlayerMoney( playerid, -2000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -2000, "Hitman paket" );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 4: {
		    	    if( PlayerInfo[ playerid ][ xRank ] < 5 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] >= 2500 ) {
			        	SCM( playerid, SVIJETLOPLAVA, "* Narucili ste paket, cijena ovog paketa je 2500$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 30, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
						GiveWeaponToPlayer( playerid, 34, 20 );
			            KGEyes_GivePlayerMoney( playerid, -2500 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -2500, "Hitman paket" );
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 5: {
		    	    if( PlayerInfo[ playerid ][ xRank ] < 1 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
					if( HitmanTimer[ playerid ] > 0 ) return SendErrorMessage( playerid, "Morate sacekati jos %d sekundi.", HitmanTimer[ playerid ] );
			        if( PlayerInfo[ playerid ][ xNovac ] >= 1000 ) {
			        	SCM( playerid, SVIJETLOPLAVA, "* Narucili ste paket, cijena ovog paketa je 1000$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
				        KGEyes_SetPlayerArmour( playerid, 100.0);
			            KGEyes_GivePlayerMoney( playerid, -1000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -1000, "Hitman paket" );
						HitmanTimer[ playerid ] = 60;
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 6: {
					if( PlayerInfo[ playerid ][ xRank ] < 1 ) return SendErrorMessage( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
			        if( PlayerInfo[ playerid ][ xNovac ] >= 1500 ) {
			        	SCM( playerid, SVIJETLOPLAVA, "* Narucili ste paket, cijena ovog paketa je 1500$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
			            KGEyes_GivePlayerMoney( playerid, -1500 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -1500, "Hitman paket" );
						Inventory_Add( playerid, "Maska", 19036, 1 );
						if( PlayerInfo[ playerid ][ xMaskID ] == 0 ){
							new mask_id = 100000 + PlayerInfo[ playerid ][ xID ];
							PlayerInfo[ playerid ][ xMaskID ] = mask_id;
						}
			        }
			        else return SendErrorMessage( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
		    }
		}
	}
	else if( dialogid == dialog_RESETIRAJ ) {
	    if( !response ) return 1;
		if( response ) {
		    switch( listitem ) {
		    	case 0: {
		    	    if( ServerInfo[ RRVehicle ] == true  ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
		            if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		            ServerInfo[ RRVehicle ] = true;
		            SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 1 );
		            format( globalstring, sizeof( globalstring ), ""col_server"| RESPAWN |"col_white" Admin %s je aktivirao respawn praznih osobnih vozila za 15 sekundi!", ImeIgraca( playerid ) );
		            SCMA( 0xFFFFFFFF, globalstring );
		            //SCMA( 0x86C6DBAA, "{ff6600}(respawn)"col_white" Respawn ce biti pokrenut za 15 sekundi." );
		    	}
		    	case 1: {
		    	    if( ServerInfo[ RRVehicle ] == true  ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
		            if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		            ServerInfo[ RRVehicle ] = true;
		            SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 2 );
		            format( globalstring, sizeof( globalstring ), ""col_server"| RESPAWN |"col_white" Admin %s je aktivirao respawn praznih poslovnih vozila za 15 sekundi!", ImeIgraca( playerid ) );
		            SCMA( 0xFFFFFFFF, globalstring );
		            //SCMA( 0x86C6DBAA, "{ff6600}(respawn)"col_white" Respawn ce biti pokrenut za 15 sekundi." );
		    	}
				case 2: {
		    	    if( ServerInfo[ RRVehicle ] == true  ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
                    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		            ServerInfo[ RRVehicle ] = true;
		            SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 3 );
		            format( globalstring, sizeof( globalstring ), ""col_server"| RESPAWN |"col_white" Admin %s je aktivirao respawn praznih organizacijskih vozila za 15 sekundi!", ImeIgraca( playerid ) );
		            SCMA( 0xFFFFFFFF, globalstring );
		            //SCMA( 0x86C6DBAA, "{ff6600}(respawn)"col_white" Respawn ce biti pokrenut za 15 sekundi." );
		    	}
		    	case 3: {
		    	    if( ServerInfo[ RRVehicle ] == true  ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
                    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		            ServerInfo[ RRVehicle ] = true;
		            SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 4 );
		            format( globalstring, sizeof( globalstring ), ""col_server"| RESPAWN |"col_white" Admin %s je aktivirao respawn praznih rentanih vozila za 15 sekundi!", ImeIgraca( playerid ) );
		            SCMA( 0xFFFFFFFF, globalstring );
		            //SCMA( 0x86C6DBAA, "{ff6600}(respawn)"col_white" Respawn ce biti pokrenut za 15 sekundi." );
		    	}
		    	case 4: {
		    	    if( ServerInfo[ RRVehicle ] == true  ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
                    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		            ServerInfo[ RRVehicle ] = true;
		            SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 5 );
		            format( globalstring, sizeof( globalstring ), ""col_server"| RESPAWN |"col_white" Admin %s je aktivirao respawn svih vozila za 15 sekundi!", ImeIgraca( playerid ) );
		            SCMA( 0xFFFFFFFF, globalstring );
		            //SCMA( 0x86C6DBAA, "{ff6600}(respawn)"col_white" Respawn ce biti pokrenut za 15 sekundi." );
		    	}
		    	case 5: {
		    	    if( ServerInfo[ RRVehicle ] == true  ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
		    	    if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
		    	    for( new i = 0; i < MAX_VEHICLES; i++ ) {
						if( IsValidVehicle( i ) && IsVehiclePrikolica( i ) && !IsTrailerOccupied( i ) ) {
							SetVehicleToRespawn( i );
						}
					}
					format( globalstring, sizeof( globalstring ), ""col_server"| RESPAWN |"col_white" %s je respawnao sve cisterne!", ImeIgraca( playerid ) );
		            AdminPoruka( 0xFFFFFFFF, globalstring );
		    	}
				case 6: {
					if( ServerInfo[ RRVehicle ] == true  ) return SendErrorMessage( playerid, "Vec je pokrenut jedan RAC." );
					if( PlayerInfo[ playerid ][ xAdmin ] < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
					ServerInfo[ RRVehicle ] = true;
					SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 6 );
					format( globalstring, sizeof( globalstring ), ""col_server"| RESPAWN |"col_white" %s je aktivirao respawn praznih staff vozila za 15 sekundi!", ImeIgraca( playerid ) );
					RPTChat( 0xFFFFFFFF, globalstring );
					return 1;
				}
			}
		}
	}
	
	else if( dialogid == dialog_SELECTVGUN ) {
	    if( !response ) return 1;
		if( response ) {
		    switch( listitem ) {
			    case 0: {
			        if( PlayerInfo[ playerid ][ xNovac ] < 2000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca (2.000$)!");
					KGEyes_GivePlayerMoney( playerid, -2000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -2000, "Vip shop" );
					GiveWeaponToPlayer( playerid, 25, 50 );
					SendInfoMessage( playerid, "Kupili ste Shotgun sa 50 metaka za 2.000$." );
					format( globalstring, sizeof( globalstring ), "VIP SHOP | %s je kupio Shotgun", ImeIgraca( playerid ) );
					AdminPoruka( 0x9ACD32AA, globalstring );

					format( globalstring, sizeof( globalstring ), "* %s kupuje Shotgun iz vip menija.", RPImeIgraca( playerid ) );
					PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
			    }
			    case 1: {
			        if( PlayerInfo[ playerid ][ xNovac ] < 250 ) return SendErrorMessage( playerid, "Nemate dovoljno novca (250$)!");
					KGEyes_GivePlayerMoney( playerid, -250 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -250, "Vip shop" );
					GiveWeaponToPlayer( playerid, 5, 1 );
					SendInfoMessage( playerid, "Kupili ste palicu za 250$." );
					format( globalstring, sizeof( globalstring ), "VIP SHOP | %s je kupio Palicu", ImeIgraca( playerid ) );
					AdminPoruka( 0x9ACD32AA, globalstring );

					format( globalstring, sizeof( globalstring ), "* %s kupuje Palicu iz vip menija.", RPImeIgraca( playerid ) );
					PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
			    }
			    case 2: {
			        if( PlayerInfo[ playerid ][ xNovac ] < 150 ) return SendErrorMessage( playerid, "Nemate dovoljno novca (150$)!");
					KGEyes_GivePlayerMoney( playerid, -150 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -150, "Vip shop" );
					GiveWeaponToPlayer( playerid, 14, 1 );
					SendInfoMessage( playerid, "Kupili ste cvece za 150$." );
					format( globalstring, sizeof( globalstring ), "VIP SHOP | %s je kupio Cvece", ImeIgraca( playerid ) );
					AdminPoruka( 0x9ACD32AA, globalstring );

					format( globalstring, sizeof( globalstring ), "* %s kupuje Cvece iz vip menija.", RPImeIgraca( playerid ) );
					PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
			    }
			    case 3: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 2+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 1500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca (1.500$)!");
					KGEyes_GivePlayerMoney( playerid, -1500 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -1500, "Vip shop" );
					GiveWeaponToPlayer( playerid, 24, 100 );
					SendInfoMessage( playerid, "Kupili ste deagle sa 100 metaka za 1.500$." );
					format( globalstring, sizeof( globalstring ), "VIP SHOP | %s je kupio Deagle", ImeIgraca( playerid ) );
					AdminPoruka( 0x9ACD32AA, globalstring );

					format( globalstring, sizeof( globalstring ), "* %s kupuje Deagle iz vip menija.", RPImeIgraca( playerid ) );
					PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
			    }
			    case 4: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 2+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca (500$)!");
					KGEyes_GivePlayerMoney( playerid, -500 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -500, "Vip shop" );
					GiveWeaponToPlayer( playerid, 22, 100 );
					SendInfoMessage( playerid, "Kupili ste Pistol 9mm sa 100 metaka za 500$." );
					format( globalstring, sizeof( globalstring ), "VIP SHOP | %s je kupio Pistol 9mm", ImeIgraca( playerid ) );
					AdminPoruka( 0x9ACD32AA, globalstring );

					format( globalstring, sizeof( globalstring ), "* %s kupuje Pistol 9mm iz vip menija.", RPImeIgraca( playerid ) );
					PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
			    }
			    case 5: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 3 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 3+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 3000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca (3.000$)!");
					KGEyes_GivePlayerMoney( playerid, -3000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -3000, "Vip shop" );
					GiveWeaponToPlayer( playerid, 28, 150 );
					SendInfoMessage( playerid, "Kupili ste Uzi sa 150 metaka za 3.000$." );
					format( globalstring, sizeof( globalstring ), "VIP SHOP | %s je kupio Uzi", ImeIgraca( playerid ) );
					AdminPoruka( 0x9ACD32AA, globalstring );

					format( globalstring, sizeof( globalstring ), "* %s kupuje Uzi iz vip menija.", RPImeIgraca( playerid ) );
					PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
			    }
			    case 6: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 3 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 3+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 2500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca (2.500$)!");
					KGEyes_GivePlayerMoney( playerid, -2500 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -2500, "Vip shop" );
					GiveWeaponToPlayer( playerid, 29, 200 );
					SendInfoMessage( playerid, "Kupili ste MP5 sa 200 metaka za 2.500$." );
					format( globalstring, sizeof( globalstring ), "VIP SHOP | %s je kupio MP5", ImeIgraca( playerid ) );
					AdminPoruka( 0x9ACD32AA, globalstring );

					format( globalstring, sizeof( globalstring ), "* %s kupuje MP5 iz vip menija.", RPImeIgraca( playerid ) );
					PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
			    }
			    case 7: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 4 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 4+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 6000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca (6.000$)!");
					KGEyes_GivePlayerMoney( playerid, -6000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -6000, "Vip shop" );
					GiveWeaponToPlayer( playerid, 31, 150 );
					SendInfoMessage( playerid, "Kupili ste M4 sa 150 metaka za 6.000$." );
					format( globalstring, sizeof( globalstring ), "VIP SHOP | %s je kupio M4", ImeIgraca( playerid ) );
					AdminPoruka( 0x9ACD32AA, globalstring );

					format( globalstring, sizeof( globalstring ), "* %s kupuje M4 iz vip menija.", RPImeIgraca( playerid ) );
					PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
			    }
			    case 8: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 4 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 4+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 12000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca (12.000$)!");
					KGEyes_GivePlayerMoney( playerid, -12000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -12000, "Vip shop" );
					GiveWeaponToPlayer( playerid, 30, 150 );
					SendInfoMessage( playerid, "Kupili ste AK47 sa 150 metaka za 12.000$." );
					format( globalstring, sizeof( globalstring ), "VIP SHOP | %s je kupio AK47", ImeIgraca( playerid ) );
					AdminPoruka( 0x9ACD32AA, globalstring );

					format( globalstring, sizeof( globalstring ), "* %s kupuje AK47 iz vip menija.", RPImeIgraca( playerid ) );
					PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
			    }
			    case 9: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 5 ) return SendErrorMessage( playerid, "Pancir moze da kupi samo VIP Level 5+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 1500 ) return SendErrorMessage( playerid, "Nemate dovoljno novca (1.500$)!");
					KGEyes_GivePlayerMoney( playerid, -1500 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -1500, "Vip shop" );
					KGEyes_SetPlayerArmour( playerid, 100 );
					SendInfoMessage( playerid, "Kupili ste pancir za 1.500$." );
					format( globalstring, sizeof( globalstring ), "VIP SHOP | %s je kupio Pancir", ImeIgraca( playerid ) );
					AdminPoruka( 0x9ACD32AA, globalstring );

					format( globalstring, sizeof( globalstring ), "* %s kupuje Pancir iz vip menija.", RPImeIgraca( playerid ) );
					PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
			    }
			    case 10: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 5 ) return SendErrorMessage( playerid, "Ovo oruzje moze da kupi samo VIP Level 5+." );
			        if( PlayerInfo[ playerid ][ xNovac ] < 4000 ) return SendErrorMessage( playerid, "Nemate dovoljno novca (4.000$)!");
					KGEyes_GivePlayerMoney( playerid, -4000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -4000, "Vip shop" );
					GiveWeaponToPlayer( playerid, 34, 50 );
					SendInfoMessage( playerid, "Kupili ste Sniper sa 50 metaka za 4.000$." );
					format( globalstring, sizeof( globalstring ), "VIP SHOP | %s je kupio Sniper", ImeIgraca( playerid ) );
					AdminPoruka( 0x9ACD32AA, globalstring );

					format( globalstring, sizeof( globalstring ), "* %s kupuje Sniper iz vip menija.", RPImeIgraca( playerid ) );
					PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
			    }
			}
		}
	}
	else if( dialogid == dialog_KOCKICA ) {
		if(response)
		{
			if( !ToggedKockica ) return SendErrorMessage( playerid, "Ova akcija je trenutno onemogucena!" );
			if(Kockica_Protivnik[playerid] == -1) return SendErrorMessage(playerid, "Niko Vam nije poslao zahtjev za kockicu!");
			if(!IsPlayerConnected(Kockica_Protivnik[playerid]))
			{
				SendErrorMessage(playerid, "Igrac koji Vam je poslao zahtjev za kockicu je izasao sa servera!");
				PonistiKockicu(Kockica_Protivnik[playerid]); PonistiKockicu(playerid);
				return 1;
			}
			if(PlayerInfo[playerid][xNovac] < Kockica_Ulog[playerid])
			{
				SendErrorMessage(playerid, "Nemate dovoljno novca da prihvatite igru kockica!");
				PonistiKockicu(Kockica_Protivnik[playerid]); PonistiKockicu(playerid);
				SendErrorMessage(Kockica_Protivnik[playerid], "Igrac kojem ste poslali zahtjev za kockicu je ostao bez novca i ne moze ucestvovati u igri!");
				return 1;
			}
			KGEyes_GivePlayerMoney(playerid, -Kockica_Ulog[playerid]), PlayerMoneyTrackSave( playerid, MONEY_HANDS,  -Kockica_Ulog[playerid], "Kockica ulog" );
			KGEyes_GivePlayerMoney(Kockica_Protivnik[playerid], -Kockica_Ulog[playerid]), PlayerMoneyTrackSave( Kockica_Protivnik[playerid], MONEY_HANDS, -Kockica_Ulog[playerid], "Kockica ulog" );
			new k_random_1 = random(6)+1, k_random_2 = random(6)+1;
			Kockica_Random_1[playerid] = k_random_1;
			Kockica_Random_2[playerid] = k_random_2;
			Kockica_Random_1[Kockica_Protivnik[playerid]] = Kockica_Random_2[playerid];
			Kockica_Random_2[Kockica_Protivnik[playerid]] = Kockica_Random_1[playerid];
			format(globalstring, sizeof(globalstring), "* %s baca kockicu koja staje na broj %d.", ImeIgraca(playerid), Kockica_Random_1[playerid]);
			PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
			format(globalstring, sizeof(globalstring), "* %s baca kockicu koja staje na broj %d.", ImeIgraca(Kockica_Protivnik[playerid]), Kockica_Random_1[Kockica_Protivnik[playerid]]);
			PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
			KreirajKockicaTD(playerid); KreirajKockicaTD(Kockica_Protivnik[playerid]);
			PodesiKockicaTD(playerid); PodesiKockicaTD(Kockica_Protivnik[playerid]);
		}
		if(!response)
		{
			if(Kockica_Protivnik[playerid] == -1) return SendErrorMessage(playerid, "Niko Vam nije poslao zahtjev za kockicu!");
			if(!IsPlayerConnected(Kockica_Protivnik[playerid]))
			{
				SendErrorMessage(playerid, "Igrac koji Vam je poslao zahtjev za kockicu je izasao sa servera!");
				PonistiKockicu(Kockica_Protivnik[playerid]); PonistiKockicu(playerid);
				return 1;
			}
			SendInfoMessage(playerid,"Odbili ste da igrate kockicu sa igracem %s | Ulog %d$", ImeIgraca(Kockica_Protivnik[playerid]), Kockica_Ulog[playerid]);
			SendInfoMessage(Kockica_Protivnik[playerid], "%s je odbio da igra kockicu sa Vama!", ImeIgraca(playerid));
			PonistiKockicu(Kockica_Protivnik[playerid]); PonistiKockicu(playerid);
		}
	}
	
	else if( dialogid == dialog_PODESAVANJA ) {
		if( response ) {
			switch( listitem ) {
			    case 0: {
			        if(GetPVarInt(playerid, "ToggedAnim") == 0) {
						SetPVarInt(playerid, "ToggedAnim", 1);
						SCM( playerid, BELA, "Chat animacije iskljucene !");
					}
					else if(GetPVarInt(playerid, "ToggedAnim") == 1) {
						SetPVarInt(playerid, "ToggedAnim", 0);
						SCM( playerid, BELA, "Chat animacije ukljucene !");
					}
			    }
				case 1: {
					if( !TogSDP[ playerid ] ) {
						TogSDP[ playerid ] = true;
						SCM( playerid, 0xBFC0C2FF, "Staff duty poruke iskljucene!");
					}
					else if( TogSDP[ playerid ] ) {
						TogSDP[ playerid ] = false;
						SCM( playerid, 0xBFC0C2FF, "Staff duty poruke ukljucene!");
					}
				}
				case 2: {
					if( !gNews{ playerid } ) {
						gNews{ playerid } = 1;
						SCM( playerid, 0xBFC0C2FF, "CNN Vijesti chat kanal iskljucen!");
					}
					else if( gNews{ playerid } ) {
						gNews{ playerid } = 0;
						SCM( playerid, 0xBFC0C2FF, "CNN Vijesti chat kanal ukljucen!");
					}
				}
				case 3: {
					if( PlayerInfo[ playerid ][ xBrojTelefona ] != 0 ) {
						if( PhoneOnline[ playerid ] == 0 ) {
							PhoneOnline[ playerid ] = 1;
							SCM( playerid, SIVA, "Iskljucio si mobilni telefon!");
						}
						else if( PhoneOnline[ playerid ] > 0 ) {
							PhoneOnline[ playerid ] = 0;
							//ShowSmartPhone( playerid, true );
							SetScreen( playerid, SETTINGS_TURNON );
							SCM( playerid, SIVA, "Ukljucio si mobilni telefon!");
						}
					}
					else {
						SendErrorMessage( playerid, "Nemate mobilni telefon ili karticu!");
						return 1;
					}
				}
				case 4: {
					if( GetPVarInt(playerid, "ToggedSA") == 0 ) {
						SetPVarInt(playerid, "ToggedSA", 1);
						SCM( playerid, BELA, "SA CHAT dostava iskljucena !");
					}
					else if(GetPVarInt(playerid, "ToggedSA") == 1) {
						SetPVarInt(playerid, "ToggedSA", 0);
						SCM( playerid, BELA, "SA CHAT dostava ukljucena !");
					}
				}
				case 5: {
					if( GetPVarInt(playerid, "ToggedFR") == 0 ) {
						SetPVarInt(playerid, "ToggedFR", 1);
						SCM( playerid, BELA, "RADIO/F CHAT dostava iskljucena !");
					}
					else if(GetPVarInt(playerid, "ToggedFR") == 1) {
						SetPVarInt(playerid, "ToggedFR", 0);
						SCM( playerid, BELA, "RADIO/F CHAT dostava ukljucena !");
					}
				}
				case 6: {
					if( PlayerInfo[playerid][xNovajlijeChat] == 1) {
						PlayerInfo[playerid][xNovajlijeChat] = 0;
						SCM( playerid, BELA, "Novajlije CHAT dostava iskljucena !");
					}
					else {
						PlayerInfo[playerid][xNovajlijeChat] = 1;
						SCM( playerid, BELA, "Novajlije CHAT dostava ukljucena !");
					}
					sql_user_update_integer( playerid, "novajlije_chat", PlayerInfo[ playerid ][ xNovajlijeChat ] );
				}
				case 7: {
					if( GetPVarInt(playerid, "ToggedR") == 0 ) {
						SetPVarInt(playerid, "ToggedR", 1);
						SCM( playerid, BELA, "Reakcije CHAT dostava iskljucena !");
					}
					else if(GetPVarInt(playerid, "ToggedR") == 1) {
						SetPVarInt(playerid, "ToggedR", 0);
						SCM( playerid, BELA, "Reakcije CHAT dostava ukljucena !");
					}
				}
				case 8: {
					if( GetPVarInt(playerid, "ToggedDC") == 0 ) {
						SetPVarInt(playerid, "ToggedDC", 1);
						SCM( playerid, BELA, "RADIO/D CHAT dostava iskljucena !");
					}
					else if(GetPVarInt(playerid, "ToggedDC") == 1) {
						SetPVarInt(playerid, "ToggedDC", 0);
						SCM( playerid, BELA, "RADIO/D CHAT dostava ukljucena !");
					}
				}
				case 9: {
					if( GetPVarInt(playerid, "ToggedPoklon") == 0 ) {
						SetPVarInt(playerid, "ToggedPoklon", 1);
						SCM( playerid, BELA, "Poklon poruke dostava iskljucena !");
					}
					else if(GetPVarInt(playerid, "ToggedPoklon") == 1) {
						SetPVarInt(playerid, "ToggedPoklon", 0);
						SCM( playerid, BELA, "Poklon poruke dostava ukljucena !");
					}
				}
				case 10: {
					TogPlayerHud( playerid );
				}
				case 11: {
					if( PlayerInfo[ playerid ][ xAdmin ] < 1 && PlayerInfo[ playerid ][ xSkriptaRank ] != 99 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
					if( GetPVarInt(playerid, "ToggedPM") == 0 ) {
						SetPVarInt(playerid, "ToggedPM", 1);
						SCM( playerid, BELA, "SMS dostava iskljucena !");
					}
					else if(GetPVarInt(playerid, "ToggedPM") == 1) {
						SetPVarInt(playerid, "ToggedPM", 0);
						SCM( playerid, BELA, "SMS dostava ukljucena !");
					}
				}
				case 12: {
					if( PlayerInfo[ playerid ][ xAdmin ] < 1 && PlayerInfo[ playerid ][ xSkriptaRank ] != 99 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
					if( GetPVarInt(playerid, "ToggedWISP") == 0 ) {
						SetPVarInt(playerid, "ToggedWISP", 1);
						SCM( playerid, BELA, "WHISPER chat iskljucen !");
					}
					else if(GetPVarInt(playerid, "ToggedWISP") == 1) {
						SetPVarInt(playerid, "ToggedWISP", 0);
						SCM( playerid, BELA, "WHISPER chat ukljucen !");
					}
				}
				case 13: {
					if( PlayerInfo[ playerid ][ xAdmin ] < 1 && PlayerInfo[ playerid ][ xSkriptaRank ] != 99 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
					if( GetPVarInt(playerid, "ToggedW") == 0 ) {
						SetPVarInt(playerid, "ToggedW", 1);
						SCM( playerid, BELA, "Zabranjene rijeci CHAT dostava iskljucena !");
					}
					else if(GetPVarInt(playerid, "ToggedW") == 1) {
						SetPVarInt(playerid, "ToggedW", 0);
						SCM( playerid, BELA, "Zabranjene rijeci CHAT dostava ukljucena !");
					}
				}
				case 14: {
					if( PlayerInfo[ playerid ][ xAdmin ] < 5 && PlayerInfo[ playerid ][ xSkriptaRank ] != 99 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
					if( GetPVarInt(playerid, "ToggedReport") == 0 ) {
						SetPVarInt(playerid, "ToggedReport", 1);
						SCM( playerid, BELA, "Report/Pitanja iskljucena !");
					}
					else if(GetPVarInt(playerid, "ToggedReport") == 1) {
						SetPVarInt(playerid, "ToggedReport", 0);
						SCM( playerid, BELA, "Report/Pitanja ukljucena !");
					}
				}
				case 15: {
					if( PlayerInfo[ playerid ][ xAdmin ] < 5 && PlayerInfo[ playerid ][ xSkriptaRank ] != 99 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
					if( GetPVarInt(playerid, "ToggedPomoc") == 0 ) {
						SetPVarInt(playerid, "ToggedPomoc", 1);
						SCM( playerid, BELA, "Pomoc pitanja iskljucena !");
					}
					else if(GetPVarInt(playerid, "ToggedPomoc") == 1) {
						SetPVarInt(playerid, "ToggedPomoc", 0);
						SCM( playerid, BELA, "Pomoc pitanja ukljucena !");
					}
				}
				case 16: {
					if( PlayerInfo[ playerid ][ xAdmin ] < 7 && PlayerInfo[ playerid ][ xSkriptaRank ] != 99 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");
					if( GetPVarInt(playerid, "svegasim") == 0 ) {
						SetPVarInt(playerid, "svegasim", 1);
						SCM( playerid, BELA, "Sve poruke iskljucene !");
					}
					else if(GetPVarInt(playerid, "svegasim") == 1) {
						SetPVarInt(playerid, "svegasim", 0);
						SCM( playerid, BELA, "Sve poruke ukljucene !");
					}
				}
				case 17: {
					if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

					if( ToggedG == true ) {
						ToggedG = false;
						SCM( playerid, BELA, "E chat je iskljucen !");

						format( globalstring, sizeof( globalstring ), "TOGE | %s je ugasio E Chat.", ImeIgraca( playerid ) );
						AdminPoruka( NARACRVENA, globalstring );

						PROMChat( NARACRVENA, "TOGE | Administrator je ugasio E Chat." );
					}
					else if( ToggedG == false ) {
						ToggedG = true;
						SCM( playerid, BELA, "E chat je ukljucen !");

						format( globalstring, sizeof( globalstring ), "TOGE | %s je ukljucio E Chat.", ImeIgraca( playerid ) );
						AdminPoruka( NARACRVENA, globalstring );

						PROMChat( NARACRVENA, "TOGE | Administrator je ukljucio E Chat." );
					}
				}
				case 18: {
					if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

					if( ToggedRob == true ) {
						ToggedRob = false;

						format( globalstring, sizeof( globalstring ), "TOGROB | %s je iskljucio mogucnost robanja banke/zlatare.", ImeIgraca( playerid ) );
						AdminPoruka( NARACRVENA, globalstring );
					}
					else if( ToggedRob == false ) {
						ToggedRob = true;

						format( globalstring, sizeof( globalstring ), "TOGROB | %s je ukljucio mogucnost robanja banke/zlatare.", ImeIgraca( playerid ) );
						AdminPoruka( NARACRVENA, globalstring );
					}
				}
			}
		}
	}
	else if( dialogid == dialog_SELECTPPORT ) {
	    if( !response ) {
			if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) return SPD( playerid, dialog_aport_step_1, DSL, D_NASLOV, "Vazne lokacije\nPoslovi\nOrganizacije\nEventi", D_ODABERI, D_ODUSTANI );
	    	else if( PlayerInfo[ playerid ][ xGameSage ] >= 1 ) return SPD( playerid, dialog_gamesage_step_1, DSL, D_NASLOV, "Vazne lokacije\nPoslovi\nOrganizacije\nEventi", D_ODABERI, D_ODUSTANI );
		}
		if( response ) {
		    new tmpcar = GetPlayerVehicleID( playerid );
			switch( listitem ) {
			    case 0: {
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 1522.9089,-1820.9913,13.2580 ); }
					else { KGEyes_SetPlayerPos( playerid, 1522.9089,-1820.9913,13.2580 ); }
					SendInfoMessage( playerid, "Teleportovao si kod Promoter Baze." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"PPORT | %s se teleportovao do Promoter Baze", ImeIgraca( playerid ) );
					AdminPoruka( BELA, globalstring );
			    }
			    case 1: {
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 1460.7902,-1032.2622,23.3613 ); }
					else { KGEyes_SetPlayerPos( playerid, 1460.7902,-1032.2622,23.3613 ); }
					SendInfoMessage( playerid, "Teleportovao si kod Banke." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"PPORT | %s se teleportovao do Banke", ImeIgraca( playerid ) );
					AdminPoruka( BELA, globalstring );
			    }
			    case 2: {
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 1200.0513,-894.9773,41.9973 ); }
					else { KGEyes_SetPlayerPos( playerid, 1200.0513,-894.9773,41.9973 ); }
					SendInfoMessage( playerid, "Teleportovao si kod Burga." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"PPORT | %s se teleportovao do Burga", ImeIgraca( playerid ) );
					AdminPoruka( BELA, globalstring );
			    }
			    case 3: {
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 2269.1697,-1738.8804,13.2518 ); }
					else { KGEyes_SetPlayerPos( playerid, 2269.1697,-1738.8804,13.2518 ); }
					SendInfoMessage( playerid, "Teleportovao si kod Los Santosa." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"PPORT | %s se teleportovao do Los Santosa", ImeIgraca( playerid ) );
					AdminPoruka( BELA, globalstring );
				}
			    case 4: {
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, -1993.7952,129.6753,27.2439 ); }
					else { KGEyes_SetPlayerPos( playerid, -1993.7952,129.6753,27.2439 ); }
					SendInfoMessage( playerid, "Teleportovao si kod San Fiera." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"PPORT | %s se teleportovao do San Fiera", ImeIgraca( playerid ) );
					AdminPoruka( BELA, globalstring );
				}
			    case 5: {
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 2033.9448,1309.1313,10.5241 ); }
					else { KGEyes_SetPlayerPos( playerid, 2033.9448,1309.1313,10.5241 ); }
					SendInfoMessage( playerid, "Teleportovao si kod Las Venturasa." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"PPORT | %s se teleportovao do Las Venturasa", ImeIgraca( playerid ) );
					AdminPoruka( BELA, globalstring );
				}
			    case 6: {
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 1733.6656,-2322.1921,13.0881 ); }
					else { KGEyes_SetPlayerPos( playerid, 1733.6656,-2322.1921,13.0881 ); }
					SendInfoMessage( playerid, "Teleportovao si kod Spawna." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"PPORT | %s se teleportovao do Spawna", ImeIgraca( playerid ) );
					AdminPoruka( BELA, globalstring );
				}
			    case 7: {
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, -2817.3071,-1526.1221,140.5560 ); }
					else { KGEyes_SetPlayerPos( playerid, -2817.3071,-1526.1221,140.5560 ); }
					SendInfoMessage( playerid, "Teleportovao si kod Kaveza." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"PPORT | %s se teleportovao do Kaveza", ImeIgraca( playerid ) );
					AdminPoruka( BELA, globalstring );
				}
			    case 8: {
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 1700.4586,-1126.6998,23.7834 ); }
					else { KGEyes_SetPlayerPos( playerid, 1700.4586,-1126.6998,23.7834 ); }
					SendInfoMessage( playerid, "Teleportovao si kod Zlatare." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"PPORT | %s se teleportovao do Zlatare", ImeIgraca( playerid ) );
					AdminPoruka( BELA, globalstring );
				}
			    case 9: {
					KGEyes_SetPlayerPos( playerid, -233.2941,2587.2976,65.2363 );
					SendInfoMessage( playerid, "Teleportovao si kod VS Kladionice." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"PPORT | %s se teleportovao do VS Kladionice", ImeIgraca( playerid ) );
					AdminPoruka( BELA, globalstring );
				}
			    case 10: {
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 2645.0225,-2030.0238,13.2556 ); }
					else { KGEyes_SetPlayerPos( playerid, 2645.0225,-2030.0238,13.25564 ); }
					SendInfoMessage( playerid, "Teleportovao si kod LS Tune Garaza." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"PPORT | %s se teleportovao do LS Tune Garaze", ImeIgraca( playerid ) );
					AdminPoruka( BELA, globalstring );
				}
			    case 11: {
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, -2713.7366,219.9306,4.2701 ); }
					else { KGEyes_SetPlayerPos( playerid, -2713.7366,219.9306,4.2701 ); }
					SendInfoMessage( playerid, "Teleportovao si kod SF Tune Garaze." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"PPORT | %s se teleportovao do SF Tune Garaze", ImeIgraca( playerid ) );
					AdminPoruka( BELA, globalstring );
					}
			    case 12: {
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 984.1901,-903.2797,41.9914 ); }
					else { KGEyes_SetPlayerPos( playerid, 984.1901,-903.2797,41.9914 ); }
					SendInfoMessage( playerid, "Teleportovao si kod Benzinske." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"PPORT | %s se teleportovao do Benzinske", ImeIgraca( playerid ) );
					AdminPoruka( BELA, globalstring );
			    }
			}
			PromoterPort[ playerid ] = 60;
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SetPlayerTime( playerid, ServerInfo[ VrijemeInGame ], 0 );
			ResetInt( playerid );
		}
	}
	else if( dialogid == dialog_SELECTVPORT ) {
	    if( !response ) return 1;
		if( response ) {
      		new tmpcar = GetPlayerVehicleID( playerid );
			switch( listitem ) {
			    case 0: {
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 1522.9089,-1820.9913,13.2580 ); }
					else { KGEyes_SetPlayerPos( playerid, 1522.9089,-1820.9913,13.2580 ); }
					SendInfoMessage( playerid, "Teleportovao si se kod VIP baze." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do VIP baze", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
			    }
			    case 1: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2+." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 2269.1697,-1738.8804,13.2518 ); }
					else { KGEyes_SetPlayerPos( playerid, 2269.1697,-1738.8804,13.2518 ); }
					SendInfoMessage( playerid, "Teleportovao si se do Los Santosa." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Los Santosa", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
			    }
			    case 2: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2+." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, -1993.7952,129.6753,27.2439 ); }
					else { KGEyes_SetPlayerPos( playerid, -1993.7952,129.6753,27.2439 ); }
					SendInfoMessage( playerid, "Teleportovao si se do San Fierra." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do San Fierra", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
			    }
			    case 3: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2+." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 2033.9448,1309.1313,10.5241 ); }
					else { KGEyes_SetPlayerPos( playerid, 2033.9448,1309.1313,10.5241 ); }
					SendInfoMessage( playerid, "Teleportovao si se do Las Venturas." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Las Venturasa", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
			    }
			    case 4: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 3 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 3+." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 1200.0513,-894.9773,41.9973 ); }
					else { KGEyes_SetPlayerPos( playerid, 1200.0513,-894.9773,41.9973 ); }
					SendInfoMessage( playerid, "Teleportovao si se do Burga." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Burga", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
			    }
			    case 5: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 3 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 3+." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 1460.7902,-1032.2622,23.3613 ); }
					else { KGEyes_SetPlayerPos( playerid, 1460.7902,-1032.2622,23.3613 ); }
					SendInfoMessage( playerid, "Teleportovao si do Banke." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Banke", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
			    }
			    case 6: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 3 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 3+." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 2032.1079,-1439.3959,16.9099 ); }
					else { KGEyes_SetPlayerPos( playerid, 2032.1079,-1439.3959,16.9099 ); }
					SendInfoMessage( playerid, "Teleportovao si do Bolnice." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Bolnice", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
			    }
			    case 7: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 3 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 4+." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 1339.1377, -1235.6971, 13.4854 ); }
					else { KGEyes_SetPlayerPos( playerid, 1339.1377, -1235.6971, 13.4854 ); }
					SendInfoMessage( playerid, "Teleportovao si do Lotto." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Lotto", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
			    }
			    case 8: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 4 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 4+." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 1700.4586,-1126.6998,23.7834 ); }
					else { KGEyes_SetPlayerPos( playerid, 1700.4586,-1126.6998,23.7834 ); }
					SendInfoMessage( playerid, "Teleportovao si do Zlatare." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Zlatare", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
			    }
			    case 9: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 4 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 4+." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 1733.6656,-2322.1921,13.0881 ); }
					else { KGEyes_SetPlayerPos( playerid, 1733.6656,-2322.1921,13.0881 ); }
					SendInfoMessage( playerid, "Teleportovao si se do Spawna." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Spawna.", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
			    }
			    case 10: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 4 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 4+." );
			        if( PlayerInfo[ playerid ][ xClan ] == 0 ) return SendErrorMessage( playerid, "Ovaj port mozete koristiti samo ako ste clan neke organizacije." );
			        if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Portanje do organizacije je moguce samo ako niste u vozilu." );

			        new id = PlayerInfo[ playerid ][ xClan ] ;
			        KGEyes_SetPlayerPos( playerid, org_info[ id ][ oPozExtX ], org_info[ id ][ oPozExtY ], org_info[ id ][ oPozExtZ ] );

	                if( org_info[ id ][ oEntFromBussines ] != -1 ) {

					    SetPlayerInterior( playerid, org_info[ id ][ oEntInt ] );
						SetPlayerVirtualWorld( playerid, org_info[ id ][ oEntVw ] );

						uFirmi[ playerid ] = org_info[ id ][ oEntFromBussines ];
						SetPlayerTime( playerid, 12, 0 );
					}
					else {
					    SetPlayerInterior( playerid, 0 );
						SetPlayerVirtualWorld( playerid, 0 );
						SetPlayerTime( playerid, ServerInfo[ VrijemeInGame ], 0 );
					}

					SendInfoMessage( playerid, "Teleportovali ste se do organizacije %s.", org_info[ id ][ oName ] );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do %s.", ImeIgraca( playerid ), org_info[ id ][ oName ]  );
					AdminPoruka( 0xFFFFFFFF, globalstring );
					return 1;
			    }
			    case 11: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 1781.4554,-1272.4304,13.3380 ); }
					else { KGEyes_SetPlayerPos( playerid, 1781.4554,-1272.4304,13.3380 ); }
					SendInfoMessage( playerid, "Teleportovao si se do Industrial and Offroad Salona." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Industrial and Offroad Salona.", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
			    }
			    case 12: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 2247.9558,-1339.1423,23.5209 ); }
					else { KGEyes_SetPlayerPos( playerid, 2247.9558,-1339.1423,23.5209 ); }
					SendInfoMessage( playerid, "Teleportovao si se do Mitshubishi Salona." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Mitshubishi Salona.", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
			    }
			    case 13: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, -1747.3376,892.2943,53.8896 ); }
					else { KGEyes_SetPlayerPos( playerid, -1747.3376,892.2943,53.8896 ); }
					SendInfoMessage( playerid, "Teleportovao si se do Moto & Bike Salona." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Moto & Bike Salona.", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
			    }
			    case 14: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 273.8797,-1855.1609,2.7422 ); }
					else { KGEyes_SetPlayerPos( playerid, 273.8797,-1855.1609,2.7422 ); }
					SendInfoMessage( playerid, "Teleportovao si se do Salona plovila." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Salon plovila", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
				}
			    case 15: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, -225.3323,2618.6843,69.3804 ); }
					else { KGEyes_SetPlayerPos( playerid, -225.3323,2618.6843,69.3804 ); }
					SendInfoMessage( playerid, "Teleportovao si se do VS Kladionice." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do VS Kladionice", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
				}
			    case 16: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, -2817.3071,-1526.1221,140.5560 ); }
					else { KGEyes_SetPlayerPos( playerid, -2817.3071,-1526.1221,140.5560 ); }
					SendInfoMessage( playerid, "Teleportovao si se do Kaveza." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Kaveza ", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
				}
			    case 17: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 2645.0225,-2030.0238,13.2556 ); }
					else { KGEyes_SetPlayerPos( playerid, 2645.0225,-2030.0238,13.2556 ); }
					SendInfoMessage( playerid, "Teleportovao si se do LS Tune Garaze." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do LS Tune Garaze ", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
					}
			    case 18: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, -2713.7458,212.0028,4.0200 ); }
					else { KGEyes_SetPlayerPos( playerid, -2713.7458,212.0028,4.0200 ); }
					SendInfoMessage( playerid, "Teleportovao si se do SF Tune Garaze." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do SF Tune Garaza ", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
				}
			    case 19: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 2577.8420,-2208.7615,-0.5092 ); }
					else { KGEyes_SetPlayerPos( playerid, 2577.8420,-2208.7615,-0.5092 ); }
					SendInfoMessage( playerid, "Teleportovao si se do Crnog Trzista." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Crnog Trzista ", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
				}
			    case 20: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 1514.7313,-1031.3378,23.7996 ); }
					else { KGEyes_SetPlayerPos( playerid, 1514.7313,-1031.3378,23.7996 ); }
					SendInfoMessage( playerid, "Teleportovao si se do Trafike." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Trafike ", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
				}
			    case 21: {
			        //if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return SendErrorMessage( playerid, "Ovaj port moze da koristi samo VIP Level 2." );
			        if( GetPlayerState( playerid ) == 2 ) { KGEyes_SetVehiclePos( tmpcar, 984.1901,-903.2797,41.9914 ); }
					else { KGEyes_SetPlayerPos( playerid, 984.1901,-903.2797,41.9914 ); }
					SendInfoMessage( playerid, "Teleportovao si se do Benzinske." );
					format( globalstring, sizeof( globalstring ), ""col_vipcmd"VIP PORT | %s se teleportovao do Benzinske ", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
			    }
			}
			if( PlayerInfo[ playerid ][ xVIPLevel ] > 2 ) VIPPort[ playerid ] = 45;
			else VIPPort[ playerid ] = 60;
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			ResetInt( playerid );
			//SetPlayerTime( playerid, ServerInfo[ VrijemeInGame ], 0 );
		}
	}
	else if( dialogid == dialog_gamesage_step_1 ) {
	    if( !response ) return 1;
		if( response ) {
	        switch( listitem ) {
	            case 0: {

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_SPORTS; i++ ) {
						if( supportInfo[ i ][ supportCreated ] == 1 ) {
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, supportInfo[ i ][ supportName ] );
						}
					}
					SPD( playerid, dialog_SELECTSPORT, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	            }
	            case 1: {

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				    for( new i = 0; i < MAX_JOBS; i++ ) {
				        format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, i+1, jobsInfos[ i ][ jName ] );
					}

					SPD( playerid, dialog_aport_step_job, DSL, "Izaberi posao", DialogStrgEx, D_ODABERI, "Nazad" );
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	            }
				case 2:{

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
                	for( new i = 1; i < MAX_ORG; i++ ) {

						if( org_info[ i ][ oID ] > 0 )  {

				  			format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, i, org_info[ i ][ oName ] );
						}
					}

					SPD( playerid, dialog_aport_step_org, DSL, "Izaberi organizaciju", DialogStrgEx, D_ODABERI, "Nazad" );
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	            }
	            case 3: {
	                EventStranica[ playerid ] = 10;
			        for( new i = 1; i <= 10; i++ ) {

			            format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, Event[ i ][ Name ] );
			        }
			        format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->", DialogStrgEx );
			        SPD( playerid, dialog_aport_step_event, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, "Nazad" );
	            }
	            /*case 3: {

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				    for( new i = 0; i < 13; i++ ) {
				        format( DialogStrgEx, sizeof( DialogStrgEx ), "%sAfk Zona %d\n", DialogStrgEx, i+1 );
					}

					SPD( playerid, dialog_aport_step_afkzone, DSL, "Izaberi afk zonu", DialogStrgEx, D_ODABERI, "Nazad" );
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	            }*/
	        }

		}
	}
	else if( dialogid == dialog_aport_step_1 ) {
	    if( !response ) return 1;
		if( response ) {
	        switch( listitem ) {
	            case 0: {

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_APORTS; i++ ) {
						if( aportInfo[ i ][ aportCreated ] == 1 ) {
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, aportInfo[ i ][ aportName ] );
						}
					}
					SPD( playerid, dialog_SELECTAPORT, DSL, "Izaberi lokaciju", DialogStrgEx, D_ODABERI, "Nazad" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	            }
	            case 1: {

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				    for( new i = 0; i < MAX_JOBS; i++ ) {
				        format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, i+1, jobsInfos[ i ][ jName ] );
					}

					SPD( playerid, dialog_aport_step_job, DSL, "Izaberi posao", DialogStrgEx, D_ODABERI, "Nazad" );
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	            }
	            case 2: {

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
                	for( new i = 1; i < MAX_ORG; i++ ) {

						if( org_info[ i ][ oID ] > 0 )  {

				  			format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, i, org_info[ i ][ oName ] );
						}
					}

					SPD( playerid, dialog_aport_step_org, DSL, "Izaberi organizaciju", DialogStrgEx, D_ODABERI, "Nazad" );
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	            }
	            case 3: {
	                EventStranica[ playerid ] = 10;
			        for( new i = 1; i <= 10; i++ ) {

			            format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, Event[ i ][ Name ] );
			        }
			        format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->", DialogStrgEx );
			        SPD( playerid, dialog_aport_step_event, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, "Nazad" );
	            }
	            
	        }
		}
	}
	else if( dialogid == dialog_aport_step_event ) {
	    if( !response ) {
	    	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) return SPD( playerid, dialog_aport_step_1, DSL, D_NASLOV, "Vazne lokacije\nPoslovi\nOrganizacije\nEventi", D_ODABERI, D_ODUSTANI );
	    	else if( PlayerInfo[ playerid ][ xGameSage ] >= 1 ) return SPD( playerid, dialog_gamesage_step_1, DSL, D_NASLOV, "Vazne lokacije\nPoslovi\nOrganizacije\nEventi", D_ODABERI, D_ODUSTANI );
	    }
	    if( response ) {

	        if( listitem < 10 ) {

                if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Na evente se mozete portati samo bez vozila." );

	            new ideventa = (listitem+1) + (EventStranica[ playerid ]-10);
                if( Event[ ideventa ][ VehID ] == 0 ) return SendErrorMessage( playerid, "Ovaj event nije kreiran." );

				KGEyes_SetPlayerPos( playerid, Event[ ideventa ][ TCPX ], Event[ ideventa ][ TCPY ], Event[ ideventa ][ TCPZ ] );

				SetPlayerInterior( playerid, 0 );
				ResetInt( playerid );
				SetPlayerVirtualWorld( playerid, ideventa );
				SetPlayerTime( playerid, ServerInfo[ VrijemeInGame ], 0 );
				NotifyPlayer(playerid, "Teleportovani ste do:", Event[ ideventa ][ Name ], 0);
				SendInfoMessage( playerid, "Kada se portas do eventa MENJA TI SE VIRTUAL WORLD." );
				SendInfoMessage( playerid, "Kada napustis event kucaj /refresh ili se portaj u admin/gamesage bazu prvo." );
			}
			else if( listitem == 10 ) {

			    if( EventStranica[ playerid ] == 100 ) return SendErrorMessage( playerid, "Ne moze dalje." );
			    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				EventStranica[ playerid ] += 10;
				for( new i = (EventStranica[ playerid ]-9); i <= EventStranica[ playerid ]; i++ ) {

	            	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, Event[ i ][ Name ] );

		        }

		       	format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->\n", DialogStrgEx );
               	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s<- Prethodna stranica", DialogStrgEx );


				SPD( playerid, dialog_aport_step_event, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
	        else if( listitem == 11 ) {

                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				EventStranica[ playerid ] -= 10;

				for( new i = (EventStranica[ playerid ]-9); i <= EventStranica[ playerid ]; i++ ) {

	            	format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, Event[ i ][ Name ] );

		        }

				if( EventStranica[ playerid ] > 10 ) {
                    format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->\n", DialogStrgEx );
					format( DialogStrgEx, sizeof( DialogStrgEx ), "%s<- Prethodna stranica", DialogStrgEx );
				}
				else if( EventStranica[ playerid ] <= 10 ) {
				    format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->", DialogStrgEx );
				}

				SPD( playerid, dialog_aport_step_event, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
	            strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	        }
		}
	}
	
	else if( dialogid == dialog_aport_step_job ) {
	    if( !response ) {
	    	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) return SPD( playerid, dialog_aport_step_1, DSL, D_NASLOV, "Vazne lokacije\nPoslovi\nOrganizacije\nEventi", D_ODABERI, D_ODUSTANI );
	    	else if( PlayerInfo[ playerid ][ xGameSage ] >= 1 ) return SPD( playerid, dialog_gamesage_step_1, DSL, D_NASLOV, "Vazne lokacije\nPoslovi\nOrganizacije\nEventi", D_ODABERI, D_ODUSTANI );
	    }
		if( response ) {

		    new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 ) {
		 		KGEyes_SetVehiclePos( tmpcar, jobsInfos[ listitem ][ jPos ][ 0 ], jobsInfos[ listitem ][ jPos ][ 1 ], jobsInfos[ listitem ][ jPos ][ 2 ] );
		 	}
			else {
				KGEyes_SetPlayerPos( playerid, jobsInfos[ listitem ][ jPos ][ 0 ], jobsInfos[ listitem ][ jPos ][ 1 ], jobsInfos[ listitem ][ jPos ][ 2 ] );
			}
			ResetInt( playerid );
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SetPlayerTime( playerid, ServerInfo[ VrijemeInGame ], 0 );
			NotifyPlayer(playerid, "Teleportovani ste do:", jobsInfos[ listitem ][ jName ], 0);

		}
	}
	else if( dialogid == dialog_aport_step_org ) {
	    if( !response ) {
	    	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) return SPD( playerid, dialog_aport_step_1, DSL, D_NASLOV, "Vazne lokacije\nPoslovi\nOrganizacije\nEventi", D_ODABERI, D_ODUSTANI );
	    	else if( PlayerInfo[ playerid ][ xGameSage ] >= 1 ) return SPD( playerid, dialog_gamesage_step_1, DSL, D_NASLOV, "Vazne lokacije\nPoslovi\nOrganizacije\nEventi", D_ODABERI, D_ODUSTANI );
	    }
		if( response ) {

		    new tmpcar = GetPlayerVehicleID( playerid );
		    listitem++;
			if( GetPlayerState( playerid ) == 2 ) {
		 		KGEyes_SetVehiclePos( tmpcar, org_info[ listitem ][ oPozExtX ], org_info[ listitem ][ oPozExtY ], org_info[ listitem ][ oPozExtZ ] );
		 	}
			else {
				KGEyes_SetPlayerPos( playerid, org_info[ listitem ][ oPozExtX ], org_info[ listitem ][ oPozExtY ], org_info[ listitem ][ oPozExtZ ] );
			}

			if( org_info[ listitem ][ oEntFromBussines ] != -1 ) {

				    SetPlayerInterior( playerid, org_info[ listitem ][ oEntInt ] );
					SetPlayerVirtualWorld( playerid, org_info[ listitem ][ oEntVw ] );

					uFirmi[ playerid ] = org_info[ listitem ][ oEntFromBussines ];
					SetPlayerTime( playerid, 12, 0 );
			}
			else {
				    SetPlayerInterior( playerid, 0 );
					SetPlayerVirtualWorld( playerid, 0 );
					SetPlayerTime( playerid, ServerInfo[ VrijemeInGame ], 0 );
			}
			ResetInt( playerid );
			NotifyPlayer(playerid, "Teleportovani ste do:", org_info[ listitem ][ oName ], 0);

		}
	}
	else if( dialogid == dialog_SELECTAPORT ) {
	    if( !response ) return SPD( playerid, dialog_aport_step_1, DSL, D_NASLOV, "Vazne lokacije\nPoslovi\nOrganizacije\nEventi", D_ODABERI, D_ODUSTANI );
		if( response ) {
            new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 ) {
		 		KGEyes_SetVehiclePos( tmpcar, aportInfo[ listitem ][ aportPos_X ], aportInfo[ listitem ][ aportPos_Y ], aportInfo[ listitem ][ aportPos_Z ] );
		 	}
			else {
				KGEyes_SetPlayerPos( playerid, aportInfo[ listitem ][ aportPos_X ], aportInfo[ listitem ][ aportPos_Y ], aportInfo[ listitem ][ aportPos_Z ] );
			}
			ResetInt( playerid );
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SetPlayerTime( playerid, ServerInfo[ VrijemeInGame ], 0 );
			NotifyPlayer(playerid, "Teleportovani ste do:", aportInfo[ listitem ][ aportName ], 0);
		}
	}
	else if( dialogid == dialog_SELECTSPORT ) {
	    if( !response ) return SPD( playerid, dialog_gamesage_step_1, DSL, D_NASLOV, "Vazne lokacije\nPoslovi\nOrganizacije\nEventi", D_ODABERI, D_ODUSTANI );
		if( response ) {
            new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 ) {
		 		KGEyes_SetVehiclePos( tmpcar, supportInfo[ listitem ][ supportPos_X ], supportInfo[ listitem ][ supportPos_Y ], supportInfo[ listitem ][ supportPos_Z ] );
		 	}
			else {
				KGEyes_SetPlayerPos( playerid, supportInfo[ listitem ][ supportPos_X ], supportInfo[ listitem ][ supportPos_Y ], supportInfo[ listitem ][ supportPos_Z ] );
			}
			ResetInt( playerid );
			SetPlayerInterior( playerid, 0 );
			SetPlayerTime( playerid, ServerInfo[ VrijemeInGame ], 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			NotifyPlayer(playerid, "Teleportovani ste do:", supportInfo[ listitem ][ supportName ], 0);
		}
	}
	else if( dialogid == dialog_HOTEL ) {
	    if( response ) {
			switch( listitem ) {
			    case 0: {
			        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
                    new string[ 128 ], hid = PlayerInfo[ playerid ][ xHotelID ];
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
                    strcat( DialogStrgEx, "__________________________________________________________________\n \n");
                    strcat( DialogStrgEx, "Hotel - Informacije\n \n" );
					format( string, sizeof( string ), "Racun hotela: [%d$] | Cijena najma: [%d$]\n \n", hotelInfo[ hid ][ hMoney ], hotelInfo[ hid ][ hRoomPrice ] );
			        strcat( DialogStrgEx, string );

			        new gcounter = 0;
					for( new i = 0; i < 10; i++ ) {
						if( hotelInfo[ hid ][ hGuests][ i ] != 0 ) {

							format( string, sizeof( string ), "Soba %d je zauzeta.\n", i+1 );
                    		strcat( DialogStrgEx, string );
                    		gcounter++;
						}
						else {
							format( string, sizeof( string ), "Soba %d je slobodna.\n", i+1 );
                    		strcat( DialogStrgEx, string );
						}
					}
					strcat( DialogStrgEx, "\n" );
					format( string, sizeof( string ), "Broj gostiju hotela: %d/10.\n\n", gcounter );
                    strcat( DialogStrgEx, string );

			        strcat( DialogStrgEx, "__________________________________________________________________");
			        SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

			    }
			    case 1: {
			        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
  					SPD( playerid, dialog_HOTELRENTP, DSI, D_NASLOV, "Molimo vas da unesete vasu cijenu najma sobe.", D_ODABERI, D_ODUSTANI );
			    }
			    case 2: {
			    	if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");

			        SPD( playerid, dialog_hotelCheck, DSI, D_NASLOV, "Unesite broj sobe da bi proverili gosta.\nBroj soba moze ici od 1 do 10.", D_ODABERI, D_ODUSTANI );
			    }
			    case 3: {
			        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");

					SPD( playerid, dialog_HOTELIZBACI, DSI, D_NASLOV, "Izaberite broj sobe iz koje zelite da izbacite gosta.\nBroj soba moze ici od 1 do 10.", D_ODABERI, D_ODUSTANI );
			    }
			    case 4: {
			        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
  					SPD( playerid, dialog_HPMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da podignete.", D_ODABERI, D_ODUSTANI );
			    }
			    case 5: {
			        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
  					SPD( playerid, dialog_HOMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da ostavite.", D_ODABERI, D_ODUSTANI );
			    }
			    case 6: {
			        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] && GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u/pored hotelu/a!");
                    SPD( playerid, dialog_HOTELLOCK, DSMSG, D_NASLOV, "Molimo vas da odaberete da li zelite da ?", "Otkljucate", "Zakljucate" );
				}
				case 7: {
				    if( GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza hotela!");
    				SPD( playerid, dialog_HOTELSELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vas hotel drzavi?", "Da", "Ne" );
				}
				case 8: {
				    if( GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza hotela!");
				    SPD( playerid, dialog_HOTELSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu hotel", "Ponudi", D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_STREET ) {
	    if( response ) {
			switch( listitem ) {
			    case 0: {
                    new string[ 128 ], sid = PlayerInfo[ playerid ][ xStreetID ];
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
                    strcat( DialogStrgEx, "__________________________________________________________________\n \n");
                    strcat( DialogStrgEx, "Ulica - Informacije\n \n" );
					format( string, sizeof( string ), "Ime ulice: [%s]\n \n", streetInfo[ sid ][ sName ]);
			        strcat( DialogStrgEx, string );
			        strcat( DialogStrgEx, "__________________________________________________________________");
			        SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

			    }
				case 1: {
        			//if( !allowChangeBusName[ playerid ] ) return SendErrorMessage( playerid, "Da bi promjenili ime firme morate dobiti dozvolu od Ownera." );
					SPD( playerid, dialog_SCNAME, DSI, D_NASLOV, "Molimo vas da unesete novo ime koje zelite.", D_ODABERI, D_ODUSTANI ); }
				case 2: {
				    if( GetNearestStreet( playerid ) != PlayerInfo[ playerid ][ xStreetID ] ) return SendErrorMessage( playerid, "Niste blizu ulice!");
    				SPD( playerid, dialog_STREETSELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vasu ulicu drzavi?", "Da", "Ne" );
				}
				case 3: {
				    if( GetNearestStreet( playerid ) != PlayerInfo[ playerid ][ xStreetID ] ) return SendErrorMessage( playerid, "Niste blizu ulice!");
				    SPD( playerid, dialog_STREETSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu ulice", "Ponudi", D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_hotelCheck ) {
	    if( !response ) return 1;
	    if( response ) {

	    	new hID = PlayerInfo[ playerid ][ xHotelID ], slot_id2, slot_id;
	    	if( sscanf( inputtext, "i", slot_id2 ) ) return SPD( playerid, dialog_hotelCheck, DSI, D_NASLOV, "Unesite broj sobe da bi proverili gosta.\nBroj soba moze ici od 1 do 10.", D_ODABERI, D_ODUSTANI );
	    	if( slot_id2 < 1 || slot_id2 > 10 ) return SPD( playerid, dialog_hotelCheck, DSI, D_NASLOV, "Unesite broj sobe da bi proverili gosta.\nBroj soba moze ici od 1 do 10.", D_ODABERI, D_ODUSTANI );

	    	slot_id = slot_id2-1;
	    	if( hotelInfo[ hID ][ hGuests ][ slot_id ] == 0 ) return SendClientMessageEx( playerid, BELA, "Recepcionarka: U sobi %d, nema nijednog gosta.", slot_id2 );

	    	new q[ 192 ];
			mysql_format( _dbConnector, q, sizeof(q), "SELECT IFNULL(users.p_name, 'Niko') AS `imegosta` FROM hotels LEFT JOIN users ON hotels.h_guest_%d = users.user_id WHERE hID = %d LIMIT 1",
					slot_id2,
					hotelInfo[ hID ][ hbaseID ] );
			mysql_pquery( _dbConnector, q, "CheckHotelGuest", "ii", playerid, slot_id );
	    }
	}
	else if( dialogid == dialog_HOTELIZBACI ) {
	    if( response ) {
	        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
			new hID = PlayerInfo[ playerid ][ xHotelID ], slot_id2, slot_id;
			if( slot_id2 < 1 || slot_id2 > 10 ) return SPD( playerid, dialog_hotelCheck, DSI, D_NASLOV, "Unesite broj sobe da bi proverili gosta.\nBroj soba moze ici od 1 do 10.", D_ODABERI, D_ODUSTANI );

	    	slot_id = slot_id2-1;
	    	if( hotelInfo[ hID ][ hGuests ][ slot_id ] == 0 ) return SCM( playerid, BELA, "Recepcionarka: U sobi %d, nema nijednog gosta." );

	    	hotelInfo[ hID ][ hGuests][ slot_id ] = 0;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `hotels` SET `h_guest_%d` = '%d' WHERE `hID` = '%d' LIMIT 1",
				slot_id2,
				hotelInfo[ hID ][ hGuests ][ slot_id ],
				hotelInfo[ hID ][ hbaseID ] );
			mysql_pquery( _dbConnector, sql_str, "", "" );

			SendClientMessageEx( playerid, BELA, "Recepcionarka: Uspjesno ste izbacili gosta iz sobe %d.", slot_id2 );
	    }
	}
	else if( dialogid == dialog_HOTELSELLTP ) {
	    if( !response ) return 1;
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas hotel dok ne izadjes iz minusa u banci." );
	        new id = PlayerInfo[ playerid ][ xHotelID ];
	        new idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
	        if( sscanf( inputtext, "ui", idigraca, cena ) ) return SPD( playerid, dialog_HOTELSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu hotel", "Ponudi", D_ODUSTANI );
            GetPlayerPos( idigraca, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) ) return SendErrorMessage( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return SendErrorMessage( playerid, "Cijena ne moze biti manja od 1$!");
			if( idigraca == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
			if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi prodati hotel!");
			if( PlayerInfo[ idigraca ][ xHotelID ] != -1 )return SendErrorMessage( playerid, "Igrac vec ima hotel!");
            if( PlayerInfo[ idigraca ][ xLevel ] < hotelInfo[ id ][ hLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Igrac mora biti level %d+ da bi ste mu prodali hotel.", hotelInfo[ id ][ hLevel ] );
			SendClientMessageEx( playerid, SVIJETLOPLAVA, "Ponudili ste igracu %s hotel po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCijena[ idigraca ] = cena;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegov hotel za %d", ImeIgraca( playerid ), cena );
			SPD( idigraca, dialog_ACCEPTHOTEL, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );
	    }
	}
	else if( dialogid == dialog_STREETSELLTP ) {
	    if( !response ) return 1;
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas ulicu dok ne izadjes iz minusa u banci." );
	        new id = PlayerInfo[ playerid ][ xStreetID ];
	        new idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
	        if( sscanf( inputtext, "ui", idigraca, cena ) ) return SPD( playerid, dialog_STREETSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu ulice", "Ponudi", D_ODUSTANI );
            GetPlayerPos( idigraca, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) ) return SendErrorMessage( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return SendErrorMessage( playerid, "Cijena ne moze biti manja od 1$!");
			if( idigraca == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
			if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi prodati ulicu!");
			if( PlayerInfo[ idigraca ][ xStreetID ] != -1 )return SendErrorMessage( playerid, "Igrac vec ima ulicu!");
            if( PlayerInfo[ idigraca ][ xLevel ] < streetInfo[ id ][ sLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Igrac mora biti level %d+ da bi ste mu prodali ulicu.", streetInfo[ id ][ sLevel ] );
			SendClientMessageEx( playerid, SVIJETLOPLAVA, "Ponudili ste igracu %s ulicu po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCijena[ idigraca ] = cena;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegovu ulicu za %d", ImeIgraca( playerid ), cena );
			SPD( idigraca, dialog_ACCEPTSTREET, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );
	    }
	}
	else if( dialogid == dialog_ACCEPTHOTEL ) {
	    if( response ) {
	        new id = PlayerInfo[ GlobalProdaja[ playerid ] ][ xHotelID ];
	        if( PlayerInfo[ playerid ][ xNovac ] < GlobalCijena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca.");

            new string1[ 128 ];
			format( string1, sizeof( string1 ), "Igrac %s je prodao hotel ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCijena[ playerid ] );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

			SendClientMessageEx( playerid, SVIJETLOPLAVA, "Uspjesno ste kupili hotel od igraca %s za $%d.", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCijena[ playerid ] );

			PlayerInfo[ GlobalProdaja[ playerid ] ][ xHotelID ] = -1;
			PlayerInfo[ GlobalProdaja[ playerid ] ][ xHotelIDSqlID ] = 0;

			PlayerInfo[ playerid ][ xHotelID ] = id;
			PlayerInfo[ playerid ][ xHotelIDSqlID ] = hotelInfo[ id ][ hbaseID ];

			hotelInfo[ id ][ hOwnerSQL ] = PlayerInfo[ playerid ][ xID ];
			strmid( hotelInfo[ id ][ hOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `hotels` SET `h_userid` = '%d' WHERE `hID` = '%d' LIMIT 1",
					hotelInfo[ id ][ hOwnerSQL ],
					hotelInfo[ id ][ hbaseID ] );
			mysql_pquery( _dbConnector, sql_str, "", "" );

			HotelRefresh( id );

			KGEyes_GivePlayerMoney( GlobalProdaja[ playerid ], GlobalCijena[ playerid ], false ), PlayerMoneyTrackSave( GlobalProdaja[ playerid ], MONEY_HANDS, GlobalCijena[ playerid ], "Prodaja hotela igracu" );
			KGEyes_GivePlayerMoney( playerid, -GlobalCijena[ playerid ], false ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -GlobalCijena[ playerid ], "Kupovina hotela od igraca" );

			sql_user_update_intandmoney( playerid, "hotel_id", PlayerInfo[ playerid ][ xHotelIDSqlID ] );
			sql_user_update_intandmoney( GlobalProdaja[ playerid ], "hotel_id", PlayerInfo[ GlobalProdaja[ playerid ] ][ xHotelIDSqlID ] );

			format( globalstring, sizeof( globalstring ), "Prodali ste hotel igracu %s za %d!", ImeIgraca( playerid ), GlobalCijena[ playerid ] );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			SCM( playerid, -1, "Kupili ste hotel!" );
			GlobalProdaja[ playerid ] = -1;
			GlobalCijena[ playerid ] = -1;
	    }
	    else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu hotelaa!", ImeIgraca( playerid ) );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			SCM( playerid, -1, "Odbili ste ponudu!");
			GlobalProdaja[ playerid ] = -1;
			GlobalCijena[ playerid ] = -1;
	    }
	}
	else if( dialogid == dialog_ACCEPTSTREET ) {
	    if( response ) {
	        new id = PlayerInfo[ GlobalProdaja[ playerid ] ][ xStreetID ];
	        if( PlayerInfo[ playerid ][ xNovac ] < GlobalCijena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca.");

            new string1[ 128 ];
			format( string1, sizeof( string1 ), "Igrac %s je prodao ulicu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCijena[ playerid ] );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

			SendClientMessageEx( playerid, SVIJETLOPLAVA, "Uspjesno ste kupili ulicu od igraca %s za %d$.", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCijena[ playerid ] );

			PlayerInfo[ GlobalProdaja[ playerid ] ][ xStreetID ] = -1;
			PlayerInfo[ GlobalProdaja[ playerid ] ][ xStreetIDSqlID ] = 0;

			PlayerInfo[ playerid ][ xStreetID ] = id;
			PlayerInfo[ playerid ][ xStreetIDSqlID ] = streetInfo[ id ][ sbaseID ];

			streetInfo[ id ][ sOwnerSQL ] = PlayerInfo[ playerid ][ xID ];
			strmid( streetInfo[ id ][ sOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `streets` SET `s_userid` = '%d' WHERE `sID` = '%d' LIMIT 1",
					streetInfo[ id ][ sOwnerSQL ],
					streetInfo[ id ][ sbaseID ] );
			mysql_pquery( _dbConnector, sql_str, "", "" );

			StreetRefresh( id );

			KGEyes_GivePlayerMoney( GlobalProdaja[ playerid ], GlobalCijena[ playerid ], false ), PlayerMoneyTrackSave( GlobalProdaja[ playerid ], MONEY_HANDS, GlobalCijena[ playerid ], "Prodaja ulice igracu" );
			KGEyes_GivePlayerMoney( playerid, -GlobalCijena[ playerid ], false ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -GlobalCijena[ playerid ], "Kupovina ulice od igraca" );

			sql_user_update_intandmoney( playerid, "street_id", PlayerInfo[ playerid ][ xStreetIDSqlID ] );
			sql_user_update_intandmoney( GlobalProdaja[ playerid ], "street_id", PlayerInfo[ GlobalProdaja[ playerid ] ][ xStreetIDSqlID ] );

			format( globalstring, sizeof( globalstring ), "Prodali ste ulicu igracu %s za %d!", ImeIgraca( playerid ), GlobalCijena[ playerid ] );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			SCM( playerid, -1, "Kupili ste ulicu!" );
			GlobalProdaja[ playerid ] = -1;
			GlobalCijena[ playerid ] = -1;
	    }
	    else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu ulice!", ImeIgraca( playerid ) );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			SCM( playerid, -1, "Odbili ste ponudu!");
			GlobalProdaja[ playerid ] = -1;
			GlobalCijena[ playerid ] = -1;
	    }
	}
	else if( dialogid == dialog_HOTELSELLDRZAVA ) {
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas hotel dok ne izadjes iz minusa u banci." );
	        new id = PlayerInfo[ playerid ][ xHotelID ];
   	 		if( PlayerInfo[ playerid ][ xHotelID ] == -1 ) return SendErrorMessage( playerid, "Ne posjedujes hotel!");
            if( GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Niste blizu ulaza hotela!");

            new string1[ 128 ];
			format( string1, sizeof( string1 ), "Igrac %s je prodao hotel ID %d na buy", ImeIgraca( playerid ), id );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

			hotelInfo[ id ][ hOwnerSQL ] = 0;
    		strmid( hotelInfo[ id ][ hOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );
    		hotelInfo[ id ][ hLocked ] = 0;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `hotels` SET `h_userid` = '%d', `h_locked` = '%d' WHERE `hID` = '%d' LIMIT 1",
						hotelInfo[ id ][ hOwnerSQL ],
						hotelInfo[ id ][ hLocked ],
						hotelInfo[ id ][ hbaseID ] );
			mysql_pquery( _dbConnector, sql_str, "", "" );

    		KGEyes_GivePlayerMoney( playerid, hotelInfo[ id ][ hPrice ]/2, false ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, hotelInfo[ id ][ hPrice ]/2, "Prodaja hotela na buy" );
    		PlayerInfo[ playerid ][ xHotelID ] = -1;
    		PlayerInfo[ playerid ][ xHotelIDSqlID ] = 0;

    		SendInfoMessage( playerid, "Hotel uspesno prodana!" );
    		HotelRefresh( id );

    		sql_user_update_intandmoney( playerid, "hotel_id", PlayerInfo[ playerid ][ xHotelIDSqlID ] );
		}
		if( !response ) {
		    SCM( playerid, -1, "Odustali ste od prodaje hotela drzavi." );
		}
	}
	else if( dialogid == dialog_STREETSELLDRZAVA ) {
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas ulicu dok ne izadjes iz minusa u banci." );
	        new id = PlayerInfo[ playerid ][ xStreetID ];
   	 		if( PlayerInfo[ playerid ][ xStreetID ] == -1 ) return SendErrorMessage( playerid, "Ne posjedujes ulicu!");
            if( GetNearestStreet( playerid ) != PlayerInfo[ playerid ][ xStreetID ] ) return SendErrorMessage( playerid, "Niste blizu ulice!");

            new string1[ 128 ];
			format( string1, sizeof( string1 ), "Igrac %s je prodao ulicu ID %d na buy", ImeIgraca( playerid ), id );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

			streetInfo[ id ][ sOwnerSQL ] = 0;
    		strmid( streetInfo[ id ][ sOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `streets` SET `s_userid` = '%d' WHERE `sID` = '%d' LIMIT 1",
						streetInfo[ id ][ sOwnerSQL ],
						streetInfo[ id ][ sbaseID ] );
			mysql_pquery( _dbConnector, sql_str, "", "" );

    		KGEyes_GivePlayerMoney( playerid, streetInfo[ id ][ sPrice ]/2, false ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, streetInfo[ id ][ sPrice ]/2, "Prodaja ulice na buy" );
    		PlayerInfo[ playerid ][ xStreetID ] = -1;
    		PlayerInfo[ playerid ][ xStreetIDSqlID ] = 0;

    		SendInfoMessage( playerid, "Ulica uspesno prodana!" );
    		StreetRefresh( id );

    		sql_user_update_intandmoney( playerid, "street_id", PlayerInfo[ playerid ][ xStreetIDSqlID ] );
		}
		if( !response ) {
		    SCM( playerid, -1, "Odustali ste od prodaje ulice drzavi." );
		}
	}
	else if( dialogid == dialog_HOTELLOCK ) {
	    new hid = PlayerInfo[ playerid ][ xHotelID ];
        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] && GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u/pored hotelu/a!");
  		if( response ) {
            hotelInfo[ hid ][ hLocked ] = 0;
            NotifyPlayer(playerid, "Hotel", "Otkljucan", 0);

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `hotels` SET `h_locked` = '%d' WHERE `hID` = '%d' LIMIT 1",
						hotelInfo[ hid ][ hLocked ],
						hotelInfo[ hid ][ hbaseID ] );
			mysql_pquery( _dbConnector, sql_str, "", "" );
		}
		else {
		    hotelInfo[ hid ][ hLocked ] = 1;
        	NotifyPlayer(playerid, "Hotel", "Zakljucan", 0);

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `hotels` SET `h_locked` = '%d' WHERE `hID` = '%d' LIMIT 1",
						hotelInfo[ hid ][ hLocked ],
						hotelInfo[ hid ][ hbaseID ] );
			mysql_pquery( _dbConnector, sql_str, "", "" );
		}
	}
	else if( dialogid == dialog_HOTELRENTP ) {
	    if( response ) {
	        if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
	        new iznos, hid = PlayerInfo[ playerid ][ xHotelID ];
	        if( sscanf( inputtext, "i", iznos ) ) return SPD( playerid, dialog_HOTELRENTP, DSI, D_NASLOV, "Molimo vas da unesete vasu cijenu najma sobe.", D_ODABERI, D_ODUSTANI );
			if( iznos < 1 || iznos > 1000 ) return SendErrorMessage( playerid, "Cijena najma ne moze biti ispod 1 i iznad 1000!");
			hotelInfo[ hid ][ hRoomPrice ] = iznos;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `hotels` SET `h_rprice` = '%d' WHERE `hID` = '%d' LIMIT 1",
						hotelInfo[ hid ][ hRoomPrice ],
						hotelInfo[ hid ][ hbaseID ] );
			mysql_pquery( _dbConnector, sql_str, "", "" );

			HotelRefresh( hid );
			SendClientMessageEx( playerid, PLAVA, "Uspjesno ste promjenili cijenu najma u %d$.", iznos );
		}
	}
	else if( dialogid == dialog_HOMONEY ) {
		if( !response ) return true;
		if( response ) {
		    if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
			new iznos, hid = PlayerInfo[ playerid ][ xHotelID ];
			if( sscanf(inputtext, "i", iznos ) ) return SPD( playerid, dialog_HOMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da ostavite.", D_ODABERI, D_ODUSTANI );
			if( iznos < 1 || iznos > 10000) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000!");
            if( iznos > PlayerInfo[ playerid  ][ xNovac ] ) return SendErrorMessage( playerid, "Nemate toliko novca kod sebe!");
			KGEyes_GivePlayerMoney( playerid, -iznos ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -iznos, "Ostavljanje u sef hotela" );
			hotelInfo[ hid ][ hMoney ] += iznos;
			SendInfoMessage( playerid, "Ostavili ste %d$ u kasu hotela!", iznos );

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `hotels` SET `hmoney` = '%d' WHERE `hID` = '%d' LIMIT 1",
						hotelInfo[ hid ][ hMoney ],
						hotelInfo[ hid ][ hbaseID ] );
			mysql_pquery( _dbConnector, sql_str, "", "" );
		}
	}
	else if( dialogid == dialog_HPMONEY ) {
		if( !response ) return true;
		if( response ) {
		    if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return SendErrorMessage( playerid, "Morate biti u hotelu!");
			new iznos, hid = PlayerInfo[ playerid ][ xHotelID ];
			if( sscanf( inputtext, "i", iznos ) ) return SPD( playerid, dialog_HPMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da podignete.", D_ODABERI, D_ODUSTANI );
			if( iznos < 1 || iznos > 10000 ) return SendErrorMessage( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000!");
            if( iznos > hotelInfo[ hid ][ hMoney ] ) return SendErrorMessage( playerid, "Nemate toliko novca u kasi!");
			KGEyes_GivePlayerMoney( playerid, iznos ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, iznos, "Uzimanje iz sefa hotela" ); hotelInfo[ hid ][ hMoney ] -= iznos;
			SendInfoMessage( playerid, "Podigli ste %d$ iz kase hotela!", iznos );

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `hotels` SET `hmoney` = '%d' WHERE `hID` = '%d' LIMIT 1",
						hotelInfo[ hid ][ hMoney ],
						hotelInfo[ hid ][ hbaseID ] );
			mysql_pquery( _dbConnector, sql_str, "", "" );
		}
	}
	//====================================================
	else if( dialogid == dialog_SVECMD ) {
	    if( response ) {
			switch( listitem ) {
			    case 0: {
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
                    /*strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/dodaci /n /gps /otmicahelp /nadji /obijanjevozila /proizvodnjadroge /napravioruzje /top10 /snaga /payday (/sk)racenice /tdb /zs /podesavanja\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/stats /ruksak /ubaciuruksak /skiniruksak /skate /editarmor /cijenazlata /prodajzlatoigracu /prodajchcoins /kockica\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/pravila /pomoc /admini /djs /promoteri /vipovi /narucipjesmu /muzika /replaymusic /radio /animacije\n" );
					strcat( DialogStrgEx, ""col_server"BANK | "col_white"/daj /plati /stanjeracuna /stavinaracun /podigninovac /posaljinovac \n" );
					strcat( DialogStrgEx, ""col_server"CHAT | "col_white"/b /me /attempt /do /c /s /w\n" );
					strcat( DialogStrgEx, ""col_server"MOBILE | "col_white"/zovi (/o)dgovori (/p)oklopi /sms /smsoglas /smslotto /brojmobitela /selfie /dron\n" );
					if( PlayerInfo[ playerid ][ xSkriptaRank ] == 4 ) {
					    strcat( DialogStrgEx, ""col_server"V. DJ | /makedj /alldjs /smenidja /pustimuziku /dlp /g \n" ); }
					if( PlayerInfo[ playerid ][ xSkriptaRank ] == 5 ) {
						strcat( DialogStrgEx, ""col_server"V. PROMOTERA | /makepromoter /smenipromotera /promoteri\n" ); }
					if( PlayerInfo[ playerid ][ xSkriptaRank ] == 6 ) {
						strcat( DialogStrgEx, ""col_server"JAILER | /jail /alkatraz /prison /unprison /unjail /unban /unbanip\n" ); }
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/bacigun /podignigun /bacinovac /podigninovac /bacizlazo /podignizlato /trazi /nokautiraj /naruciubojstvo /lideri  /organizacije /savezi /grafiti /napustiorg\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/dozvole /pokazidozvole (/v)ozilo /izbaciizvozila /upali /ugasi /pojas /svjetla /hauba /gepek /zakljucaj (ili desni klik misa) /kaciga /popravisivozilo /rukovanje\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/imovina /garaza /zamjena  /zamjenaimovina /zamjenavozila /zamjenafirmi /rentroom /unrentroom /dajkljuckapije /knock /smashdoor /zadnjaaktivnost /listatrazenih\n" );
				    strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/chgames /brojreakcija /izadjisadm /napustitdm /otkaz /crnotrziste /fishing /oglas /ozivi /accept /cancel /razbijlisice /baci /sat /osvjezi\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white" /promjenispawn /promjeniemail /promjenilozinku /novonaserveru /ruksakhelp /vozilohelp /citerinfo /statistika /discord /forum" );
     				SPD( playerid, dialog_HELP, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );*/

					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"Glavni Meni Otvarate sa Tipkom Y ili Z ili /ymenu ostale komande su sljedece:\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/gps /drogiranje /proizvodnjadroge /napravioruzje /obijanjevozila /otmicahelp /firmeinfo /poslovi /top10\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/podesavanja /tdb /zs /dodaci (/sk)racenice\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/lideri /vipovi /promoteri /djs\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/dozvole /pokazidozvole /licna /ruksak /ubaciuruksak /hotel /imovina /firma /vozilo /garaza /dajkljuckapije\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/radio /muzika /narucipjesmu /replaymusic\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/bacigun /podignigun /bacinovac /podigninovac /bacizlato /podignizlato /cijenazlata /prodajzlatoigracu /prodajchcoins /kockica\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/organizacije /savezi /nadji /nokautiraj /razbijlisice /snaga /naruciubojstvo /zadnjaaktivnost\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"(/v)ozilo /izbaciizvozila /upali /ugasi /pojas /svjetla /hauba /gepek /zakljucaj (ili desni klik misa) /kaciga /popravisivozilo \n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/plati /trade /daj /pravila /osvjezi /report /chpin /maknichpin\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/rukovanje /skate /animacije /editarmor /skiniruksak /sat /knock /smashdoor\n" );
					strcat( DialogStrgEx, ""col_server"CHAT | "col_white"/n /b /me /attempt /do /c /s /w\n" );
					strcat( DialogStrgEx, ""col_server"MOBILE | "col_white"/zovi (/o)dgovori (/p)oklopi /sms /oglas /smsoglas /smslotto /brojmobitela /selfie /dron\n" );
					strcat( DialogStrgEx, ""col_server"KOMANDE | "col_white"/promjenispawn /promjeniemail /promjenilozinku /novonaserveru /ruksakhelp /vozilohelp /citerinfo /statistika /discord /forum /chgames /brojreakcija\n" );
					if( PlayerInfo[ playerid ][ xSkriptaRank ] == 4 ) {
					    strcat( DialogStrgEx, ""col_server"V. DJ | /makedj /alldjs /smenidja /pustimuziku /dlp /g \n" ); }
					if( PlayerInfo[ playerid ][ xSkriptaRank ] == 5 ) {
						strcat( DialogStrgEx, ""col_server"V. PROMOTERA | /makepromoter /smenipromotera /promoteri\n" ); }
					if( PlayerInfo[ playerid ][ xSkriptaRank ] == 6 ) {
						strcat( DialogStrgEx, ""col_server"JAILER | /jail /alkatraz /prison /unprison /unjail /unban /unbanip\n" ); }
     				SPD( playerid, dialog_HELP, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
			    /*case 1: {
			    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				    if( PlayerInfo[ playerid ][ xGameSage ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {
				        strcat( DialogStrgEx, "{6ef83c}GameSage 1 | "col_white" /g /gduty /lp /pm /go /goto /gethere /gport /fv /fvi /slap /spawn /rtc /akt\n");
				        strcat( DialogStrgEx, "{6ef83c}GameSage 1 | "col_white" /playercc /ogamesages /eventhelp /eucitaj /evozaci /eugasi /odobrichgames\n");
				        strcat( DialogStrgEx, "{6ef83c}GameSage 1 | "col_white" /vs1po /vs2po /vsstart /prekinivs /box1po /box2po /boxstart /prekinibox\n");
				        strcat( DialogStrgEx, "{6ef83c}GameSage 1 | "col_white" /fudbalpokreni /fudbalpozovi /fudbalstop /unistiles /mute /unmute /jetpack\n");


				        if( PlayerInfo[ playerid ][ xGameSage ] >= 2 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {
				        	strcat( DialogStrgEx, "{6ef83c}GameSage 2 | "col_white" /spec /specoff\n");
						}
						if( PlayerInfo[ playerid ][ xGameSage ] >= 3 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {
				        	strcat( DialogStrgEx, "{6ef83c}GameSage 3 | "col_white" /kill /kick /gamesagerac");
						}
						SPD( playerid, dialog_HELP, DSMSG, "{6ef83c}GAMESAGE Komande", DialogStrgEx, "Ok", "" );
				    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				    } else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
				}*/
				case 1: {
					//if( PlayerInfo[ playerid ][ xAdmin ] >= 6 || PlayerInfo[ playerid ][ xVIPLevel ] >= 1 ) {
			        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );


			        strcat( DialogStrgEx, ""col_server"VIP 1\n");
			       	strcat( DialogStrgEx, ""col_white" /vipshop | /vteleport | /vgoto | /g |/vspawn | /rtc | /rtcveh | /vcount | /nitro \n\n");

			      //  if( PlayerInfo[ playerid ][ xVIPLevel ] >= 2 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {

		            strcat( DialogStrgEx, ""col_server"VIP 2\n");
		        	strcat( DialogStrgEx, ""col_white"/mojevozilo | /tunirajvozilo | /playercc "col_server"|| "col_white"Dupli respekt na paydayu"col_server" ||\n\n\n");
//			        }
//			        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 3 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {

		            strcat( DialogStrgEx, ""col_server"VIP 3"col_server"\n");
		        	strcat( DialogStrgEx, ""col_white"/flip /mark | /gotomark | /mojakuca"col_server" || "col_white"100HP i 100ARMOR na SPAWNU"col_server" || \n\n\n");

					strcat( DialogStrgEx, ""col_server">"col_white" Duzina trajanja VIP Paketa iznosi 30 dana "col_server"<\n");
			        strcat( DialogStrgEx, ""col_server">"col_white" Odredjeni VIP Level sadrzi komande za svoj VIP Level + komande manjeg levela "col_server"<\n");
//					}
//			        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 4 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {

		            /*strcat( DialogStrgEx, ""col_server"Vip Level 4 - Platinum VIP\n\n");
		        	strcat( DialogStrgEx, ""col_white"/vport(Zlatara, Spawn, Organizacija u kojoj ste) | /nitro | Dupli respekt na paydayu\n\n");
	//				}
//			        if( PlayerInfo[ playerid ][ xVIPLevel ] >= 5 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {

		            strcat( DialogStrgEx, ""col_server"Vip Level 5 - Diamond Vip\n\n");
		        	strcat( DialogStrgEx, ""col_white"/vport(Svi Autosaloni) | /getmycar\n");
		        	strcat( DialogStrgEx, ""col_white"100HP i 100ARMOR na SPAWNU\n\n"); // - /viphidenumber
//					}
//					if( PlayerInfo[ playerid ][ xVIPLevel ] >= 6 || PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {

		            strcat( DialogStrgEx, ""col_server"Vip Level 6 - Ultra Vip\n\n");
		        	strcat( DialogStrgEx, ""col_white"/mark | /gotomark | /nitro | 0.5% steceni interes | Cooldown izmedju portova = 45 sec\n");
		        	strcat( DialogStrgEx, ""col_white"100HP i 100ARMOR na SPAWNU | Narandzasta boja imena | /gotomyhouse"); // - gotoproperty*/
//					}

					SPD( playerid, dialog_HELP, DSMSG, ""col_server"VIP KOMANDE", DialogStrgEx, "Ok", "" );
			    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    	}
				//	else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu." );
			//	}
				case 2: {
					if( PlayerInfo[ playerid ][ xPromoter ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
			        SCM( playerid, -1, "{FF69B4}| PROMOTER KOMANDE | "col_white"/g /pteleport /pspawn /fixveh");
			        if( PlayerInfo[ playerid ][ xPromoter ] >= 2 ) SCM( playerid, -1, "{ffa07a}YOUTUBER | "col_white"0.3 steceni interes.");
			    	} else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
				}
				case 3:{

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

					if( PlayerInfo[ playerid ][ xPosao ] == 0 ){
						strcat( DialogStrgEx, ""col_server" POSAO | "col_white" Vi niste zaposleni" ); }
					if( PlayerInfo[ playerid ][ xPosao ] == POSAO_BANKAR ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/posao /uniforma /prekiniposao \n" ); }
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_GRADJEVINAR ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/posao /uniforma /prekiniposao \n" ); }
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_LOVAC ) {
						strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/posao /prekiniposao\n" ); }
				    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_DSLJUNKA ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/uniforma /prevozsljunka /prekiniposao\n" ); }
				    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_DDRVECA ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/posao /uniforma \n" ); }
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_ADVOKAT ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/appeal\n" ); }
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_KOMUNALAC ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/posao /uniforma /prekiniposao /gpsoff( za restartovanje markera) \n" ); }
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_ZLATAR ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/posao /uniforma /prekiniposao\n" ); }
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_PIZZA ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/pizza \n" ); }
				    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_FARMER ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/uzmisjemenke /uniforma /prekiniposao /lokacija\n" ); } // edit /uzmikantu /muzikrave
				    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_BUSVOZAC ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/posao /uniforma /prekiniposao \n" ); }
				    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_RUDAR ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/posao /uniforma /prekiniposao \n" ); }
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_TELOHRANITELJ ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/guard\n" ); }
				    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_PEPSI ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/uzmikutiju /uniforma /prekiniposao Tipka Y i N\n" ); }
				    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_KOSAC ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/posao /uniforma /prekiniposao\n" ); }
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_PGORIVA ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/prevozgoriva /uniforma /prekiniposao\n" ); }
				    /*else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_DILERORUZJA ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white" /napravioruzje /svercmatsa /prekinisverc /ubaciukombi /izvadikutiju\n" ); }*/
				    /*else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_SVERCERDROGE ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/svercdroge /prekinisverc /ubaciukombi /izvadikutiju /proizvodnjadroge\n" ); }*/
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_WALMDOST ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/posao /uzmikutiju /uniforma /prekiniposao Tipka Y i N\n" ); }
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_VATROGASAC ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/posao /uniforma /prekiniposao\n" ); }
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_VLAKOVODJA ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/posao /uniforma /prekiniposao \n" ); }
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_GROBAR ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/pokupiles /uniforma\n" ); }
	    			else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_ELEKTRICAR ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/electric /uniforma\n" ); }
                    else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_MEHANICAR ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/uniforma /mehduty /mehprevoz /refill /fixengine /zaradi /zakaci\n" ); }
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_DRVOSJECA ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/uniforma /posao\n" ); }
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_FAKECOP ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/fakeuniforma /faketicket /fm\n" ); }
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_FAKECARDEALER ) {
					    strcat( DialogStrgEx, ""col_server"POSAO | "col_white"/fakecarsell\n" ); }
				    SPD( playerid, dialog_HELP, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
			    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

				}
				case 4: {

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
					if( GetFactionType( playerid ) == ORG_TIP_PD ) {
					    strcat( DialogStrgEx, ""col_server"ORGA | "col_white"/policehelp /organizacija /prisonhelp /podesavanja /orgstats\n" ); }
				    else if( GetFactionType( playerid ) == ORG_TIP_MD ) {
				        strcat( DialogStrgEx, ""col_server"ORGA | "col_white"/organizacija /f /d /mduty /medicine /recover /muniform /dajinekciju /nadji\n\
							"col_server"ORGA | "col_white"/podesavanja /orgprevoz /prevozstop /mdmisija /prekinimdmisiju /plasticnaoperacija /tretman /spoloperacija\n" ); }
				    else if( GetFactionType( playerid ) == ORG_TIP_CNN ) {
				        strcat( DialogStrgEx, ""col_server"ORGA | "col_white"/organizacija /f /vesti /live /newsstats /podesavanja\n" ); }
				    else if( GetFactionType( playerid ) == ORG_TIP_PS ) {
				        strcat( DialogStrgEx, ""col_server"ORGA | "col_white"/organizacija /f /zakaci /parkiraj /orgprevoz /prevozstop\n" ); }
				    else if( GetFactionType( playerid ) == ORG_TIP_ELEK ) {
				        strcat( DialogStrgEx, ""col_server"ORGA | "col_white"/organizacija /f /electric /clanovi /podesavanja\n" ); }
				    else if( GetFactionType( playerid ) == ORG_TIP_TAXI ) {
				        strcat( DialogStrgEx, ""col_server"ORGA | "col_white"/organizacija /f /taxi /clanovi /podesavanja /orgprevoz /prevozstop /taximisija /taxiputnik\n" ); }
				    else if( GetFactionType( playerid ) == ORG_TIP_MAFIJA ) {
				        strcat( DialogStrgEx, ""col_server"ORGA | "col_white"/organizacija /f /clanovi /podesavanja /orgstats /grafiti /otmicahelp /nadji /obijanjevozila /proizvodnjadroge /napustiorg\n\
						"col_server"ORGA | "col_white"/izvadipaket /napravioruzje /orgmisija /prekinimisiju /hakirajhangar /zauzmiteritoriju /pljackajbanku /pljackajzlataru\n"); }// /zauzmifirmu\n" ); }
				    else if( GetFactionType( playerid ) == ORG_TIP_BANDA ) {
				        strcat( DialogStrgEx, ""col_server"ORGA | "col_white"/organizacija /f /clanovi /podesavanja /orgstats /grafiti /otmicahelp /nadji /obijanjevozila /proizvodnjadroge /napustiorg\n\
						"col_server"ORGA | "col_white"/izvadipaket /napravioruzje /orgmisija /prekinimisiju /hakirajhangar /zauzmiteritoriju /pljackajbanku /pljackajzlataru\n"); }
				    else if( GetFactionType( playerid ) == ORG_TIP_SR ) {
				        strcat( DialogStrgEx, ""col_server"ORGA | "col_white"/organizacija /f /clanovi /podesavanja /orgstats /urmisija /utrkaucitaj /utrkastart /utrkaunload\n" ); }
					else {
					    strcat( DialogStrgEx, ""col_server"ORGA | "col_white"/organizacija /f /clanovi /podesavanja /orgstats /grafiti /otmicahelp /nadji /obijanjevozila /proizvodnjadroge /napustiorg\n\
						"col_server"ORGA | "col_white"/izvadipaket /napravioruzje /orgmisija /prekinimisiju /hakirajhangar /zauzmiteritoriju /pljackajbanku /pljackajzlataru\n"); }
					if( PlayerInfo[ playerid ][ xLider ] != 0 ) {
					    strcat( DialogStrgEx, ""col_server"LEADER | "col_white"/lider /wardozvola /oduzmiwardozvolu /zadnjaaktivnost /g /orgvhelp /orgvpark\n\
						"col_server"LEADER | "col_white"/orgvslotbuy /orgvlist /narucivozilo /gangstats /offgangstats /zauzmiteritoriju /pljackajbanku /pljackajzlataru\n" ); }
					SPD( playerid, dialog_HELP, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
			    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 5: {
					if( PlayerInfo[ playerid ][ xDJ ] >= 1 || PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
			        SCM( playerid, -1, "{ffa07a}DJ | "col_white"/g /pustimuziku /dlp");
			    	} else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
				}
				case 6: {
			       	new DialogStrgEx1[ 3400 ];
				    if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) {
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

				        strcat( DialogStrgEx1, ""col_red"_______________________________________"col_white"_______________________________________\n");
				        strcat( DialogStrgEx1, ""col_red"A|1| "col_white" /a /ao /aduty /aport /rlp /dlp /check /checkstats /aktivnostigraca /akt /invigraca /pweapons /disarm /aclearwl /port\n");
				        strcat( DialogStrgEx1, ""col_red"A|1| "col_white" /spec /specoff /kill /spawn /kick /freeze /unfreeze /mute /unmute /timeban /ban /nickban /utisani /zatvoreni /provjerarada\n");
				        strcat( DialogStrgEx1, ""col_red"A|1| "col_white" /akazni /warn /vipwarn /alkatraz /offkazniigraca /unjail /citer /maknicitera /proverikaznu /desetkazni /offdesetkazni /androidigraci\n");
				        strcat( DialogStrgEx1, ""col_red"A|1| "col_white" /novajlije /oclanovi /citeri /afklist /maskirani /proverimasku /acporuke /dmporuke /setint /setvw /getvw /postavkeregistracije\n");
				        strcat( DialogStrgEx1, ""col_red"A|1| "col_white" /entercar /getcar /gotocar /aupali /apark /rac /rtcradius /rtcveh /napunivozila /napuniorgvozila /pumpa /adminakt /liderakt\n");
				        strcat( DialogStrgEx1, ""col_red"A|1| "col_white" /jetpack /tunecar /nitro /blokade /skloniblokade /makniblokade /maknisveblokade /ukloniradio /unistiles /adminupdate /teritorije\n");
			         	strcat( DialogStrgEx1, ""col_red"A|1| "col_white" /pubgpokreni /pubgzaustavi /pubgizbaci /pubgprezivjeli /fudbalpokreni /fudbalpozovi /fudbalstop /box1po /box2po /boxstart /prekinibox\n");
                        strcat( DialogStrgEx1, ""col_red"A|1| "col_white" /vs1po /vs2po /vsstart /prekinivs /odobrichgames /eucitaj /evozaci /eugasi /ekreiraj /eunisti /count /cc /warproveri /warzaustavi\n");

						if( PlayerInfo[ playerid ][ xAdmin ] >= 2 ) {

				            strcat( DialogStrgEx1, ""col_red"_______________________________________"col_white"_______________________________________\n");
				            strcat( DialogStrgEx1, ""col_red"A|2| "col_white" /veh /freecamera /mark /gotomark /richlist /offrichlist\n");
						}
						if( PlayerInfo[ playerid ][ xAdmin ] >= 3 ) {

				            strcat( DialogStrgEx1, ""col_red"_______________________________________"col_white"_______________________________________\n");
				            strcat( DialogStrgEx1, ""col_red"A|3| "col_white" /healallradius /armorallradius /sethp /setarmor /revive /razvedi\n");
						}
						if( PlayerInfo[ playerid ][ xAdmin ] >= 4 ) {

				            strcat( DialogStrgEx1, ""col_red"_______________________________________"col_white"_______________________________________\n");
				            strcat( DialogStrgEx1, ""col_red"A|4| "col_white" /fchat /orginfo /spisakclanova /pustimuziku /resetrobigracu\n");
						}
				        if( PlayerInfo[ playerid ][ xAdmin ] >= 5 ) {

				            strcat( DialogStrgEx1, ""col_red"_______________________________________"col_white"_______________________________________\n");
				            strcat( DialogStrgEx1, ""col_red"A|1337| "col_white" /makeleader /smenilidera /ainvite /auninvite /offauninvite /asavez /prekinisavez /offciter\n");
							strcat( DialogStrgEx1, ""col_red"A|1337| "col_white" /agivelicense /givegun /setskin /askiniorgkaznu /oport /gotocp /vinfo\n");
						}
						if( PlayerInfo[ playerid ][ xAdmin ] >= 6 ) {

						    strcat( DialogStrgEx1, ""col_red"_______________________________________"col_white"_______________________________________\n");
						    strcat( DialogStrgEx1, ""col_red"HEAD |"col_white" /1 /provjerarada /spectatori /makeadmin /smeniadmina /smenipromotera /smenidja /promjeniadminkod /setstat /promjenipol\n");
							strcat( DialogStrgEx1, ""col_red"HEAD |"col_white" /jail /prison /unjail /unprison /offban /offmute /offprison /fine /offwarn /makniwarn /maknivipwarn /asetorghours /vozilaigraca\n");
				            strcat( DialogStrgEx1, ""col_red"HEAD |"col_white" /getip /multiacc /multiips /proverimovinu /proverifirmu /pomerilokaciju /dodajfakture /dopuniresurse /invslotocisti /tod /setjob\n");
						}
						if( PlayerInfo[ playerid ][ xAdmin ] >= 7 ) {
						    strcat( DialogStrgEx1, ""col_red"_______________________________________"col_white"_______________________________________\n");
          					strcat( DialogStrgEx1, ""col_red"VODITELJ | "col_white" /server /edit /orgsef /banip /unbanip /offunprison /aktivirajpoklone /novalozinkaigraca /izbrisinalog /xmove /xgoto /sendmail\n");
       						strcat( DialogStrgEx1, ""col_red"VODITELJ | "col_white" /napravivozilo /izbrisivozilo /listavozila /getcarbysql /vozilaigraca /vozilaoffigraca /izbrisiradar /psremove /vrijeme /resetrekord\n");
       						strcat( DialogStrgEx1, ""col_red"VODITELJ | "col_white" /healall /unfreezeall /unprisonall /unmuteall /allvips /daily /resetsalon /resetactora /spawnobavijest /orgobavijest /emailigraca\n");
							strcat( DialogStrgEx1, ""col_red"VODITELJ | "col_white" /asetorgrank\n");
						}
						else if( PlayerInfo[ playerid ][ xAdmin ] >= 8 ) {
						    strcat( DialogStrgEx1, ""col_red"\n_______________________________________"col_white"_______________________________________\n");
                            strcat( DialogStrgEx1, ""col_red"A8 | "col_white" /dajsvima /gethereall /muteall /freezeall /kickall /streamer /mafiapaket /startmisija ");
							strcat( DialogStrgEx1, ""col_red"A8 | "col_white" /trenutnekordinate /aktivirajrandomevente /vozilazaaukciju /listen");
						}

						SPD( playerid, dialog_HELP, DSMSG, ""col_red"", DialogStrgEx1, "Ok", "" );
					} else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
				}
				case 7: {
					SPD( playerid, dialog_SVECMD_DODATAK, DSL, D_NASLOV, "Beta Testing Tim Komande\nPromoter Tim Komande\nMaping Tim Komande\nFan Art Tim Komande\nInterview Tim Komande", D_ODABERI, D_ODUSTANI );
				}
				case 8: {
					new DialogStrgEx1[ 1000 ];
				    if( PlayerInfo[ playerid ][ xSkriptaRank ] == 10 ) {
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

				        strcat( DialogStrgEx1, ""col_betatest"_______________________________________"col_white"_______________________________________\n");
				        strcat( DialogStrgEx1, ""col_white"/aport /mark /gotomark /setjob /aclearwl /spawn /setint /setvw /getvw /entercar /getcar /aupali /rtcveh /jetpack /veh\n");
				        strcat( DialogStrgEx1, ""col_white"/sethp /setarmor /revive /makeleader /ainvite /auninvite /asetorgrank /agivelicense /givegun /setskin /askiniorgkaznu\n");
						strcat( DialogStrgEx1, ""col_white"/gotocp /vinfo /asetorghours /xmove /xgoto /setstat /fixveh /goto /gethere /eucitaj /eugasi /eugasi2\n");
						strcat( DialogStrgEx1, ""col_white"Omoguceno portanje preko ESC mape klikom na mapu.\n");
						strcat( DialogStrgEx1, ""col_white"_______________________________________"col_betatest"_______________________________________");

						SPD( playerid, dialog_HELP, DSMSG, ""col_red"", DialogStrgEx1, "Ok", "" );
					} else SendErrorMessage( playerid, "Niste ovlasteni za koristenje ove komande!");
				}
			}
		}
	}
	//====================================================
	else if( dialogid == dialog_SVECMD_DODATAK ) {
	    if( response ) {
			switch( listitem ) {
			    case 0..5: {
			        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			       	strcat( DialogStrgEx, ""col_white"/vipshop | /vteleport | /vgoto | /g |/vspawn | /rtc | /rtcveh | /vcount | /nitro \n\n");
		        	strcat( DialogStrgEx, ""col_white"/mojevozilo | /tunirajvozilo | /playercc "col_server"|| "col_white"Dupli respekt na paydayu"col_server" ||\n\n");
		        	strcat( DialogStrgEx, ""col_white"/flip /mark | /gotomark | /mojakuca"col_server" || "col_white"100HP i 100ARMOR na SPAWNU"col_server" || \n\n");
					SPD( playerid, dialog_HELP, DSMSG, ""col_server"CH TIM KOMANDE", DialogStrgEx, "Ok", "" );
			    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				}
			}
		}
	}
	//====================================================
	else if( dialogid == dialog_CHGAMES ) {
	    if( response ) {
			switch( listitem ) {
				case 0: {
					SetPlayerPos( playerid, -234.5008,2616.6687,66.0063 ); // Koordinate VS
					SetPlayerInterior( playerid, 0 ); // Ovo promijeni ako se igrac porta u neki Interior
					SetPlayerVirtualWorld( playerid, 0 ); // Ovo promijeni ako se igracu mijenja VW
					SendInfoMessage( playerid, "Teleportovali ste se do VS Turnira.");
				}
				case 1: {
					SetPlayerPos( playerid, -229.8889,2587.0713,65.2363  ); // Koordinate Kladionica
					SetPlayerInterior( playerid, 0 ); // Ovo promijeni ako se igrac porta u neki Interior
					SetPlayerVirtualWorld( playerid, 0 ); // Ovo promijeni ako se igracu mijenja VW
					SendInfoMessage( playerid, "Teleportovali ste se do VS Kladionice.");
				}
				case 2:{
					SetPlayerPos( playerid, -1482.8838,9.7582,14.1484 ); // Koordinate Street Race
					SetPlayerInterior( playerid, 0 ); // Ovo promijeni ako se igrac porta u neki Interior
					SetPlayerVirtualWorld( playerid, 0 ); // Ovo promijeni ako se igracu mijenja VW
					SendInfoMessage( playerid, "Teleportovali ste se do Street Race eventa.");
				}
				case 3: {
					SetPlayerPos( playerid, -1428.0702,508.5615,3.0391 ); // Koordinate Hide And Seek
					SetPlayerInterior( playerid, 0 ); // Ovo promijeni ako se igrac porta u neki Interior
					SetPlayerVirtualWorld( playerid, 0 ); // Ovo promijeni ako se igracu mijenja VW
					SendInfoMessage( playerid, "Teleportovali ste se do Hide and Seek eventa.");
				}
				case 4: {
					SetPlayerPos( playerid, 2221.6934,-1150.8033,1025.7969 ); // Koordinate Hotel Strave
					SetPlayerInterior( playerid, 15 ); // Ovo promijeni ako se igrac porta u neki Interior
					SetPlayerVirtualWorld( playerid, 3 ); // Ovo promijeni ako se igracu mijenja VW
					SendInfoMessage( playerid, "Teleportovali ste se do Hotela strave.");
				}
				case 5: {
					SetPlayerPos( playerid, 14.9353,1725.5591,22.6347 ); // Koordinate Survivor
					SetPlayerInterior( playerid, 0 ); // Ovo promijeni ako se igrac porta u neki Interior
					SetPlayerVirtualWorld( playerid, 0 ); // Ovo promijeni ako se igracu mijenja VW
					SendInfoMessage( playerid, "Teleportovali ste se do Survivor eventa.");
				}
				case 6: {
					SetPlayerPos( playerid, 2737.5310,-1760.3046,44.1423 ); // Koordinate Monster Derby
					SetPlayerInterior( playerid, 0 ); // Ovo promijeni ako se igrac porta u neki Interior
					SetPlayerVirtualWorld( playerid, 0 ); // Ovo promijeni ako se igracu mijenja VW
					SendInfoMessage( playerid, "Teleportovali ste se do Monster derby eventa.");
				}
				case 7: {
					SetPlayerPos( playerid, -2816.8120,-1523.6259,140.8438 ); // Koordinate Kuca strave
					SetPlayerInterior( playerid, 0 ); // Ovo promijeni ako se igrac porta u neki Interior
					SetPlayerVirtualWorld( playerid, 0 ); // Ovo promijeni ako se igracu mijenja VW
					SendInfoMessage( playerid, "Teleportovali ste se do Kuce strave.");
				}
			}
			if(PlayerInfo[ playerid ][ xWanted ] > 0){
				PlayerInfo[ playerid ][ xWanted ] = 0;
				KGEyes_SetPlayerWantedLevel( playerid, PlayerInfo[ playerid ][ xWanted ] );
				strmid( ZlocinInfo[ playerid ][zPrijavio], "Nema", 0, strlen("Nema"), 255);
				strmid( ZlocinInfo[ playerid ][zPocinio], "Nema", 0, strlen("Nema"), 255);
				strmid( ZlocinInfo[ playerid ][zZlocin], "Nema", 0, strlen("Nema"), 255);
				sql_user_update_integer( playerid, "wanted_level", PlayerInfo[ playerid ][ xWanted ] );
				SendInfoMessage( playerid, "Wanted level vam je automatski ociscen.");
			}
			ResetAllWeapons( playerid );
		}
	}
	else if(dialogid == dialog_PolicijaOdabir) {
		if( !response )
		{
			PoliceDuty[ playerid ] = true;
			SetPlayerColor( playerid, 0x2641FEAA );
			format( globalstring, sizeof( globalstring ), "* %s %s je sada na duznosti.", getOrgRank( playerid, PlayerInfo[ playerid ][ xClan ] ), ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );

			antiCheatCS[ playerid ][ WeaponDetect ] = 3;
			RemovePlayerWeapon( playerid, 24 );
			GiveWeaponToPlayer( playerid, 23, 100 );
			ImaTazer[ playerid ] = true;
			BrojLisica[ playerid ] = 10;
			SendInfoMessage( playerid, "Dobili ste tazer sa 100 metaka i 10 komada lisica.");
  		}
		if( response )
		{
			PoliceDuty[ playerid ] = true;
			SetPlayerColor( playerid, 0x2641FEAA );
			format( globalstring, sizeof( globalstring ), "* %s %s je sada na duznosti.", getOrgRank( playerid, PlayerInfo[ playerid ][ xClan ] ), ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );

			antiCheatCS[ playerid ][ WeaponDetect ] = 3;
			RemovePlayerWeapon( playerid, 24 );
			GiveWeaponToPlayer( playerid, 23, 100 );
			ImaTazer[ playerid ] = true;
			BrojLisica[ playerid ] = 10;
			SendInfoMessage( playerid, "Dobili ste tazer sa 100 metaka i 10 komada lisica.");
		}
	}
	//=====================[ Crozon ]==========================
	else if(dialogid == dialog_CrozonKolicina) {
		if( !response )
		{
			CrozonInfo[playerid][Stavka][CrozonInfo[playerid][Odabrao]] = -1;
			CrozonInfo[playerid][Odabrao] = -1;
			ShowModelSelectionMenu( playerid, Crozonlist, "- Dron kupovina -");
			return 1;
		}
		if( response )
		{
			new kolicina;
		    if(sscanf( inputtext, "i",kolicina)) SPD(playerid, dialog_CrozonKolicina, DSI, ""col_lightblue"[ * Dron kupovina * ]", "Unesite koliko proizvoda zelite kupiti\n( Maksimalno 5 ).", D_ODABERI, D_ODUSTANI );
	        if(kolicina < 0 || kolicina > 5)
			{
				SCM(playerid, -1, ""col_lightblue"[ * Dron kupovina * ] "col_white"Kolicina ne moze biti manja od 0 ili veca od 5.");
				SPD(playerid, dialog_CrozonKolicina, DSI, ""col_lightblue"[ * Dron kupovina * ]", "Unesite koliko proizvoda zelite kupiti\n( Maksimalno 5 ).", D_ODABERI, D_ODUSTANI );
				return 1;
			}

			CrozonInfo[playerid][Kolicina][CrozonInfo[playerid][Odabrao]] = kolicina;
			SCM(playerid, -1, ""col_lightblue"[ * Dron kupovina * ] "col_white"Proizvod je dodan u vasu kosaricu.");

			if(CrozonInfo[playerid][Odabrao] == 4)
				SPD(playerid, dialog_CrozonNastavi1, DSMSG, ""col_lightblue"[ * Dron kupovina * ]", "Napunili ste kosaricu, zavrsite kupnju?", "Zavrsi", "");
			else
				SPD(playerid, dialog_CrozonNastavi, DSMSG, ""col_lightblue"[ * Dron kupovina * ]", "Zelite li nastaviti kupnju ili zavrsiti?", "Zavrsi", "Nastavi");

			CrozonInfo[playerid][Odabrao] = -1;
		}
	}
	else if(dialogid == dialog_CrozonNastavi) {
		if( !response )
		{
			ShowModelSelectionMenu( playerid, Crozonlist, "- Dron kupovina -");
			return 1;
		}
		if( response )
		{
			SPD(playerid, dialog_CrozonAdresa, DSI, ""col_lightblue"[ * Dron kupovina * ]", "Vasa je narudzba spremna\nUpisite adresu dostave (id imovine)", "Dalje", "Odustani" );
		}
	}
	else if(dialogid == dialog_CrozonNastavi1) {
		if( !response )
		{
			for(new i = 0; i < 5; i++)
			{
				CrozonInfo[playerid][Stavka][i] = -1;
				CrozonInfo[playerid][Kolicina][i] = 0;
			}
			CrozonInfo[playerid][Odabrao] = -1;
			return 1;
		}
		if( response )
		{
			SPD(playerid, dialog_CrozonAdresa, DSI, ""col_lightblue"[ * Dron kupovina * ]", "Vasa je narudzba spremna\nUpisite adresu dostave (id imovine)", "Dalje", "Odustani" );
		}
	}
	else if(dialogid == dialog_CrozonAdresa) {
		if( !response )
		{
			for(new i = 0; i < 5; i++)
			{
				CrozonInfo[playerid][Stavka][i] = -1;
				CrozonInfo[playerid][Kolicina][i] = 0;
			}
			CrozonInfo[playerid][Odabrao] = -1;
			return 1;
		}
		if( response )
		{
			new adresaid;
		    if(sscanf( inputtext, "i",adresaid)) SPD(playerid, dialog_CrozonAdresa, DSI, ""col_lightblue"[ * Dron kupovina * ]", "Vasa je narudzba spremna\nUpisite adresu dostave (id imovine)", "Dalje", "Odustani" );
			CrozonInfo[playerid][Adresa] = adresaid;
			new ukupno = 0;
			for(new i = 0; i < 5; i++){
				ukupno += GetProizvodCijenaInt(playerid, i, CrozonInfo[playerid][Stavka][i]);
			}
			new stringic[512];
			format(stringic, sizeof(stringic), ""col_lightblue"\t--- * Dron * Racun ---\nStavka 1: "col_white"%s "col_lightblue"Kolicina: "col_white"%d (%s$)\n"col_lightblue"Stavka 2: "col_white"%s "col_lightblue"Kolicina: "col_white"%d (%s$)\n"col_lightblue"Stavka 3: "col_white"%s "col_lightblue"Kolicina: "col_white"%d (%s$)\n"col_lightblue"Stavka 4: "col_white"%s "col_lightblue"Kolicina: "col_white"%d (%s$)\n"col_lightblue"Stavka 5: "col_white"%s "col_lightblue"Kolicina: "col_white"%d (%s$)\n\n"col_lightblue"Ukupno: "col_white"%d$\n\n"col_lightblue"Adresa: "col_white"%d",
			GetProizvodIme(CrozonInfo[playerid][Stavka][0]), CrozonInfo[playerid][Kolicina][0], GetProizvodCijena(playerid, 0 ,CrozonInfo[playerid][Stavka][0]), GetProizvodIme(CrozonInfo[playerid][Stavka][1]), CrozonInfo[playerid][Kolicina][1], GetProizvodCijena(playerid, 1, CrozonInfo[playerid][Stavka][1]), GetProizvodIme(CrozonInfo[playerid][Stavka][2]), CrozonInfo[playerid][Kolicina][2], GetProizvodCijena(playerid, 2, CrozonInfo[playerid][Stavka][2]),
			GetProizvodIme(CrozonInfo[playerid][Stavka][3]), CrozonInfo[playerid][Kolicina][3], GetProizvodCijena(playerid, 3, CrozonInfo[playerid][Stavka][3]), GetProizvodIme(CrozonInfo[playerid][Stavka][4]), CrozonInfo[playerid][Kolicina][4], GetProizvodCijena(playerid, 4, CrozonInfo[playerid][Stavka][4]), ukupno, CrozonInfo[playerid][Adresa]);
			SPD(playerid, dialog_CrozonKupovina, DSMSG, ""col_lightblue"[ * Dron kupovina * ]", stringic , "Dalje", "Odustani");
		}
	}
	else if(dialogid == dialog_CrozonKupovina) {
		if( !response )
		{
			for(new i = 0; i < 5; i++)
			{
				CrozonInfo[playerid][Stavka][i] = -1;
				CrozonInfo[playerid][Kolicina][i] = 0;
			}
			CrozonInfo[playerid][Odabrao] = -1;
			CrozonInfo[playerid][Adresa] = -1;
			return 1;
		}
		if( response )
		{
			new zaplatiti = 0;
			for(new i = 0; i < 5; i++)
				zaplatiti += GetProizvodCijenaInt(playerid, i ,CrozonInfo[playerid][Stavka][i]);

			if(PlayerInfo[playerid][ xBRacun ] < zaplatiti)
			{
				for(new i = 0; i < 5; i++)
				{
					CrozonInfo[playerid][Stavka][i] = -1;
					CrozonInfo[playerid][Kolicina][i] = 0;
				}
				CrozonInfo[playerid][Odabrao] = -1;
				CrozonInfo[playerid][Adresa] = -1;
				SendErrorMessage(playerid, "Na bankovnom racunu nemate dovoljno novca da bi platili narudzbu!");
			}
			else
			{
				PlayerInfo[ playerid ][ xBRacun ] -= zaplatiti;
				PlayerMoneyTrackSave( playerid, MONEY_BANK, -zaplatiti, "Crozon kupovina" );
                sql_user_update_integer( playerid, "bank_money", PlayerInfo[ playerid ][ xBRacun ] );
                UpdateBankTD( playerid );
				CrozonTimer[playerid] = SetTimerEx( "CrozonPakiranje", 60000, false, "d", playerid);
				SCM(playerid, -1, ""col_lightblue"[ * Dron * ] "col_white"Uspjesno ste zavrsili narudzbu, pricekajte dok se spremi Vas paket.");
			}
		}
	}
	else if(dialogid == dialog_pustimuziku) {
		if( !response )
		{
			SendInfoMessage(playerid, "Odustali ste od pustanja pjesme!");
			return 1;
		}
		if( response )
		{
		    sscanf( inputtext, "s[256]", MuzikaUrl);
			foreach( Player, i ) {
				if(RadioUgasen[ i ] == 0){
					StopAudioStreamForPlayer( i );
					PlayAudioStreamForPlayer( i, MuzikaUrl );
				}
			}
			format( globalstring, sizeof( globalstring ), ""col_server"[ MUZIKA ] %s "col_white"pusta pjesmu, za prekid /muzika[off] ili /djs /narucipjesmu.", ImeIgraca( playerid ) );
			SCMA( -1, globalstring );
			DJTajmer = 180;
		}
	}
	
	else if( dialogid == dialog_pay_parkingservice ) {
		if( !response ) return true;
		if( response ) {

            if( 10000 > PlayerInfo[ playerid  ][ xNovac ] ) return SendErrorMessage( playerid, "Nemate 10.000$ kod sebe!");

            new vehicleid = -1;
			for( new j = 0; j < MAX_VEH_SLOT; j ++ ) {
				if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] ) {

					if( player_veh[ playerid ][ vehicle_id ][ j ] != -1 && VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ j ] ][ vInterior ] == -3 ) {
						vehicleid = player_veh[ playerid ][ vehicle_id ][ j ];
						break;
					}
				}
			}
		    if( vehicleid == -1 ) return SendErrorMessage( playerid, "Nemate nijedno vozilo koje je odneo parking servis." );

	    	if( psInfo[ VehicleInfo[ vehicleid ][ vVirtualWorld ] ][ psPlaced ] == false ) return SendErrorMessage( playerid, "Vase vozilo nije na parking servisu." );
	    	new takenslot = VehicleInfo[ vehicleid ][ vVirtualWorld ];
	    	KGEyes_GivePlayerMoney( playerid, -10000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -10000, "Parking servis kazna" );
	    	psInfo[ takenslot ][ psPlaced ] = false;

			VehicleInfo[ vehicleid ][ vVirtualWorld ] = 0;
			VehicleInfo[ vehicleid ][ vInterior ] = 0;

			VehicleInfo[ vehicleid ][ vLokacijaX ] = 1040.2107;
			VehicleInfo[ vehicleid ][ vLokacijaY ] = -1917.1132;
			VehicleInfo[ vehicleid ][ vLokacijaZ ] = 12.8605;
			VehicleInfo[ vehicleid ][ vLokacijaA ] = 0.0;

			new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `vehicles` SET `v_pos_x` = '%f', `v_pos_y` = '%f', `v_pos_z` = '%f', `v_pos_a` = '%f', `v_virtualw` = '%d', `v_interior` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
							VehicleInfo[ vehicleid ][ vLokacijaX ],
							VehicleInfo[ vehicleid ][ vLokacijaY ],
							VehicleInfo[ vehicleid ][ vLokacijaZ ],
							VehicleInfo[ vehicleid ][ vLokacijaA ],
							VehicleInfo[ vehicleid ][ vVirtualWorld ],
							VehicleInfo[ vehicleid ][ vInterior ],
							VehicleInfo[ vehicleid ][ vSqlID ] );

			mysql_pquery( _dbConnector, q, "park_vehicleCheckID", "iii", playerid, 0, vehicleid );

			SendInfoMessage( playerid, "Uspjesno ste platili kaznu od 10.000$ za vase vozilo.");
		}
	}
	else if( dialogid == dialog_med_kit ) {
		if( !response ) return true;
		if( response ) {
			new playerID;
			if( sscanf(inputtext, "u", playerID ) ) return SPD( playerid, dialog_med_kit, DSI, "Prva Pomoc", "Unesite ID igraca kome zelite da pomognete.", D_ODABERI, D_ODUSTANI );
			if( playerID == IPI ) return SPD( playerid, dialog_med_kit, DSI, "Prva Pomoc", "Error: Krivi ID igraca.\nUnesite ID igraca kome zelite da pomognete.", D_ODABERI, D_ODUSTANI );
			if( playerID == playerid ) return SPD( playerid, dialog_med_kit, DSI, "Prva Pomoc", "Error: Ne mozete sami sebi pomoci.\nUnesite ID igraca kome zelite da pomognete.", D_ODABERI, D_ODUSTANI );
			if( !dsys_info[ playerID ][ ds_b_w ] ) return SPD( playerid, dialog_med_kit, DSI, "Prva Pomoc", "Error: Taj igrac nije ranjen.\nUnesite ID igraca kome zelite da pomognete.", D_ODABERI, D_ODUSTANI );
			if( dsys_info[ playerid ][ ds_b_w ] ) return SPD( playerid, dialog_med_kit, DSI, "Prva Pomoc", "Error: Ne mozete jer ste vi ranjeni.\nUnesite ID igraca kome zelite da pomognete.", D_ODABERI, D_ODUSTANI );
			if( IsPlayerInAnyVehicle( playerid ) ) return SPD( playerid, dialog_med_kit, DSI, "Prva Pomoc", "Error: Ne mozete ovo dok ste u vozilu.\nUnesite ID igraca kome zelite da pomognete.", D_ODABERI, D_ODUSTANI );

			if( !IsPlayerNearPlayer( 6.0, playerid, playerID ) )
				return SPD( playerid, dialog_med_kit, DSI, "Prva Pomoc", "Error: Niste u blizini tog igraca.\nUnesite ID igraca kome zelite da pomognete.", D_ODABERI, D_ODUSTANI );

			Odbrojavanje[ playerID ] = 3;
			VrijemeTDControl( playerID, true );
			Odbrojavanje[ playerid ] = 3;
			VrijemeTDControl( playerid, true );
			TogglePlayerControllable( playerid, false );
			Inventory_Remove( playerid, "Prva Pomoc" );
			ApplyAnimation( playerid, "BOMBER", "BOM_Plant_Loop", 4.0, 1, 0, 0, 0, 0 );
			PodizeIgraca[ playerid ] = playerID;
			SendInfoMessage( playerID, "%s pokusavate da vam pomogne da ustanete, sacekajte 3 sekunde.", ImeIgraca( playerid ) );
			SendInfoMessage( playerid, "Pokusavate pomoci %s da ustane, sacekajte 3 sekunde.", ImeIgraca( playerID ) );
			PrvaPomocTimer[ playerid ] = SetTimerEx( "MedKitHelp", 3000, false, "dd", playerid, playerID );

			format( globalstring, sizeof( globalstring ), "%s pomaze %s da ustane.", RPImeIgraca( playerid ), RPImeIgraca( playerID ) );
			PorukaRadius(20.0 , playerid, globalstring, LJUBICASTA );
		}
	}
	else if( dialogid == dialog_PILOT ) {
		if( !response ) return true;
		if( response ) {
			switch( listitem ) {
			    case 0: {
			        if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 519 || GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 553  ) {
				        KGEyes_SetPlayerCheckpoint( playerid, 1847.4221, -2414.0798, 13.5547, 5.0 );
						LetSF[ playerid ] = 1; CheckpointStatus[ playerid ] = 20;
						SendJobMessage( playerid, "Krenuli ste sa poslom, prevozite putnike u SF.");
						StaroVrijeme[ playerid ] = gettime();
    					NovoVrijeme[ playerid ] = 120;
					}
			    }
			    case 1: {
			        if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 519 || GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 553  ) {
				        KGEyes_SetPlayerCheckpoint( playerid, 1847.4221, -2414.0798, 13.5547, 5.0 );
						LetLV[ playerid ] = 1; CheckpointStatus[ playerid ] = 21;
						SendJobMessage( playerid, "Krenuli ste sa poslom, prevozite putnike u LV.");
						StaroVrijeme[ playerid ] = gettime();
    					NovoVrijeme[ playerid ] = 120;
					}
			    }
				case 2: {
			        if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 519 || GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 553  ) {
				        KGEyes_SetPlayerCheckpoint( playerid, 1847.4221, -2414.0798, 13.5547, 5.0 );
						LetRoba[ playerid ] = 1; CheckpointStatus[ playerid ] = 31;
						SendJobMessage( playerid, "Krenuli ste sa poslom, prevozite robu u SF i LV.");
						StaroVrijeme[ playerid ] = gettime();
    					NovoVrijeme[ playerid ] = 120;
					}
			    }
			}
			RadiPosao[ playerid ] = POSAO_PILOT;
		}
	}
	else if( dialogid == dialog_GEPEK ) {
		if( !response ) return true;
		if( response ) {
		    new vehicleid, found, engine, lights, alarm, doors, bonnet, boot, objective;
		    for( new i = 0; i < MAX_VEHICLES; i++) {
		        new Float:X, Float:Y, Float:Z;
		        GetVehiclePos(i, X, Y, Z);
		        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z)) {
		            vehicleid = i;
		            found = 1;
		            break;
		        }
		        else
		            continue;
		    }
			if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu vozila.");

		    new Float:vehPos[ 3 ];
			getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
			if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );

			if( IsANoTrunkVehicle( vehicleid ) ) return SendErrorMessage( playerid, "Ovo vozilo nema prtljaznik!");
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama.");
			if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) ) {
				SendErrorMessage( playerid, "Nepoznata akcija.");
				return 1;
			}
			if( VehicleInfo[ vehicleid ][ vUsage ] == PRIVATNO_VOZILO ) {

			    new slot = -1;
			    for( new j = 0; j < MAX_VEH_SLOT; j ++ ) {
					if( player_veh[ playerid ][ vehicle_id ][ j ] != -1 && player_veh[ playerid ][ vehicle_id ][ j ] == vehicleid  ) {
				  		slot = j;
						break;
					}
				}
				if( slot == -1 ) {
					if( PlayerInfo[ playerid ][ xRezervniKljucevi ] == VehicleInfo[ vehicleid ][ vSqlID ] || strcmp( VehicleInfo[ vehicleid ][ vOwner ], PlayerInfo[ playerid ][ xMarriedTo ], true ) == 0 ) { }
					else if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) { }
					else return GameTextForPlayer( playerid, "~r~Nemate kljuceve od ovog vozila", 3000, 3 );
				}
			}
			else if( VehicleInfo[ vehicleid ][ vUsage ] == ORGANIZACIJSKO_VOZILO ) {
				if( VehicleInfo[ vehicleid ][ vOrganization ] != PlayerInfo[ playerid ][ xClan ] ) return GameTextForPlayer( playerid, "~r~Nemate kljuceve od ovog vozila", 3000, 3 );
			}
			else if( VehicleInfo[ vehicleid ][ vUsage ] == POSLOVNO_VOZILO ) {
				if( VehicleInfo[ vehicleid ][ vJob ] != PlayerInfo[ playerid ][ xPosao ] ) return GameTextForPlayer( playerid, "~r~Nemate kljuceve od ovog vozila", 3000, 3 );
			}
		    else return GameTextForPlayer( playerid, "~r~Nemate kljuceve od ovog vozila", 3000, 3 );

		    new autoid = vehicleid;

		    switch( listitem ) {
				case 0: {
				    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) {
						SetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, 1, objective );
					} else {
						SetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, 0, objective );
					}
				}
				case 1: {
				    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) return SendErrorMessage( playerid, "Morate prvo otvoriti gepek." );

				    new wepname1[32],
						wepname2[32],
						wepname3[32];

	                if( VehicleInfo[ autoid ][ vWeap1 ] != 0 )
					    format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap1 ] ] );
					else
						strmid(wepname1, "None", 0, 5);

					if( VehicleInfo[ autoid ][ vWeap2 ] != 0)
					    format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap2 ] ] );
					else
					    strmid(wepname2, "None", 0, 5);

				    if( VehicleInfo[ autoid ][ vMelee ] != 0)
					    format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vMelee ] ] );
					else
						strmid(wepname3, "None", 0, 5);

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	                strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

	                format( globalstring, sizeof( globalstring ), "Materijali: %d\n", VehicleInfo[ autoid ][ vMaterijali ] );
	               	strcat( DialogStrgEx, globalstring );

	                strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
	                format( globalstring, sizeof( globalstring ), "Drug1: (%dg) | Drug2: (%dg)\n", VehicleInfo[ autoid ][ vDrugAmmount ][ 0 ], VehicleInfo[ autoid ][ vDrugAmmount ][ 1 ] );
	               	strcat( DialogStrgEx, globalstring );

	               	format( globalstring, sizeof( globalstring ), "Drug3: (%dg) | Drug4: (%dg)\n", VehicleInfo[ autoid ][ vDrugAmmount ][ 2 ], VehicleInfo[ autoid ][ vDrugAmmount ][ 3 ] );
	               	strcat( DialogStrgEx, globalstring );

	               	format( globalstring, sizeof( globalstring ), "Drug5: (%dg)  | Drug6: (%dg)\n", VehicleInfo[ autoid ][ vDrugAmmount ][ 4 ], VehicleInfo[ autoid ][ vDrugAmmount ][ 5 ] );
	               	strcat( DialogStrgEx, globalstring );
                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
	               	format( globalstring, sizeof( globalstring ), "Melee:[%s]\n", wepname3 );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Slot 1:[%s]    |    Metaka: %d\n", wepname1, VehicleInfo[ autoid ][ vAmmo1 ] );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Slot 2:[%s]    |    Metaka: %d\n", wepname2, VehicleInfo[ autoid ][ vAmmo2 ] );
					strcat( DialogStrgEx, globalstring );
                    strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
	               	SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
	    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 2: {
				    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) return SendErrorMessage( playerid, "Morate prvo otvoriti gepek." );

				    ChosenVehicle[ playerid ] = autoid;
				    SPD( playerid, dialog_GEPEKOSTAVI, DSL, D_NASLOV, "Ostavi oruzje\nOstavi drogu\nOstavi materijale", D_ODABERI, D_ODUSTANI );
				}
				case 3: {
				    GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) return SendErrorMessage( playerid, "Morate prvo otvoriti gepek." );

				    ChosenVehicle[ playerid ] = autoid;
				    SPD( playerid, dialog_GEPEKIZVADI, DSL, D_NASLOV, "Izvadi oruzje\nIzvadi drogu\nIzvadi materijale", D_ODABERI, D_ODUSTANI );
				}
		    }
		}
	}
	else if( dialogid == dialog_GEPEKIZVADI ) {
		if( !response ) return true;
		if( response ) {
		    new vehicleid, found;
		    for( new i = 0; i < MAX_VEHICLES; i++) {
		        new Float:X, Float:Y, Float:Z;
		        GetVehiclePos(i, X, Y, Z);
		        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z)) {
		            vehicleid = i;
		            found = 1;
		            break;
		        }
		        else
		            continue;
		    }
			if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu vozila.");

		    new Float:vehPos[ 3 ];
			getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
			if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );

			if( IsANoTrunkVehicle( vehicleid ) ) return SendErrorMessage( playerid, "Ovo vozilo nema prtljaznik!");
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama.");
			if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) ) {
				SendErrorMessage( playerid, "Nepoznata akcija.");
				return 1;
			}

			new autoid = ChosenVehicle[ playerid ];
			if( VehicleInfo[ autoid ][ vUsage ] == PRIVATNO_VOZILO ) {

				if( VehicleInfo[ autoid ][ vOwner_sqlID ] == PlayerInfo[ playerid ][ xID ] ) { }
				else if( PlayerInfo[ playerid ][ xRezervniKljucevi ] == VehicleInfo[ autoid ][ vSqlID ] || strcmp( VehicleInfo[ autoid ][ vOwner ], PlayerInfo[ playerid ][ xMarriedTo ], true ) == 0 ) { }
				else return GameTextForPlayer( playerid, "~r~Nemate kljuceve od ovog vozila", 3000, 3 );
			}
			else if( VehicleInfo[ autoid ][ vUsage ] == ORGANIZACIJSKO_VOZILO ) {
				if( VehicleInfo[ autoid ][ vOrganization ] != PlayerInfo[ playerid ][ xClan ] ) return GameTextForPlayer( playerid, "~r~Nemate kljuceve od ovog vozila", 3000, 3 );
			}
			else if( VehicleInfo[ autoid ][ vUsage ] == POSLOVNO_VOZILO ) {
				if( VehicleInfo[ autoid ][ vJob ] != PlayerInfo[ playerid ][ xPosao ] ) return GameTextForPlayer( playerid, "~r~Nemate kljuceve od ovog vozila", 3000, 3 );
			}
		    else { }

			switch( listitem ) {
			    case 0: {
			        new wepname1[32], wepname2[32], wepname3[32];
				    if( VehicleInfo[ autoid ][ vMelee ] ==  0 && VehicleInfo[ autoid ][ vWeap1 ] == 0 && VehicleInfo[ autoid ][ vWeap2 ] == 0) return SendErrorMessage( playerid, "Svi slotovi su prazni!");
					if( VehicleInfo[ autoid ][ vWeap1 ] != 0)
					    format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap1 ] ] );
					else
					    format(wepname1, sizeof(wepname1), "None");

					if( VehicleInfo[ autoid ][vWeap2] != 0)
					    format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap2 ] ] );
					else
					    format(wepname2, sizeof(wepname2), "None");

				    if( VehicleInfo[ autoid ][vMelee] != 0)
					    format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vMelee ] ] );
					else
					    format(wepname3, sizeof(wepname3), "None");
				    TrunkVehicle[ playerid ] = autoid;
				    format( globalstring, sizeof( globalstring ), "%s\n%s\n%s", wepname1, wepname2, wepname3 );
					SPD( playerid, dialog_VEHICLEWEPTAKE, DSL, D_NASLOV, globalstring, D_ODABERI, D_ODUSTANI );
			    }
			    case 1: {
			        SPD( playerid, dialog_VEHICLETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u vozilu i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
			    }
			    case 2: {

			        SPD( playerid, dialog_VEHICLETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje iz gepeka.", D_ODABERI, D_ODUSTANI );

			    }
			}
		}
	}
	else if( dialogid == dialog_GEPEKOSTAVI ) {
		if( !response ) return true;
		if( response ) {
		    new vehicleid, found;
		    for( new i = 0; i < MAX_VEHICLES; i++) {
		        new Float:X, Float:Y, Float:Z;
		        GetVehiclePos(i, X, Y, Z);
		        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z)) {
		            vehicleid = i;
		            found = 1;
		            break;
		        }
		        else
		            continue;
		    }
			if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu vozila.");

		    new Float:vehPos[ 3 ];
			getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
			if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );

			if( IsANoTrunkVehicle( vehicleid ) ) return SendErrorMessage( playerid, "Ovo vozilo nema prtljaznik!");
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama.");
			if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) ) {
				SendErrorMessage( playerid, "Nepoznata akcija.");
				return 1;
			}

			new autoid = ChosenVehicle[ playerid ];
			if( VehicleInfo[ autoid ][ vUsage ] == PRIVATNO_VOZILO ) {
				if( VehicleInfo[ autoid ][ vOwner_sqlID ] == PlayerInfo[ playerid ][ xID ] ) { }
				else if( PlayerInfo[ playerid ][ xRezervniKljucevi ] == VehicleInfo[ autoid ][ vSqlID ] || strcmp( VehicleInfo[ autoid ][ vOwner ], PlayerInfo[ playerid ][ xMarriedTo ], true ) == 0 ) { }
				else return GameTextForPlayer( playerid, "~r~Nemate kljuceve od ovog vozila", 3000, 3 );
			}
			else if( VehicleInfo[ autoid ][ vUsage ] == ORGANIZACIJSKO_VOZILO ) {
				if( VehicleInfo[ autoid ][ vOrganization ] != PlayerInfo[ playerid ][ xClan ] ) return GameTextForPlayer( playerid, "~r~Nemate kljuceve od ovog vozila", 3000, 3 );
			}
			else if( VehicleInfo[ autoid ][ vUsage ] == POSLOVNO_VOZILO ) {
				if( VehicleInfo[ autoid ][ vJob ] != PlayerInfo[ playerid ][ xPosao ] ) return GameTextForPlayer( playerid, "~r~Nemate kljuceve od ovog vozila", 3000, 3 );
			}
		    else { }

			switch( listitem ) {
			    case 0: {
			        if( GetFactionType( playerid ) == ORG_TIP_PD || GetFactionType( playerid ) == ORG_TIP_HITM ) {
				        SendErrorMessage( playerid, "PD/FBI/CIA/HITMAN nema razloga ubacivati oruzja u gepek!");
						return 1;
					}
					if( Na1v1[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na 1v1." );
					if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return SendErrorMessage( playerid, "Ne mozes ovo dok si u waru." );
                    if( NaDmEventu[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes ovo dok si na dmu." );
					new wepname[32];
					if( ForbiddenWeap( playerid ) ) return SendErrorMessage( playerid, "Ne mozes ubaciti zabranjena oruzja u gepek." );
					if( IsMeleeWeapon( GetWeapon( playerid ) ) && VehicleInfo[ autoid ][ vMelee ] != 0 ) return SendErrorMessage( playerid, "Slot za melee oruzja je zauzet!");
					if( !IsMeleeWeapon( GetWeapon( playerid )) && VehicleInfo[ autoid ][ vWeap1 ] != 0 && VehicleInfo[ autoid ][ vWeap2 ] != 0) return SendErrorMessage(playerid,  "Slotovi za vatrena oruzja su zauzeti!");
					if( IsMeleeWeapon( GetWeapon( playerid ) ) ) {
					    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
                        antiCheatCS[ playerid ][ WeaponDetect ] = 3;
				        VehicleInfo[ autoid ][ vMelee ] = GetWeapon( playerid );
				        RemovePlayerWeapon( playerid, GetWeapon( playerid ) );

						mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_weapon_melee` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
													VehicleInfo[ autoid ][ vMelee ],
													VehicleInfo[ autoid ][ vSqlID ] );

						mysql_pquery( _dbConnector, sql_str, "", "" );

					    format( globalstring, sizeof( globalstring ), "* %s sprema %s u prtljaznik.", RPImeIgraca( playerid ), wepname);
						PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );

					}
					else if( VehicleInfo[ autoid ][ vWeap1 ] == 0) {
						if( ( VehicleInfo[ autoid ][ vAmmo1 ] + GetPlayerAmmo( playerid ) ) < 501 ) {
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
                            antiCheatCS[ playerid ][ WeaponDetect ] = 3;
				            VehicleInfo[ autoid ][ vAmmo1 ] = GetPlayerAmmo( playerid );
				            VehicleInfo[ autoid ][ vWeap1 ] = GetWeapon( playerid );
							RemovePlayerWeapon(playerid, GetWeapon( playerid ) );

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_weapon_slot_1` = '%d', `v_weapon_ammo_1` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ autoid ][ vWeap1 ],
														VehicleInfo[ autoid ][ vAmmo1 ],
														VehicleInfo[ autoid ][ vSqlID ] );

							mysql_pquery( _dbConnector, sql_str, "", "" );

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u prtljaznik.", RPImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else SendErrorMessage(playerid,  "U slot mozete staviti najvise 500 metaka!");
					}
					else if( VehicleInfo[ autoid ][ vWeap2 ] == 0) {
						if( ( VehicleInfo[ autoid ][ vAmmo2 ] + GetPlayerAmmo( playerid ) ) < 501) {
						    format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
                            antiCheatCS[ playerid ][ WeaponDetect ] = 3;
				            VehicleInfo[ autoid ][ vAmmo2 ] = GetPlayerAmmo( playerid );
				            VehicleInfo[ autoid ][ vWeap2 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_weapon_slot_2` = '%d', `v_weapon_ammo_2` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ autoid ][ vWeap2 ],
														VehicleInfo[ autoid ][ vAmmo2 ],
														VehicleInfo[ autoid ][ vSqlID ] );

							mysql_pquery( _dbConnector, sql_str, "", "" );

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u prtljaznik.", RPImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else SendErrorMessage(playerid,  "U slot mozete staviti najvise 500 metaka!");
					}
			    }
			    case 1: {
			        SendInfoMessage( playerid, "U vozilo se droga ubacuje preko inventory sistema." );
			    }
			    case 2: {

			        SPD( playerid, dialog_VEHICLEPUTMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za ostavljanje.", D_ODABERI, D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_GARAZA ) {
		if( !response ) return true;
		if( response ) {
			switch( listitem ) {
			    case 0: {
			        new string[ 128 ], status[ 20 ], id = PlayerInfo[ playerid ][ xGarageID ];
			        if( garageInfo[ id ][ garageLocked ] == 1 ) { status = "Zakljucano"; }
			        else { status = "Otkljucano"; }
			        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
                    strcat( DialogStrgEx, "__________________________________________________________________\n \n");
                    strcat( DialogStrgEx, "Garaza - Informacije\n \n" );
			        format( string, sizeof( string ), "Vlasnik garaze: [%s] | Cijena garaze: [%d$]\n", garageInfo[ id ][ garageOwner ], garageInfo[ id ][ garagePrice ] );
			        strcat( DialogStrgEx, string );
			        format( string, sizeof( string ), "Level garaze: [%d] | Status brave: [%s]\n \n", garageInfo[ id ][ garageLevel ], status );
			        strcat( DialogStrgEx, string );
			        strcat( DialogStrgEx, "__________________________________________________________________");
			        SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			    }
			    case 1: {
					if( GetNearestGarage( playerid ) != PlayerInfo[ playerid ][ xGarageID ] ) return SendErrorMessage( playerid, "Morate biti pored ulaza svoje garaze." );
					SPD( playerid, dialog_GARAGELOCK, DSMSG, D_NASLOV, "Odaberite opciju:", "Otkljucaj", "Zakljucaj" );
				}
			    case 2: {
				    new id = PlayerInfo[ playerid ][ xGarageID ];
				    if( GetNearestGarage( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje garaze!" );
			        if( strcmp( ImeIgraca( playerid ), garageInfo[ GetNearestGarage( playerid ) ][ garageOwner ], true) == 0 ) {
						SPD( playerid, dialog_GARAGESELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vasu garazu drzavi?", "Da", "Ne" );

					} else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
				case 3: {
				    new id = PlayerInfo[ playerid ][ xGarageID ];
				    if( GetNearestGarage( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje garaze!" );
				    SPD( playerid, dialog_GARAGESELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu garaze", "Ponudi", D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_GARAGESELLDRZAVA ) {
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas garazu dok ne izadjes iz minusa u banci." );
	        new id = PlayerInfo[ playerid ][ xGarageID ];
			if( GetNearestGarage( playerid ) != id ) return SendErrorMessage( playerid, "Niste pored svoje garaze!" );
			if( strcmp( ImeIgraca( playerid ), garageInfo[ GetNearestGarage( playerid ) ][ garageOwner ], true) == 0 ) {

				PlayerInfo[ playerid ][ xGarageID ] = -1;
                PlayerInfo[ playerid ][ xGarageSqlID ] = 0;


                new string1[ 128 ];
				format( string1, sizeof( string1 ), "Igrac %s je prodao garazu ID %d na buy", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogProdajaImovine.log", string1 );

		        strmid( garageInfo[ GetNearestGarage( playerid ) ][ garageOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
			    KGEyes_GivePlayerMoney( playerid, (garageInfo[ GetNearestGarage( playerid ) ][ garagePrice ]/2), false ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, (garageInfo[ GetNearestGarage( playerid ) ][ garagePrice ]/2), "Prodaja garaze na buy" );
				garageInfo[ GetNearestGarage( playerid ) ][ garageOwner_SqlID ] = 0; PlayerPlaySound( playerid, 1058, 0, 0, 0 );
				Garage_Refresh( GetNearestGarage( playerid ) );

				garageInfo[ GetNearestGarage( playerid ) ][ garageNeaktivnost ] = 0;

				mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `garages` SET `owner_id` = '%d', `g_neaktivnost` = '%d' WHERE `garage_id` = '%d'",
					garageInfo[ GetNearestGarage( playerid ) ][ garageOwner_SqlID ],
					garageInfo[ GetNearestGarage( playerid ) ][ garageNeaktivnost ],
					garageInfo[ GetNearestGarage( playerid ) ][ garageSqlID ] );

		   		mysql_pquery( _dbConnector, sql_str, "", "");

				sql_user_update_intandmoney( playerid, "garage_id", PlayerInfo[ playerid ][ xGarageSqlID ] );

			} else SendErrorMessage( playerid, "Ovo nije vase.." );
	    }
	    if( !response ) {
	        SCM( playerid, -1, "Odustali ste od prodaje garaze drzavi" );
	    }
	}
	else if( dialogid == dialog_GARAGESELLTP ) {
	    if( !response ) return 1;
	    if( response ) {
	        if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return SendErrorMessage( playerid, "Ne mozes da prodas garazu dok ne izadjes iz minusa u banci." );
	        new id = PlayerInfo[ playerid ][ xGarageID ];
	        new idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
	        if( sscanf( inputtext, "ui", idigraca, cena ) ) return SPD( playerid, dialog_GARAGESELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu garaze", "Ponudi", D_ODUSTANI );
            GetPlayerPos( idigraca, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) ) return SendErrorMessage( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return SendErrorMessage( playerid, "Cijena ne moze biti manja od 1$!");
            if( idigraca == IPI ) return SendErrorMessage( playerid, "Pogresan ID." );
			if( idigraca == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebi prodati garazu!");
			if( PlayerInfo[ idigraca ][ xGarageID ] != -1 )return SendErrorMessage( playerid, "Igrac vec ima garazu!");
            if( PlayerInfo[ idigraca ][ xLevel ] < garageInfo[ id ][ garageLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Da bi ste tom igracu prodali ovu garazu, on mora biti level %d+.", garageInfo[ id ][ garageLevel ] );
            SendClientMessageEx( playerid, SVIJETLOPLAVA, "Ponudili ste igracu %s garazu po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCijena[ idigraca ] = cena;
			GlobalID[ idigraca ] = id;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegovu garazu za %d", ImeIgraca( playerid ), cena );
			SPD( idigraca, dialog_ACCEPTGARAGE, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );
	    }
	}
	else if( dialogid == dialog_ACCEPTGARAGE ) {
	    if( response ) {
	        new id = GlobalID[ playerid ];
	        if( PlayerInfo[ playerid ][ xNovac ] < GlobalCijena[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca.");

			PlayerInfo[ GlobalProdaja[ playerid ] ][ xGarageID ] = -1;
			PlayerInfo[ GlobalProdaja[ playerid ] ][ xGarageSqlID ] = 0;

			PlayerInfo[ playerid ][ xGarageID ] = id;
			PlayerInfo[ playerid ][ xGarageSqlID ] = garageInfo[ id ][ garageSqlID ];

            new string1[ 128 ];
			format( string1, sizeof( string1 ), "Igrac %s je prodao garazu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCijena[ playerid ] );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

            SendClientMessageEx( playerid, SVIJETLOPLAVA, "Uspjesno ste kupili garazu od igraca %s za $%d.", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCijena[ playerid ] );
			strmid( garageInfo[ id ][ garageOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
            garageInfo[ id ][ garageOwner_SqlID ] = PlayerInfo[ playerid ][ xID ];
			Garage_Refresh( id );

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `garages` SET `owner_id` = '%d' WHERE `garage_id` = '%d'",
				garageInfo[ id ][ garageOwner_SqlID ],
				garageInfo[ id ][ garageSqlID ] );

		   	mysql_pquery( _dbConnector, sql_str, "", "");

			KGEyes_GivePlayerMoney( GlobalProdaja[ playerid ], GlobalCijena[ playerid ], false ), PlayerMoneyTrackSave( GlobalProdaja[ playerid ], MONEY_HANDS, GlobalCijena[ playerid ], "Prodaja garaze igracu" );
			KGEyes_GivePlayerMoney( playerid, -GlobalCijena[ playerid ], false ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -GlobalCijena[ playerid ], "Kupovina garaze od igraca" );

			sql_user_update_intandmoney( playerid, "garage_id", PlayerInfo[ playerid ][ xGarageSqlID ] );
			sql_user_update_intandmoney( GlobalProdaja[ playerid ], "garage_id", PlayerInfo[ GlobalProdaja[ playerid ] ][ xGarageSqlID ] );

			format( globalstring, sizeof( globalstring ), "Prodali ste garazu igracu %s za $%d!", ImeIgraca( playerid ), GlobalCijena[ playerid ] );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			GlobalProdaja[ playerid ] = -1;
			GlobalCijena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
	    }
	    else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu garaze!", ImeIgraca( playerid ) );
			SCM( GlobalProdaja[ playerid ], -1, globalstring );
			SCM( playerid, -1, "Odbili ste ponudu!");
			GlobalProdaja[ playerid ] = -1;
			GlobalCijena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
	    }
	}
	else if( dialogid == dialog_GARAGELOCK ) {
	    new id = GetNearestGarage( playerid );
		if( response ) {
		    if( garageInfo[ id ][ garageLocked ] == 0 ) return SendErrorMessage( playerid, "Garaza je vec otkljucana." );
		    garageInfo[ id ][ garageLocked ] = 0;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `garages` SET `owner_id` = '%d' WHERE `g_locked` = '%d'",
				garageInfo[ id ][ garageLocked ],
				garageInfo[ id ][ garageSqlID ] );

		   	mysql_pquery( _dbConnector, sql_str, "", "");

		    SendInfoMessage( playerid, "Otkljucao si svoju garazu." );
		}
		else if( !response ) {
		    if( garageInfo[ id ][ garageLocked ] == 1 ) return SendErrorMessage( playerid, "Garaza je vec zakljucana." );
		    garageInfo[ id ][ garageLocked ] = 1;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `garages` SET `owner_id` = '%d' WHERE `g_locked` = '%d'",
				garageInfo[ id ][ garageLocked ],
				garageInfo[ id ][ garageSqlID ] );

		   	mysql_pquery( _dbConnector, sql_str, "", "");

		    SendInfoMessage( playerid, "Zakljucao si svoju garazu." );
		}
	}
	else if( dialogid == dialog_INVENTORY ) {
		if( !response ) return SelectTextDraw( playerid, 0x1F1F1F88 );
		if( response ) {
		    new
				itemid = ChosenItem[ playerid ];

			if( inv_menu_showed[ playerid ] ) OpenInventory(playerid, false );
		    switch( listitem ) {
		        case 0: {
                    if( IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Ne mozes dok si u vozilu." );
		            CallLocalFunction( "OnPlayerUseItem", "dds", playerid, itemid, inventoryInfo[ playerid ][ itemid ][ invItem ] );
		        }
				case 1: {
				    ChosenItem[ playerid ] = itemid;
				    if( IsInventoryWeapon( inventoryInfo[ playerid ][ itemid ][ invItem ] ) ) return SendErrorMessage( playerid, "Oruzje mozes davati samo komandom /daj." );
				    SPD( playerid, dialog_GIVEITEM, DSI, "Daj predmet", "Unesite ime ili id igraca:", "Ok", "Izadji");
				}
		        case 2: {

		        	if( IsInventoryWeapon( inventoryInfo[ playerid ][ itemid ][ invItem ] ) && inventoryInfo[ playerid ][ itemid ][ invModel ] != 365 ) {
		        		SendInfoMessage( playerid, "Da bacis oruzje koristi /bacigun." );
						return 1;
					}
					else {
			            if( GetNearestContainer( playerid ) != -1 ) {

	                        format( globalstring, sizeof( globalstring ), "** %s baca \"%s\" u kontejner.", RPImeIgraca(playerid), inventoryInfo[ playerid ][ itemid ][ invItem ]);
							PorukaRadius( 30.0 , playerid, globalstring, LJUBICASTA );

							Inventory_Remove( playerid, inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invQuantity ] );
						}
						else SendErrorMessage( playerid, "Nisi pored kontejnera." );
					}
		        }
		        case 3: {
		            new name[ 64 ];
				    format( name, sizeof( name ), "%s (%d)", inventoryInfo[ playerid ][ ChosenItem[ playerid ] ][ invItem ], inventoryInfo[ playerid ][ ChosenItem[ playerid ] ][ invQuantity ] );
					SPD( playerid, dialog_INVENTORY_2, DSL, name, "Ostavi u sef orge\nOstavi u vozilo\nOstavi u sef imovine", "Odaberi", "Odustani");
		        }
		        case 4: {
		            ChosenItem[ playerid ] = itemid;
		            new name[ 64 ];
				    format( name, sizeof( name ), "%s (%d)", inventoryInfo[ playerid ][ ChosenItem[ playerid ] ][ invItem ], inventoryInfo[ playerid ][ ChosenItem[ playerid ] ][ invQuantity ] );
					SPD( playerid, dialog_SELLITEM, DSI, name, "Unesite ime ili id igraca kome zelite da prodate drogu:", "Ok", "Izadji");
		        }
		        case 5: {

		        	if( !IsPlayerInRangeOfPoint( playerid, 3.0, 2575.3079,-2210.2644,-0.2188 ) ) return SendErrorMessage( playerid, "Morate biti na lokaciji Crnog Trzista /gps.");
		            ChosenItem[ playerid ] = itemid;

		            new gPrice = 100;
		            new name[ 64 ];
				    format( name, sizeof( name ), "%s (%d)", inventoryInfo[ playerid ][ ChosenItem[ playerid ] ][ invItem ], inventoryInfo[ playerid ][ ChosenItem[ playerid ] ][ invQuantity ] );
					new stringic[ 180 ];
				    format( stringic, sizeof( stringic ), "Predmet: %s (Kolicina: %d)\n\nCijena jednog grama je %d$.\nUnesite kolicinu koju zelite prodati crnom trzistu:", inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invQuantity ], gPrice );
					SPD( playerid, dialog_SELLITEM_4, DSI, name, stringic, "Prodaj", "Izadji" );
		        }
		    }
		}
	}
	else if( dialogid == dialog_INVENTORY_2 ) {
		if( !response ) return true;
		if( response ) {
		    new index = ChosenItem[ playerid ];
		    switch( listitem ) {
				case 0: {

				    new OrgID = PlayerInfo[ playerid ][ xClan ];
				    new itemid = ChosenItem[ playerid ];

					if( OrgID < 1 ) return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu, niste u organizaciji. " );
    				if( !IsPlayerInRangeOfPoint( playerid, 3.0, org_info[ OrgID ][ oSafePos ][ 0 ], org_info[ OrgID ][ oSafePos ][ 1 ], org_info[ OrgID ][ oSafePos ][ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti pored sefa..");

				    new drug_slot = -1;
					if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 1579 ) {
						for( new i = 0; i < 4; i ++ ) {
							if( org_info[ OrgID ][ oSafeDrugAmmount ][ i ]+inventoryInfo[ playerid ][ index ][ invQuantity ] <= 1000 ) {
								drug_slot = i;
								break;
							}
						}
					}

					if( drug_slot != -1 ) {

						format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u sef.", RPImeIgraca( playerid ) );
						PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
				    	SendClientMessageEx( playerid, ZUTA, "%s | Stavili ste %d grama %s u sef.", org_info[ OrgID ][ oPreFix ], inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ] );


						org_info[ OrgID ][ oSafeDrugAmmount ][ drug_slot ] += inventoryInfo[ playerid ][ index ][ invQuantity ];
					    sql_organization_update_drugs( OrgID );

						new string[ 128 ];
						format( string, sizeof( string ), "Igrac %s | +%dg %s | Org: %s", ImeIgraca( playerid ), inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ], org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ] );
						LogSave( "Ostalo/LogSefDroge.log", string );

						Inventory_Remove_2( playerid, index, inventoryInfo[ playerid ][ index ][ invQuantity ] );
					}
					else {

			            if( org_info[ OrgID ][ oSafeDrugAmmount ][ 0 ] == 0 ) {

							format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u sef.", RPImeIgraca( playerid ) );
							PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
					    	SendClientMessageEx( playerid, ZUTA, "%s | Stavili ste %d grama %s u sef.", org_info[ OrgID ][ oPreFix ], inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ] );

						    org_info[ OrgID ][ oSafeDrugAmmount ][ 0 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

						    sql_organization_update_drugs( OrgID );

							new string[ 128 ];
							format( string, sizeof( string ), "Igrac %s | +%dg %s | Org: %s", ImeIgraca( playerid ), inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ], org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ] );
							LogSave( "Ostalo/LogSefDroge.log", string );

							Inventory_Remove_2( playerid, index, inventoryInfo[ playerid ][ index ][ invQuantity ] );
						}
						else if( org_info[ OrgID ][ oSafeDrugAmmount ][ 1 ] == 0) {

							format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u sef.", RPImeIgraca( playerid ) );
							PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
					    	SendClientMessageEx( playerid, ZUTA, "%s | Stavili ste %d grama %s u sef.", org_info[ OrgID ][ oPreFix ], inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ] );

						    org_info[ OrgID ][ oSafeDrugAmmount ][ 1 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

						    sql_organization_update_drugs( OrgID );

							new string[ 128 ];
							format( string, sizeof( string ), "Igrac %s | +%dg %s | Org: %s", ImeIgraca( playerid ), inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ], org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ] );
							LogSave( "Ostalo/LogSefDroge.log", string );
							Inventory_Remove_2( playerid, index, inventoryInfo[ playerid ][ index ][ invQuantity ] );
						}
						else if( org_info[ OrgID ][ oSafeDrugAmmount ][ 2 ] == 0) {

							format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u sef.", RPImeIgraca( playerid ) );
							PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
					    	SendClientMessageEx( playerid, ZUTA, "%s | Stavili ste %d grama %s u sef.", org_info[ OrgID ][ oPreFix ], inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ] );

						    org_info[ OrgID ][ oSafeDrugAmmount ][ 2 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

						    sql_organization_update_drugs( OrgID );

							new string[ 128 ];
							format( string, sizeof( string ), "Igrac %s | +%dg %s | Org: %s", ImeIgraca( playerid ), inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ], org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ] );
							LogSave( "Ostalo/LogSefDroge.log", string );

							Inventory_Remove_2( playerid, index, inventoryInfo[ playerid ][ index ][ invQuantity ] );
						}
						else if( org_info[ OrgID ][ oSafeDrugAmmount ][ 3 ] == 0) {

							format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u sef.", RPImeIgraca( playerid ) );
							PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
					    	SendClientMessageEx( playerid, ZUTA, "%s | Stavili ste %d grama %s u sef.", org_info[ OrgID ][ oPreFix ], inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ] );

						    org_info[ OrgID ][ oSafeDrugAmmount ][ 3 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

						    sql_organization_update_drugs( OrgID );

							new string[ 128 ];
							format( string, sizeof( string ), "Igrac %s | +%dg %s | Org: %s", ImeIgraca( playerid ), inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ], org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ] );
							LogSave( "Ostalo/LogSefDroge.log", string );

							Inventory_Remove_2( playerid, index, inventoryInfo[ playerid ][ index ][ invQuantity ] );
						}
						else return SendErrorMessage( playerid, "Svih 4 slotova droge u sefu su zauzeti - max 1000 grama po slotu!");
					}

				}
				case 1: {

				    new vehicleid, found;
				    for( new i = 0; i < MAX_VEHICLES; i++)
				    {
				        new Float:X, Float:Y, Float:Z;
				        GetVehiclePos(i, X, Y, Z);
				        if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z)) {
				            vehicleid = i;
				            found = 1;
				            break;
				        }
				        else
				            continue;
				    }
					if( found == 0 ) return SendErrorMessage( playerid, "Niste blizu vozila.");

				    new Float:vehPos[ 3 ];
					getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
					if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return SendErrorMessage( playerid, "Morate biti pored prtljaznika." );

					if( IsANoTrunkVehicle( vehicleid ) ) return SendErrorMessage( playerid, "Ovo vozilo nema prtljaznik!");
					if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti na nogama da biste ubacili drogu u prtljaznik.");
					if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) ) {
						SendErrorMessage( playerid, "Nepoznata akcija.");
						return 1;
					}

					if( VehicleInfo[ vehicleid ][ vSqlID ] == 0 ) return SendErrorMessage( playerid, "Ovo vozilo nije ispravno kreirano, ako mislis da je greska obrati se Admin timu." );

				    if( VehicleInfo[ vehicleid ][ vUsage ] != PRIVATNO_VOZILO ) return SendErrorMessage( playerid, "Mozete samo na vasem privatnom vozilu.");

					new slot = -1;
					for( new j = 0; j < MAX_VEH_SLOT; j++ ) {
						if( player_veh[ playerid ][ vehicle_id ][ j ] != -1 && player_veh[ playerid ][ vehicle_id ][ j ] == vehicleid ) {
							slot = j;
							break;
						}
					}
					if( slot == -1 ) return SendErrorMessage( playerid, "Mozete samo na vasem privatnom vozilu.");


					new itemid = ChosenItem[ playerid ];


					new drug_slot = -1;
					if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 1579 ) {
						for( new i = 0; i < 6; i ++ ) {
							if( (VehicleInfo[ vehicleid ][ vDrugAmmount ][ i ]+inventoryInfo[ playerid ][ index ][ invQuantity ]) <= 1000 ) {
								drug_slot = i;
								break;
							}
						}
					}

					if( drug_slot != -1 ) {

						format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u gepek.", RPImeIgraca( playerid ) );
						PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
				    	SendClientMessageEx( playerid, PLAVA, "Stavili ste %d grama %s u gepek.", inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ] );

						VehicleInfo[ vehicleid ][ vDrugAmmount ][ drug_slot ] += inventoryInfo[ playerid ][ index ][ invQuantity ];

						mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_drug_ammount_%d` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
							(drug_slot+1),
							VehicleInfo[ vehicleid ][ vDrugAmmount ][ drug_slot ],
							VehicleInfo[ vehicleid ][ vSqlID ] );
						mysql_pquery( _dbConnector, sql_str, "", "" );

						Inventory_Remove_2( playerid, index, inventoryInfo[ playerid ][ index ][ invQuantity ] );

					}
					else {

						if( VehicleInfo[ vehicleid ][ vDrugAmmount ][ 0 ] == 0) {

							format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u gepek.", RPImeIgraca( playerid ) );
							PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
						    SendClientMessageEx( playerid, PLAVA, "Stavili ste %d grama %s u gepek.", inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ] );

						    VehicleInfo[ vehicleid ][ vDrugAmmount ][ 0 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_drug_ammount_1` = '%d' WHERE `veh_id` = '%d' LIMIT 1",

								VehicleInfo[ vehicleid ][ vDrugAmmount ][ 0 ],
								VehicleInfo[ vehicleid ][ vSqlID ] );
							mysql_pquery( _dbConnector, sql_str, "", "" );

							Inventory_Remove_2( playerid, index, inventoryInfo[ playerid ][ index ][ invQuantity ] );
						}
						else if( VehicleInfo[ vehicleid ][ vDrugAmmount ][ 1 ] == 0) {

							format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u gepek.", RPImeIgraca( playerid ) );
							PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
						    SendClientMessageEx( playerid, PLAVA, "Stavili ste %d grama %s u gepek.", inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ] );

						    VehicleInfo[ vehicleid ][ vDrugAmmount ][ 1 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_drug_ammount_2` = '%d' WHERE `veh_id` = '%d' LIMIT 1",

								VehicleInfo[ vehicleid ][ vDrugAmmount ][ 1 ],
								VehicleInfo[ vehicleid ][ vSqlID ] );
							mysql_pquery( _dbConnector, sql_str, "", "" );

							Inventory_Remove_2( playerid, index, inventoryInfo[ playerid ][ index ][ invQuantity ] );
						}
						else if( VehicleInfo[ vehicleid ][ vDrugAmmount ][ 2 ] == 0) {

							format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u gepek.", RPImeIgraca( playerid ) );
							PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
						    SendClientMessageEx( playerid, PLAVA, "Stavili ste %d grama %s u gepek.", inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ] );

						    VehicleInfo[ vehicleid ][ vDrugAmmount ][ 2 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_drug_ammount_3` = '%d' WHERE `veh_id` = '%d' LIMIT 1",

								VehicleInfo[ vehicleid ][ vDrugAmmount ][ 2 ],
								VehicleInfo[ vehicleid ][ vSqlID ] );
							mysql_pquery( _dbConnector, sql_str, "", "" );

							Inventory_Remove_2( playerid, index, inventoryInfo[ playerid ][ index ][ invQuantity ] );
						}
						else if( VehicleInfo[ vehicleid ][ vDrugAmmount ][ 3 ] == 0) {

							format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u gepek.", RPImeIgraca( playerid ) );
							PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
						    SendClientMessageEx( playerid, PLAVA, "Stavili ste %d grama %s u gepek.", inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ] );

						    VehicleInfo[ vehicleid ][ vDrugAmmount ][ 3 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_drug_ammount_4` = '%d' WHERE `veh_id` = '%d' LIMIT 1",

								VehicleInfo[ vehicleid ][ vDrugAmmount ][ 3 ],
								VehicleInfo[ vehicleid ][ vSqlID ] );
							mysql_pquery( _dbConnector, sql_str, "", "" );

							Inventory_Remove_2( playerid, index, inventoryInfo[ playerid ][ index ][ invQuantity ] );
						}
						else if( VehicleInfo[ vehicleid ][ vDrugAmmount ][ 4 ] == 0) {

							format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u gepek.", RPImeIgraca( playerid ) );
							PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
						    SendClientMessageEx( playerid, PLAVA, "Stavili ste %d grama %s u gepek.", inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ] );

						    VehicleInfo[ vehicleid ][ vDrugAmmount ][ 4 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_drug_ammount_5` = '%d' WHERE `veh_id` = '%d' LIMIT 1",

								VehicleInfo[ vehicleid ][ vDrugAmmount ][ 4 ],
								VehicleInfo[ vehicleid ][ vSqlID ] );
							mysql_pquery( _dbConnector, sql_str, "", "" );

							Inventory_Remove_2( playerid, index, inventoryInfo[ playerid ][ index ][ invQuantity ] );
						}
						else if( VehicleInfo[ vehicleid ][ vDrugAmmount ][ 5 ] == 0) {

							format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u gepek.", RPImeIgraca( playerid ) );
							PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
						    SendClientMessageEx( playerid, PLAVA, "Stavili ste %d grama %s u gepek.", inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ] );

						    VehicleInfo[ vehicleid ][ vDrugAmmount ][ 5 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_drug_ammount_6` = '%d' WHERE `veh_id` = '%d' LIMIT 1",

								VehicleInfo[ vehicleid ][ vDrugAmmount ][ 5 ],
								VehicleInfo[ vehicleid ][ vSqlID ] );
							mysql_pquery( _dbConnector, sql_str, "", "" );

							Inventory_Remove_2( playerid, index, inventoryInfo[ playerid ][ index ][ invQuantity ] );
						}
						else return SendErrorMessage( playerid, "Svih 6 slotova droge u autu su zauzeti - max 1000 grama po slotu!");
					}

				}
				case 2: {

					if( inProperty[ playerid ] == -1 ) return SendErrorMessage( playerid, "Niste u nijednoj imovini." );

				    if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 ) {

					    new hid = inProperty[ playerid ];
						//new i = GetNearestFurniture( playerid, inProperty[ playerid ] );

						//if( GetNearestFurniture( playerid, inProperty[ playerid ] ) == -1 ) return SendErrorMessage( playerid, "Nema sefa u blizini." );
				    	//if( Furniture[ hid ][ i ][ f_Model ] != 2332 ) return SendErrorMessage( playerid, "Niste pored sefa." );
				    	if( II[ hid ][ iSafeStatus ] == 0 ) return SendErrorMessage( playerid, "Sef je zakljucan!");

				    	new itemid = ChosenItem[ playerid ];

						new drug_slot = -1;

						if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 1579 ) {
							for( new i = 0; i < 10; i ++ ) {
								if( II[ hid ][ iDrugAmmount ][ i ] + inventoryInfo[ playerid ][ index ][ invQuantity ] <= 1000 ) {
									drug_slot = i;
									break;
								}
							}
						}
						if( drug_slot != -1 ) {

							format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u sef.", RPImeIgraca( playerid ) );
							PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
						    SendClientMessageEx( playerid, PLAVA, "Stavili ste %d grama %s u sef.", inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ] );


							II[ hid ][ iDrugAmmount ][ drug_slot ] += inventoryInfo[ playerid ][ index ][ invQuantity ];

							mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_drug_%d` = '%d' WHERE `propID` = '%d'",
								(drug_slot+1),
								II[ hid ][ iDrugAmmount][ drug_slot ],
								II[ hid ][ ibaseID ] );

							mysql_pquery( _dbConnector, sql_str, "", "");

							Inventory_Remove_2( playerid, index, inventoryInfo[ playerid ][ index ][ invQuantity ] );

						}
						else {

							new slot = 0;
				            if( II[ hid ][ iDrugAmmount ][ 0 ] == 0 ) {
							    II[ hid ][ iDrugAmmount ][ 0 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							    slot = 1;
							}
							else if( II[ hid ][ iDrugAmmount ][ 1 ] == 0) {
							    II[ hid ][ iDrugAmmount ][ 1 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							    slot = 2;
							}
							else if( II[ hid ][ iDrugAmmount ][ 2 ] == 0) {
							    II[ hid ][ iDrugAmmount ][ 2 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							    slot = 3;
							}
							else if( II[ hid ][ iDrugAmmount ][ 3 ] == 0) {
							    II[ hid ][ iDrugAmmount ][ 3 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							    slot = 4;
							}
							else if( II[ hid ][ iDrugAmmount ][ 4 ] == 0) {
							    II[ hid ][ iDrugAmmount ][ 4 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							    slot = 5;
							}
							else if( II[ hid ][ iDrugAmmount ][ 5 ] == 0) {
							    II[ hid ][ iDrugAmmount ][ 5 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							    slot = 6;
							}
							else if( II[ hid ][ iDrugAmmount ][ 6 ] == 0) {
							    II[ hid ][ iDrugAmmount ][ 6 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							    slot = 7;
							}
							else if( II[ hid ][ iDrugAmmount ][ 7 ] == 0) {
							    II[ hid ][ iDrugAmmount ][ 7 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							    slot = 8;
							}
							else if( II[ hid ][ iDrugAmmount ][ 8 ] == 0) {
							    II[ hid ][ iDrugAmmount ][ 8 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							    slot = 9;
							}
							else if( II[ hid ][ iDrugAmmount ][ 9 ] == 0) {
							    II[ hid ][ iDrugAmmount ][ 9 ] = inventoryInfo[ playerid ][ index ][ invQuantity ];

							    slot = 10;
							}
							else return SendErrorMessage( playerid, "Svih 10 slotova kuce su zauzeti!");

							if( slot != 0 ) {

								format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u sef.", RPImeIgraca( playerid ) );
								PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
							    SendClientMessageEx( playerid, PLAVA, "Stavili ste %d grama %s u sef.", inventoryInfo[ playerid ][ index ][ invQuantity ], inventoryInfo[ playerid ][ index ][ invItem ] );

								mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_drug_%d` = '%d' WHERE `propID` = '%d'",
										slot,
										II[ hid ][ iDrugAmmount][ (slot-1) ],
										II[ hid ][ ibaseID ] );

								mysql_pquery( _dbConnector, sql_str, "", "");

								Inventory_Remove_2( playerid, index, inventoryInfo[ playerid ][ index ][ invQuantity ] );
							}
						}
                    } else SendErrorMessage( playerid, "Ovo nije vase.." );
				}
			}
		}
	}
	else if( dialogid == dialog_makegun ) {
		if( !response ) return true;
		if( response ) {

		    new name[ 32 ], ammo = 0, mats = 0;//, skill = 1;

		    switch( listitem ) {
		        case 0: {
		            ammo = 1;
		            mats = 40;
		            strmid( name, "Palicu", 0, strlen( "Palicu" ), 32);
		        }
		        case 1: {
		            ammo = 1;
		            mats = 150;
		            strmid( name, "Noz", 0, strlen( "Noz" ), 32);
		        }
		        case 2: {
		            ammo = 1;
		            mats = 250;
		            strmid( name, "Katana", 0, strlen( "Katana" ), 32);
		        }
		        case 3: {
		            ammo = 200;
		            mats = 600;
		            strmid( name, "Deagle", 0, strlen( "Deagle" ), 32);
		        }
		        case 4: {
		            ammo = 200;
		            mats = 1000;
		            strmid( name, "Shotgun", 0, strlen( "Shotgun" ), 32);
		        }
		        case 5: {
		            ammo = 400;
		            mats = 1100;
		            strmid( name, "Micro Uzi", 0, strlen( "Micro Uzi" ), 32);
		        }
		        case 6: {
		            ammo = 400;
		            mats = 1150;
		            strmid( name, "MP5", 0, strlen( "MP5" ), 32);
		        }
		        case 7: {
		            ammo = 450;
		            mats = 1200;
		            strmid( name, "M4", 0, strlen( "M4" ), 32);
		        }
		        case 8: {
		            ammo = 100;
		            mats = 1800;
		            strmid( name, "Sniper", 0, strlen( "Sniper" ), 32);
		        }
		    }
			if( ammo == 0 || mats == 0 ) return 1;


			ChosenWeapon[ playerid ] = listitem+1;

		    format( globalstring, sizeof( globalstring ), "Da li ste sigurni da zelite da napravite %s(%dammo) za %d materijala?", name, ammo, mats  );
		    SPD( playerid, dialog_makegun_1, DSMSG, D_NASLOV, globalstring, "Da", "Ne" );

		}
	}
	else if( dialogid == dialog_makegun_1 ) {
		if( !response ) return true;
		if( response ) {

		    new name[ 32 ], ammo = 0, mats = 0, weapon_id = 0;//, skill = 1;

            if( ChosenWeapon[ playerid ] == 0 ) return 1;
		    switch( (ChosenWeapon[ playerid ]-1) ) {
		        case 0: {
		            weapon_id = 5;
		            ammo = 1;
		            mats = 40;
		            strmid( name, "Palicu", 0, strlen( "Palicu" ), 32);
		        }
		        case 1: {
		            weapon_id = 4;
		            ammo = 1;
		            mats = 150;
		            strmid( name, "Noz", 0, strlen( "Noz" ), 32);
		        }
		        case 2: {
		            weapon_id = 8;
		            ammo = 100;
		            mats = 250;
		            strmid( name, "Katana", 0, strlen( "Katana" ), 32);
		        }
		        case 3: {
		            weapon_id = 24;
		            ammo = 200;
		            mats = 600;
		            strmid( name, "Deagle", 0, strlen( "Deagle" ), 32);
		        }
		        case 4: {
		            weapon_id = 25;
		            ammo = 200;
		            mats = 1000;
		            strmid( name, "Shotgun", 0, strlen( "Shotgun" ), 32);
		        }
		        case 5: {
		            weapon_id = 28;
		            ammo = 400;
		            mats = 1100;
		            strmid( name, "Micro Uzi", 0, strlen( "Micro Uzi" ), 32);
		        }
		        case 6: {
		            weapon_id = 29;
		            ammo = 400;
		            mats = 1150;
		            strmid( name, "MP5", 0, strlen( "MP5" ), 32);
		        }
		        case 7: {
		            weapon_id = 31;
		            ammo = 450;
		            mats = 1200;
		            strmid( name, "M4", 0, strlen( "M4" ), 32);
		        }
		        case 8: {
		            weapon_id = 34;
		            ammo = 200;
		            mats = 1800;
		            strmid( name, "Sniper", 0, strlen( "Sniper" ), 32);
		        }
		    }
			if( ammo == 0 || mats == 0 ) return 1;
			
		    if( Inventory_Count( playerid, "Materijali" ) < mats ) return SendErrorMessage(playerid, "Nemas dovoljno materijala (%d).", mats );
			org_notoriety(PlayerInfo[playerid][xClan], 5, "add");
			
			Inventory_Remove( playerid, "Materijali", mats );
			GiveWeaponToPlayer( playerid, weapon_id, ammo );

			SendClientMessageEx( playerid, 0x95b4a2FF, "[ORUZJE] "col_white"Napravili ste %s(%d ammo) od %d materijala!", name, ammo, mats );

            new s_str[ 64 ], ss_str[ 64 ];
			format( s_str, sizeof( s_str ), "Napravili ste %s(%d ammo)", name, ammo );
			format( ss_str, sizeof( ss_str ), "Potroseno je %d materijala", mats );
            NotifyPlayer( playerid, s_str, ss_str, 0 );

			format( globalstring, sizeof( globalstring ), "* %s je napravio %s.", RPImeIgraca( playerid ), name );
			PorukaRadius(30.0 , playerid, globalstring, LJUBICASTA );

			ChosenWeapon[ playerid ] = 0;
			
		}
	}
	else if( dialogid == dialog_blackmarket ) {
		if( !response ) return true;
		if( response ) {
		    switch( listitem ) {
		        case 0: {
		            if( Inventory_Count( playerid, "Alat za obijanje" ) < 5 ) {
						if( PlayerInfo[ playerid ][ xNovac ] < 1500 ) return SendErrorMessage( playerid, "Nemas dovoljno novca." );
						new id = -1;
						id = Inventory_Add( playerid, "Alat za obijanje", 19921, 3 );
						if( id != -1 ) {
							SendInfoMessage( playerid, "Kupio si alat za obijanje za 1500$." );
							KGEyes_GivePlayerMoney( playerid, -1500, false ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -1500, "CT-Alat za obijanje" );
						}
						else return SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite stvari." );
					}
					else SendErrorMessage( playerid, "Vec imas 5 alata za obijanje!");
		        }
		        case 1: {
		            if( PlayerInfo[ playerid ][ xNovac ] < 2000 ) return SendErrorMessage( playerid, "Nemas dovoljno novca." );
				    new id;
				    if( Inventory_HasItem(playerid, "Dinamit" ) ) {
						SendErrorMessage( playerid, "Vec imate dinamit u inventoriju." );
					}
					else if( !Inventory_HasItem(playerid, "Dinamit" ) ) {

						id = Inventory_Add( playerid, "Dinamit", 1654 );

						if( id != -1 ) {
							SendInfoMessage( playerid, "Kupio si dinamit za 2.000$." );
							KGEyes_GivePlayerMoney( playerid, -2000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -2000, "CT-Dinamit" );
						}
						else return SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite stvari." );
					}
		        }
		    }
		}
	}
	
	else if( dialogid == dialog_SELLITEM_4 ) {
		if( !response ) return true;
		if( response ) {

			new gPrice = 100, itemid = ChosenItem[ playerid ];
			new kolicina;
		    if( sscanf( inputtext, "i", kolicina ) ) {

				new name[ 64 ];
			    format( name, sizeof( name ), "%s (%d)", inventoryInfo[ playerid ][ ChosenItem[ playerid ] ][ invItem ], inventoryInfo[ playerid ][ ChosenItem[ playerid ] ][ invQuantity ] );
				new stringic[ 180 ];
			    format( stringic, sizeof( stringic ), "Predmet: %s (Kolicina: %d)\n\nCijena jednog grama je %d$.\nUnesite kolicinu koju zelite prodati crnom trzistu:", inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invQuantity ], gPrice );
				SPD( playerid, dialog_SELLITEM_4, DSI, name, stringic, "Prodaj", "Izadji" );
				return true;
		    }
		    if( inventoryInfo[ playerid ][ itemid ][ invQuantity ] < kolicina || kolicina < 1 ) return SendErrorMessage( playerid, "Nemate toliko droge koje zelite da prodate crnom trzistu." );

		    SendInfoMessage( playerid, "Prodao si \"%s(%dg)\" crnom trzistu za %d$.", inventoryInfo[ playerid ][ itemid ][ invItem ], kolicina, (gPrice*kolicina) );

			KGEyes_GivePlayerMoney( playerid, (gPrice*kolicina) ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, (gPrice*kolicina), "Prodaja droge na CT" );

			Inventory_Remove_2( playerid, itemid, kolicina );
		}
	}
	else if( dialogid == dialog_SELLITEM ) {
		if( !response ) return true;
		if( response ) {
		    static
		        userid = -1,
				itemid = -1;

			new name[ 64 ];
			format( name, sizeof( name ), "%s (%d)", inventoryInfo[ playerid ][ ChosenItem[ playerid ] ][ invItem ], inventoryInfo[ playerid ][ ChosenItem[ playerid ] ][ invQuantity ] );


			if( sscanf(inputtext, "u", userid ) )
			    return SPD( playerid, dialog_SELLITEM, DSI, name, "Unesite ime ili id igraca kome zelite da prodate drogu:", "Ok", "Izadji");

			if( userid == INVALID_PLAYER_ID )
			    return SPD(playerid, dialog_SELLITEM, DSI, name, "Greska: Nepostojeci igrac.\n\nUnesite ime ili id igraca kome zelite da prodate drogu:", "Ok", "Izadji");

		    if( !IsPlayerNearPlayer( 6.0, playerid, userid ) )
				return SPD(playerid, dialog_SELLITEM, DSI, name, "Greska: Niste u blizini tog igraca.\n\nUnesite ime ili id igraca kome zelite da prodate drogu:", "Ok", "Izadji");

		    if( userid == playerid )
				return SPD(playerid, dialog_SELLITEM, DSI, name, "Greska: Nemozete prodati predmet samome sebi.\n\nUnesite ime ili id igraca kome zelite da prodate drogu:", "Ok", "Izadji");

			if( PlayerInfo[ userid ][ xLevel ] < 5)
				return SPD(playerid, dialog_SELLITEM, DSI, name, "Greska: Igrac nema level 5.\n\nUnesite ime ili id igraca kome zelite da prodate drogu:", "Ok", "Izadji");
			itemid = ChosenItem[ playerid ];

			if( itemid == -1 )
			    return false;

		    new stringic[ 180 ];
		    format( stringic, sizeof( stringic ), "Predmet: %s (Kolicina: %d)\n\nUnesite kolicinu koju zelite prodati %s i cijenu.\nPrimer: 100 120000", inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invQuantity ], RPImeIgraca( userid ) );
			SPD( playerid, dialog_SELLITEM_2, DSI, name, stringic, "Prodaj", "Izadji" );
			GiveItemID[ playerid ] = userid;
		}
	}
	else if( dialogid == dialog_SELLITEM_2 ) {
		if( !response ) return true;
		if( response ) {

		    if( GiveItemID[ playerid ] != INVALID_PLAYER_ID ) {

				new userid = GiveItemID[ playerid ],
			        	itemid = ChosenItem[ playerid ];

			    new name[ 64 ];
				format( name, sizeof( name ), "%s (%d)", inventoryInfo[ playerid ][ ChosenItem[ playerid ] ][ invItem ], inventoryInfo[ playerid ][ ChosenItem[ playerid ] ][ invQuantity ] );

			    new kolicina, cena;
			    if( sscanf( inputtext, "ii", kolicina, cena ) ) {
			        new stringic[ 180 ];
				    format( stringic, sizeof( stringic ), "Predmet: %s (Kolicina: %d)\n\nUnesite kolicinu koju zelite prodati %s i cijenu.\nPrimer: 100 120000", inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invQuantity ], RPImeIgraca( userid ) );
					SPD( playerid, dialog_SELLITEM_2, DSI, name, stringic, "Prodaj", "Izadji" );
					return true;
			    }
				if( cena < 1 ) return SendErrorMessage( playerid, "Cijena ne moze ispod 1." );
			    if( inventoryInfo[ playerid ][ itemid ][ invQuantity ] < kolicina || kolicina < 1 ) return SendErrorMessage( playerid, "Nemate toliko droge koje zelite da prodate igracu." );
			    if( PlayerInfo[ userid ][ xNovac ] < cena ) return SendErrorMessage( playerid, "Igrac nema toliko novca kod sebe." );

			    new stringic[ 180 ];
				format( stringic, sizeof( stringic ), "%s vam nudi:\n\n%s (Kolicina: %d)\nCijena po kojoj vam nudi iznosi: %d$", RPImeIgraca( playerid ), inventoryInfo[ playerid ][ itemid ][ invItem ], kolicina, cena );
				SPD( userid, dialog_SELLITEM_3, DSMSG, "Prodaja droge", stringic, "Prihvati", "Odbij" );

				GiveItemID[ userid ] = playerid;
			    ChosenItem[ userid ] = itemid;
				ItemPrice[ userid ] = cena;
				ItemQuantity[ userid ] = kolicina;
			}
		}
	}
	else if( dialogid == dialog_bodyguard ) {

		if( !response ) {
		    new ponudio = PonudioIgrac[ playerid ];

		    if( PonudioIgrac[ playerid ] != INVALID_PLAYER_ID ) SendJobMessage( ponudio, "Igrac kome ste ponudli zastitu je odbio istu." );

			SendInfoMessage( playerid, "Odbili ste zastitu." );
	    }
	    else if( response ) {

			if( PonudioIgrac[ playerid ] != INVALID_PLAYER_ID ) {

			    new ponudio = PonudioIgrac[ playerid ];
				

				new price = 2000;
				new armor = 50;

				if( PlayerInfo[ playerid ][ xNovac ] < price ) return SendErrorMessage( playerid, "Nemate %d$ u novcaniku.", price );

				KGEyes_GivePlayerMoney( playerid, -price ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -price, "Tjelohranitelj zastita" );

				DodajIgracuArmour( playerid, armor );

				PlayerTimer[ ponudio ][ xSvercer ] = 5;

				SendInfoMessage( playerid, "Telohranitelj %s vam je prodao zastitu(+armor %d posto), za %d$.", RPImeIgraca( ponudio ), armor, price );

				SendJobMessage( ponudio, "Igracu %s ste prodali zastitu(+armor %d posto), za %d$.", RPImeIgraca( playerid ), armor, price/2 );

				KGEyes_GivePlayerMoney( ponudio, price/2, false ), PlayerMoneyTrackSave( ponudio, MONEY_HANDS, price/2, "Tjelohranitelj ponuda" );
				

				PonudioIgrac[ playerid ] = -1;
			}
			else {
				SendInfoMessage( playerid, "Igrac koji vam nudi zastitu je napustio server." );
				PonudioIgrac[ playerid ] = -1;
			}
		}
	}
	else if( dialogid == dialog_appeal ) {

		if( !response ) {
		    new ponudio = PonudioIgrac[ playerid ];

		    if( PonudioIgrac[ playerid ] != INVALID_PLAYER_ID ) SendJobMessage( ponudio, "Igrac kome ste ponudli smanjenje kazne je odbio istu." );

			SendInfoMessage( playerid, "Odbili ste smanjenje kazne." );
	    }
	    else if( response ) {

			if( PonudioIgrac[ playerid ] != INVALID_PLAYER_ID ) {

			    new ponudio = PonudioIgrac[ playerid ];
				
				new price = 10000;
				new minutes = 5;

				if( PlayerInfo[ playerid ][ xBRacun ] < price ) return SendErrorMessage( playerid, "Nemate %d$ na bankovnom racunu.", price );

				new time = PlayerInfo[ playerid ][ xZatvorVrijeme ];
	   			if( (time - minutes) <= 0 ) {

					KGEyes_SetPlayerPos( playerid, 1809.9514,-1599.7542,13.5469 );
					SetPlayerWorldBounds( playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000 );
				    UcitajObjekte( playerid );
		  			SetCameraBehindPlayer( playerid );
				  	SetPlayerInterior( playerid, 0 );
					SetPlayerVirtualWorld( playerid, 0 );
					GameTextForPlayer( playerid, "~g~Sloboda~n~~w~Pokusajte biti bolji gradjanin", 5000, 1);

		    		PlayerInfo[ playerid ][ xZatvor ] = 0;
					PlayerInfo[ playerid ][ xZatvorVrijeme ] = 0;
					if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_LHAND ) ) RemovePlayerAttachedObject( playerid, OBJECT_SLOT_LHAND );
					IsDigging[playerid] = 0;
	   			}
	   			else {
	   			    PlayerInfo[ playerid ][ xZatvorVrijeme ] -= minutes;
	   			}

                PlayerInfo[ playerid ][ xBRacun ] -= price;
				PlayerMoneyTrackSave( playerid, MONEY_BANK, -price, "Advokat" );
                sql_user_update_integer( playerid, "bank_money", PlayerInfo[ playerid ][ xBRacun ] );
                UpdateBankTD( playerid );

				SendInfoMessage( playerid, "Advokat %s je smanjio vasu kaznu za %d minuta, za %d$.", RPImeIgraca( ponudio ), minutes, price );
				SendInfoMessage( playerid, "Pare su vam skinute sa bankovnog racuna." );

				SendJobMessage( ponudio, "Igracu %s ste smanjili kaznu za %d minuta, za %d$.", RPImeIgraca( playerid ), minutes, price );
				SendJobMessage( ponudio, "Pare su vam dodate na bankovni racun." );
				PlayerInfo[ ponudio ][ xBRacun ] += price;
				PlayerInfo[ ponudio ][ xLawAppeals ]++;
				PlayerMoneyTrackSave( ponudio, MONEY_BANK, price, "Advokat ponudio" );
				UpdateBankTD( ponudio );
			
				new q[ 256 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `users` SET `bank_money` = '%d', `law_appeals` = '%d' WHERE `user_id` = '%d'",
                	PlayerInfo[ ponudio ][ xBRacun ],
					PlayerInfo[ ponudio ][ xLawAppeals ],
					PlayerInfo[ ponudio ][ xID ] );
	   			mysql_tquery( _dbConnector, q );

				PonudioIgrac[ playerid ] = -1;
			}
			else {
				SendInfoMessage( playerid, "Igrac koji vam nudi smanjenje kazne je napustio server." );
				PonudioIgrac[ playerid ] = -1;
			}
		}
	}
	else if( dialogid == dialog_SELLITEM_3 ) {
		if( !response ) {
		    if( GiveItemID[ playerid ] != INVALID_PLAYER_ID ) {

		    	new userid = GiveItemID[ playerid ];
				SendInfoMessage( userid, "%s je odbio vasu ponudu za prodaju droge.", RPImeIgraca( playerid ) );
				SendInfoMessage( playerid, "Odbili ste ponudu za kupovinu droge od %s.", RPImeIgraca( userid ) );

				ChosenItem[ playerid ] = -1;
			    ItemPrice[ playerid ] = 0;
			    ItemQuantity[ playerid ] = 0;
			    GiveItemID[ playerid ] = -1;
			}
			else {
				SendInfoMessage( playerid, "Odbili ste ponudu za kupovinu droge." );

				ChosenItem[ playerid ] = -1;
			    ItemPrice[ playerid ] = 0;
			    ItemQuantity[ playerid ] = 0;
			    GiveItemID[ playerid ] = -1;
			}
		}
		else if( response ) {

			if( GiveItemID[ playerid ] != INVALID_PLAYER_ID ) {

			    new userid = GiveItemID[ playerid ],
			    	itemid = ChosenItem[ playerid ],
			    	kolicina = ItemQuantity[ playerid ],
					cena = ItemPrice[ playerid ];

			    if( inventoryInfo[ userid ][ itemid ][ invQuantity ] < kolicina ) return SendErrorMessage( playerid, "Igrac koji vam nudi prodaju ne poseduje ponudjenu kolicinu droge." );

			    new id = Inventory_Add( playerid, inventoryInfo[ userid ][ itemid ][ invItem ], inventoryInfo[ userid ][ itemid ][ invModel ], kolicina );

			    if( id == -1 ) return SendErrorMessage(playerid, "Nemate mjesta u inventoriju za drogu.");
				if( PlayerInfo[ playerid ][ xNovac ] < cena ) return SendErrorMessage( playerid, "Nemate dovoljno novca." );

			    SendInfoMessage( userid, "Prodao si \"%s(%dg)\" igracu %s za %d$.", inventoryInfo[ userid ][ itemid ][ invItem ], kolicina, RPImeIgraca( playerid ), cena );
			    SendInfoMessage( playerid, "%s vam je prodao \"%s(%dg)\" za %d$ (dodano u inventory).", RPImeIgraca( userid ), inventoryInfo[ userid ][ itemid ][ invItem ], kolicina, cena );

				KGEyes_GivePlayerMoney( playerid, -cena ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -cena, "Kupovina droge od igraca" );
				KGEyes_GivePlayerMoney( userid, cena ), PlayerMoneyTrackSave( userid, MONEY_HANDS, cena, "Prodaja droge igracu" );

				Inventory_Remove_2( userid, itemid, kolicina );

				ChosenItem[ playerid ] = -1;
			    ItemPrice[ playerid ] = 0;
			    ItemQuantity[ playerid ] = 0;
			    GiveItemID[ playerid ] = -1;
				new textstring[128];
				format(textstring, sizeof(textstring), "Igrac %s prodao je %s %dg droge za %d$", RPImeIgraca( userid ),RPImeIgraca( playerid ), kolicina, cena );
				LogSave( "Ostalo/PlayerSellDroga.log", textstring );
			}
			else {
				SendInfoMessage( playerid, "Igrac koji vam nudi prodaju je napustio server tako da je ovo propalo." );

				ChosenItem[ playerid ] = -1;
			    ItemPrice[ playerid ] = 0;
			    ItemQuantity[ playerid ] = 0;
			    GiveItemID[ playerid ] = -1;
			}
		}
	}
	else if( dialogid == dialog_giveClothes ) {
		if( !response ) return true;
		if( response ) {
			new
		        userid = -1,
				slot = chosen_clothes_slot[ playerid ];

			if( sscanf(inputtext, "u", userid ) )
			    return SPD( playerid, dialog_giveClothes, DSI, "Daj odjecu", "Unesite ime ili id igraca:", "Ok", "Izadji");

			if( userid == INVALID_PLAYER_ID )
			    return SPD( playerid, dialog_giveClothes, DSI, "Daj odjecu", "Greska: Nepostojeci igrac.\n\nUnesite ime ili id igraca:", "Ok", "Izadji");

		    if( !IsPlayerNearPlayer( 6.0, playerid, userid ) )
				return SPD( playerid, dialog_giveClothes, DSI, "Daj odjecu", "Greska: Niste u blizini tog igraca.\n\nUnesite ime ili id igraca:", "Ok", "Izadji");

		    if( userid == playerid )
				return SPD( playerid, dialog_giveClothes, DSI, "Daj odjecu", "Greska: Nemozete dati odjecu samome sebi.\n\nUnesite ime ili id igraca:", "Ok", "Izadji");

			switch( (slot-1) ) {
				case 0: { if( clothes_info[ playerid ][ x_slot_1_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 1." ); }
				case 1: { if( clothes_info[ playerid ][ x_slot_2_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 2." ); }
				case 2: { if( clothes_info[ playerid ][ x_slot_3_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 3." ); }
				case 3: { if( clothes_info[ playerid ][ x_slot_4_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 4." ); }
			}

	        if( object_on_player[ playerid ][ slot-1 ] ) return SendErrorMessage( playerid, "Da bi ste nekom dali vas objekt, prvo morate da ga skinete sa sebe." );


	        if( clothes_info[ userid ][ x_slot_1_model ] == -1 ) {

		        switch( (slot-1) ) {
        			case 0: {
				        clothes_info[ userid ][ x_slot_1_model ] = clothes_info[ playerid ][ x_slot_1_model ];
				        clothes_info[ userid ][ x_slot_1_bodypart ] = clothes_info[ playerid ][ x_slot_1_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_1_pos ][ i ] = clothes_info[ playerid ][ x_slot_1_pos ][ i ];
						}
					}
        			case 1: {
				        clothes_info[ userid ][ x_slot_1_model ] = clothes_info[ playerid ][ x_slot_2_model ];
				        clothes_info[ userid ][ x_slot_1_bodypart ] = clothes_info[ playerid ][ x_slot_2_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_1_pos ][ i ] = clothes_info[ playerid ][ x_slot_2_pos ][ i ];
						}
					}
        			case 2: {
				        clothes_info[ userid ][ x_slot_1_model ] = clothes_info[ playerid ][ x_slot_3_model ];
				        clothes_info[ userid ][ x_slot_1_bodypart ] = clothes_info[ playerid ][ x_slot_3_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_1_pos ][ i ] = clothes_info[ playerid ][ x_slot_3_pos ][ i ];
						}
					}
        			case 3: {
				        clothes_info[ userid ][ x_slot_1_model ] = clothes_info[ playerid ][ x_slot_4_model ];
				        clothes_info[ userid ][ x_slot_1_bodypart ] = clothes_info[ playerid ][ x_slot_4_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_1_pos ][ i ] = clothes_info[ playerid ][ x_slot_4_pos ][ i ];
						}
					}
				}
		    }
		    else if( clothes_info[ playerid ][ x_slot_2_model ] == -1 ) {

		        switch( (slot-1) ) {
        			case 0: {
				        clothes_info[ userid ][ x_slot_2_model ] = clothes_info[ playerid ][ x_slot_1_model ];
				        clothes_info[ userid ][ x_slot_2_bodypart ] = clothes_info[ playerid ][ x_slot_1_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_2_pos ][ i ] = clothes_info[ playerid ][ x_slot_1_pos ][ i ];
						}
					}
        			case 1: {
				        clothes_info[ userid ][ x_slot_2_model ] = clothes_info[ playerid ][ x_slot_2_model ];
				        clothes_info[ userid ][ x_slot_2_bodypart ] = clothes_info[ playerid ][ x_slot_2_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_2_pos ][ i ] = clothes_info[ playerid ][ x_slot_2_pos ][ i ];
						}
					}
        			case 2: {
				        clothes_info[ userid ][ x_slot_2_model ] = clothes_info[ playerid ][ x_slot_3_model ];
				        clothes_info[ userid ][ x_slot_2_bodypart ] = clothes_info[ playerid ][ x_slot_3_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_2_pos ][ i ] = clothes_info[ playerid ][ x_slot_3_pos ][ i ];
						}
					}
        			case 3: {
				        clothes_info[ userid ][ x_slot_2_model ] = clothes_info[ playerid ][ x_slot_4_model ];
				        clothes_info[ userid ][ x_slot_2_bodypart ] = clothes_info[ playerid ][ x_slot_4_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_2_pos ][ i ] = clothes_info[ playerid ][ x_slot_4_pos ][ i ];
						}
					}
				}
		    }
		    else if( clothes_info[ playerid ][ x_slot_3_model ] == -1 ) {

		        switch( (slot-1) ) {
        			case 0: {
				        clothes_info[ userid ][ x_slot_3_model ] = clothes_info[ playerid ][ x_slot_1_model ];
				        clothes_info[ userid ][ x_slot_3_bodypart ] = clothes_info[ playerid ][ x_slot_1_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_3_pos ][ i ] = clothes_info[ playerid ][ x_slot_1_pos ][ i ];
						}
					}
        			case 1: {
				        clothes_info[ userid ][ x_slot_3_model ] = clothes_info[ playerid ][ x_slot_2_model ];
				        clothes_info[ userid ][ x_slot_3_bodypart ] = clothes_info[ playerid ][ x_slot_2_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_3_pos ][ i ] = clothes_info[ playerid ][ x_slot_2_pos ][ i ];
						}
					}
        			case 2: {
				        clothes_info[ userid ][ x_slot_3_model ] = clothes_info[ playerid ][ x_slot_3_model ];
				        clothes_info[ userid ][ x_slot_3_bodypart ] = clothes_info[ playerid ][ x_slot_3_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_3_pos ][ i ] = clothes_info[ playerid ][ x_slot_3_pos ][ i ];
						}
					}
        			case 3: {
				        clothes_info[ userid ][ x_slot_3_model ] = clothes_info[ playerid ][ x_slot_4_model ];
				        clothes_info[ userid ][ x_slot_3_bodypart ] = clothes_info[ playerid ][ x_slot_4_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_3_pos ][ i ] = clothes_info[ playerid ][ x_slot_4_pos ][ i ];
						}
					}
				}
		    }
		    else if( clothes_info[ playerid ][ x_slot_4_model ] == -1 ) {

		        switch( (slot-1) ) {
        			case 0: {
				        clothes_info[ userid ][ x_slot_4_model ] = clothes_info[ playerid ][ x_slot_1_model ];
				        clothes_info[ userid ][ x_slot_4_bodypart ] = clothes_info[ playerid ][ x_slot_1_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_4_pos ][ i ] = clothes_info[ playerid ][ x_slot_1_pos ][ i ];
						}
					}
        			case 1: {
				        clothes_info[ userid ][ x_slot_4_model ] = clothes_info[ playerid ][ x_slot_2_model ];
				        clothes_info[ userid ][ x_slot_4_bodypart ] = clothes_info[ playerid ][ x_slot_2_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_4_pos ][ i ] = clothes_info[ playerid ][ x_slot_2_pos ][ i ];
						}
					}
        			case 2: {
				        clothes_info[ userid ][ x_slot_4_model ] = clothes_info[ playerid ][ x_slot_3_model ];
				        clothes_info[ userid ][ x_slot_4_bodypart ] = clothes_info[ playerid ][ x_slot_3_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_4_pos ][ i ] = clothes_info[ playerid ][ x_slot_3_pos ][ i ];
						}
					}
        			case 3: {
				        clothes_info[ userid ][ x_slot_4_model ] = clothes_info[ playerid ][ x_slot_4_model ];
				        clothes_info[ userid ][ x_slot_4_bodypart ] = clothes_info[ playerid ][ x_slot_4_bodypart ];
				        for( new i = 0; i < 9; i ++ ) {
						    clothes_info[ userid ][ x_slot_4_pos ][ i ] = clothes_info[ playerid ][ x_slot_4_pos ][ i ];
						}
					}
				}
		    }
			else return SendErrorMessage( playerid, "Svi slotovi odece igraca su zauzeti." );

	        switch( (slot-1) ) {
        		case 0: {
		       		clothes_info[ playerid ][ x_slot_1_model ] = -1;
		       		clothes_info[ playerid ][ x_slot_1_bodypart ] = -1;
		       		for( new i = 0; i < 9; i ++ ) {
					    clothes_info[ playerid ][ x_slot_1_pos ][ i ] = 0;
					}
        	    }
        	    case 1: {
					clothes_info[ playerid ][ x_slot_2_model ] = -1;
					clothes_info[ playerid ][ x_slot_2_bodypart ] = -1;
					for( new i = 0; i < 9; i ++ ) {
					    clothes_info[ playerid ][ x_slot_2_pos ][ i ] = 0;
					}
				}
				case 2: {
					clothes_info[ playerid ][ x_slot_3_model ] = -1;
					clothes_info[ playerid ][ x_slot_3_bodypart ] = -1;
					for( new i = 0; i < 9; i ++ ) {
					    clothes_info[ playerid ][ x_slot_3_pos ][ i ] = 0;
					}
				}
				case 3: {
					clothes_info[ playerid ][ x_slot_4_model ] = -1;
					clothes_info[ playerid ][ x_slot_4_bodypart ] = -1;
					for( new i = 0; i < 9; i ++ ) {
					    clothes_info[ playerid ][ x_slot_4_pos ][ i ] = 0;
					}
        	    }
			}

			SendInfoMessage( playerid, "Dao si svoj objekat odece igracu %s.", RPImeIgraca( userid ) );
		    SendInfoMessage( userid, "%s vam je dao svoj objekat odjece ( dodano u /odjeca ).", RPImeIgraca( playerid ) );

			sql_user_update_clothes( playerid );
			sql_user_update_clothes( userid );
		}
	}
	else if( dialogid == dialog_GIVEITEM ) {
		if( !response ) return true;
		if( response ) {
		    static
		        userid = -1,
				itemid = -1;

			if( sscanf(inputtext, "u", userid ) )
			    return SPD(playerid, dialog_GIVEITEM, DSI, "Daj predmet", "Unesite ime ili id igraca:", "Ok", "Izadji");

			if( userid == INVALID_PLAYER_ID )
			    return SPD(playerid, dialog_GIVEITEM, DSI, "Daj predmet", "Greska: Nepostojeci igrac.\n\nUnesite ime ili id igraca:", "Ok", "Izadji");

		    if( !IsPlayerNearPlayer( 6.0, playerid, userid ) )
				return SPD(playerid, dialog_GIVEITEM, DSI, "Daj predmet", "Greska: Niste u blizini tog igraca.\n\nUnesite ime ili id igraca:", "Ok", "Izadji");

		    if( userid == playerid )
				return SPD(playerid, dialog_GIVEITEM, DSI, "Daj predmet", "Greska: Nemozete dati predmet samome sebi.\n\nUnesite ime ili id igraca:", "Ok", "Izadji");

			itemid = ChosenItem[ playerid ];

			if( itemid == -1 )
			    return false;


			if( inventoryInfo[ playerid ][ itemid ][ invQuantity ] == 1 ) {

				if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 11736 ) {
					if( (Inventory_Count( userid, "Prva Pomoc" )+1) > 5 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 5 paketa prve pomoci." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 2702 ) {
					if( (Inventory_Count( userid, "Pizza" )+1) > 15 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 15 pizza." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 2703 ) {
					if( (Inventory_Count( userid, "Hamburger" )+1) > 15 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 15 hamburgera." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 2663 ) {
					if( (Inventory_Count( userid, "Piletina" )+1) > 15 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 15 piletina." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 1650 ) {
					if( (Inventory_Count( userid, "Kantica" )+1) > 5 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 5 kantica." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 19624 ) {
					if( (Inventory_Count( userid, "Alat za popravak" )+1) > 5 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 5 alata za popravak." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 365 ) {
					if( (Inventory_Count( userid, "Spraycan" )+1) > 10 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 10 spreja." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 18632 ) {
					if( Inventory_HasItem( userid, "Stap" ) ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati samo jedan stap." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 19893 ) {
					if( Inventory_HasItem( userid, "Laptop" ) ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati samo jedan laptop." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 1654 ) {
					if( Inventory_HasItem( userid, "Dinamit" ) ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati samo jedan dinamit." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 19036 ) {
					if( (Inventory_Count( userid, "Maska" )+1) > 5  ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati samo 5 maski." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 19473 ) {
					if( (Inventory_Count( userid, "Seme" )+1) > 10 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 10 sjemena." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 19921 ) {
					if( (Inventory_Count( userid, "Alat za obijanje" )+1) > 5 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 5 alata za obijanje." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 19088 ) {
					if( (Inventory_Count( userid, "Uze" )+1) > 5 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 5 uza." );
				}

			    new id = Inventory_Add( userid, inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invModel ] );

			    if( id == -1 )
					return SendErrorMessage(playerid, "Taj igrac nema vise mjesta za stvari.");

				if( IsInventoryWeapon( inventoryInfo[ playerid ][ itemid ][ invItem ] ) ) {
					OruzjeUInventoriju[ userid ]++;
            		OruzjeUInventoriju[ playerid ]--;
				}

			    SendInfoMessage( playerid, "Dao si \"%s\" igracu %s.", inventoryInfo[ playerid ][ itemid ][ invItem ], RPImeIgraca( userid ) );
			    SendInfoMessage( userid, "%s vam je dao \"%s\" (dodano u inventory).", RPImeIgraca( playerid ), inventoryInfo[ playerid ][ itemid ][ invItem ] );

				Inventory_Remove_2( playerid, itemid, 1);
	  		}
			else {
			    new stringic[ 180 ];
			    format( stringic, sizeof( stringic ), "Predmet: %s (Kolicina: %d)\n\nUnesite kolicinu koju zelite dati %s:", inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invQuantity ], RPImeIgraca( userid ) );
				SPD( playerid, dialog_GIVEQUANTITY, DSI, "Daj predmet", stringic, "Daj", "Izadji" );
				GiveItemID[ playerid ] = userid;
			}
		}
	}
	else if( dialogid == dialog_GIVEQUANTITY ) {
		if( !response ) return true;
		if( response ) {
			if( GiveItemID[ playerid ] != INVALID_PLAYER_ID ) {
			    new
			        userid = GiveItemID[ playerid ],
			        itemid = ChosenItem[ playerid ];

				if( isnull( inputtext ) ) {
				    new stringic[ 180 ];
				    format( stringic, sizeof( stringic ), "Predmet: %s (Kolicina: %d)\n\nUnesite kolicinu koju zelite dati %s:", inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invQuantity ], RPImeIgraca( userid ) );
					SPD( playerid, dialog_GIVEQUANTITY, DSI, "Daj predmet", stringic, "Daj", "Izadji" );
				    return 1;
				}

				if( strval( inputtext ) < 1 || strval( inputtext ) > inventoryInfo[ playerid ][ itemid ][ invQuantity ] ) {
				    new stringic[ 180 ];
				    format( stringic, sizeof( stringic ), "Predmet: %s (Kolicina: %d)\n\nUnesite kolicinu koju zelite dati %s:", inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invQuantity ], RPImeIgraca( userid ) );
					SPD( playerid, dialog_GIVEQUANTITY, DSI, "Daj predmet", stringic, "Daj", "Izadji" );
				    return 1;
				}

				new ammount = strval( inputtext );

				if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 11736 ) {
					if( (Inventory_Count( userid, "Prva Pomoc" )+ammount) > 5 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 5 paketa prve pomoci." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 2702 ) {
					if( (Inventory_Count( userid, "Pizza" )+ammount) > 15 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 15 pizza." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 2703 ) {
					if( (Inventory_Count( userid, "Hamburger" )+ammount) > 15 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 15 hamburgera." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 2663 ) {
					if( (Inventory_Count( userid, "Piletina" )+ammount) > 15 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 15 piletina." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 1650 ) {
					if( (Inventory_Count( userid, "Kantica" )+ammount) > 5 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 5 kantica." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 19624 ) {
					if( (Inventory_Count( userid, "Alat za popravak" )+ammount) > 5 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 5 alata za popravak." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 365 ) {
					if( (Inventory_Count( userid, "Spraycan" )+ammount) > 10 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 10 spreja." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 18632 ) {
					if( Inventory_HasItem( userid, "Stap" ) ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati samo jedan stap." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 19893 ) {
					if( Inventory_HasItem( userid, "Laptop" ) ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati samo jedan laptop." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 1654 ) {
					if( Inventory_HasItem( userid, "Dinamit" ) ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati samo jedan dinamit." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 19036 ) {
					if( Inventory_HasItem( userid, "Maska" ) ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati samo jednu masku." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 19473 ) {
					if( (Inventory_Count( userid, "Seme" )+ammount) > 10 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 10 sjemena." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 19921 ) {
					if( (Inventory_Count( userid, "Alat za obijanje" )+1) > 5 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 5 alata za obijanje." );
				}
				else if( inventoryInfo[ playerid ][ itemid ][ invModel ] == 19088 ) {
					if( (Inventory_Count( userid, "Uze" )+1) > 5 ) return SendErrorMessage( playerid, "Igrac u inventoriju moze imati maximum 5 uza." );
				}

		        new id = Inventory_Add( userid, inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invModel ], ammount );

			    if( id == -1 )
					return SendErrorMessage(playerid, "Taj igrac nema vise mjesta za stvari." );

			    SendInfoMessage( playerid, "Dao si \"%s\" igracu %s.", inventoryInfo[ playerid ][ itemid ][ invItem ], RPImeIgraca( userid ) );
			    SendInfoMessage( userid, "%s vam je dao \"%s\" (dodano u inventory).", RPImeIgraca( playerid ), inventoryInfo[ playerid ][ itemid ][ invItem ] );

				Inventory_Remove_2( playerid, itemid, ammount );
			}
		}
	}
	else if( dialogid == dialog_TUNING ) {
	        if( response ) {
	            if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
	            if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mjestu vozaca." );
				new vehicleid = GetPlayerVehicleID( playerid ), Float:Pos[ 6 ];

	            TPInfo[ playerid ][ tID ] = -1;

				switch( listitem ) {
	                case 0: {

						for( new i = 0; i < NUMBER_TYPE_PAINTJOB; i++ ) {
			                if( pjInfo[ i ][ vehID ] == GetVehicleModel( vehicleid ) ) {
				            	TPInfo[ playerid ][ tID ] = i;
								break;
							}
			           	}
						if( TPInfo[ playerid ][ tID ] == -1 ) {
							SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );
							SetCameraBehindPlayer( playerid );
							TuningTDControl( playerid, false );
							PlayerTuningCar[ playerid ] = false;
							return 1;
						}

						new pid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tPaintjob ] = true;

						GetVehicleColor( vehicleid, TPInfo[ playerid ][ PJColor ][ 0 ], TPInfo[ playerid ][ PJColor ][ 1 ] );

						KGEyes_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        KGEyes_ChangeVehicleColor( vehicleid, 1, 1 );
                        ChangeVehiclePaintjob( vehicleid, pjInfo[ pid ][ pNumber ] );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Paintjobs" );
	                    format( globalstring, sizeof( globalstring ), "%s", pjInfo[ pid ][ pNameBre ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 5 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, PLAVA );
					}
	                case 1: {
						SPD( playerid, dialog_TUNING_2, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 boje koje zelis za svoje auto.\nFormat:0 1", D_ODABERI, D_ODUSTANI );
	                }
	                case 2: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_EXHAUST ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) {
							SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );
							SetCameraBehindPlayer( playerid );
							TuningTDControl( playerid, false );
							PlayerTuningCar[ playerid ] = false;
							return 1;
						}

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_EXHAUST;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    KGEyes_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Exhausts" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], -2, -5, 0 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, PLAVA );
	                }
	                case 3: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_FRONT_BUMPER ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) {
							SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );
							SetCameraBehindPlayer( playerid );
							TuningTDControl( playerid, false );
							PlayerTuningCar[ playerid ] = false;
							return 1;
						}

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_FRONT_BUMPER;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    KGEyes_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Front Bumper" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 0.5 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, PLAVA );
	                }
	                case 4: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_REAR_BUMPER ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) {
							SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );
							SetCameraBehindPlayer( playerid );
							TuningTDControl( playerid, false );
							PlayerTuningCar[ playerid ] = false;
							return 1;
						}

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_REAR_BUMPER;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    KGEyes_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Rear Bumper" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 0.5 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, PLAVA );
	                }
	                case 5: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_ROOF ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) {
							SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );
							SetCameraBehindPlayer( playerid );
							TuningTDControl( playerid, false );
							PlayerTuningCar[ playerid ] = false;
							return 1;
						}

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_ROOF;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    KGEyes_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Roof" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, PLAVA );
	                }
	                case 6: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_SPOILER ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) {
							SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );
							SetCameraBehindPlayer( playerid );
							TuningTDControl( playerid, false );
							PlayerTuningCar[ playerid ] = false;
							return 1;
						}

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_SPOILER;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    KGEyes_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Spoilers" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, PLAVA );
	                }
	                case 7: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_SIDESKIRT ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) {
							SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );
							SetCameraBehindPlayer( playerid );
							TuningTDControl( playerid, false );
							PlayerTuningCar[ playerid ] = false;
							return 1;
						}

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_SIDESKIRT;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    KGEyes_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Side Skirts" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 0.5 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, PLAVA );
	                }
	                case 8: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_WHEELS ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) {
							SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );
							SetCameraBehindPlayer( playerid );
							TuningTDControl( playerid, false );
							PlayerTuningCar[ playerid ] = false;
							return 1;
						}

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_WHEELS;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    KGEyes_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Wheels" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 0.5 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, PLAVA );
	                }
	                case 9: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_STEREO ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) {
							SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );
							SetCameraBehindPlayer( playerid );
							TuningTDControl( playerid, false );
							PlayerTuningCar[ playerid ] = false;
							return 1;
						}

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_STEREO;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    KGEyes_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Car Stereo" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, PLAVA );
	                }
	                case 10: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_HYDRAULICS ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) {
							SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );
							SetCameraBehindPlayer( playerid );
							TuningTDControl( playerid, false );
							PlayerTuningCar[ playerid ] = false;
							return 1;
						}

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_HYDRAULICS;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    KGEyes_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Hydraulics" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 2, 2, 2 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, PLAVA );
	                }
	                case 11: {

	                    for( new i = 0; i < MAX_COMPONENTS; i++ ) {
			                if( cInfo[ i ][ cType ] == CARMODTYPE_NITRO ) {
			                    if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
				                    TPInfo[ playerid ][ tID ] = i;
									break;
								}
			                }
						}
	                    if( TPInfo[ playerid ][ tID ] == -1 ) {
							SendErrorMessage( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );
							SetCameraBehindPlayer( playerid );
							TuningTDControl( playerid, false );
							PlayerTuningCar[ playerid ] = false;
							return 1;
						}

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_NITRO;
						TPInfo[ playerid ][ tPaintjob ] = false;

	                    KGEyes_TogglePlayerControllable( playerid, false );
	                    TuningTDShow( playerid, true );

                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Nitro" );
	                    format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, PLAVA );
	                }
				}
	        }
	        else if( !response ) {
	            SetCameraBehindPlayer( playerid );
	            TuningTDControl( playerid, false );
	            PlayerTuningCar[ playerid ] = false;
	        }
    }
    else if( dialogid == dialog_TUNING_2 ) {
	        if( !response ) return 1;
			if( response ) {
			    if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
	            if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mjestu vozaca." );
				new vehicleid = GetPlayerVehicleID( playerid );
			    new b1, b2;
			    if( sscanf( inputtext, "ii", b1, b2 ) ) return SPD( playerid, dialog_TUNING_2, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 boje koje zelis za svoje auto.\nFormat:0 1", D_ODABERI, D_ODUSTANI );
				if( b1 < 0 || b2 < 0 || b1 > 255 || b2 > 255 ) return SendErrorMessage( playerid, "ID boje ne moze biti manji od 0 ili veci od 255!");

				KGEyes_ChangeVehicleColor( vehicleid, b1, b2 );
				PlayerTuningCar[ playerid ] = false;

				SPD( playerid, dialog_TUNING, DSL, D_NASLOV, "Paintjobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nWheels\nCar Stereo\nHydraulics\nNitro", D_ODABERI, D_ODUSTANI );
			}
	}
	
	else if( dialogid == dialog_VERIFIKACIJA ) {
		if( !response ) return true;
		if( response ) {
		    if( PlayerCode[ playerid ] == strval( inputtext ) && !isnull( inputtext ) ) {
				SendInfoMessage( playerid, "Vas account je verifikovan, sada mozete pokrenuti /posao." );
				AccountVerified[ playerid ] = true;
		    }
		    else return SendErrorMessage( playerid, "Uneli ste pogresan kod." );
		}
	}
	else if( dialogid == dialog_CHPIN ) {
		if( !response ) {
			SendInfoMessage( playerid, "Niste unijeli vas pin te ste kickani!" );
			KGEyes_Kick( playerid );
		}
		if( response ) {
		    if( PlayerInfo[playerid][xCHPin] == strval( inputtext ) && !isnull( inputtext ) ) {
				SendInfoMessage( playerid, "Uspjesno ste se ulogirali s vasim CH Pinom." );
				ChPinUnesen[playerid] = true;
				KGEyes_TogglePlayerControllable( playerid, true );
		    }
		    else {
				SendInfoMessage( playerid, "Pogrijesili ste vas pin te ste kickani!" );
				KGEyes_Kick( playerid );
			}
		}
	}
	
	else if( dialogid == dialog_WE ) {
	    if( !response ) return true;
        if( response ) {
            switch( listitem ) {

				case 0: {
				    WEStats[ playerid ] = 1;
				    SPD( playerid, dialog_WE_2, DSMSG, D_NASLOV, "Snijeg?:", "Ukljuci", "Iskljuci" );
				}
				case 1: {
				    WEStats[ playerid ] = 2;
				    SPD( playerid, dialog_WE_2, DSMSG, D_NASLOV, "Kapa:", "Stavi", "Skini" );
				}
			}
        }
	}
	#if ZIMSKI_MOD == 1
	else if( dialogid == dialog_WE_2 ) {
        if( response ) {
            switch( WEStats[ playerid ] ) {
                case 1: {
                    new Float:Pos[ 3 ];
			        Snow[ playerid ] = true;
					GetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
					SnowObject[ playerid ] = CreatePlayerObject( playerid, 18864, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ]-5, 0.0, 0.0, 0.0, 300.0 );
                    SendInfoMessage( playerid, "Ukljucio si snijeg." );
                }
                case 2: {
                    NKapa[ playerid ] = true;
                    SetPlayerAttachedObject(playerid, OBJECT_SLOT_WINTERCAP, 19065, 2, 0.120000, 0.040000, -0.003500, 0, 100, 100, 1.4, 1.4, 1.4);
                    SendInfoMessage( playerid, "Stavio si Kapu." );
                }
			}
			SaveServerStats( );
		}
		else if( !response ) {
            switch( WEStats[ playerid ] ) {
                case 1: {
                   	Snow[ playerid ] = false;
					DestroyPlayerObject( playerid, SnowObject[ playerid ] );
                    SendInfoMessage( playerid, "Iskljucio si snijeg." );
                }
                case 2: {
                   	NKapa[ playerid ] = false;
                   	RemovePlayerAttachedObject( playerid, OBJECT_SLOT_WINTERCAP );
                    SendInfoMessage( playerid, "Skinuo si kapu." );
                }
			}
		}
	}
	#endif
	else if( dialogid == dialog_CCTV ) { // edit kamere
		if( !response ) {
			WatchingTV{ playerid } = 0;
			cctvTDs[ playerid ] = false;
			return true;
		}
		if( response ) {

			WatchingTV{ playerid } = 1;
			ClearChat( playerid, 50 );

			for( new i = 0; i < 12; i ++) {
				TextDrawShowForPlayer( playerid, gCCTV[ i ] );
			}

			cctvTDs[ playerid ] = true;

			switch( listitem ) {
				case 0: {
                    for( new i = 0; i < 12; i ++) {
						TextDrawHideForPlayer( playerid, gCCTV[ i ] );
					}
					WatchingTV{ playerid } = 0;
					cctvTDs[ playerid ] = false;
					TogglePlayerSpectating( playerid, 0 );

					new id = PlayerInfo[ playerid ][ xClan ];
				    KGEyes_SetPlayerPos( playerid, org_info[ id ][ oSpawnPoint_X ], org_info[ id ][ oSpawnPoint_Y ], org_info[ id ][ oSpawnPoint_Z ] );
				  	UcitajObjekte( playerid );
				  	SetCameraBehindPlayer( playerid );
				   	SetPlayerInterior( playerid, org_info[ id ][ oInt ] );
					SetPlayerVirtualWorld( playerid, org_info[ id ][ oVw ] );

					if( TogHud[ playerid ] ) TogPlayerHud( playerid );

				    SendInfoMessage( playerid, "Ugasili ste sigurnosne kamere." );

				}
				case 1: { // LS Banka - Vanjska
					SetPlayerPos( playerid, 1501.1578, -1047.0571, -100.0 );
        			SetPlayerCameraPos(playerid, 1501.1578, -1047.0571, 36.1936);
					SetPlayerCameraLookAt(playerid, 1500.2927, -1046.5621, 35.8236);
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
				case 2: { // LS Banka - Kamera pored sefa
					SetPlayerPos( playerid, 1488.4882, -994.0038, -100.0 );
					SetPlayerCameraPos(playerid, 1488.3752, -994.3086, 29.3000);
					SetPlayerCameraLookAt(playerid, 1488.9996, -995.0881, 28.5500);
        			SetPlayerInterior( playerid, interior_info[ interiorBanke ][ int_IntExit ] );
        			SetPlayerVirtualWorld( playerid, interior_info[ interiorBanke ][ int_VwExit ] );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
				case 3: { // LS Banka - Kamera desno, pogled na sef i saltere
					SetPlayerPos( playerid, 1491.7358, -1009.4792, -100.0 );
					SetPlayerCameraPos(playerid, 1491.5564, -1009.0188, 29.2862);
					SetPlayerCameraLookAt(playerid, 1490.9951, -1008.1925, 28.9512);
        			SetPlayerInterior( playerid, interior_info[ interiorBanke ][ int_IntExit ] );
        			SetPlayerVirtualWorld( playerid, interior_info[ interiorBanke ][ int_VwExit ] );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
				case 4: { // LS Banka - Pogled na vrata sa saltera
					SetPlayerPos( playerid, 1474.7844, -995.1879, -100.0 );
					SetPlayerCameraPos(playerid, 1474.7844, -995.1879, 29.5265);
					SetPlayerCameraLookAt(playerid, 1473.9460, -995.7313, 29.1865);
        			SetPlayerInterior( playerid, interior_info[ interiorBanke ][ int_IntExit ] );
        			SetPlayerVirtualWorld( playerid, interior_info[ interiorBanke ][ int_VwExit ] );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
				case 5: { // LS Banka - Vanjska, Straznji ulaz
					SetPlayerPos( playerid, 1387.1265, -991.8574, -100.0 );
					SetPlayerCameraPos(playerid, 1387.1265, -991.8574, 35.7813);
					SetPlayerCameraLookAt(playerid, 1386.8932, -992.8295, 35.4114);
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
				case 6: { // LS Zlatara - Vanjska
					SetPlayerPos( playerid, 1673.7095, -1169.7745, -100.0 );
					SetPlayerCameraPos(playerid, 1673.7095, -1169.7745, 30.4835);
					SetPlayerCameraLookAt(playerid, 1674.6763, -1169.5092, 30.0185);
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
				case 7: { // LS Zlatara - Straznji ulaz
					SetPlayerPos( playerid, 1705.3840, -1201.5004, -100.0 );
					SetPlayerCameraPos(playerid, 1705.3840, -1201.5004, 26.7146);
					SetPlayerCameraLookAt(playerid, 1704.4148, -1201.7502, 26.3096);
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
				case 8: { // LS Zlatara - Unutrasnjost
					SetPlayerPos( playerid, 1681.2076, -1172.8077, -100.0 );
					SetPlayerCameraPos(playerid, 1681.2076, -1172.8077, 27.8769);
					SetPlayerCameraLookAt(playerid, 1681.9851, -1173.4431, 27.5069);
        			SetPlayerInterior( playerid, interior_info[ interiorZlatare ][ int_IntExit ] );
        			SetPlayerVirtualWorld( playerid, interior_info[ interiorZlatare ][ int_VwExit ] );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
				case 9: { // LV Banka - Pogled na prilaz i lift
					SetPlayerPos( playerid, 1996.6812, 1844.4158, 10.0 );
					SetPlayerCameraPos(playerid, 1996.6812, 1844.4158, 43.5052);
					SetPlayerCameraLookAt(playerid, 1995.8000, 1844.8990, 43.1603);
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
				case 10: { // LV Banka - Unutrasnjost
					SetPlayerPos( playerid, 1958.5435, 1927.4382, 10.0 );
					SetPlayerCameraPos(playerid, 1958.5435, 1927.4382, 134.0383);
					SetPlayerCameraLookAt(playerid, 1959.0063, 1926.5463, 133.6986);
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
				case 11: { // LV Banka - Sef
					SetPlayerPos( playerid, 1966.1481, 1897.2930, 10.0 );
					SetPlayerCameraPos(playerid, 1966.1481, 1897.2930, 133.0057);
					SetPlayerCameraLookAt(playerid, 1966.7523, 1898.0951, 132.5160);
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
				case 12: { // LV Zlatara - Unutrasnjost
					SetPlayerPos( playerid, 1896.0607, 1679.9048, -50.0 );
					SetPlayerCameraPos(playerid, 1896.0607, 1679.9048, 28.5680);
					SetPlayerCameraLookAt(playerid, 1896.8274, 1679.2571, 28.2683);
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
				case 13: { // LV Zlatara - Vanjska kamera
					SetPlayerPos( playerid, 1957.1246, 1681.7181, -50.0 );
					SetPlayerCameraPos(playerid, 1957.1246, 1681.7181, 22.0384);
					SetPlayerCameraLookAt(playerid, 1956.2076, 1682.1295, 21.7337);
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
				case 14: { // SF Banka - Unutarnja prizemlje
					SetPlayerPos( playerid, -1766.6354, 872.7777, -100.0 );
					SetPlayerCameraPos(playerid, -1766.6354, 872.7777, 28.1068);
					SetPlayerCameraLookAt(playerid, -1765.9192, 873.4802, 27.7719);
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
				case 15: { // SF Banka - Unutarnja kat
					SetPlayerPos( playerid, -1742.4280, 873.3401, -50.0 );
					SetPlayerCameraPos(playerid, -1742.4280, 873.3401, 157.5531);
					SetPlayerCameraLookAt(playerid, -1742.9543, 874.1943, 157.0331);
        			SetPlayerInterior( playerid, 0 );
        			SetPlayerVirtualWorld( playerid, 0 );
        			if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
				}
			}
			//if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
		}
	}
	//https://www.radiofm.rs/juzni-vetar
//<03:24:35> "Dimi": sve ovo mogu
//<03:24:40> "Dimi": preko inspect elemtna da uzmem linkove
//<03:24:44> "Baron": http://streaming.tdiradio.com:8000/dubstep.mp3
	else if( dialogid == dialog_RADIOPLAY ) {
		if( !response ) return true;
		if( response ) {
		    switch( listitem ) {
		    	case 0: {
		            StopAudioStreamForPlayer( playerid );
		            SendInfoMessage( playerid, "Ugasili ste radio/dj muziku." );
		            RadioUgasen[ playerid ] = 1;
		        }
		        case 1: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://radio.bumbumradio.rs:8010" );
		            SendInfoMessage( playerid, "Pustili ste BUM radio." );
		        }
		        case 2: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://stream.b92.net:7999/radio-b92.mp3.m3u" );
		            SendInfoMessage( playerid, "Pustili ste B92 radio." );
		        }
		        case 3: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://94.23.38.225:7005" );
		            SendInfoMessage( playerid, "Pustili ste Antena radio." );
		        }
		        case 4: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "https://www.exyuradio.net/radio-stanice/srbija/beograd/radio-juzni-vetar.html" );
		            SendInfoMessage( playerid, "Pustili ste radio Juzni Vetar." );
		        }
		        case 5: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "https://live.coolradio.rs/cool128" );
		            SendInfoMessage( playerid, "Pustili ste Cool Radio." );
		        }
		        case 6: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://naxi128.streaming.rs:9150" );
		            SendInfoMessage( playerid, "Pustili ste Naxi Radio." );
		        }
		        case 7: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://live.radio101.hr:9531/stream.mp3" );
		            SendInfoMessage( playerid, "Pustili ste Radio 101." );
		        }
		        case 8: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://carsija.topstream.net:19406" );
		            SendInfoMessage( playerid, "Pustili ste Carsija Radio." );
		        }
		        case 9: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://stream.rtvbn.com:8522" );
		            SendInfoMessage( playerid, "Pustili ste Radio BN." );
		        }
		        case 10: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://radiomvelaluka.ddns.net:8000/stream" );
		            SendInfoMessage( playerid, "Pustili ste Radio M." );
		        }
		        case 11: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://stream2.radio-banovina.hr:9996" );
		            SendInfoMessage( playerid, "Pustili ste Radio Banovina." );
		        }
		        case 12: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://stream.playradio.rs:8001/play.mp3" );
		            SendInfoMessage( playerid, "Pustili ste Radio Play." );
		        }
		        case 13: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://balkan.dj.topstream.net:8070" );
		            SendInfoMessage( playerid, "Pustili ste radio Balkan DJ." );
		        }
		        case 14: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://streaming.tdiradio.com/tdiradio.mp3" );
		            SendInfoMessage( playerid, "Pustili ste TDI Radio." );
		        }
		        case 15: {
		            StopAudioStreamForPlayer( playerid );
		            PlayAudioStreamForPlayer( playerid, "http://tachyon.shoutca.st:8289/xstream" );
		            SendInfoMessage( playerid, "Pustili ste radio D Plus." );
		        }
		        case 16:{
		        	SendInfoMessage( playerid, "Omogucili ste radio/dj muziku");
		        	RadioUgasen[ playerid ] = 0;

		        }
			}
		}
	}
	else if( dialogid == dialog_IZAZOVITRKA ) {

		if( !response ) return true;
		if( response ) {

		    if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Ne mozes ako nisi level 3+." );
		    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si cuffovan." );
		    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si vezan." );
			if( IsPlayerInAnyVehicle( playerid )  ) return SendErrorMessage( playerid, "Morate biti van vozila da bi otisli na izazov." );
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti van vozila da bi otisli na izazov." );
			//if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
			//if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );
			if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok imate wanted.");
		    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok ste u zatvoru / ALKATRAZ.");
            if( PlayerInfo[ playerid ][ xNovac ] < UlogTrke[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca za ulog." );

			if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Vec si na trci." );
			if( uInterijeru[ playerid ] != interiorIgraonice ) return SendErrorMessage( playerid, "Moras biti u igraonici." );

		    new igrac = PonudioIgrac[ playerid ];
    		new model = ModelTrke[ playerid ];
    		new ulog = UlogTrke[ playerid ];
    		new virtualworld = playerid;
			if( igrac == IPI ) return SendErrorMessage( playerid, "Igrac koji vas je izazvao nije na serveru." );
			if( PlayerInfo[ igrac ][ xNovac ] < ulog ) return SendErrorMessage( playerid, "Taj igrac nema dovoljno novca." );

            if( PljackaNovac[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
    		if( PljackaNovac[ igrac ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
    		if( PljackaZlato[ igrac ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
            if( PljackaZlato[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );

            if( NaUtrci[ igrac ] ) return SendErrorMessage( playerid, "Igrac je vec na trci." );

			GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
			PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
			PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );

			GetPlayerPos( igrac, PlayerPos[ igrac ][ 0 ], PlayerPos[ igrac ][ 1 ], PlayerPos[ igrac ][ 2 ] );
			PlayerPosInt[ igrac ] = GetPlayerInterior( igrac );
			PlayerPosVW[ igrac ] = GetPlayerVirtualWorld( igrac );

			TrkaVozilo[ igrac ] = KGEyes_CreateVehicle( model, -1392.8976, -226.2226, 1042.9152, 0, random( 128 ), random( 128 ), 3600 );
			ResetVehicle( TrkaVozilo[ igrac ] );
		    KGEyes_SetPlayerPos( igrac, -1392.8976, -226.2226, 1042.9152 );
			KGEyes_PutPlayerInVehicle( igrac, TrkaVozilo[ igrac ], 0 );
		    SetVehicleVirtualWorld( TrkaVozilo[ igrac ], virtualworld );
		    LinkVehicleToInterior( TrkaVozilo[ igrac ], 7 );
		    SetPlayerVirtualWorld( igrac, virtualworld );
			SetPlayerInterior( igrac, 7 );
			vCanDrive[ TrkaVozilo[ igrac ] ] = 1;
		    Fuel[ TrkaVozilo[ igrac ] ] = 100;
		    KGEyes_PutPlayerInVehicle( igrac, TrkaVozilo[ igrac ], 0 );
			ResetVehicleStatistics( TrkaVozilo[ igrac ] );
		    SetVehicleParamsEx( TrkaVozilo[ igrac ], 1, 0, 0, 0, 0, 0, 0);
			KGEyes_TogglePlayerControllable( igrac, false );
			Krugovi[ igrac ] = 0; TrkaCheckpoint[ igrac ] = 0;
			TrkaIzazov[ igrac ] = 4;
			NaUtrci[ igrac ] = true;
			KGEyes_GivePlayerMoney( igrac, -ulog ), PlayerMoneyTrackSave( igrac, MONEY_HANDS, -ulog, "Igraonica - utrka ulog" );

			TrkaVozilo[ playerid ] = KGEyes_CreateVehicle( model, -1398.1986, -223.7272, 1042.8796, 0, random( 128 ), random( 128 ), 3600 );
            ResetVehicle( TrkaVozilo[ playerid ] );
			KGEyes_SetPlayerPos( playerid, -1398.1986, -223.7272, 1042.8796 );
			KGEyes_PutPlayerInVehicle( playerid, TrkaVozilo[ playerid ], 0 );
		    SetVehicleVirtualWorld( TrkaVozilo[ playerid ], virtualworld );
		    LinkVehicleToInterior( TrkaVozilo[ playerid ], 7 );
		    SetPlayerVirtualWorld( playerid, virtualworld );
			SetPlayerInterior( playerid, 7 );
			vCanDrive[ TrkaVozilo[ playerid ] ] = 1;
		    Fuel[ TrkaVozilo[ playerid ] ] = 100;
		    KGEyes_PutPlayerInVehicle( playerid, TrkaVozilo[ playerid ], 0 );
			ResetVehicleStatistics( TrkaVozilo[ playerid ] );
		    SetVehicleParamsEx( TrkaVozilo[ playerid ], 1, 0, 0, 0, 0, 0, 0);
			KGEyes_TogglePlayerControllable( playerid, false );
			Krugovi[ playerid ] = 0; TrkaCheckpoint[ playerid ] = 0;
			TrkaIzazov[ playerid ] = 4;
			NaUtrci[ playerid ] = true;
			KGEyes_GivePlayerMoney( playerid, -ulog ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -ulog, "Igraonica - utrka ulog" );

			SendInfoMessage( igrac, "Izazvani %s je prihvatio vas izazov.", RPImeIgraca( playerid ) );
			SendInfoMessage( playerid, "Prihvatili ste izazov od %s.", RPImeIgraca( igrac ) );

			SendInfoMessage( playerid, "Ko prvi zavrsi 10 krugova je Pobjednik." );
			SendInfoMessage( igrac, "Ko prvi zavrsi 10 krugova je Pobjednik." );

			IzazivanjeTimer[ playerid ] = SetTimerEx( "TimerIzazov", 1000, true, "d", playerid );
			IzazivanjeTimer[ igrac ] = SetTimerEx( "TimerIzazov", 1000, true, "d", igrac );

			new string[ 128 ];
			//format( string, sizeof( string ), "TRKA: VOZILO1 :%D | VOZILO2: %d | V1SQLID :%D | V2SQLID: %d", TrkaVozilo[ playerid ], TrkaVozilo[ igrac ], VehicleInfo[ TrkaVozilo[ playerid ] ][ vSqlID ], VehicleInfo[ TrkaVozilo[ igrac ] ][ vSqlID ] );
			LogSave( "Ostalo/LogVozilaProvera.log", string );
		}
		else if( !response ) {

		    if( PonudioIgrac[ playerid ] != -1 ) SendInfoMessage( PonudioIgrac[ playerid ], "Izazvani %s je odbio vas izazov.", RPImeIgraca( playerid ) );

			SendInfoMessage( playerid, "Odbili ste izazov od %s.", RPImeIgraca( PonudioIgrac[ playerid ] ) );

			PonudioIgrac[ playerid ] = -1;
    		ModelTrke[ playerid ] = 0;
		}
	}
	else if( dialogid == dialog_IZAZOVI1v1 ) {

		if( !response ) return true;
		if( response ) {

		    if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Ne mozes ako nisi level 5+." );
		    if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si cuffovan." );
		    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si vezan." );
			if( IsPlayerInAnyVehicle( playerid )  ) return SendErrorMessage( playerid, "Morate biti van vozila da bi otisli na izazov." );
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti van vozila da bi otisli na izazov." );
			//if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
			//if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );
			if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok imate wanted.");
		    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok ste u zatvoru / ALKATRAZ.");
            if( PlayerInfo[ playerid ][ xNovac ] < Ulog1v1[ playerid ] ) return SendErrorMessage( playerid, "Nemate dovoljno novca za ulog." );

			if( Na1v1[ playerid ] ) return SendErrorMessage( playerid, "Vec si na 1v1." );
			if( uInterijeru[ playerid ] != interiorIgraonice ) return SendErrorMessage( playerid, "Moras biti u igraonici." );

		    new igrac = PonudioIgrac[ playerid ];
    		new model = Model1v1oruzja[ playerid ];
    		new ulog = Ulog1v1[ playerid ];
    		new virtualworld = playerid;
			Virtual1v1[playerid] = virtualworld;
			if( igrac == IPI ) return SendErrorMessage( playerid, "Igrac koji vas je izazvao nije na serveru." );
			if( PlayerInfo[ igrac ][ xNovac ] < ulog ) return SendErrorMessage( playerid, "Taj igrac nema dovoljno novca." );

            if( PljackaNovac[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
    		if( PljackaNovac[ igrac ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
    		if( PljackaZlato[ igrac ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
            if( PljackaZlato[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );

            if( Na1v1[ igrac ] ) return SendErrorMessage( playerid, "Igrac je vec na 1v1." );

			GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
			PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
			PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );

			GetPlayerPos( igrac, PlayerPos[ igrac ][ 0 ], PlayerPos[ igrac ][ 1 ], PlayerPos[ igrac ][ 2 ] );
			PlayerPosInt[ igrac ] = GetPlayerInterior( igrac );
			PlayerPosVW[ igrac ] = GetPlayerVirtualWorld( igrac );

		    KGEyes_SetPlayerPos( igrac, 2546.2439,2823.5273,10.8203 );
			ResetAllWeapons( igrac );
			SetPlayerHealth( igrac, 100 );
			KGEyes_SetPlayerArmour( igrac, 0 );
		    SetPlayerVirtualWorld( igrac, virtualworld );
			SetPlayerInterior( igrac, 0 );
			GiveWeaponToPlayer( igrac, model, 999);
			Killovi1v1[ igrac ] = 0;
			Na1v1[ igrac ] = true;
			Virtual1v1[ igrac ] = virtualworld;
			KGEyes_GivePlayerMoney( igrac, -ulog ), PlayerMoneyTrackSave( igrac, MONEY_HANDS, -ulog, "Igraonica - 1v1 ulog" );

			KGEyes_SetPlayerPos( playerid, 2609.9785,2813.3027,10.8203 );
			ResetAllWeapons( playerid );
			SetPlayerHealth( playerid, 100 );
			KGEyes_SetPlayerArmour( playerid, 0 );
		    SetPlayerVirtualWorld( playerid, virtualworld );
			SetPlayerInterior( playerid, 0 );
			GiveWeaponToPlayer( playerid, model, 999);
			Killovi1v1[ playerid ] = 0;
			Na1v1[ playerid ] = true;
			Virtual1v1[ playerid ] = virtualworld;
			KGEyes_GivePlayerMoney( playerid, -ulog ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -ulog, "Igraonica - 1v1 ulog" );

			SendInfoMessage( igrac, "Izazvani %s je prihvatio vas izazov.", RPImeIgraca( playerid ) );
			SendInfoMessage( playerid, "Prihvatili ste izazov od %s.", RPImeIgraca( igrac ) );

			SendInfoMessage( playerid, "Ko prvi dodje do 10 killova je Pobjednik." );
			SendInfoMessage( igrac, "Ko prvi dodje do 10 killova je Pobjednik." );

			IzazivanjeTimer[ playerid ] = SetTimerEx( "TimerIzazov", 1000, true, "d", playerid );
			IzazivanjeTimer[ igrac ] = SetTimerEx( "TimerIzazov", 1000, true, "d", igrac );
		}
		else if( !response ) {

		    if( PonudioIgrac[ playerid ] != -1 ) SendInfoMessage( PonudioIgrac[ playerid ], "Izazvani %s je odbio vas izazov.", RPImeIgraca( playerid ) );

			SendInfoMessage( playerid, "Odbili ste izazov od %s.", RPImeIgraca( PonudioIgrac[ playerid ] ) );

			PonudioIgrac[ playerid ] = -1;
    		ModelTrke[ playerid ] = 0;
		}
	}
	else if( dialogid == dialog_ORGSAFE ) {
		if( !response ) return true;
		if( response ) {
		    switch( listitem ) {
		        case 0: {
					new OrgID;
					if( PlayerInfo[ playerid ][ xAdmin ] < 7)
					{
		            	OrgID = PlayerInfo[ playerid ][ xClan ];

						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

						format( globalstring, sizeof( globalstring ), "Novac: %d$\n", org_info[ OrgID ][ oSafeMoney ] );
						strcat( DialogStrgEx, globalstring );

						if( IsIllegalTypeOrg( playerid ) ) {
							format( globalstring, sizeof( globalstring ), "Materijali: %d\n", org_info[ OrgID ][ oSafeMats ] );
							strcat( DialogStrgEx, globalstring );

							strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
							format( globalstring, sizeof( globalstring ), "Drug1: (%dg) | Drug2: (%dg)\n", org_info[ OrgID ][ oSafeDrugAmmount ][ 0 ], org_info[ OrgID ][ oSafeDrugAmmount ][ 1 ] );
							strcat( DialogStrgEx, globalstring );

							format( globalstring, sizeof( globalstring ), "Drug3: (%dg) | Drug4: (%dg)\n", org_info[ OrgID ][ oSafeDrugAmmount ][ 2 ], org_info[ OrgID ][ oSafeDrugAmmount ][ 3 ] );
							strcat( DialogStrgEx, globalstring );
						}

						strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
						SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
					}
					else
					{
						OrgID = GledaSef[playerid];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");

						format( globalstring, sizeof( globalstring ), "Novac: %d$\n", org_info[ OrgID ][ oSafeMoney ] );
						strcat( DialogStrgEx, globalstring );

						if( IsIllegalTypeOrgByID( OrgID ) ) {
							format( globalstring, sizeof( globalstring ), "Materijali: %d\n", org_info[ OrgID ][ oSafeMats ] );
							strcat( DialogStrgEx, globalstring );

							strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
							format( globalstring, sizeof( globalstring ), "Drug1: (%dg) | Drug2: (%dg)\n", org_info[ OrgID ][ oSafeDrugAmmount ][ 0 ], org_info[ OrgID ][ oSafeDrugAmmount ][ 1 ] );
							strcat( DialogStrgEx, globalstring );

							format( globalstring, sizeof( globalstring ), "Drug3: (%dg) | Drug4: (%dg)\n", org_info[ OrgID ][ oSafeDrugAmmount ][ 2 ], org_info[ OrgID ][ oSafeDrugAmmount ][ 3 ] );
							strcat( DialogStrgEx, globalstring );
						}

						strcat( DialogStrgEx, ""col_server"__________________________"col_white"__________________________\n");
						SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
					}
		        }
		        case 1: {
					if( PlayerInfo[ playerid ][ xAdmin ] < 7) {
						if( IsIllegalTypeOrg( playerid ) ) SPD( playerid, dialog_ORGSAFEPUT, DSL, D_NASLOV,  "Novac\nMaterijali\nDroga", "Izaberi", "Odustani" );
						else SPD( playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI );
					}
					else {
						if( IsIllegalTypeOrgByID( GledaSef[playerid] ) ) SPD( playerid, dialog_ORGSAFEPUT, DSL, D_NASLOV,  "Novac\nMaterijali\nDroga", "Izaberi", "Odustani" );
						else SPD( playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI );
					}
		        }
		        case 2: {
					if( PlayerInfo[ playerid ][ xAdmin ] < 7) {
						if( PlayerInfo[ playerid ][ xLider ] == 0 ) return SendErrorMessage( playerid, "Ovo moze samo lider." );
						if( IsIllegalTypeOrg( playerid ) ) SPD( playerid, dialog_ORGSAFETAKE, DSL, D_NASLOV,  "Novac\nMaterijali\nDroga", "Izaberi", "Odustani" );
						else SPD( playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
					}
					else {
						if( IsIllegalTypeOrgByID( GledaSef[playerid] ) ) SPD( playerid, dialog_ORGSAFETAKE, DSL, D_NASLOV,  "Novac\nMaterijali\nDroga", "Izaberi", "Odustani" );
						else SPD( playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
					}
		        }
		    }
	    }
	}
	else if( dialogid == dialog_ORGORMAR ) {////nastaviti ovdje ormar
		if( !response ) return true;
		if( response ) {
		    switch( listitem ) {
		        case 0: {

		        new id = PlayerInfo[ playerid ][ xClan ];
				if( PlayerInfo[ playerid ][ xPol ] == 1 ) {
		        	PostaviIgracuSkin( playerid, org_info[ id ][ oSkin1 ] ); KGEyes_SetPlayerSkin( playerid, org_info[ id ][ oSkin1 ] );
				}
				else if( PlayerInfo[ playerid ][ xPol ] == 2 ) {
		        	PostaviIgracuSkin( playerid, org_info[ id ][ oZSkin1 ] ); KGEyes_SetPlayerSkin( playerid, org_info[ id ][ oZSkin1 ] );
				}
		        SendInfoMessage( playerid, "Obukli ste skin Ranka 1 vase organizacije/mafije/bande");


		        }
		        case 1: {

			       	//if( PlayerInfo[ playerid ][ xRank ] >= 2 ){
			        new id = PlayerInfo[ playerid ][ xClan ];
			        if( PlayerInfo[ playerid ][ xPol ] == 1 ) {
		        		PostaviIgracuSkin( playerid, org_info[ id ][ oSkin2 ] ); KGEyes_SetPlayerSkin( playerid, org_info[ id ][ oSkin2 ] );
					}
					else if( PlayerInfo[ playerid ][ xPol ] == 2 ) {
		        		PostaviIgracuSkin( playerid, org_info[ id ][ oZSkin2 ] ); KGEyes_SetPlayerSkin( playerid, org_info[ id ][ oZSkin2 ] );
					}
			        SendInfoMessage( playerid, "Obukli ste skin Ranka 2 vase organizacije/mafije/bande");
			        

		        }
		        case 2: {

		        	//if( PlayerInfo[ playerid ][ xRank ] >= 3 ){
			        new id = PlayerInfo[ playerid ][ xClan ];
			       	if( PlayerInfo[ playerid ][ xPol ] == 1 ) {
		        		PostaviIgracuSkin( playerid, org_info[ id ][ oSkin3 ] ); KGEyes_SetPlayerSkin( playerid, org_info[ id ][ oSkin3 ] );
					}
					else if( PlayerInfo[ playerid ][ xPol ] == 2 ) {
		        		PostaviIgracuSkin( playerid, org_info[ id ][ oZSkin3 ] ); KGEyes_SetPlayerSkin( playerid, org_info[ id ][ oZSkin3 ] );
					}
			        SendInfoMessage( playerid, "Obukli ste skin Ranka 3 vase organizacije/mafije/bande");
			        

		        }
		        case 3: {

		        	if( PlayerInfo[ playerid ][ xRank ] >= 4 ){
			        	new id = PlayerInfo[ playerid ][ xClan ];
			        	if( PlayerInfo[ playerid ][ xPol ] == 1 ) {
		        			PostaviIgracuSkin( playerid, org_info[ id ][ oSkin4 ] ); KGEyes_SetPlayerSkin( playerid, org_info[ id ][ oSkin4 ] );
						}
						else if( PlayerInfo[ playerid ][ xPol ] == 2 ) {
		        			PostaviIgracuSkin( playerid, org_info[ id ][ oZSkin4 ] ); KGEyes_SetPlayerSkin( playerid, org_info[ id ][ oZSkin4 ] );
						}
			        	SendInfoMessage( playerid, "Obukli ste skin Ranka 4 vase organizacije/mafije/bande");
			        }
			        else{
			        	SendErrorMessage( playerid, "Morate biti R4+ za ovaj skin");
			        	SPD( playerid, dialog_ORGORMAR, DSL, "Ormar Organizacije",  "Skin rank 1\nSkin rank 2\nSkin rank 3\nSkin rank 4\nSkin rank 5\nSkin rank 6", "Obuci", D_ODUSTANI );
			        }

		        }
		        case 4: {

		        	if( PlayerInfo[ playerid ][ xRank ] >= 5 ){
						new id = PlayerInfo[ playerid ][ xClan ];
						if( PlayerInfo[ playerid ][ xPol ] == 1 ) {
							PostaviIgracuSkin( playerid, org_info[ id ][ oSkin5 ] ); KGEyes_SetPlayerSkin( playerid, org_info[ id ][ oSkin5 ] );
						}
						else if( PlayerInfo[ playerid ][ xPol ] == 2 ) {
							PostaviIgracuSkin( playerid, org_info[ id ][ oZSkin5 ] ); KGEyes_SetPlayerSkin( playerid, org_info[ id ][ oZSkin5 ] );
						}
						SendInfoMessage( playerid, "Obukli ste skin Ranka 5 vase organizacije/mafije/bande");
			        }
			        else{
			        	SendErrorMessage( playerid, "Morate biti R5+ za ovaj skin");
			        	SPD( playerid, dialog_ORGORMAR, DSL, "Ormar Organizacije",  "Skin rank 1\nSkin rank 2\nSkin rank 3\nSkin rank 4\nSkin rank 5\nSkin rank 6", "Obuci", D_ODUSTANI );
			        }

		        }
		        case 5: {

		        	if( PlayerInfo[ playerid ][ xRank ] == 6  ){
						new id = PlayerInfo[ playerid ][ xClan ];
						if( PlayerInfo[ playerid ][ xLider ] == id ){
							if( PlayerInfo[ playerid ][ xPol ] == 1 ) {
								PostaviIgracuSkin( playerid, org_info[ id ][ oSkin6 ] ); KGEyes_SetPlayerSkin( playerid, org_info[ id ][ oSkin6 ] );
							}
							else if( PlayerInfo[ playerid ][ xPol ] == 2 ) {
								PostaviIgracuSkin( playerid, org_info[ id ][ oZSkin6 ] ); KGEyes_SetPlayerSkin( playerid, org_info[ id ][ oZSkin6 ] );
							}
							SendInfoMessage( playerid, "Obukli ste skin Ranka 6 vase organizacije/mafije/bande");
						}
						else{
							SendErrorMessage( playerid, "Morate biti Lider za ovaj skin.");
							SPD( playerid, dialog_ORGORMAR, DSL, "Ormar Organizacije",  "Skin rank 1\nSkin rank 2\nSkin rank 3\nSkin rank 4\nSkin rank 5\nSkin rank 6", "Obuci", D_ODUSTANI );
						}
			        }
			        else{
			        	SendErrorMessage( playerid, "Morate biti R6 za ovaj skin");
			        	SPD( playerid, dialog_ORGORMAR, DSL, "Ormar Organizacije",  "Skin rank 1\nSkin rank 2\nSkin rank 3\nSkin rank 4\nSkin rank 5\nSkin rank 6", "Obuci", D_ODUSTANI );
			        }

		        }
		    }
	    }
	}
	else if( dialogid == dialog_ORGSAFEPUT ) {
	    switch( listitem ) {
			case 0: {
			    SPD( playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI );
			}
			case 1: {
			    SPD( playerid, dialog_ORGSAFEPMATS, DSI, D_NASLOV,  "Unesite koliko materijala zelite da ostavite.", D_ODABERI, D_ODUSTANI );
			}
			case 2: {
				SendInfoMessage( playerid, "Drogu ubacujete u sef preko inventory sistema." );
			}
		}
	}
	else if( dialogid == dialog_ORGSAFETAKE ) {
	    switch( listitem ) {
			case 0: {
			    SPD( playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
			}
			case 1: {
			    SPD( playerid, dialog_ORGSAFETMATS, DSI, D_NASLOV,  "Unesite koliko materijala zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
			}
			case 2: {

			    new drugname1[ 32 ], drugname2[ 32 ], drugname3[ 32 ], drugname4[ 32 ], OrgID;
				if( PlayerInfo[ playerid ][ xAdmin ] < 7 )
					OrgID = PlayerInfo[ playerid ][ xClan ];
				else
					OrgID = GledaSef[playerid];
				if( org_info[ OrgID ][ oSafeDrugAmmount ][ 0 ] == 0 && org_info[ OrgID ][ oSafeDrugAmmount ][ 1 ] == 0 && org_info[ OrgID ][ oSafeDrugAmmount ][ 2 ] == 0 && org_info[ OrgID ][ oSafeDrugAmmount ][ 3 ] == 0 ) return SendErrorMessage( playerid, "Svi slotovi droge su prazni!");

				if( org_info[ OrgID ][ oSafeDrugAmmount ][ 0 ] != 0 )
					format( drugname1, sizeof( drugname1 ), "%dg", org_info[ OrgID ][ oSafeDrugAmmount ][ 0 ] );
				else
				    format( drugname1, sizeof( drugname1 ), "Nema droge" );

				if( org_info[ OrgID ][ oSafeDrugAmmount ][ 1 ] != 0 )
				    format( drugname2, sizeof( drugname2 ), "%dg", org_info[ OrgID ][ oSafeDrugAmmount ][ 1 ] );
				else
				    format( drugname2, sizeof( drugname2 ), "Nema droge" );

			    if( org_info[ OrgID ][ oSafeDrugAmmount ][ 2 ] != 0 )
				    format( drugname3, sizeof( drugname3 ), "%dg", org_info[ OrgID ][ oSafeDrugAmmount ][ 2 ] );
				else
				    format( drugname3, sizeof( drugname3 ), "Nema droge" );

	            if( org_info[ OrgID ][ oSafeDrugAmmount ][ 3 ] != 0 )
				    format( drugname4, sizeof( drugname4 ), "%dg", org_info[ OrgID ][ oSafeDrugAmmount ][ 3 ] );
				else
				    format( drugname4, sizeof( drugname4 ), "Nema droge" );

				new string[ 256 ];
			    format( string, sizeof( string ), "1. %s\n2. %s\n3. %s\n4. %s\nUnesite slot droge u sefu i kolicinu droge za uzimanje.\nPrimer: 1 232", drugname1, drugname2, drugname3, drugname4 );
				SPD( playerid, dialog_ORGSAFETDRUG, DSI, D_NASLOV, string, D_ODABERI, D_ODUSTANI );
			}
		}
	}
	else if( dialogid == dialog_ORGSAFETDRUG ) {
	    if( !response ) return 1;
		if( response ) {

			new slot, slot2, kolicina, OrgID;
			if( PlayerInfo[ playerid ][ xAdmin ] < 7 )
				OrgID = PlayerInfo[ playerid ][ xClan ];
			else
				OrgID = GledaSef[playerid];
			if( sscanf( inputtext, "dd", slot, kolicina ) ) {

            	new drugname1[ 32 ], drugname2[ 32 ], drugname3[ 32 ], drugname4[ 32 ];

				if( org_info[ OrgID ][ oSafeDrugAmmount ][ 0 ] != 0 )
					format( drugname1, sizeof( drugname1 ), "%dg", org_info[ OrgID ][ oSafeDrugAmmount ][ 0 ] );
				else
				    format( drugname1, sizeof( drugname1 ), "Nema droge" );

				if( org_info[ OrgID ][ oSafeDrugAmmount ][ 1 ] != 0 )
				    format( drugname2, sizeof( drugname2 ), "%dg", org_info[ OrgID ][ oSafeDrugAmmount ][ 1 ] );
				else
				    format( drugname2, sizeof( drugname2 ), "Nema droge" );

			    if( org_info[ OrgID ][ oSafeDrugAmmount ][ 2 ] != 0 )
				    format( drugname3, sizeof( drugname3 ), "%dg", org_info[ OrgID ][ oSafeDrugAmmount ][ 2 ] );
				else
				    format( drugname3, sizeof( drugname3 ), "Nema droge" );

	            if( org_info[ OrgID ][ oSafeDrugAmmount ][ 3 ] != 0 )
				    format( drugname4, sizeof( drugname4 ), "%dg", org_info[ OrgID ][ oSafeDrugAmmount ][ 3 ] );
				else
				    format( drugname4, sizeof( drugname4 ), "Nema droge" );

				new string[ 256 ];
			    format( string, sizeof( string ), "1. %s\n2. %s\n3. %s\n4. %s\nUnesite slot droge u sefu i kolicinu droge za uzimanje.\nPrimer: 1 232", drugname1, drugname2, drugname3, drugname4 );
				SPD( playerid, dialog_ORGSAFETDRUG, DSL, D_NASLOV, string, D_ODABERI, D_ODUSTANI );

				return 1;
			}
			new id = -1;
		   	if( slot < 1 || slot > 4 ) return SendErrorMessage( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( org_info[ OrgID ][ oSafeDrugAmmount ][ slot2 ] == 0 ) return SendErrorMessage( playerid, "Ovaj sef nema drogu pod tim slotom!");
			if( org_info[ OrgID ][ oSafeDrugAmmount ][ slot2 ] > 0 ) {
                if( kolicina < 1 || kolicina > org_info[ OrgID ][ oSafeDrugAmmount ][ slot2 ] ) return SendErrorMessage( playerid, "Ovaj sef nema toliko droge pod tim slotom!");

				id = Inventory_Add( playerid, "Droga", 1579, kolicina );

				if( id != -1 ) {

					org_info[ OrgID ][ oSafeDrugAmmount ][ slot2 ] -= kolicina;
					format( globalstring, sizeof( globalstring ), "* %s uzima nesto iz sefa.", RPImeIgraca( playerid ) );
					PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
					SendClientMessageEx( playerid, PLAVA, "%s | Uzeli ste %d grama droge iz sefa.", org_info[ OrgID ][ oPreFix ], kolicina );

					sql_organization_update_drugs( OrgID );

					new string[ 128 ];
					format( string, sizeof( string ), "Igrac %s | -%dg Droga | Org: %s", ImeIgraca( playerid ), kolicina, org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ] );
					LogSave( "Ostalo/LogSefDroge.log", string );

				} else SendErrorMessage( playerid, "Pun vam je inventory nemate mjesta gde da stavite stvari." );
			}
		}
	}
	else if( dialogid == dialog_ORGSAFEPMONEY ) {
		if( !response ) return true;
		if( response ) {
		    new novac, OrgID;
			if( PlayerInfo[ playerid ][ xAdmin ] < 7 )
				OrgID = PlayerInfo[ playerid ][ xClan ];
			else
				OrgID = GledaSef[playerid];
            if( sscanf( inputtext, "i", novac ) ) return SPD( playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI );
            if( novac < 1 || novac > 10000000 ) return SPD( playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 10000000\nUnesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI );
			if( novac > PlayerInfo[ playerid ][ xNovac ] ) return SPD( playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "GRESKA: Nemate toliko novca kod sebe\nUnesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI );

			KGEyes_GivePlayerMoney( playerid, -novac ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -novac, "Ostavljanje u org sef" );
            org_info[ OrgID ][ oSafeMoney ] += novac;
			sql_organization_update_integer( OrgID, "safe_money", org_info[ OrgID ][ oSafeMoney ] );
			new string[ 128 ];
			format( string, sizeof( string ), "Igrac %s | %d$ | Org: %s", ImeIgraca( playerid ), novac, org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ] );
			LogSave( "Ostalo/LogSefNovac.log", string );

		    SendClientMessageEx( playerid, ZUTA, "%s | Ostavili ste %d$ u sef.", org_info[ OrgID ][ oPreFix ], novac );
		}
	}
	else if( dialogid == dialog_ORGSAFETMONEY ) {
		if( !response ) return true;
		if( response ) {
		    new novac, OrgID;
			if( PlayerInfo[ playerid ][ xAdmin ] < 7 )
				OrgID = PlayerInfo[ playerid ][ xClan ];
			else
				OrgID = GledaSef[playerid];
            if( sscanf( inputtext, "i", novac ) ) return SPD( playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
            if( novac < 1 || novac > 10000000 ) return SPD( playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 10000000\nUnesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
			if( novac > org_info[ OrgID ][ oSafeMoney ] ) return SPD( playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "GRESKA: Nema toliko novca u sefu\nUnesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );

			KGEyes_GivePlayerMoney( playerid, novac ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, novac, "Uzimanje iz org sefa" );
            org_info[ OrgID ][ oSafeMoney ] -= novac;
			sql_organization_update_integer( OrgID, "safe_money", org_info[ OrgID ][ oSafeMoney ] );
			new string[ 128 ];
			format( string, sizeof( string ), "Igrac %s | -%d$ | Org: %s", ImeIgraca( playerid ), novac, org_info[ PlayerInfo[ playerid ][ xClan ] ][ oPreFix ] );
			LogSave( "Ostalo/LogSefNovac.log", string );

		    SendClientMessageEx( playerid, ZUTA, "%s | Uzeli ste %d$ iz sefa.", org_info[ OrgID ][ oPreFix ], novac );
		}
	}
	//
	else if( dialogid == dialog_ORGSAFEPMATS ) {
		if( !response ) return true;
		if( response ) {
		    new matss, OrgID;
			if( PlayerInfo[ playerid ][ xAdmin ] < 7 )
				OrgID = PlayerInfo[ playerid ][ xClan ];
			else
				OrgID = GledaSef[playerid];
            if( sscanf( inputtext, "i", matss ) ) return SPD( playerid, dialog_ORGSAFEPMATS, DSI, D_NASLOV,  "Unesite koliko materijala zelite da ostavite.", D_ODABERI, D_ODUSTANI );
            if( matss < 1 || matss > 100000 ) return SPD( playerid, dialog_ORGSAFEPMATS, DSI, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 10000\nUnesite koliko materijala zelite da ostavite.", D_ODABERI, D_ODUSTANI );
			if( matss > Inventory_Count( playerid, "Materijali" ) ) return SPD( playerid, dialog_ORGSAFEPMATS, DSI, D_NASLOV,  "GRESKA: Nemate toliko materijala kod sebe\nUnesite koliko materijala zelite da ostavite.", D_ODABERI, D_ODUSTANI );

			Inventory_Remove( playerid, "Materijali", matss );
            //PlayerInfo[ playerid ][ xMaterijali ] -= matss;
            org_info[ OrgID ][ oSafeMats ] += matss;
			sql_organization_update_integer( OrgID, "safe_mats", org_info[ OrgID ][ oSafeMats ] );
			//ql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );

		    SendClientMessageEx( playerid, ZUTA, "%s | Ostavili ste %d materijala u sef.", org_info[ OrgID ][ oPreFix ], matss );

		    //format( globalstring, sizeof( globalstring ), "[SEF] %s %s je ostavio %d materijala u sef.", org_info[ org_banda[ slot_id ] ][ oName ] );
	        //OrgPoruka( org_banda[ j ], 0x95b4a2FF, globalstring );
		}
	}
	else if( dialogid == dialog_ORGSAFETMATS ) {
		if( !response ) return true;
		if( response ) {
		    new matss, OrgID;
			if( PlayerInfo[ playerid ][ xAdmin ] < 7 )
				OrgID = PlayerInfo[ playerid ][ xClan ];
			else
				OrgID = GledaSef[playerid];
            if( sscanf( inputtext, "i", matss ) ) return SPD( playerid, dialog_ORGSAFETMATS, DSI, D_NASLOV,  "Unesite koliko materijala zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
            if( matss < 1 || matss > 100000 ) return SPD( playerid, dialog_ORGSAFETMATS, DSI, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 100000\nUnesite koliko materijala zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
			if( matss > org_info[ OrgID ][ oSafeMats ] ) return SPD( playerid, dialog_ORGSAFETMATS, DSI, D_NASLOV,  "GRESKA: Nema toliko materijala u sefu\nUnesite koliko materijala zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );

			Inventory_Add( playerid, "Materijali", 2061, matss );
			//PlayerInfo[ playerid ][ xMaterijali ] += matss;
            org_info[ OrgID ][ oSafeMats ] -= matss;
			sql_organization_update_integer( OrgID, "safe_mats", org_info[ OrgID ][ oSafeMats ] );
			//sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );

		    SendClientMessageEx( playerid, ZUTA, "%s | Uzeli ste %d materijala iz sefa.", org_info[ OrgID ][ oPreFix ], matss );
		}
	}
	//
	else if( dialogid == dialog_RCONPROVERA ) {

		if( !response ) return Kick( playerid );
		if( response ) {

		    new broj;
		    if( sscanf( inputtext, "i", broj ) ) return SPD( playerid, dialog_RCONPROVERA, DSP, D_NASLOV, "Da bi mogli da koristite RCON admina, morate da ukucate sigurnosni RCON kod\nMolimo vas da kod unesete ispod!", D_ODABERI, D_ODUSTANI );
		    if( broj != 123123 ) return SPD( playerid, dialog_RCONPROVERA, DSP, D_NASLOV, "Da bi mogli da koristite RCON admina, morate da ukucate sigurnosni RCON kod\nMolimo vas da kod unesete ispod!", D_ODABERI, D_ODUSTANI );

		    SendInfoMessage( playerid, "Uspjesno si se ulogovao kao RCON administrator!" );
		}
	}
	else if( dialogid == dialog_DJASK ) {
		if( !response ) return true;
		if( response ) {
		    listitem++;
		    new string[ 256 ];
		    if( djaskList[ listitem ][ djaskSend ] == false ) return SendErrorMessage( playerid, "U ovom slotu nema narudzbe." );

            IzabraniDJask[ playerid ] = listitem;
            IzabraniDJaskUserID[ playerid ] = djaskList[ listitem ][ djaskID ];

			format( string, sizeof( string ), "Igrac %s(ID:%d) je poslao narudzbu.\n\nNarudzba: %s", djaskList[ listitem ][ djaskOwner ], djaskList[ listitem ][ djaskID ], djaskList[ listitem ][ djaskQuestion ] );

		    SPD( playerid, dialog_DJASK_2, DSI, D_NASLOV, string, D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_DJASK_2 ) {
		if( !response ) return true;
		if( response ) {
			new text[ 128 ];
		    if( sscanf( inputtext, "s[128]", text ) ) return 1;

			new askid = IzabraniDJask[ playerid ];

			if( IzabraniDJaskUserID[ playerid ] != djaskList[ askid ][ djaskID ] ) return SendErrorMessage( playerid, "Vec je neko odgovorio na ovu narudzbu." );
		    if( djaskList[ askid ][ djaskSend ] == false ) return SendErrorMessage( playerid, "U ovom slotu nema narudzbe." );

			djaskList[ askid ][ djaskSend ] = false;

			new id = djaskList[ askid ][ djaskID ];
			IzabraniDJask[ playerid ] = -1;
            IzabraniDJaskUserID[ playerid ] = -1;

			if( strcmp( ImeIgraca( id ), djaskList[ askid ][ djaskOwner ], true ) == 0 ) {

				djaskInfo[ id ][ djaskAnswered ] = true;
				strmid( djaskInfo[ id ][ djaskAdmin ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32 );
	            strmid( djaskInfo[ id ][ djaskAnswer ], text, 0, strlen( text ), 128 );

	          
				format( globalstring , sizeof( globalstring ), "{AE7C5B}DLP | %s -> %s : Postovani, %s", ImeIgraca( playerid ), djaskList[ askid ][ djaskOwner ], text );
				DJChat( -1, globalstring );

	            SendClientMessageEx( id, PLAVA, "DJ je odgovorio na tvoju narudzbu da pogledate odgovor ukucajte "col_white"'/podj'." );

                strmid( djaskList[ askid ][ djaskOwner ], "None", 0, strlen( "None" ), 32 );
                djaskList[ askid ][ djaskID ] = -1;
			}
            else {

                if( id != IPI ) {

	                djaskInfo[ id ][ djaskSended ] = false;
	                djaskInfo[ id ][ djaskAnswered ] = false;
					strmid( djaskInfo[ id ][ djaskAdmin ], "None", 0, strlen( "None" ), 32 );
		            strmid( djaskInfo[ id ][ djaskAnswer ], "None", 0, strlen( "None" ), 128 );
                }

                strmid( djaskList[ askid ][ djaskOwner ], "None", 0, strlen( "None" ), 32 );
                djaskList[ askid ][ djaskID ] = -1;
				SendErrorMessage( playerid, "Taj igrac nije online." );
				return 1;
			}
		}
	}
	else if( dialogid == dialog_ASKLISTA ) {
		if( !response ) return true;
		if( response ) {
		    listitem++;
		    new string[ 256 ];
		    if( askqList[ listitem ][ askqSend ] == false ) return SendErrorMessage( playerid, "U ovom slotu nema pitanja." );

            IzabraniAskQ[ playerid ] = listitem;
            IzabraniAskQUserID[ playerid ] = askqList[ listitem ][ askqID ];

			format( string, sizeof( string ), "Igrac %s(ID:%d) je poslao pitanje.\n\nPitanje: %s", askqList[ listitem ][ askqOwner ], askqList[ listitem ][ askqID ], askqList[ listitem ][ askqQuestion ] );

		    SPD( playerid, dialog_ASKLISTA_2, DSI, D_NASLOV, string, D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_ASKLISTA_2 ) {
		if( !response ) return true;
		if( response ) {
			new text[ 128 ];
		    if( sscanf( inputtext, "s[128]", text ) ) return 1;

			new askid = IzabraniAskQ[ playerid ];

			if( IzabraniAskQUserID[ playerid ] != askqList[ askid ][ askqID ] ) return SendErrorMessage( playerid, "Vec je neko odgovorio na ovo pitanje." );
		    if( askqList[ askid ][ askqSend ] == false ) return SendErrorMessage( playerid, "U ovom slotu nema pitanja." );

			askqList[ askid ][ askqSend ] = false;

			new id = askqList[ askid ][ askqID ];
			IzabraniAskQ[ playerid ] = -1;
            IzabraniAskQUserID[ playerid ] = -1;

			if( strcmp( ImeIgraca( id ), askqList[ askid ][ askqOwner ], true ) == 0 ) {

				askqInfo[ id ][ askqAnswered ] = true;
				strmid( askqInfo[ id ][ askqAdmin ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32 );
	            strmid( askqInfo[ id ][ askqAnswer ], text, 0, strlen( text ), 128 );

	         

				format( globalstring , sizeof( globalstring ), "{AE7C5B}LP | %s -> %s : Postovani, %s", ImeIgraca( playerid ), askqList[ askid ][ askqOwner ], text );
				RPTChat( -1, globalstring );

	            SendClientMessageEx( id, PLAVA, "Admin/GameSage je odgovorio na tvoje pitanje da pogledate odgovor ukucajte "col_white"'(/po)gledajodgovor'." );

                strmid( askqList[ askid ][ askqOwner ], "None", 0, strlen( "None" ), 32 );
                askqList[ askid ][ askqID ] = -1;
			}
            else {

                if( id != IPI ) {

	                askqInfo[ id ][ askqSended ] = false;
	                askqInfo[ id ][ askqAnswered ] = false;
					strmid( askqInfo[ id ][ askqAdmin ], "None", 0, strlen( "None" ), 32 );
		            strmid( askqInfo[ id ][ askqAnswer ], "None", 0, strlen( "None" ), 128 );
                }

                strmid( askqList[ askid ][ askqOwner ], "None", 0, strlen( "None" ), 32 );
                askqList[ askid ][ askqID ] = -1;
				SendErrorMessage( playerid, "Taj igrac nije online." );
				return 1;
			}
		}
	}
	else if( dialogid == dialog_REPLISTA ) {
		if( !response ) return true;
		if( response ) {
		    listitem++;
		    new string[ 256 ];
		    if( repList[ listitem ][ repSend ] == false ) return SendErrorMessage( playerid, "U ovom slotu nema reporta." );

            IzabraniReport[ playerid ] = listitem;
            IzabraniRepUserID[ playerid ] = repList[ listitem ][ repID ];

			format( string, sizeof( string ), ""col_white"Igrac %s(ID:%d) je poslao report.\n\nReport: %s", repList[ listitem ][ repOwner ], repList[ listitem ][ repID ], repList[ listitem ][ repQuestion ] );

		    SPD( playerid, dialog_REPLISTA_2, DSI, D_NASLOV, string, D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_REPLISTA_2 ) {
		if( !response ) return true;
		if( response ) {
			new text[ 128 ];
		    if( sscanf( inputtext, "s[128]", text ) ) return 1;

			new repid = IzabraniReport[ playerid ];

			if( IzabraniRepUserID[ playerid ] != repList[ repid ][ repID ] ) return SendErrorMessage( playerid, "Vec je neko odgovorio na ovaj report." );
		    if( repList[ repid ][ repSend ] == false ) return SendErrorMessage( playerid, "U ovom slotu nema reporta." );

			repList[ repid ][ repSend ] = false;

			new id = repList[ repid ][ repID ];
			IzabraniReport[ playerid ] = -1;
            IzabraniRepUserID[ playerid ] = -1;

			if( strcmp( ImeIgraca( id ), repList[ repid ][ repOwner ], true ) == 0 ) {

				repInfo[ id ][ repAnswered ] = true;
				strmid( repInfo[ id ][ repAdmin ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32 );
	            strmid( repInfo[ id ][ repAnswer ], text, 0, strlen( text ), 128 );

	            
				AI[ playerid ][ aRLP ]++;
				SaveAdminInfo( playerid );

				format( globalstring , sizeof( globalstring ), "{AE7C5B}RLP | %s -> %s : Postovani, %s", ImeIgraca( playerid ), repList[ repid ][ repOwner ], text );
				AdminRPoruka( -1, globalstring );

	            SendClientMessageEx( id, RED, "Admin je odgovorio na tvoje pitanje da pogledate odgovor ukucajte "col_white"'/poa'." );

                strmid( repList[ repid ][ repOwner ], "None", 0, strlen( "None" ), 32 );
                repList[ repid ][ repID ] = -1;
			}
            else {

                if( id != IPI ) {

	                repInfo[ id ][ repSended ] = false;
	                repInfo[ id ][ repAnswered ] = false;
					strmid( repInfo[ id ][ repAdmin ], "None", 0, strlen( "None" ), 32 );
		            strmid( repInfo[ id ][ repAnswer ], "None", 0, strlen( "None" ), 128 );
                }

                strmid( repList[ repid ][ repOwner ], "None", 0, strlen( "None" ), 32 );
                repList[ repid ][ repID ] = -1;
				SendErrorMessage( playerid, "Taj igrac nije online." );
				return 1;
			}
		}
	}
	else if( dialogid == dialog_GOVLISTA ) {
		if( !response ) return true;
		if( response ) {
		    listitem++;
		    new string[ 256 ];
		    if( govList[ listitem ][ govSend ] == false ) return SendErrorMessage( playerid, "U ovom slotu nema pitanja." );
            IzabraniGov[ playerid ] = listitem;
            IzabraniGovUserID[ playerid ] = govList[ listitem ][ govID ];
			format( string, sizeof( string ), "Igrac %s(ID:%d) je poslao pitanje.\n\nPitanje: %s", govList[ listitem ][ govOwner ], govList[ listitem ][ govID ], govList[ listitem ][ govQuestion ] );
		    SPD( playerid, dialog_GOVLISTA_2, DSI, D_NASLOV, string, D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_GOVLISTA_2 ) {
		if( !response ) return true;
		if( response ) {
			new text[ 128 ];
		    if( sscanf( inputtext, "s[128]", text ) ) return 1;
			new govid = IzabraniGov[ playerid ];
			if( IzabraniGovUserID[ playerid ] != govList[ govid ][ govID ] ) return SendErrorMessage( playerid, "Vec je neko odgovorio na ovo pitanje." );
		    if( govList[ govid ][ govSend ] == false ) return SendErrorMessage( playerid, "U ovom slotu nema pitanja." );
			govList[ govid ][ govSend ] = false;
			new id = govList[ govid ][ govID ];
			IzabraniGov[ playerid ] = -1;
			IzabraniGovUserID[ playerid ] = -1;
			if( strcmp( ImeIgraca( id ), govList[ govid ][ govOwner ], true ) == 0 ) {

				govInfo[ id ][ govAnswered ] = true;
				strmid( govInfo[ id ][ govAdmin ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32 );
	            strmid( govInfo[ id ][ govAnswer ], text, 0, strlen( text ), 128 );
	            //SendInfoMessage( playerid, "Poslali ste odgovor igracu %s.", govList[ govid ][ govOwner ] );
	            //SendInfoMessage( playerid, "Vas odgovor glasi: %s.", text );
				format( globalstring, sizeof( globalstring ), "{AE7C5B}Govornica | %s -> %s | %s", ImeIgraca( playerid ), ImeIgraca( id ), text );
				LiderPoruka( BELA, globalstring );
	            SendInfoMessage( id, "Lider je odgovorio na vase pitanje." );
	            SendInfoMessage( id, "Da pogledate odgovor ukucajte '/pogledajodgovorlidera'." );
                strmid( govList[ govid ][ govOwner ], "None", 0, strlen( "None" ), 32 );
                govList[ govid ][ govID ] = -1;
			}

            else {

                    if( id != IPI ) {
	                govInfo[ id ][ govSended ] = false;
	                govInfo[ id ][ govAnswered ] = false;
					strmid( govInfo[ id ][ govAdmin ], "None", 0, strlen( "None" ), 32 );
					strmid( govInfo[ id ][ govAnswer ], "None", 0, strlen( "None" ), 128 );
                    }
              		strmid( govList[ govid ][ govOwner ], "None", 0, strlen( "None" ), 32 );
                    govList[ govid ][ govID ] = -1;
		  			SendErrorMessage( playerid, "Taj igrac nije online." );
					return 1;
	    	}
		}
	}
	else if( dialogid == dialog_DMZSHOP){

		if( !response ) return true;
		if( response ){
			switch( listitem ){

				case 0: {

					if( PlayerInfo[ playerid ][ xDMZ ] < 2 ) return SendErrorMessage( playerid, "Nemate dovoljno DMZ bodova( 2 ) ");

					PlayerInfo[ playerid ][ xDMZ ] -= 2;
					SetPlayerHealth( playerid, 100 );
					SendInfoMessage(playerid, "Kupili ste heal za 2 DMZ boda.");
				}
				case 1: {

					if( PlayerInfo[ playerid ][ xDMZ ] < 5 ) return SendErrorMessage( playerid, "Nemate dovoljno DMZ bodova( 5 ) ");

					PlayerInfo[ playerid ][ xDMZ ] -= 5;

					SetPVarInt(playerid,"NoReloadActive",1);
					NoReloadTimer[ playerid ] = SetTimerEx( "NoReload", 120000, false, "ii", playerid, 1 );
					SendInfoMessage(playerid, "Kupili ste NO RELOAD 2 MINUTA za 5 DMZ boda.");
				}
				case 2: {

					if( PlayerInfo[ playerid ][ xDMZ ] < 100 ) return SendErrorMessage(playerid,"Nemate dovoljno DMZ bodova( 100 )");
					if( PlayerInfo[ playerid ][ xDML ] > 0 ) return SendErrorMessage( playerid, "Vec imate ovaj ili bolji title.");

					PlayerInfo[ playerid ][ xDMZ ] -= 100;
					PlayerInfo[ playerid ][ xDML ] = 1;

					SetPlayerChatBubble( playerid, "[ DMZ LORD ]", 0xAA3333FF, 40.0, 10000);

					SendInfoMessage(playerid, "Kupili ste status DMZ LORD za 100 DMZ boda.");
				}
				case 3: {

					if( PlayerInfo[ playerid ][ xDMZ ] < 4000 ) return SendErrorMessage(playerid,"Nemate dovoljno DMZ bodova( 4000 )");
					if( PlayerInfo[ playerid ][ xDML ] > 1 ) return SendErrorMessage( playerid, "Vec imate ovaj ili bolji title.");

					PlayerInfo[ playerid ][ xDMZ ] -= 4000;
					PlayerInfo[ playerid ][ xDML ] = 2;

					SetPlayerChatBubble( playerid, "[ DMZ VETERAN ]", 0xAA3333FF, 40.0, 10000);

					SendInfoMessage(playerid, "Kupili ste status DMZ VETERAN za 4000 DMZ boda.");
				}
				case 4: {

					if( PlayerInfo[ playerid ][ xDMZ ] < 6666 ) return SendErrorMessage(playerid,"Nemate dovoljno DMZ bodova( 6666 )");
					if( PlayerInfo[ playerid ][ xDML ] > 2 ) return SendErrorMessage( playerid, "Vec imate ovaj ili bolji title.");

					PlayerInfo[ playerid ][ xDMZ ] -= 6666;
					PlayerInfo[ playerid ][ xDML ] = 3;

					SetPlayerChatBubble( playerid, "[ DMZ ELITE ]", 0xAA3333FF, 40.0, 10000);

					SendInfoMessage(playerid, "Kupili ste status DMZ ELITE za 6666 DMZ boda.");
				}
				case 5: {

					if( PlayerInfo[ playerid ][ xDMZ ] < 9333 ) return SendErrorMessage(playerid,"Nemate dovoljno DMZ bodova( 9333 )");
					if( PlayerInfo[ playerid ][ xDML ] > 3 ) return SendErrorMessage( playerid, "Vec imate ovaj ili bolji title.");

					PlayerInfo[ playerid ][ xDMZ ] -= 9333;
					PlayerInfo[ playerid ][ xDML ] = 4;

					SetPlayerChatBubble( playerid, "[ DMZ PRO ]", 0xAA3333FF, 40.0, 10000);

					SendInfoMessage(playerid, "Kupili ste status DMZ PRO za 9333 DMZ boda.");
				}
				case 6: {

					if( PlayerInfo[ playerid ][ xDMZ ] < 16000 ) return SendErrorMessage(playerid,"Nemate dovoljno DMZ bodova( 16000 )");
					if( PlayerInfo[ playerid ][ xDML ] > 4 ) return SendErrorMessage( playerid, "Vec imate ovaj ili bolji title.");

					PlayerInfo[ playerid ][ xDMZ ] -= 16000;
					PlayerInfo[ playerid ][ xDML ] = 5;

					SetPlayerChatBubble( playerid, "[ DMZ MASTER ]", 0xAA3333FF, 40.0, 10000);

					SendInfoMessage(playerid, "Kupili ste status DMZ MASTER za 16000 DMZ boda.");
				}
				case 7: {

					if( PlayerInfo[ playerid ][ xDMZ ] < 26666 ) return SendErrorMessage(playerid,"Nemate dovoljno DMZ bodova( 26666 )");
					if( PlayerInfo[ playerid ][ xDML ] > 5 ) return SendErrorMessage( playerid, "Vec imate ovaj ili bolji title.");

					PlayerInfo[ playerid ][ xDMZ ] -= 26666;
					PlayerInfo[ playerid ][ xDML ] = 6;

					SetPlayerChatBubble( playerid, "[ DMZ LEGEND ]", 0xAA3333FF, 40.0, 10000);

					SendInfoMessage(playerid, "Kupili ste status DMZ LEGEND za 26666 DMZ boda.");
				}
			}
		}

	}
	//CHC shop
	else if( dialogid == dialog_CHCSHOP ){

		if( !response ) return true;
		if( response ) {
        	switch( listitem ) {

		        case 0: {

					if( PlayerInfo[ playerid ][xCHCoins] < 50 ) return SendErrorMessage(playerid, "Nemate dovoljno CHC-A (50)");
					PlayerInfo[ playerid ][ xRespekt ] += 5;
					sql_user_update_integer( playerid, "exp", PlayerInfo[ playerid ][ xRespekt ] );
					SendInfoMessage(playerid, "Kupili ste 5 respekt poena za 50 CHC-A");
					PlayerInfo[ playerid ][ xCHCoins ] -= 50;
					UpdateCHCTD( playerid );
					sql_user_update_integer( playerid, "ch_coins", PlayerInfo[ playerid ][ xCHCoins ] );
				}
				case 1:{

					if( PlayerInfo[ playerid ][xCHCoins] < 500 ) return SendErrorMessage(playerid, "Nemate dovoljno CHC-A (500)");
					if( PlayerInfo[ playerid ][ xKazneniUgovor ] == 0 ) return SendErrorMessage(playerid, "Vi nemate ORG kaznu");
					SendInfoMessage(playerid, "Skinuli ste ORG kaznu za 500 CHC-a");
					PlayerInfo[ playerid ][ xCHCoins ] -= 500;
					sql_user_update_integer( playerid, "ch_coins", PlayerInfo[ playerid ][ xCHCoins ] );
					PlayerInfo[ playerid ][ xKazneniUgovor ] = 0;
		            sql_user_update_intandmoney( playerid, "org_punishment", PlayerInfo[ playerid ][ xKazneniUgovor ] );
            	}
            	case 2:{
            		if( PlayerInfo[ playerid ][xCHCoins] < 80 ) return SendErrorMessage(playerid, "Nemate dovoljno CHC-A (80)");
					changeNumberAllowed[ playerid ] = true;
					SendInfoMessage(playerid, "Kupili ste jednu dozvolu za promjenu broja, koristite /brojtelefona da promijenite broj");
					PlayerInfo[ playerid ][ xCHCoins ] -= 80;
					UpdateCHCTD( playerid );
					sql_user_update_integer( playerid, "ch_coins", PlayerInfo[ playerid ][ xCHCoins ] );
				}
			    case 3:{
            		if( PlayerInfo[ playerid ][xCHCoins] < 10 ) return SendErrorMessage(playerid, "Nemate dovoljno CHC-A (10)");
					PlayerInfo[ playerid ][ xLetelica ] = 1;
					sql_user_update_intandmoney( playerid, "air_license", PlayerInfo[ playerid ][ xLetelica ] );
					SendInfoMessage(playerid, "Kupili ste dozvolu za avion za 10 CHC-A ");
					PlayerInfo[ playerid ][ xCHCoins ] -= 10;
					UpdateCHCTD( playerid );
					sql_user_update_integer( playerid, "ch_coins", PlayerInfo[ playerid ][ xCHCoins ] );
				}
				case 4:{
            		if( PlayerInfo[ playerid ][xCHCoins] < 10 ) return SendErrorMessage(playerid, "Nemate dovoljno CHC-A (10)");
					PlayerInfo[ playerid ][ xBrodska ] = 1;
					sql_user_update_intandmoney( playerid, "boat_license", PlayerInfo[ playerid ][ xBrodska ] );
					SendInfoMessage(playerid, "Kupili ste dozvolu za brod za 10 CHC-A");
					PlayerInfo[ playerid ][ xCHCoins ] -= 10;
					UpdateCHCTD( playerid );
					sql_user_update_integer( playerid, "ch_coins", PlayerInfo[ playerid ][ xCHCoins ] );
				}
				case 5:{
            		if( PlayerInfo[ playerid ][xCHCoins] < 1000 ) return SendErrorMessage(playerid, "Nemate dovoljno CHC-A (1000)");
                    ServerInfo[ BrojWarnova ]--;
					PlayerInfo[ playerid ][ xWarn ] -= 1;
					sql_user_update_integer( playerid, "warn", PlayerInfo[ playerid ][ xWarn ] );
					SendInfoMessage(playerid, "Skinuli ste warn za 1000 CHC");
					PlayerInfo[ playerid ][ xCHCoins ] -= 1000;
					UpdateCHCTD( playerid );
					sql_user_update_integer( playerid, "ch_coins", PlayerInfo[ playerid ][ xCHCoins ] );
				}
				case 6:{
            		if( PlayerInfo[ playerid ][xCHCoins] < 1500 ) return SendErrorMessage(playerid, "Nemate dovoljno CHC-A (1500)");
                    if( PlayerInfo[ playerid ][ xSlotoviVozila ] < MAX_VEH_SLOT ) {

        				PlayerInfo[ playerid ][ xSlotoviVozila ]++;
						SendClientMessageEx( playerid, SVIJETLOPLAVA, "Uspjesno ste kupili jedan slot vozila. (Sada imate %d).", PlayerInfo[ playerid ][ xSlotoviVozila ] );
						PlayerInfo[ playerid ][ xCHCoins ] -= 1500;
						UpdateCHCTD( playerid );
        				sql_user_update_integer( playerid, "vehicle_slots", PlayerInfo[ playerid ][ xSlotoviVozila ] );
        				sql_user_update_integer( playerid, "ch_coins", PlayerInfo[ playerid ][ xCHCoins ] );
					}
					else return SendErrorMessage( playerid, "Vec imas maksimalan broj slotova (%d).", MAX_VEH_SLOT );
				}

   			}
        }
    }
	else if( dialogid == dialog_ORGMISIJA ){

		if( !response ) {
			ORGMisijaPokrenuo[ playerid ] = 3;
			ORGMisijaCutscene[ playerid ] = SetTimerEx("ORGMisijaCutscena", 1000, false, "ii", playerid, 0 );
		}
		if( response ) {
        	switch( listitem ) {
		        case 0: {
					ORGMisijaPokrenuo[ playerid ] = 3;
					ORGMisijaCutscene[ playerid ] = SetTimerEx("ORGMisijaCutscena", 1000, false, "ii", playerid, 0 );
				}
				case 1: {
					ORGMisijaPokrenuo[ playerid ] = 4;
					ORGMisijaCutscene[ playerid ] = SetTimerEx("ORGMisijaCutscena", 1000, false, "ii", playerid, 0 );
				}
				case 2: {
					ORGMisijaPokrenuo[ playerid ] = 5;
					ORGMisijaCutscene[ playerid ] = SetTimerEx("ORGMisijaCutscena", 1000, false, "ii", playerid, 0 );
				}
				case 3: {
					ORGMisijaPokrenuo[ playerid ] = 6;
					ORGMisijaCutscene[ playerid ] = SetTimerEx("ORGMisijaCutscena", 1000, false, "ii", playerid, 1 );
				}
   			}
        }
    }
    //Promijena boje TD-a
    else if( dialogid == dialog_TDB ){

		if( !response ) return true;
		if( response ) {
        	ChangeTDColor( playerid, listitem );
        }
    }
    ///vodic

	else if( dialogid == dialog_VODIC ){

		if( !response ) return true;
		if( response ) {
        switch( listitem ) {

		        case 0: {

					VodicIgraca[playerid] = 1;
					GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
					PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
					PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );
					VodicTimer[ playerid ] = SetTimerEx( "Vodic", 1000, false, "ii", playerid, 1 );
				}
				case 1:{
					VodicIgraca[playerid] = 3;
					GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
					PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
					PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );
					VodicTimer[ playerid ] = SetTimerEx( "Vodic", 1000, false, "ii", playerid, 1 );

            	}
            	case 2:{
					VodicIgraca[playerid] = 6;
					GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
					PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
					PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );
					VodicTimer[ playerid ] = SetTimerEx( "Vodic", 1000, false, "ii", playerid, 1 );
				}
				case 3:{
				 SPD( playerid, dialog_VODICPOSAO, DSL, D_NASLOV, "Farmer\nRudar\nGrobar\nWaltmart Delivery", D_ODABERI, D_NAZAD );
				}

   		}
        }
    }

    else if( dialogid == dialog_VODICPOSAO ){

		if( !response ) return true;
		if( response ) {
        switch( listitem ) {

		        case 0: {

					VodicIgraca[playerid] = 8;
					GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
					PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
					PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );
					VodicTimer[ playerid ] = SetTimerEx( "Vodic", 1000, false, "ii", playerid, 1 );
				}
				case 1:{
					VodicIgraca[playerid] = 10;
					GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
					PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
					PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );
					VodicTimer[ playerid ] = SetTimerEx( "Vodic", 1000, false, "ii", playerid, 1 );

            	}
            	case 2:{
					VodicIgraca[playerid] = 12;
					GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
					PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
					PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );
					VodicTimer[ playerid ] = SetTimerEx( "Vodic", 1000, false, "ii", playerid, 1 );
				}
				case 3:{
				 	VodicIgraca[playerid] = 14;
					GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
					PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
					PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );
					VodicTimer[ playerid ] = SetTimerEx( "Vodic", 1000, false, "ii", playerid, 1 );
				}

   		}
        }
    }
    //---
    else if( dialogid == dialog_SVERCER ){

		if( !response ) return true;
		if( response ) {
        	switch( listitem ) {
		        case 0: {
					if( NarucioBarut[ playerid ] == 1 ) return SendSvercerMessage(playerid, "Vec si narucio barut kod nas");
					SPD( playerid, dialog_SVERCERBARUT, DSL, "Svercer: koliko baruta zelite", "5 Grama[1500 materijala]\n10 Grama[3000 materijala]\n15 Grama[4500 materijala]", D_ODABERI, D_NAZAD );
				}
				case 1: {
					if( NarucioTimer[ playerid ] == 1) return SendSvercerMessage( playerid, "Vec si narucio bomb timer kod mene");
					if( !Dinamit[ playerid ] ) return SendSvercerMessage( playerid, "Treba mi dinamit sa crnog trzista (/gps) izvadi ga iz torbe (/ruksak)!" );
					if( PlayerInfo[ playerid ][xBombTimer] >= 3) return SendErrorMessage( playerid, "Mozeete imati samo 3 bomb timera kod sebe");
					SetTimerEx( "NarucioBTajmer", 120000, false, "i", playerid, 1 );
					SendSvercerMessage(playerid, "Narucio si Bomb Timer, bit ce ti dostavljen na lokaciju za 2 minute!");
					NarucioTimer[ playerid ] = 1;
					Dinamit[ playerid ] = false;
					NarucioSvercer[ playerid ] = 1;
				}
				case 2: {
					if( Neradimisiju[playerid] == 0){
					if( Inventory_Count( playerid, "Materijali" ) < 2000 ) return SendErrorMessage(playerid, "Morate imati 2000 materijala za 5 grama baruta");
					Inventory_Remove( playerid, "Materijali", 2000 );
					//PlayerInfo[ playerid ][ xMaterijali ] -= 2000;
					//sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );
					}
					if( PlayerInfo[ playerid ][xDetonator] >= 3) return SendErrorMessage( playerid, "Mozeete imati samo 3 detonatora kod sebe");
					SetTimerEx( "NarucioDetonatore", 120000, false, "i", playerid, 1 );
					SendSvercerMessage(playerid, "Narucio si Detonator, bit ce dostavljen na lokaciju za 2 minute!");
					NarucioDetonator[ playerid ] = 1;
					NarucioSvercer[ playerid ] = 1;
				}
				case 3: {
					//if( PlayerInfo[ playerid ][ xPosao ] != POSAO_DILERDROGE ) return SendErrorMessage( playerid, "Niste zaposleni kao diler droge /gps Posao 26." );
					if( NarucenoSjeme[playerid] > 0 ) return SendSvercerMessage(playerid, "Vec si narucio sjeme kod nas pricekaj 2 minute marker na mapi");
					SPD( playerid, dialog_SVERCERSJEME, DSI, "Svercer: koliko sjemena zelite", "1 sjemenka = 1000$", D_ODABERI, D_NAZAD );
				}
				case 4: {
					if( PlayerInfo[ playerid ][ xNovac ] < 100000) return SendInfoMessage(playerid, "Cijena cipa je 100.000$");
					KGEyes_GivePlayerMoney( playerid, -100000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -100000, "Kupovina cipa" );
					SetPVarInt(playerid, "NoAdminToggedPM", 1);
					SMSHackTime[playerid] = 60;
					SendInfoMessage(playerid, "Kupili ste cip i sad cete vidjeti sve SMS poruke telekoma narednih sat vremena (ili dok ne izadete sa servera).");
				}
   			}
        }
    }
    else if( dialogid == dialog_SVERCERBARUT ){

		if( !response ) return true;
		if( response ) {
        switch( listitem ) {

		        case 0: {
		            if( Neradimisiju[playerid] == 0){
		            if( Inventory_Count( playerid, "Materijali" ) < 1500 ) return SendErrorMessage(playerid, "Morate imati 1500 materijala za 5 grama baruta");
					Inventory_Remove( playerid, "Materijali", 1500 );
                    //PlayerInfo[ playerid ][ xMaterijali ] -= 1500;
					//sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );
					}
					SetTimerEx( "NarucioBarutt", 120000, false, "i", playerid, 1 );
					SendSvercerMessage(playerid, "Narucio si 5 grama baruta, bit ce ti dostavljeno na lokaciju za 2 minute");
					BarutKolicina[ playerid ] = 5;
					NarucioBarut[ playerid ] = 1;
                    NarucioSvercer[ playerid ] = 1;

				}
				case 1: {
					if( Neradimisiju[playerid] == 0){
		            if( Inventory_Count( playerid, "Materijali" ) < 3000 ) return SendErrorMessage(playerid, "Morate imati 3000 materijala za 10 grama baruta");
					Inventory_Remove( playerid, "Materijali", 3000 );
                    //PlayerInfo[ playerid ][ xMaterijali ] -= 3000;
					//sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );
					}
					SetTimerEx( "NarucioBarutt", 120000, false, "i", playerid, 1 );
					SendSvercerMessage(playerid, "Narucio si 10 grama baruta, bit ce ti dostavljeno na lokaciju za 2 minute");
					BarutKolicina[ playerid ] = 10;
					NarucioBarut[ playerid ] = 1;
                    NarucioSvercer[ playerid ] = 1;

				}
				case 2: {
				    if( Neradimisiju[playerid] == 0){
		            if( Inventory_Count( playerid, "Materijali" ) < 4500 ) return SendErrorMessage(playerid, "Morate imati 4500 materijala za 15 grama baruta");
					Inventory_Remove( playerid, "Materijali", 4500 );
                    //PlayerInfo[ playerid ][ xMaterijali ] -= 4500;
					//sql_user_update_integer( playerid, "materials", PlayerInfo[ playerid ][ xMaterijali ] );
					}
					SetTimerEx( "NarucioBarutt", 120000, false, "i", playerid, 1 );
					SendSvercerMessage(playerid, "Narucio si 15 grama baruta, bit ce ti dostavljeno na lokaciju za 2 minute");
					BarutKolicina[ playerid ] = 15;
					NarucioBarut[ playerid ] = 1;
                    NarucioSvercer[ playerid ] = 1;

				}

   		}
        }
    }
    else if( dialogid == dialog_SVERCERSJEME ){

		if( !response ) return true;
		if( response ) {

			new seeds;
		    if( sscanf( inputtext, "i", seeds ) ) return SPD( playerid, dialog_SVERCERSJEME, DSI, "Svercer: koliko sjemena zelite", "1 sjemenka = 1000$", D_ODABERI, D_NAZAD );
		    if( seeds < 1 || seeds > 10 ) return SPD( playerid, dialog_SVERCERSJEME, DSI, "Svercer: koliko sjemena zelite", "Greska: Ne mozete uzeti vise od 10 ili manje od 1.", D_ODABERI, D_NAZAD );
		    if( PlayerInfo[ playerid ][ xNovac ] < seeds*1000 ) return SPD( playerid, dialog_SVERCERSJEME, DSI, "Svercer: koliko sjemena zelite", "Greska: Nemate dovoljno novca, 1 sjemenka kosta 1000$", D_ODABERI, D_NAZAD );
			if( ( Inventory_Count( playerid, "Seme" ) + seeds ) > 10 ) return SendErrorMessage( playerid, "U inventoriju mozete imati maximum 10 sjemena droge." );
			SendSvercerMessage(playerid, "Narucio si sjeme, bit ce dostavljeno na /gps > Diler Sjemena u roku 2 minute!");
            SetTimerEx( "NarucioSjemeDostava", 120000, false, "i", playerid, 1 );
			SendInfoMessage( playerid, "Narucili ste %d sjemena droge.", seeds );
			KGEyes_GivePlayerMoney( playerid, -seeds*1000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -seeds*1000, "Kupovina sjemena kod svercera" );
			NarucenoSjeme[playerid] = seeds;
        }
    }
    //--
	else if( dialogid == dialog_lidervehsell ) {

        if( !response ) return true;
		if( response ) {

		    if( PlayerInfo[ playerid ][ xLider ] >= 1 && IsIllegalTypeOrg( playerid ) ) {

				new org_id = PlayerInfo[ playerid ][ xLider ];

				if( !IsPlayerInAnyVehicle( playerid ) ) return SendErrorMessage( playerid, "Morate biti u vozilu." );
			    if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendErrorMessage( playerid, "Morate biti na mjestu vozaca." );
				new vehicleid = GetPlayerVehicleID( playerid );

				if( VehicleInfo[ vehicleid ][ vUsage ] == ORGANIZACIJSKO_VOZILO && VehicleInfo[ vehicleid ][ vOrganization ] == org_id ) {

		    		KGEyes_GivePlayerMoney( playerid, VehicleInfo[ vehicleid ][ vPrice ]/8 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, VehicleInfo[ vehicleid ][ vPrice ]/8, "Prodaja org vozila na buy" );
					SendClientMessageEx( playerid, ZUTA, "Dobili ste %d$ za ovo vozilo.", VehicleInfo[ vehicleid ][ vPrice ]/8 );

					org_info[ org_id ][ oVehSlots ]--;
				    //sql_organization_update_integer( org_id, "vehslots", org_info[ org_id ][ oVehSlots ] );

					format( globalstring, sizeof( globalstring ), "Lider %s je prodao organizacijsko vozilo %s (ID: %d) za %d", ImeIgraca( playerid ), GetVehicleNameEx( VehicleInfo[ vehicleid ][ vModel ] ), vehicleid, VehicleInfo[ vehicleid ][ vPrice ]/8 );
					LogSave( "Ostalo/LogProdajaVozila.log", globalstring );

				    KGEyes_DestroyVehicle( vehicleid );
					sql_vehicles_delete( vehicleid );
					ResetVehicle( vehicleid );

                }
				else return SendErrorMessage( playerid, "Ovo vozilo nije u vlasnistvu vase organizacije." );
		    }
		    else return SendErrorMessage( playerid, "Niste u mogucnosti koristiti ovu komandu.");

		}
	}
	else if( dialogid == dialog_liderbuyvslots ) {

        if( !response ) return true;
		if( response ) {
		    if( PlayerInfo[ playerid ][ xLider ] >= 1 ) {

			    new org_id = PlayerInfo[ playerid ][ xLider ];
			    if( org_info[ org_id ][ oMaxVehSlots ] >= 25 ) return SendErrorMessage( playerid, "Vec imate maksimalan moguci broj slotova org vozila - 25. " );

			    new price = (org_info[ org_id ][ oMaxVehSlots ]+1)*50000;
				if( PlayerInfo[ playerid ][ xNovac ] < price ) return SendErrorMessage( playerid, "Nemate %d$ kod sebe.", price );
			    KGEyes_GivePlayerMoney( playerid, -price ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -price, "Kupovina slota za org vozilo" );

			    org_info[ org_id ][ oMaxVehSlots ]++;
			    sql_organization_update_integer( org_id, "maxvehslots", org_info[ org_id ][ oMaxVehSlots ] );

			    SendInfoMessage( playerid, "Uspjesno ste dodali jos jedan slot vozila za vasu org, imate %d/25.", org_info[ org_id ][ oMaxVehSlots ] );

			}
		}
	}
	else if( dialogid == dialog_liderbuyveh ) {

		if( response ) {
		    new slot = -1;
		    for( new j = 0; j < MAX_VEH_SLOT; j ++ ) {
				if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] == -1 ) {
			  		slot = j;
					break;
				}
			}
			if( slot == -1 ) return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );

		    new as = GetNearestSalon( playerid );
			if( GetNearestSalon( playerid ) == -1 ) return SendErrorMessage( playerid, "Nisi na pickupu auto salona." );
			if( AutoSalon[ as ][ AlreadyBuying ] == true ) return SendErrorMessage( playerid, "Neko vec kupuje vozilo!" );

			if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5+." );

   			AutoSalon[ as ][ AlreadyBuying ] = true;

		    PlayerBuyingAS[ playerid ] = as;
		    ModelCar[ playerid ] = 0;
		    ModelPage[ playerid ] = 0;
			ClearChat( playerid, 25 );
            BuyingVehForOrg[ playerid ] = false;
			BuyCarTDControl( playerid, true );
		    TogPlayerHud( playerid );

		    KGEyes_TogglePlayerControllable( playerid, false );
		}
		else {

		    new as = GetNearestSalon( playerid );
			if( GetNearestSalon( playerid ) == -1 ) return SendErrorMessage( playerid, "Nisi na pickupu auto salona." );
			if( AutoSalon[ as ][ AlreadyBuying ] == true ) return SendErrorMessage( playerid, "Neko vec kupuje vozilo!" );

			if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5+." );

			AutoSalon[ as ][ AlreadyBuying ] = true;
			BuyingVehForOrg[ playerid ] = true;
		    PlayerBuyingAS[ playerid ] = as;
		    ModelCar[ playerid ] = 0;
		    ModelPage[ playerid ] = 0;
			ClearChat( playerid, 25 );

			BuyCarTDControl( playerid, true );
		    TogPlayerHud( playerid );

		    KGEyes_TogglePlayerControllable( playerid, false );

		}
	}
	else if( dialogid == dialog_karta ) {

        if( !response ) return 1;
		if( response ) {

		    if( GetFactionType( playerid ) != ORG_TIP_PD ) {
		        if( GetPlayerState( playerid ) == 2 ) {
		            if( PlayerInfo[ playerid ][ xNovac ] < 2000 ) return SendErrorMessage( playerid, "Nemate 2000$ kod sebe." );
		            KGEyes_GivePlayerMoney( playerid, -2000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -2000, "Kupovina karte" );
		        }
		        else {
		            if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return SendErrorMessage( playerid, "Nemate 1000$ kod sebe." );
		            KGEyes_GivePlayerMoney( playerid, -1000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -1000, "Kupovina karte" );
		        }
		    }
		    switch( listitem ) {
		        case 0: {
		            if( IsPlayerInRangeOfPoint( playerid, 5.0, 1957.3600,-2181.6216,13.5469 ) ) {
		                if( GetPlayerState( playerid ) == 2 ) {
							KGEyes_SetVehiclePos( GetPlayerVehicleID( playerid ), -1535.2017, -448.3322, 5.7926 );
							SetPlayerInterior( playerid, 0 );
						 	SetPlayerVirtualWorld( playerid, 0 );
					 	}
						else {
							KGEyes_SetPlayerPos( playerid, -1545.7307, -442.2185, 6.0000 );
							SetPlayerInterior( playerid, 0 );
						 	SetPlayerVirtualWorld( playerid, 0 );
						}
				    }
					else if( IsPlayerInRangeOfPoint( playerid, 5.0, -1545.7307,-442.2185,6.0000 ) ) {
		                if( GetPlayerState( playerid ) == 2 ) {
							KGEyes_SetVehiclePos( GetPlayerVehicleID( playerid ), 1969.0466,-2182.6206,13.2522 );
							SetPlayerInterior( playerid, 0 );
						 	SetPlayerVirtualWorld( playerid, 0 );
					 	}
						else {
							KGEyes_SetPlayerPos( playerid, 1957.3600,-2181.6216,13.5469 );
							SetPlayerInterior( playerid, 0 );
						 	SetPlayerVirtualWorld( playerid, 0 );
						}
					}
					else if( IsPlayerInRangeOfPoint( playerid, 5.0, 1663.6437,1472.3773,10.7813 ) ) {
		                if( GetPlayerState( playerid ) == 2 ) {
							KGEyes_SetVehiclePos( GetPlayerVehicleID( playerid ), 1969.0466,-2182.6206,13.2522 );
							SetPlayerInterior( playerid, 0 );
						 	SetPlayerVirtualWorld( playerid, 0 );
					 	}
						else {
							KGEyes_SetPlayerPos( playerid, 1957.3600,-2181.6216,13.5469 );
							SetPlayerInterior( playerid, 0 );
						 	SetPlayerVirtualWorld( playerid, 0 );
						}
					}
					SetPlayerVirtualWorld( playerid, playerid );
					SetPlayerCameraPos( playerid, -833.5241, -1358.8575, 86.9054 );
					SetPlayerCameraLookAt( playerid, -833.5241, -1358.8575, 0.0000 );
					KrajLeta[ playerid ] = 31;
					if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
		        }
		        case 1: {
		            if( IsPlayerInRangeOfPoint( playerid, 5.0, 1957.3600,-2181.6216,13.5469 ) ) {
		                if( GetPlayerState( playerid ) == 2 ) {
							KGEyes_SetVehiclePos( GetPlayerVehicleID( playerid ), 1712.3051,1602.5154,9.7135 );
							SetPlayerInterior( playerid, 0 );
						 	SetPlayerVirtualWorld( playerid, 0 );
					 	}
						else {
							KGEyes_SetPlayerPos( playerid, 1663.6437,1472.3773,10.7813 );
							SetPlayerInterior( playerid, 0 );
						 	SetPlayerVirtualWorld( playerid, 0 );
						}
				    }
					else if( IsPlayerInRangeOfPoint( playerid, 5.0, -1545.7307,-442.2185,6.0000 ) ) {
		                if( GetPlayerState( playerid ) == 2 ) {
							KGEyes_SetVehiclePos( GetPlayerVehicleID( playerid ), 1712.3051,1602.5154,9.7135 );
							SetPlayerInterior( playerid, 0 );
						 	SetPlayerVirtualWorld( playerid, 0 );
					 	}
						else {
							KGEyes_SetPlayerPos( playerid, 1663.6437,1472.3773,10.7813 );
							SetPlayerInterior( playerid, 0 );
						 	SetPlayerVirtualWorld( playerid, 0 );
						}
					}
					else if( IsPlayerInRangeOfPoint( playerid, 5.0, 1663.6437,1472.3773,10.7813 ) ) {
		                if( GetPlayerState( playerid ) == 2 ) {
							KGEyes_SetVehiclePos( GetPlayerVehicleID( playerid ), -1535.2017, -448.3322, 5.7926 );
							SetPlayerInterior( playerid, 0 );
						 	SetPlayerVirtualWorld( playerid, 0 );
					 	}
						else {
							KGEyes_SetPlayerPos( playerid, -1545.7307, -442.2185, 6.0000 );
							SetPlayerInterior( playerid, 0 );
						 	SetPlayerVirtualWorld( playerid, 0 );
						}
					}

					SetPlayerVirtualWorld( playerid, playerid );
					SetPlayerCameraPos( playerid, -833.5241, -1358.8575, 86.9054 );
					SetPlayerCameraLookAt( playerid, -833.5241, -1358.8575, 0.0000 );
					KrajLeta[ playerid ] = 31;
					if( !TogHud[ playerid ] ) TogPlayerHud( playerid );
		        }
		    }
		}
	}
	
	else if( dialogid == dialog_UPLATITIKET ) {

	    if( response ) {

	        IzabraniPar[ playerid ] = listitem;

	        new str[ 20 ];

	        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

			format( str, sizeof( str ), "1 - %.2f\n", Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 0 ] );
			strcat( DialogStrgEx, str );
			format( str, sizeof( str ), "X - %.2f\n", Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 2 ] );
			strcat( DialogStrgEx, str );
			format( str, sizeof( str ), "2 - %.2f", Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 1 ] );
			strcat( DialogStrgEx, str );

	        SPD( playerid, dialog_UPLATITIKET_2, DSL, "Izaberi konacan ishod", DialogStrgEx, "Izaberi", "Odustani" );

            strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	    }
	    else if( !response ) {

	        for( new i = 0; i < 10; i++ ) {
			  	KladionicaListic[ playerid ][ parID ][ i ] = -1;
			  	KladionicaListic[ playerid ][ keciksdva ][ i ] = -1;
			  	KladionicaListic[ playerid ][ Kvota ][ i ] = 0.0;
			  	KladionicaListic[ playerid ][ teamID1 ][ i ] = -1;
				KladionicaListic[ playerid ][ teamID2 ][ i ] = -1;
			}
			KladionicaListic[ playerid ][ Uplaceno ] = 0;
			KladionicaListic[ playerid ][ Zavrseno ] = 0;
			KladionicaListic[ playerid ][ Uplata ] = 0;
		 	KladionicaListic[ playerid ][ Dobitak ] = 0;
		 	KladionicaListic[ playerid ][ Status ] = 0;
		 	SaveKladionica( playerid );
			KladionicaTDControl( playerid, false );
	    }

	}
	else if( dialogid == dialog_UPLATITIKET_2 ) {

	    if( response ) {

	        for( new ic = 0; ic < 10; ic++ ) {

	            if( IzabraniPar[ playerid ] == KladionicaListic[ playerid ][ parID ][ ic ] ) {

	                new str[ 128 ];

				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, str );

				    for(  new i = 0; i < 10; i++ ) {

					    format( str, sizeof( str ), "%s vs %s\n", bettingInfo[ Parovi[ i ][ parID ][ 0 ] ][ teamName ], bettingInfo[ Parovi[ i ][ parID ][ 1 ] ][ teamName ] );

		                strcat( DialogStrgEx, str );
					}

			    	SPD( playerid, dialog_UPLATITIKET, DSL, "Izaberi par:", DialogStrgEx, "Izaberi", "Odustani" );
			    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

	                SendErrorMessage( playerid, "Vec imate taj par na listicu." );
	                return true;

	            }
	        }

	        new izabraniID = -1;
	        for( new i = 0; i < 10; i++ ) {

	        	if( KladionicaListic[ playerid ][ parID ][ i ] == -1 ) {

					izabraniID = i;
					break;

	       		}
	    	}
	        if( izabraniID == -1 ) {

	            SPD( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );
				SendErrorMessage( playerid, "Vec imas odigranih 10 parova." );
				return 1;
			}

	        switch( listitem ) {

	            case 0: {

                    KladionicaListic[ playerid ][ parID ][ izabraniID ] = IzabraniPar[ playerid ];
                    KladionicaListic[ playerid ][ keciksdva ][ izabraniID ] = 1;
                    KladionicaListic[ playerid ][ Kvota ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 0 ];
	            }
	            case 1: {

	            	KladionicaListic[ playerid ][ parID ][ izabraniID ] = IzabraniPar[ playerid ];
                    KladionicaListic[ playerid ][ keciksdva ][ izabraniID ] = 2;
                    KladionicaListic[ playerid ][ Kvota ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 2 ];
	            }
	            case 2: {

	                KladionicaListic[ playerid ][ parID ][ izabraniID ] = IzabraniPar[ playerid ];
                    KladionicaListic[ playerid ][ keciksdva ][ izabraniID ] = 3;
                    KladionicaListic[ playerid ][ Kvota ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 1 ];
	            }
	        }
	        KladionicaListic[ playerid ][ teamID1 ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ parID ][ 0 ];
			KladionicaListic[ playerid ][ teamID2 ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ parID ][ 1 ];

	    	SPD( playerid, dialog_UPLATITIKET_3, DSMSG, "Nastavak", "Da li zelite da odigrate jos neki par?", "Da", "Ne" );
	    }
	    else if( !response ) {

         	for(  new i = 0; i < 10; i++ ) {
			  	KladionicaListic[ playerid ][ parID ][ i ] = -1;
			  	KladionicaListic[ playerid ][ keciksdva ][ i ] = -1;
			  	KladionicaListic[ playerid ][ Kvota ][ i ] = 0.0;
			  	KladionicaListic[ playerid ][ teamID1 ][ i ] = -1;
				KladionicaListic[ playerid ][ teamID2 ][ i ] = -1;
			}
			KladionicaListic[ playerid ][ Uplaceno ] = 0;
			KladionicaListic[ playerid ][ Zavrseno ] = 0;
			KladionicaListic[ playerid ][ Uplata ] = 0;
		 	KladionicaListic[ playerid ][ Dobitak ] = 0;
		 	KladionicaListic[ playerid ][ Status ] = 0;
		 	SaveKladionica( playerid );
			KladionicaTDControl( playerid, false );
	    }

	}
	else if( dialogid == dialog_UPLATITIKET_3 ) {

		if( response ) {

		    new broj = 0;
		    for(  new i = 0; i < 10; i++ ) {

	        	if( KladionicaListic[ playerid ][ parID ][ i ] != -1 ) {

					broj++;
	       		}
	    	}
	    	if( broj == 10 ) {

	    	    SPD( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );

				SendErrorMessage( playerid, "Vec imate odigranih 10 parova." );
				return true;
			}

		    new str[ 128 ];

		    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			strcat( DialogStrgEx, str );

		    for(  new i = 0; i < 10; i++ ) {

			    format( str, sizeof( str ), "%s vs %s\n", bettingInfo[ Parovi[ i ][ parID ][ 0 ] ][ teamName ], bettingInfo[ Parovi[ i ][ parID ][ 1 ] ][ teamName ] );

                strcat( DialogStrgEx, str );
			}

	    	SPD( playerid, dialog_UPLATITIKET, DSL, "Izaberi par:", DialogStrgEx, "Izaberi", "Odustani" );
	    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

		}
		else if( !response ) {

		    new broj = 0;
		    for(  new i = 0; i < 10; i++ ) {

	        	if( KladionicaListic[ playerid ][ parID ][ i ] != -1 ) {

					broj++;
	       		}
	    	}
	    	if( broj == 0 ) {

	    	    new str[ 128 ];

			    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				strcat( DialogStrgEx, str );

			    for(  new i = 0; i < 10; i++ ) {

				    format( str, sizeof( str ), "%s vs %s\n", bettingInfo[ Parovi[ i ][ parID ][ 0 ] ][ teamName ], bettingInfo[ Parovi[ i ][ parID ][ 1 ] ][ teamName ] );

	                strcat( DialogStrgEx, str );
				}

		    	SPD( playerid, dialog_UPLATITIKET, DSL, "Izaberi par:", DialogStrgEx, "Izaberi", "Odustani" );
		    	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

				SendErrorMessage( playerid, "Nemate odigranu ni jednu tekmu." );
				return true;
			}

	    	SPD( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );
		}
	}
	else if( dialogid == dialog_UPLATITIKET_4 ) {

		if( response ) {

		    new novac, Float:kvota[ 10 ];
		    if( sscanf( inputtext, "i", novac ) ) return SPD( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );
		    if( novac < 20 || novac > 300 ) return SPD( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Greska: samo od 20 do 300 dolara.\nUnesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );
		    if( PlayerInfo[ playerid ][ xNovac ] < novac ) return SPD( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Greska: nemate toliko novca.\nUnesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );

            new hour, minute, second, day, year, month;
			getdate( year, month, day );
			gettimeEx( hour, minute, second );
			FixHour( hour );
			hour = shifthour;

			if( minute < 3 ) return SendErrorMessage( playerid, "Sacekajte nove parove, stizu u %d:03.", hour );
			if( minute > 31 ) return SendErrorMessage( playerid, "Proslo je pola sata za uplate, cekajte sledece kolo." );

			KGEyes_GivePlayerMoney( playerid, -novac ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -novac, "Uplata tiketa" );
			if( PlayerInfo[ playerid ][ xLevel ] >= (ServerInfo[ PocetniLevel ]+1) ) BussinesMoney( uFirmi[ playerid ], novac );

			SendInfoMessage( playerid, "Da vidis svoj tiket kucaj /mojlistic." );

			KladionicaListic[ playerid ][ Uplata ] = novac;
			KladionicaListic[ playerid ][ Uplaceno ] = 1;
			KladionicaListic[ playerid ][ Zavrseno ] = 0;

			if( KladionicaListic[ playerid ][ Kvota ][ 0 ] == 0 ) { kvota[ 0 ] = 1; } else { kvota[ 0 ] = KladionicaListic[ playerid ][ Kvota ][ 0 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 1 ] == 0 ) { kvota[ 1 ] = 1; } else { kvota[ 1 ] = KladionicaListic[ playerid ][ Kvota ][ 1 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 2 ] == 0 ) { kvota[ 2 ] = 1; } else { kvota[ 2 ] = KladionicaListic[ playerid ][ Kvota ][ 2 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 3 ] == 0 ) { kvota[ 3 ] = 1; } else { kvota[ 3 ] = KladionicaListic[ playerid ][ Kvota ][ 3 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 4 ] == 0 ) { kvota[ 4 ] = 1; } else { kvota[ 4 ] = KladionicaListic[ playerid ][ Kvota ][ 4 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 5 ] == 0 ) { kvota[ 5 ] = 1; } else { kvota[ 5 ] = KladionicaListic[ playerid ][ Kvota ][ 5 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 6 ] == 0 ) { kvota[ 6 ] = 1; } else { kvota[ 6 ] = KladionicaListic[ playerid ][ Kvota ][ 6 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 7 ] == 0 ) { kvota[ 7 ] = 1; } else { kvota[ 7 ] = KladionicaListic[ playerid ][ Kvota ][ 7 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 7 ] == 0 ) { kvota[ 8 ] = 1; } else { kvota[ 8 ] = KladionicaListic[ playerid ][ Kvota ][ 8 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 8 ] == 0 ) { kvota[ 9 ] = 1; } else { kvota[ 9 ] = KladionicaListic[ playerid ][ Kvota ][ 9 ]; }

			KladionicaListic[ playerid ][ Dobitak ] = novac*
													  kvota[ 0 ]*
													  kvota[ 1 ]*
													  kvota[ 2 ]*
													  kvota[ 3 ]*
													  kvota[ 4 ]*
													  kvota[ 5 ]*
													  kvota[ 6 ]*
													  kvota[ 7 ]*
													  kvota[ 8 ]*
													  kvota[ 9 ];
			SendInfoMessage( playerid, "Uspjesno ste uplatili tiket. Dobitak %.2f.$", KladionicaListic[ playerid ][ Dobitak ] );



	        new staar[ 32 ];
			format( staar, sizeof( staar ), "%d.%d.%d %02d:30", day, month, year, hour );
	        strmid( KladionicaListic[ playerid ][ HourPobeda ], staar, 0, strlen( staar ), 32 );

			SaveKladionica( playerid );
			KladionicaTDControl( playerid, false );
		}
		else if( !response ) {

		    for(  new i = 0; i < 10; i++ ) {
			  	KladionicaListic[ playerid ][ parID ][ i ] = -1;
			  	KladionicaListic[ playerid ][ keciksdva ][ i ] = -1;
			  	KladionicaListic[ playerid ][ Kvota ][ i ] = 0.0;
			  	KladionicaListic[ playerid ][ teamID1 ][ i ] = -1;
				KladionicaListic[ playerid ][ teamID2 ][ i ] = -1;
			}
			KladionicaListic[ playerid ][ Uplaceno ] = 0;
			KladionicaListic[ playerid ][ Zavrseno ] = 0;
			KladionicaListic[ playerid ][ Uplata ] = 0;
		 	KladionicaListic[ playerid ][ Dobitak ] = 0;
		 	KladionicaListic[ playerid ][ Status ] = 0;
			SaveKladionica( playerid );
			KladionicaTDControl( playerid, false );
		}
	}
	else if( dialogid == dialog_ZAMENA_23 ) {

		if( response ) {
			new id = GlobalProdaja[ playerid ], ponuda[ 128 ], trazi[ 128 ];

			if( Ponudjeno[ playerid ] == 1 ) {
				format( ponuda, sizeof( ponuda ), "vozilo marke %s", GetVehicleNameEx( GetVehicleModel( player_veh[ playerid ][ vehicle_id ][ GlobalID[ playerid ] ] ) ) );
			}
			else if( Ponudjeno[ playerid ] == 2 ) {
				format( ponuda, sizeof( ponuda ), "%s vrednosti %d$", GetPropertyAName( PlayerInfo[ playerid ][ xProperty ][ GlobalID[ playerid ] ] ), II[ PlayerInfo[ playerid ][ xProperty ][ GlobalID[ playerid ] ] ][ iPrice ] );
			}
			else if( Ponudjeno[ playerid ] == 3 ) {
				format( ponuda, sizeof( ponuda ), "firma - %s", BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bName ] );
			}

			if( PlayerInfo[ playerid ][ xProperty ][ 0 ] != -1 && PlayerInfo[ playerid ][ xProperty ][ 1 ] != -1 && PlayerInfo[ playerid ][ xProperty ][ 2 ] != -1 ) {

			    SendErrorMessage( playerid, "Vec posjedujes 3 kuce/stana/vikendice!");

				Ponudjeno[ playerid ] = -1;
				Trazio[ playerid ] = -1;
				GlobalProdaja[ playerid ] = -1;
				GlobalID[ playerid ] = -1;
				GlobalID_2[ playerid ] = -1;
				return true;
			}

        	if( PlayerInfo[ id ][ xProperty ][ listitem ] == -1 ) {

			    SendErrorMessage( playerid, "Igrac nema imovinu u slotu %d.", listitem+1 );

				Ponudjeno[ playerid ] = -1;
				Trazio[ playerid ] = -1;
				GlobalProdaja[ playerid ] = -1;
				GlobalID[ playerid ] = -1;
				GlobalID_2[ playerid ] = -1;
				return true;
			}

        	format( trazi, sizeof( trazi ), "%s vrednosti %d$", GetPropertyName( PlayerInfo[ id ][ xProperty ][ listitem ] ), II[ PlayerInfo[ id ][ xProperty ][ listitem ] ][ iPrice ] );

			GlobalID[ id ] = GlobalID[ playerid ];
			GlobalID_2[ id ] = listitem;
			Ponudjeno[ id ] = Ponudjeno[ playerid ];
			Trazio[ id ] = Trazio[ playerid ];
			GlobalProdaja[ id ] = playerid;

			SendInfoMessage( id, "Igrac %s vam nudi zamjenu, da vidite detalje kucajte /zamjenaprihvati", ImeIgraca(playerid) );
			SendInfoMessage( playerid, "Uspjesno ste ponudili zamenu igracu %s.", ImeIgraca( id ) );
			SendInfoMessage( playerid, "U zameni je ponudjen "col_server"%s.", ponuda );
			SendInfoMessage( playerid, "U zameni si zatrazio "col_server"%s.", trazi );

			Ponudjeno[ playerid ] = -1;
			Trazio[ playerid ] = -1;
			GlobalProdaja[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
			GlobalID_2[ playerid ] = -1;
		}
		else if( !response ) {
			Ponudjeno[ playerid ] = -1;
			Trazio[ playerid ] = -1;
			GlobalProdaja[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
			GlobalID_2[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_ZAMENA_0 ) {

		if( response ) {
			new id = GlobalProdaja[ playerid ], ponuda[ 128 ], trazi[ 128 ];

			if( Ponudjeno[ playerid ] == 1 ) {
				format( ponuda, sizeof( ponuda ), "vozilo marke %s", GetVehicleNameEx( GetVehicleModel( player_veh[ playerid ][ vehicle_id ][ GlobalID[ playerid ] ] ) ) );
			}
			else if( Ponudjeno[ playerid ] == 2 ) {
				format( ponuda, sizeof( ponuda ), "%s vrednosti %d$", GetPropertyAName( PlayerInfo[ playerid ][ xProperty ][ GlobalID[ playerid ] ] ), II[ PlayerInfo[ playerid ][ xProperty ][ GlobalID[ playerid ] ] ][ iPrice ] );
			}
			else if( Ponudjeno[ playerid ] == 3 ) {
				format( ponuda, sizeof( ponuda ), "firma - %s", BussinesInfo[ PlayerInfo[ playerid ][ xFirmaID ] ][ bName ] );
			}

			new slot = -1;
		    for( new j = 0; j < MAX_VEH_SLOT; j ++ ) {
				if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] == -1 ) {
			  		slot = j;
					break;
				}
			}
			if( slot == -1 ) {

			    SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );

				Ponudjeno[ playerid ] = -1;
				Trazio[ playerid ] = -1;
				GlobalProdaja[ playerid ] = -1;
				GlobalID[ playerid ] = -1;
				GlobalID_2[ playerid ] = -1;
				return true;
			}

			if( player_veh[ id ][ vehicle_id ][ listitem ] == -1 ) {

			    SendErrorMessage( playerid, "Igrac nema vozilo u slotu %d.", listitem+1 );

				Ponudjeno[ playerid ] = -1;
				Trazio[ playerid ] = -1;
				GlobalProdaja[ playerid ] = -1;
				GlobalID[ playerid ] = -1;
				GlobalID_2[ playerid ] = -1;
				return true;
			}

			format( trazi, sizeof( trazi ), "vozilo marke %s", GetVehicleNameEx( GetVehicleModel( player_veh[ id ][ vehicle_id ][ listitem ] ) ) );

		    GlobalID[ id ] = GlobalID[ playerid ];
			GlobalID_2[ id ] = listitem;
			Ponudjeno[ id ] = Ponudjeno[ playerid ];
			Trazio[ id ] = Trazio[ playerid ];
			GlobalProdaja[ id ] = playerid;

		

			SendInfoMessage( id, "Igrac %s vam nudi zamjenu, da vidite detalje kucajte /zamjenaprihvati", ImeIgraca(playerid) );

		
			SendInfoMessage( playerid, "Uspjesno ste ponudili zamenu igracu %s.", ImeIgraca( id ) );
			SendInfoMessage( playerid, "U zameni je ponudjen "col_server"%s.", ponuda );
			SendInfoMessage( playerid, "U zameni si zatrazio "col_server"%s.", trazi );

			Ponudjeno[ playerid ] = -1;
			Trazio[ playerid ] = -1;
			GlobalProdaja[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
			GlobalID_2[ playerid ] = -1;
		}
		else if( !response ) {
			Ponudjeno[ playerid ] = -1;
			Trazio[ playerid ] = -1;
			GlobalProdaja[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
			GlobalID_2[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_ZAMENA_1 ) {

		if( response ) {

		    new ponudjeno = Ponudjeno[ playerid ], trazeno = Trazio[ playerid ], igrac = GlobalProdaja[ playerid ], ID_1 = GlobalID[ playerid ], ID_2 = GlobalID_2[ playerid ];

			if( igrac == -1 || trazeno < 1 || trazeno > 3 || ponudjeno < 1 || ponudjeno > 3 ) {

				Ponudjeno[ playerid ] = -1;
				Trazio[ playerid ] = -1;
				GlobalProdaja[ playerid ] = -1;
				GlobalID[ playerid ] = -1;
				GlobalID_2[ playerid ] = -1;
				GlobalProdajaDoplata[ playerid ] = -1;
				SendErrorMessage( playerid, "Dogodila se greska pri zameni, tako da je obustavljena." );
				return true;
			}
			if( !IsPlayerConnected( igrac ) ) {

				Ponudjeno[ playerid ] = -1;
				Trazio[ playerid ] = -1;
				GlobalProdaja[ playerid ] = -1;
				GlobalID[ playerid ] = -1;
				GlobalID_2[ playerid ] = -1;
				GlobalProdajaDoplata[ playerid ] = -1;
				SendErrorMessage( playerid, "Igrac je izasao sa servera u toku zamene, tako da je obustavljena." );
				return true;
			}

			new logzamenaID = random( 1000 )+1;

			if( ponudjeno == 1 ) {

			    for( new j = 0; j < MAX_VEH_SLOT; j ++ ) {
					if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] == -1 ) {

				  		player_veh[ playerid ][ vehicle_id ][ j ] = player_veh[ igrac ][ vehicle_id ][ ID_1 ];

				  		strmid( VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ j ] ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);
						VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ j ] ][ vOwner_sqlID  ] = PlayerInfo[ playerid ][ xID ];

						mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `owner_sqlID` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
												VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ j ] ][ vOwner_sqlID ],
												VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ j ] ][ vSqlID ] );

						mysql_pquery( _dbConnector, sql_str, "", "" );

						break;
					}
				}

				format( globalstring, sizeof( globalstring ), "zID:%d | Igrac %s je dao u zamenu igracu %s vozilo marke %s.",
			    	logzamenaID, ImeIgraca( igrac ), ImeIgraca( playerid ),
			    	GetVehicleNameEx( VehicleInfo[ player_veh[ igrac ][ vehicle_id ][ ID_1 ] ][ vModel ] ));

			    LogSave( "Ostalo/LogZamena.log", globalstring );

				player_veh[ igrac ][ vehicle_id ][ ID_1 ] = -1;
			}
			else if( ponudjeno == 2 ) {


				for( new i = 0; i < 3; i ++ ) {
					if( PlayerInfo[ playerid ][ xProperty ][ i ] == -1 ) {

						PlayerInfo[ playerid ][ xProperty ][ i ] = PlayerInfo[ igrac ][ xProperty ][ ID_1 ];
						PlayerInfo[ playerid ][ xPropertySqlID ][ i ] = II[ PlayerInfo[ igrac ][ xProperty ][ ID_1 ] ][ ibaseID ];

						strmid( II[ PlayerInfo[ igrac ][ xProperty ][ ID_1 ] ][ iOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
						II[ PlayerInfo[ igrac ][ xProperty ][ ID_1 ] ][ iOwnerbaseID ] = PlayerInfo[ playerid ][ xID ];
						Property_checkGarage( PlayerInfo[ igrac ][ xProperty ][ ID_1 ] );

						mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_userid` = '%d' WHERE `propID` = '%d'",
							II[ PlayerInfo[ igrac ][ xProperty ][ ID_1 ] ][ iOwnerbaseID ],
							II[ PlayerInfo[ igrac ][ xProperty ][ ID_1 ] ][ ibaseID ] );

						mysql_pquery( _dbConnector, sql_str, "", "");
						PropertyRefresh( PlayerInfo[ igrac ][ xProperty ][ ID_1 ] );

						sql_user_update_property( playerid );
						break;
					}
				}

				format( globalstring, sizeof( globalstring ), "zID:%D | Igrac %s je dao u zamenu igracu %s imovinu ID: %d.",
			    	logzamenaID, ImeIgraca( igrac ), ImeIgraca( playerid ),
			    	PlayerInfo[ igrac ][ xProperty ][ ID_1 ] );

			    LogSave( "Ostalo/LogZamena.log", globalstring );

				PlayerInfo[ igrac ][ xProperty ][ ID_1 ] = -1;
				PlayerInfo[ igrac ][ xPropertySqlID ][ ID_1 ] = 0;


				sql_user_update_property( igrac );

			}
			else if( ponudjeno == 3 ) {


				PlayerInfo[ playerid ][ xFirmaID ] = ID_1;
				PlayerInfo[ playerid ][ xBussinesSqlID ] = BussinesInfo[ ID_1 ][ b_ID ];

			    PlayerInfo[ igrac ][ xFirmaID ] = -1;
				PlayerInfo[ igrac ][ xBussinesSqlID ] = 0;

				BussinesInfo[ ID_1 ][ bOwner_sqlID ] = PlayerInfo[ playerid ][ xID ];
				strmid( BussinesInfo[ ID_1 ][ bOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);

				mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `bussines` SET `b_owner_sqlID` = '%d' WHERE `bussines_id` = '%d'",
						BussinesInfo[ ID_1 ][ bOwner_sqlID ],
						BussinesInfo[ ID_1 ][ b_ID ] );

			   	mysql_pquery( _dbConnector, sql_str, "", "");

				Bussines_Refresh( ID_1 );

				sql_user_update_integer( playerid, "bussines_id", PlayerInfo[ playerid ][ xBussinesSqlID ] );
				sql_user_update_integer( igrac, "bussines_id", PlayerInfo[ igrac ][ xBussinesSqlID ] );

				format( globalstring, sizeof( globalstring ), "zID:%d | Igrac %s je dao u zamenu igracu %s firmu ID: %d.",
			    	logzamenaID, ImeIgraca( igrac ), ImeIgraca( playerid ),
			    	ID_1 );

			    LogSave( "Ostalo/LogZamena.log", globalstring );
			}

			if( trazeno == 1 ) {

			    for( new j = 0; j < MAX_VEH_SLOT; j ++ ) {
					if( (j+1) <= PlayerInfo[ igrac ][ xSlotoviVozila ] && player_veh[ igrac ][ vehicle_id ][ j ] == -1 ) {

				  		player_veh[ igrac ][ vehicle_id ][ j ] = player_veh[ playerid ][ vehicle_id ][ ID_2 ];

				  		strmid( VehicleInfo[ player_veh[ igrac ][ vehicle_id ][ j ] ][ vOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);
						VehicleInfo[ player_veh[ igrac ][ vehicle_id ][ j ] ][ vOwner_sqlID  ] = PlayerInfo[ igrac ][ xID ];

						mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `owner_sqlID` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
												VehicleInfo[ player_veh[ igrac ][ vehicle_id ][ j ] ][ vOwner_sqlID ],
												VehicleInfo[ player_veh[ igrac ][ vehicle_id ][ j ] ][ vSqlID ] );

						mysql_pquery( _dbConnector, sql_str, "", "" );
						break;
					}
				}

			    format( globalstring, sizeof( globalstring ), "zID:%D | Igrac %s je dao u zamenu igracu %s vozilo marke %s.",
			    	logzamenaID, ImeIgraca( playerid ), ImeIgraca( igrac ),
			    	GetVehicleNameEx( VehicleInfo[ player_veh[ playerid ][ vehicle_id ][ ID_2 ] ][ vModel ] ));

			    LogSave( "Ostalo/LogZamena.log", globalstring );

			    player_veh[ playerid ][ vehicle_id ][ ID_2 ] = -1;
			}
			else if( trazeno == 2 ) {

				for( new i = 0; i < 3; i ++ ) {
					if( PlayerInfo[ igrac ][ xProperty ][ i ] == -1 ) {

						PlayerInfo[ igrac ][ xProperty ][ i ] = PlayerInfo[ playerid ][ xProperty ][ ID_2 ];

						PlayerInfo[ igrac ][ xPropertySqlID ][ i ] = II[ PlayerInfo[ playerid ][ xProperty ][ ID_2 ] ][ ibaseID ];

						strmid( II[ PlayerInfo[ playerid ][ xProperty ][ ID_2 ] ][ iOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 255);
						II[ PlayerInfo[ playerid ][ xProperty ][ ID_2 ] ][ iOwnerbaseID ] = PlayerInfo[ igrac ][ xID ];
						Property_checkGarage( PlayerInfo[ playerid ][ xProperty ][ ID_2 ] );

						mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `property` SET `p_userid` = '%d' WHERE `propID` = '%d'",
							II[ PlayerInfo[ playerid ][ xProperty ][ ID_2 ] ][ iOwnerbaseID ],
							II[ PlayerInfo[ playerid ][ xProperty ][ ID_2 ] ][ ibaseID ] );

						mysql_pquery( _dbConnector, sql_str, "", "");
						PropertyRefresh( PlayerInfo[ playerid ][ xProperty ][ ID_2 ] );

						sql_user_update_property( igrac );
						break;
					}
				}

				format( globalstring, sizeof( globalstring ), "zID:%D | Igrac %s je dao u zamenu igracu %s imovinu ID: %d.",
			    	logzamenaID, ImeIgraca( playerid ), ImeIgraca( igrac ),
			    	PlayerInfo[ playerid ][ xProperty ][ ID_2 ] );

			    LogSave( "Ostalo/LogZamena.log", globalstring );

				PlayerInfo[ playerid ][ xProperty ][ ID_2 ] = -1;
				PlayerInfo[ playerid ][ xPropertySqlID ][ ID_2 ] = 0;


				sql_user_update_property( playerid );
			}
			else if( trazeno == 3 ) {

				format( globalstring, sizeof( globalstring ), "zID:%D | Igrac %s je dao u zamenu igracu %s firmu ID: %d.",
			    	logzamenaID, ImeIgraca( playerid ), ImeIgraca( igrac ),
			    	ID_2 );

			    LogSave( "Ostalo/LogZamena.log", globalstring );

				PlayerInfo[ igrac ][ xFirmaID ] = ID_2;
				PlayerInfo[ igrac ][ xBussinesSqlID ] = BussinesInfo[ ID_2 ][ b_ID ];

			    PlayerInfo[ playerid ][ xFirmaID ] = -1;
				PlayerInfo[ playerid ][ xBussinesSqlID ] = 0;

				BussinesInfo[ ID_2 ][ bOwner_sqlID ] = PlayerInfo[ igrac ][ xID ];
				strmid( BussinesInfo[ ID_2 ][ bOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 255);

				mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `bussines` SET `b_owner_sqlID` = '%d' WHERE `bussines_id` = '%d'",
						BussinesInfo[ ID_2 ][ bOwner_sqlID ],
						BussinesInfo[ ID_2 ][ b_ID ] );

			   	mysql_pquery( _dbConnector, sql_str, "", "");

				Bussines_Refresh( ID_2 );

				sql_user_update_integer( playerid, "bussines_id", PlayerInfo[ playerid ][ xBussinesSqlID ] );
				sql_user_update_integer( igrac, "bussines_id", PlayerInfo[ igrac ][ xBussinesSqlID ] );

			}
			if( GlobalProdajaDoplata[ playerid ] != 0 )
				KGEyes_GivePlayerMoney(playerid, -GlobalProdajaDoplata[playerid]), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -GlobalProdajaDoplata[playerid], "Zamjena doplata" );

			Ponudjeno[ playerid ] = -1;
			Trazio[ playerid ] = -1;
			GlobalProdaja[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
			GlobalID_2[ playerid ] = -1;
			GlobalProdajaDoplata[ playerid ] = -1;

			SendInfoMessage( playerid, "Prihvatili ste zamenu od igraca %s, te je ona uspesno obavljena.", ImeIgraca( igrac ) );
			SendInfoMessage( igrac, "%s je prihvatio vasu zamenu, te je ona uspesno obavljena.", ImeIgraca( playerid ) );

		}
		else if( !response ) {

			SendInfoMessage( playerid, "Odustali ste od zamene igraca %s, te je ona obustavljena.", ImeIgraca( GlobalProdaja[ playerid ] ) );
			SendInfoMessage( GlobalProdaja[ playerid ], "%s je prihvatio vasu zamenu, te je ona uspesno obavljena.", ImeIgraca( playerid ) );

			Ponudjeno[ playerid ] = -1;
			Trazio[ playerid ] = -1;
			GlobalProdaja[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
			GlobalID_2[ playerid ] = -1;
			GlobalProdajaDoplata[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_RULET_1 && response) {

	    switch( listitem ) {

	        case 0: {

	            SPD( playerid, dialog_RULET_2, DSL, "Rulet", "Crvena\nCrna", "Dalje", "Odustani" );
	        }
	        case 1: {

	            SPD( playerid, dialog_RULET_3, DSI ,"Rulet", "Unesite broj koji zelite odigrati:\n\n", "Dalje", "Odustani" );
	        }
	        case 2: {

	            SPD( playerid, dialog_RULET_4, DSL, "Rulet", "Parno\nNeparno", "Dalje", "Odustani" );
	        }
	        case 3: {

	            SPD( playerid, dialog_RULET_5, DSL, "Rulet", "Zero\nMala\nOrfa", "Dalje", "Odustani" );
	        }
	    }
	}
	else if( dialogid == dialog_RULET_5 && response ) {

	    switch( listitem ) {

	        case 0: {

	            new aizbacenbroj, adobitakbrt;

			    aizbacenbroj = random(36);
			    while( aizbacenbroj == 0 ) aizbacenbroj = random(36);
			    adobitakbrt = RuletAccount[ playerid ]*19/10;

			    new aizaslitekst[16];

			    if( ParnostBroja( aizbacenbroj ) ) aizaslitekst = "CRNO";
				else aizaslitekst = "CRVENO";

				SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", aizbacenbroj, aizaslitekst);
				SCM(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Vasa kombinacija je: {FFFFFF}ZERO");

				if(IsBrojKombinacija(1, aizbacenbroj))
				{
				    KGEyes_GivePlayerMoney(playerid, adobitakbrt), PlayerMoneyTrackSave( playerid, MONEY_HANDS, adobitakbrt, "Rulet" );
					SCM(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Dobiveni broj je Dio zero kombinacije!");
					SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", adobitakbrt);
			    }
			    else
				{
					SCM(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Dobiveni broj nije Dio zero kombinacije!");
					SCM(playerid, NARANDZASTA, ""col_server"[RULET]{FFAF00}Izgubili ste!");
				}

			    RuletAccount[ playerid ] = 0;
	        }
	        case 1: {

	            new aizbacenbroj, adobitakbrt;
			    aizbacenbroj = random(36);
			    while( aizbacenbroj == 0 ) aizbacenbroj = random(36);
			    adobitakbrt = RuletAccount[ playerid ]*24/10;
			    new aizaslitekst[16];
			    if(ParnostBroja(aizbacenbroj)) aizaslitekst = "CRNO";
				else aizaslitekst = "CRVENO";
				SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", aizbacenbroj, aizaslitekst);
				SCM(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Vasa kombinacija je: {FFFFFF}MALA");
    			if(IsBrojKombinacija(2, aizbacenbroj))
				{
				    KGEyes_GivePlayerMoney(playerid, adobitakbrt), PlayerMoneyTrackSave( playerid, MONEY_HANDS, adobitakbrt, "Rulet" );
					SCM(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Dobiveni broj je Dio mala kombinacije!");
					SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", adobitakbrt);
			    }
			    else
				{
					SCM(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Dobiveni broj nije Dio mala kombinacije!");
					SCM(playerid, NARANDZASTA, ""col_server"[RULET]{FFAF00}Izgubili ste!");
				}
			    RuletAccount[ playerid ] = 0;
	        }
	        case 2: {

	            new aizbacenbroj, adobitakbrt;
			    aizbacenbroj = random(36);
			    adobitakbrt = RuletAccount[ playerid ]*28/10;
			    new aizaslitekst[16];
			    if(ParnostBroja(aizbacenbroj)) aizaslitekst = "CRNO";
				else aizaslitekst = "CRVENO";
				SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", aizbacenbroj, aizaslitekst);
				SCM(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Vasa kombinacija je: {FFFFFF}ORFA");
    			if(IsBrojKombinacija(3, aizbacenbroj))
				{
				    KGEyes_GivePlayerMoney(playerid, adobitakbrt), PlayerMoneyTrackSave( playerid, MONEY_HANDS, adobitakbrt, "Rulet" );
					SCM(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Dobiveni broj je Dio orfa kombinacije!");
					SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", adobitakbrt);
			    }
			    else
				{
					SCM(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Dobiveni broj nije Dio orfa kombinacije!");
					SCM(playerid, NARANDZASTA, ""col_server"[RULET]{FFAF00}Izgubili ste!");
				}
			    RuletAccount[ playerid ] = 0;
	        }
	    }
	}
	else if(dialogid == dialog_RULET_2 && response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            new aizbacenbroj, adobitakbrt;
			    aizbacenbroj = random(36);
			    adobitakbrt = RuletAccount[ playerid ]*2;
			    new aizaslitekst[16];
			    if(ParnostBroja(aizbacenbroj)) aizaslitekst = "CRNO";
				else aizaslitekst = "CRVENO";
				SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", aizbacenbroj, aizaslitekst);
				SCM(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Vasa boja je: {FFFFFF}CRVENA");
				if(!ParnostBroja(aizbacenbroj))
				{
				    KGEyes_GivePlayerMoney(playerid, adobitakbrt), PlayerMoneyTrackSave( playerid, MONEY_HANDS, adobitakbrt, "Rulet" );
					SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", adobitakbrt);
			    }
			    else SCM(playerid, NARANDZASTA, ""col_server"[RULET]{FFAF00}Izgubili ste!");
			    RuletAccount[ playerid ] = 0;
	        }
	        case 1:
	        {
	            new aizbacenbroj, adobitakbrt;
			    aizbacenbroj = random(36);
			    adobitakbrt = RuletAccount[ playerid ]*2;
			    new aizaslitekst[16];
			    if(ParnostBroja(aizbacenbroj)) aizaslitekst = "CRNO";
				else aizaslitekst = "CRVENO";
				SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", aizbacenbroj, aizaslitekst);
				SCM(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Vasa boja je: {FFFFFF}CRNA");
				if(ParnostBroja(aizbacenbroj))
				{
				    KGEyes_GivePlayerMoney(playerid, adobitakbrt), PlayerMoneyTrackSave( playerid, MONEY_HANDS, adobitakbrt, "Rulet" );
					SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", adobitakbrt);
			    }
			    else SCM(playerid, NARANDZASTA, ""col_server"[RULET]{FFAF00}Izgubili ste!");
			    RuletAccount[ playerid ] = 0;
	        }
	    }
	}
	else if( dialogid == dialog_RULET_4 && response ) {

	    switch( listitem ) {

	        case 0: {

	            new aizbacenbroj, adobitakbrt;
			    aizbacenbroj = random(36);
			    adobitakbrt = RuletAccount[ playerid ]*2;
			    new aizaslitekst[16];
			    if(ParnostBroja(aizbacenbroj)) aizaslitekst = "PARNO";
				else aizaslitekst = "NEPARNO";
				SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", aizbacenbroj, aizaslitekst);
				SCM(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Vas tip je: {FFFFFF}PARNO");
				if(ParnostBroja(aizbacenbroj))
				{
				    KGEyes_GivePlayerMoney(playerid, adobitakbrt), PlayerMoneyTrackSave( playerid, MONEY_HANDS, adobitakbrt, "Rulet" );
					SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", adobitakbrt);
			    }
			    else SCM(playerid, NARANDZASTA, ""col_server"[RULET]{FFAF00}Izgubili ste!");
			    RuletAccount[ playerid ] = 0;
	        }
	        case 1: {

	            new aizbacenbroj, adobitakbrt;
			    aizbacenbroj = random(36);
			    adobitakbrt = RuletAccount[ playerid ]*2;
			    new aizaslitekst[16];
			    if(ParnostBroja(aizbacenbroj)) aizaslitekst = "PARNO";
				else aizaslitekst = "NEPARNO";
				SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", aizbacenbroj, aizaslitekst);
				SCM(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Vas tip je: {FFFFFF}NEPARNO");
				if(!ParnostBroja(aizbacenbroj))
				{
				    KGEyes_GivePlayerMoney(playerid, adobitakbrt), PlayerMoneyTrackSave( playerid, MONEY_HANDS, adobitakbrt, "Rulet" );
					SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", adobitakbrt);
			    }
			    else SCM(playerid, NARANDZASTA, ""col_server"[RULET]{FFAF00}Izgubili ste!");
			    RuletAccount[ playerid ] = 0;
	        }
	    }
	}
	else if( dialogid == dialog_RULET_3 && response ) {

	    new unesenibroj, izbacenbroj, dobitakbrt, dobitaknula;
	    unesenibroj = strval(inputtext);
	    if(unesenibroj < 0 || unesenibroj > 36) return SendErrorMessage(playerid, "Odaberite broj od 0 do 36!");
	    izbacenbroj = random(36);
	    dobitakbrt = RuletAccount[ playerid ]*36;
	    dobitaknula = dobitakbrt;
	    new izaslitekst[16];
	    if(ParnostBroja(izbacenbroj)) izaslitekst = "CRNO";
		else izaslitekst = "CRVENO";
		SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", izbacenbroj, izaslitekst);
		SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Vas broj je: {FFFFFF}%d", unesenibroj);
	    if( unesenibroj == izbacenbroj ) {

			KGEyes_GivePlayerMoney(playerid, dobitaknula), PlayerMoneyTrackSave( playerid, MONEY_HANDS, dobitaknula, "Rulet" );
			SendClientMessageEx(playerid, NARANDZASTA, ""col_server"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", dobitaknula);
	    }
	    else SCM( playerid, NARANDZASTA, ""col_server"[RULET]{FFAF00}Izgubili ste!");
	    RuletAccount[ playerid ] = 0;
	}
	else if( dialogid == dialog_SAVEZ ) {

		if( response ) {

		    new id = GlobalProdaja[ playerid ];

			org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ] = PlayerInfo[ id ][ xClan ];
			org_info[ PlayerInfo[ id ][ xClan ] ][ oSavez ] = PlayerInfo[ playerid ][ xClan ];

			sql_organization_update_integer( PlayerInfo[ playerid ][ xClan ], "savez", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ] );
			sql_organization_update_integer( PlayerInfo[ id ][ xClan ], "savez", org_info[ PlayerInfo[ id ][ xClan ] ][ oSavez ] );

			SendInfoMessage( playerid, "Cestitamo, sada ste u savezu sa %s.", org_info[ PlayerInfo[ id ][ xClan ] ][ oName ] );
			SendInfoMessage( id, "Cestitamo, sada ste u savezu sa %s.", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oName ] );

			SendInfoMessage( playerid, "Mozete koristiti zajednicki chat izmedju lidera saveza i podlidera '/sa'." );
			SendInfoMessage( id, "Mozete koristiti zajednicki chat izmedju lidera saveza i podlidera '/sa'." );

			GlobalProdaja[ playerid ] = -1;
		}
		else if( !response ) {

		    new id = GlobalProdaja[ playerid ];

		    SendInfoMessage( playerid, "Odbili ste savez sa %s.", org_info[ PlayerInfo[ id ][ xClan ] ][ oName ] );
			SendInfoMessage( id, "Lider %s je odbio savez sa vama.", org_info[ PlayerInfo[ playerid ][ xClan ] ][ oName ] );

			GlobalProdaja[ playerid ] = -1;
		}
	}
	/*else if( dialogid == dialog_IZABERITABLICE ) {

	    if( response ) {
	        if( listitem == 0 ) {

	            new vehicleid = ChosenVehicle[ playerid ];

	            VehicleInfo[ vehicleid ][ vTeh ] = 3;

				mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_teh` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ vehicleid ][ vTeh ],
														VehicleInfo[ vehicleid ][ vSqlID ] );

				mysql_pquery( _dbConnector, sql_str, "", "" );

				SCM( playerid, SVIJETLOPLAVA, "Uzeo si tablice idi stavi ih na auto( /v(ozilo)( postavitable ) )." );
				SCM( playerid, CRVENA, "Kada postavite tablice, auto se respawna." );
	        }
	        if( listitem == 1 ) {

	            SPD( playerid, dialog_IZABERITABLICE_2, DSI, D_NASLOV, "Unesite zeljeni tekst, koji ce se nalaziti na vasim tablicama.\nMaksimum je 16 karaktera.", "Izaberi", "Odustani" );
	        }
	    }
	}*/
	else if( dialogid == dialog_IZABERITABLICE_2 ) {

	    if( response ) {

	        new vehicleid = ChosenVehicle[ playerid ];

	        new plate[ 14 ];
	        if( sscanf( inputtext, "s[14]", plate ) ) return SPD( playerid, dialog_IZABERITABLICE_2, DSI, D_NASLOV, "Unesite zeljeni tekst, koji ce se nalaziti na vasim tablicama.\nMaksimum je 16 karaktera.", "Izaberi", "Odustani" );

	        VehicleInfo[ vehicleid ][ vTeh ] = 4;
	        strmid( VehicleInfo[ vehicleid ][ vTablice ], plate, 0, strlen( plate ), 32 );

	        new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `vehicles` SET `v_teh` = '%d', `v_tablice` = '%e'  WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ vehicleid ][ vTeh ],
														VehicleInfo[ vehicleid ][ vTablice ],
														VehicleInfo[ vehicleid ][ vSqlID ] );

			mysql_pquery( _dbConnector, q, "", "" );

			SendClientMessageEx( playerid, SVIJETLOPLAVA, "Uzeo si tablice sa natpison '%s' idi stavi ih na auto( /v(ozilo)( postavitable ) ).", plate );
			SCM( playerid, CRVENA, "Kada postavite tablice, auto se respawna." );
	    }
	}
	else if( dialogid == dialog_DONATE ) {

	    if( response ) {

	        if( listitem == 0 ) {

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				strcat( DialogStrgEx, ""col_server"VIP PAKETI:\n\n" );
				strcat( DialogStrgEx, " "col_white"VIP Level 1 - "col_server"5Eura\n "col_white"VIP Level 2 - "col_server"10Eura\n "col_white"VIP Level 3 - "col_server"15Eura\n\n" );
				strcat( DialogStrgEx, ""col_server"STAFF PAKETI:\n\n" );
				//strcat( DialogStrgEx, ""col_server"1) "col_white" GameSage LVL 1 -"col_server" 20Eura\n2 ( Uvijet 500h Server igre bez statusa citera )\n4) "col_white"Admin LVL 1 -"col_server" 30Eura\n5 ( Uvijet 500h Server igre bez statusa citera )\n6) "col_white"Unban -"col_server" 10Eura\n" );
				strcat( DialogStrgEx, ""col_server"-"col_white"Admin level 1 -"col_server" 20Eura""\n\n "col_white"Uvjeti: Nikada bio na citer listi i ne banovan vise od 2 puta na forumu i 100h igre.\n Nakon 2 tjedna testiranja odlucuje se ostaje li u staffu ili ne.\n Ako ostaje onda krece sa radom od admin level 1.\n\n" );
				//strcat( DialogStrgEx, ""col_server"-"col_white"GameSage -"col_server" 20Eura\n\n"col_white" Uvjeti: Nikada bio na citer listi i ne banovan vise od 2 puta na forumu i 100h igre.\n Nakon 2 tjedna testiranja odlucuje se ostaje li u staffu ili ne.\n Ako ostaje onda krece sa radom od gs level 1.\n\n" );


                strcat( DialogStrgEx, ""col_server"OSTALI SERVER PAKETI:\n\n" );
    			strcat( DialogStrgEx, ""col_server"- "col_white"Skidanje sa liste citera, Unban -"col_server"5 Eura\n" );
				strcat( DialogStrgEx, ""col_server"- "col_white"Kreiranje Imovine - Garaza, Kuca, Stan -"col_server"5 Eura\n" );
				strcat( DialogStrgEx, ""col_server"- "col_white"Promjena Nicka - "col_server"5Eura\n" );
				strcat( DialogStrgEx, ""col_server"- "col_white"Mapani Objekti 100 objekata  - "col_server"15Eura\n" );
				//strcat( DialogStrgEx, ""col_server"- "col_white"Automobili/Letjelice ( svi osim Mavericka i Monstera ) - "col_server"5Eura\n"col_server"- "col_white"Boje Nicka ( Izbor: Crni, Rozi ili Narandasti -"col_server" 5Eura\n"col_server"- "col_white"Specijalni broj telefona - "col_server"5Eura\n"col_server"- "col_white"DJ - "col_server"5Eura\n" );
                strcat( DialogStrgEx, ""col_server"- "col_white"Lider slobodnih organizacija - "col_server"5 Eura \n" );
				//strcat( DialogStrgEx, ""col_server"- "col_white"Money Paketi -"col_server"2,5M -10e"col_white","col_server" 5M - 15e" );



			    SPD( playerid, dialog_DONATE_1, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
			}
			if( listitem == 1 ) {

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				strcat( DialogStrgEx, ""col_white"Sve vezano za donacije obracate se "col_server"administratoru na forumu\n\n" );
				//strcat( DialogStrgEx, ""col_white"FB kontakt: "col_server"facebook.com/croherza\n" );
                strcat( DialogStrgEx, ""col_white"Discord kontakt: "col_server"Bozic\n");
				//strcat( DialogStrgEx, ""col_white"Email kontakt: "col_server"donacije@croherze.com\n" );
				strcat( DialogStrgEx, ""col_white"Forum kontakt: "col_server"Bozic\n\n\n");
				strcat( DialogStrgEx, ""col_white"Opsirno oko svih donacija: "col_server"www.croherze.com");

				SPD( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "Dalje" );
			    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

			}
		}
	}
	/*else if( dialogid == dialog_DONATE_1 ) {

	    if( !response ) {

	        strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

			strcat( DialogStrgEx, ""col_white"Donacije:\n\n" );

			strcat( DialogStrgEx, ""col_server"1) "col_white"Skidanje sa liste citera, Unbam - "col_server" 10 Eura\n" );
			strcat( DialogStrgEx, ""col_server"2) "col_white"Kreiranje Imovine - Garaza, Kuca, Stan - "col_server" 5 Eura\n" );
			strcat( DialogStrgEx, ""col_server"3) "col_white"Money Paket"col_server"onemoguceno do 30.1.2020\n3) "col_white"Promjena iz Ime_Prezime u Ime - "col_server"5Eura\n" );
			strcat( DialogStrgEx, ""col_server"4) "col_white"Mapani Objekti 100 objekata  - "col_server"15Eura\n\n"col_white"\n" );
			strcat( DialogStrgEx, ""col_server"5) "col_white"Lider organizacije - "col_server"10 Eura\n" );
			strcat( DialogStrgEx, ""col_server"6) "col_white"Automobili - "col_server"10Eura\n7) "col_white" Boje Nicka -"col_server"5Eura\n8) "col_white" Specijalni broj telefona - "col_server"5Eura" );

		    SPD( playerid, dialog_DONATE_1, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
		    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );*/



	else if( dialogid == dialog_PUMPA ) {

	    if( response ) {

	        switch( listitem ) {

				case 0: {

					SPD( playerid, dialog_IMEPUMPE, DSI, ""col_white"Ime Pumpe", ""col_white"Upisite novo ime pumpe\nZabranjeno je stavljati OOC ime pumpe!", "Unos", "Izlaz");
				}
				case 1: {

					SPD( playerid, dialog_DIZELCENA, DSI,""col_white"Cijena goriva - Dizel",""col_white"Unesite novu cijenu goriva po litri DIZELA", D_ODABERI, D_ODUSTANI );
				}
				case 2: {

					SPD( playerid, dialog_BENZINCENA, DSI, ""col_white"Cijena goriva - Benzin",""col_white"Unesite novu cijenu goriva po litri BENZINA", D_ODABERI, D_ODUSTANI );
				}
				case 3: {

                    new fsID = GetNearestFuelStation( playerid );
					if( fsID == -1 ) return SendErrorMessage( playerid, "Niste na markeru nijedne pumpe." );

					SendClientMessageEx( playerid, -1, ""col_white"U odlagalistu ima jos "col_server"%d "col_white"litara dizela!", FuelStation[ fsID ][ fsDieselL ] );
                    SendClientMessageEx( playerid, -1, ""col_white"U odlagalistu ima jos "col_server"%d "col_white"litara benzina!", FuelStation[ fsID ][ fsGasolineL ] );
				}
				case 4: {

					SPD( playerid, dialog_DIZELLITRAZA, DSI,""col_white"Kolicina goriva - Dizel",""col_white"Unesite koliko litara dizela zelite da dodate.", D_ODABERI, D_ODUSTANI );
				}
				case 5: {

					SPD( playerid, dialog_BENZINLITRAZA, DSI,""col_white"Kolicina goriva - Benzin",""col_white"Unesite koliko litara benzina zelite da dodate.", D_ODABERI, D_ODUSTANI );
				}
			}
	    }
	}
	else if( dialogid == dialog_IMEPUMPE ) {

	    if( response ) {

	        new fsID = GetNearestFuelStation( playerid );
			if( fsID == -1 ) return SendErrorMessage( playerid, "Niste na markeru nijedne pumpe." );

	        new ime[ 64 ];
			if( sscanf( inputtext, "s[64]", ime ) ) return SPD( playerid, dialog_IMEPUMPE, DSI, ""col_white"Ime Pumpe", ""col_white"Upisite novo ime pumpe\nZabranjeno je stavljati OOC ime pumpe!", "Unos", "Izlaz");

			strmid( FuelStation[ fsID ][ fsName ], ime, 0, strlen( ime ), 64 );

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `fstation` SET `f_name` = '%e' WHERE `fsID` = '%d'",
						FuelStation[ fsID ][ fsName ], FuelStation[ fsID ][ fsbaseID ] );

			mysql_pquery( _dbConnector, sql_str, "", "");

			FStation_Refresh( fsID );
			SendInfoMessage( playerid, "Promenili ste ime pumpe u %s!", ime );
	    }
	}
	else if( dialogid == dialog_BENZINLITRAZA ) {

	    if( response ) {

	        if( !IsNumeric( inputtext ) ) {

			    SendErrorMessage( playerid, "Mozete koristiti samo brojeve!" );
				SPD( playerid, dialog_BENZINLITRAZA, DSI,""col_white"Kolicina goriva - Benzin",""col_white"Unesite koliko litara benzina zelite da dodate.", D_ODABERI, D_ODUSTANI );
				return 1;
			}
			new litri = strval(inputtext);
			if( litri < 1 || litri > 1000 ) {

				SendErrorMessage( playerid, "Kolicina nemoze biti manja od 1 i veca od 1000!");
				SPD( playerid, dialog_BENZINLITRAZA, DSI,""col_white"Kolicina goriva - Benzin",""col_white"Unesite koliko litara benzina zelite da dodate.", D_ODABERI, D_ODUSTANI );
				return 1;
			}

            new fsID = GetNearestFuelStation( playerid );
			if( fsID == -1 ) return SendErrorMessage( playerid, "Niste na markeru nijedne pumpe." );

			FuelStation[ fsID ][ fsGasolineL ] += litri;
			if( FuelStation[ fsID ][ fsGasolineL ] > 10000 ) FuelStation[ fsID ][ fsGasolineL ] = 10000;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `fstation` SET `f_gasoline` = '%d' WHERE `fsID` = '%d'",
						FuelStation[ fsID ][ fsGasolineL ], FuelStation[ fsID ][ fsbaseID ] );

			mysql_pquery( _dbConnector, sql_str, "", "");

			FStation_Refresh( fsID );

			SendInfoMessage( playerid, "Uspjesno ste dodali "col_server"%d"col_white" litara benzina u rezervoar pumpe.", litri );
	    }
	}
	else if( dialogid == dialog_DIZELLITRAZA ) {

	    if( response ) {

	        if( !IsNumeric( inputtext ) ) {

			    SendErrorMessage( playerid, "Mozete koristiti samo brojeve!" );
				SPD( playerid, dialog_DIZELLITRAZA, DSI,""col_white"Kolicina goriva - Dizel",""col_white"Unesite koliko litara dizela zelite da dodate.", D_ODABERI, D_ODUSTANI );
				return 1;
			}
			new litri = strval(inputtext);
			if( litri < 1 || litri > 1000 ) {

				SendErrorMessage( playerid, "Kolicina nemoze biti manja od 1 i veca od 1000!");
				SPD( playerid, dialog_DIZELLITRAZA, DSI,""col_white"Kolicina goriva - Dizel",""col_white"Unesite koliko litara dizela zelite da dodate.", D_ODABERI, D_ODUSTANI );
				return 1;
			}

            new fsID = GetNearestFuelStation( playerid );
			if( fsID == -1 ) return SendErrorMessage( playerid, "Niste na markeru nijedne pumpe." );

			FuelStation[ fsID ][ fsDieselL ] += litri;
			if( FuelStation[ fsID ][ fsDieselL ] > 10000 ) FuelStation[ fsID ][ fsDieselL ] = 10000;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `fstation` SET `f_diesel` = '%d' WHERE `fsID` = '%d'",
						FuelStation[ fsID ][ fsDieselL ], FuelStation[ fsID ][ fsbaseID ] );

			mysql_pquery( _dbConnector, sql_str, "", "");

			FStation_Refresh( fsID );

			SendInfoMessage( playerid, "Uspjesno ste dodali "col_server"%d"col_white" litara dizela u rezervoar pumpe.", litri );
	    }
	}
	else if( dialogid == dialog_DIZELCENA ) {

	    if( response ) {

	        if( !IsNumeric( inputtext ) ) {

			    SendErrorMessage( playerid, "Mozete koristiti samo brojeve!" );
				SPD( playerid, dialog_DIZELCENA, DSI,""col_white"Cijena goriva - Dizel",""col_white"Unesite novu cijenu goriva po litri DIZELA", D_ODABERI, D_ODUSTANI );
				return 1;
			}
			new cena = strval(inputtext);
			if( cena < 1 || cena > 100 ) {

				SendErrorMessage( playerid, "Cijena nemoze biti manja od 1$ i veca od 100$!");
				SPD( playerid, dialog_DIZELCENA, DSI,""col_white"Cijena goriva - Dizel",""col_white"Unesite novu cijenu goriva po litri DIZELA", D_ODABERI, D_ODUSTANI );
				return 1;
			}

            new fsID = GetNearestFuelStation( playerid );
			if( fsID == -1 ) return SendErrorMessage( playerid, "Niste na markeru nijedne pumpe." );

			FuelStation[ fsID ][ fsDieselPrice ] = cena;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `fstation` SET `f_dprice` = '%d' WHERE `fsID` = '%d'",
						FuelStation[ fsID ][ fsDieselPrice ], FuelStation[ fsID ][ fsbaseID ] );

			mysql_pquery( _dbConnector, sql_str, "", "");

			FStation_Refresh( fsID );

			SendInfoMessage( playerid, "Nova cijena goriva po litri dizela je "col_server"%d$.", cena );

			format( globalstring, sizeof( globalstring ), "| IZVANREDNE VIJESTI | "col_white"Nova cijena dizela po litru je %d$! Ime pumpe: %s.", cena, FuelStation[ fsID ][ fsName ] );
        	OOCNews( 0xFFA500AA, globalstring );

	    }
	}
	else if( dialogid == dialog_BENZINCENA ) {

	    if( response ) {

	        if( !IsNumeric( inputtext ) ) {

			    SendErrorMessage( playerid, "Mozete koristiti samo brojeve!" );
				SPD( playerid, dialog_BENZINCENA, DSI, ""col_white"Cijena goriva - Benzin",""col_white"Unesite novu cijenu goriva po litri BENZINA", D_ODABERI, D_ODUSTANI );
				return 1;
			}
			new cena = strval(inputtext);
			if( cena < 1 || cena > 100 ) {

				SendErrorMessage( playerid, "Cijena nemoze biti manja od 1$ i veca od 100$!");
				SPD( playerid, dialog_BENZINCENA, DSI, ""col_white"Cijena goriva - Benzin",""col_white"Unesite novu cijenu goriva po litri BENZINA", D_ODABERI, D_ODUSTANI );
				return 1;
			}

            new fsID = GetNearestFuelStation( playerid );
			if( fsID == -1 ) return SendErrorMessage( playerid, "Niste na markeru nijedne pumpe." );

			FuelStation[ fsID ][ fsGasolinePrice ] = cena;

			mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `fstation` SET `f_gprice` = '%d' WHERE `fsID` = '%d'",
						FuelStation[ fsID ][ fsGasolinePrice ], FuelStation[ fsID ][ fsbaseID ] );

			mysql_pquery( _dbConnector, sql_str, "", "");

			FStation_Refresh( fsID );

			SendInfoMessage( playerid, "Nova cijena goriva po litri benzina je "col_server"%d$.", cena );

			format( globalstring, sizeof( globalstring ), "| IZVANREDNE VIJESTI | "col_white"Nova cijena benzina po litru je %d$! Ime pumpe: %s.", cena, FuelStation[ fsID ][ fsName ] );
        	OOCNews( 0xFFA500AA, globalstring );

	    }
	}
	else if( dialogid == dialog_DELIVERPEPSI ) {

    	if( !response ) return KGEyes_RemovePlayerFromVehicle( playerid );
	    if( response ) {

	        DeliverLevel[ playerid ] = 1;
			DeliverCar[ playerid ] = GetPlayerVehicleID( playerid );
			KamionUsed[ GetPlayerVehicleID( playerid ) ] = playerid;
		    SendJobMessage( playerid, "Pokrenuli ste razvoz pepsia po trafikama, sada vozite do skladista i utovarite kutije sa pepsiem!");
		    SendJobMessage( playerid, "Kutije sa pepsiem uzimate komandom /uzmikutiju!");

	    }
	}
	else if( dialogid == dialog_DELIVERWALM ) {

    	if( !response ) return KGEyes_RemovePlayerFromVehicle( playerid );
	    if( response ) {

	    	if( AccountVerified[ playerid ] == false ) {
				SendErrorMessage( playerid, "Prvo morate prijaviti posao [ /vf ].");
				KGEyes_RemovePlayerFromVehicle( playerid );
				return true;
			}

	        DeliverLevel[ playerid ] = 1;
			DeliverCar[ playerid ] = GetPlayerVehicleID( playerid );
			KamionUsed[ GetPlayerVehicleID( playerid ) ] = playerid;
		    SendJobMessage( playerid, "Pokrenuli ste dostavu proizvoda, sada idite do luke da pokupite kutije (marker).");
		    SendJobMessage( playerid, "Kutije uzimate komandom /uzmikutiju!");

	    	KGEyes_SetPlayerCheckpoint( playerid, -1721.4202,-117.2318,3.5489, 4.0 );
			CheckpointStatus[ playerid ] = 5;
			AccountVerified[ playerid ] = false;
			StaroVrijeme[ playerid ] = gettime();
			NovoVrijeme[ playerid ] = 150;
			RadiPosao[ playerid ] = POSAO_WALMDOST;
	    }
	}
	else if( dialogid == dialog_NEONSHOP ) {

	    if( response ) {

			new autoid = GetPlayerVehicleID( playerid );

			if( listitem == 6 ) {

			    if( PlayerInfo[ playerid ][ xNovac ] < 300 ) return SendErrorMessage( playerid, "Nemas 300$ kod sebe." );
			    if( VehicleInfo[ autoid ][ vNeon ] == 0 ) return SendErrorMessage( playerid, "Na ovom vozilu nije ugradjen neon!");
				if( Neon[ GetPlayerVehicleID( playerid ) ] == 1 ) {

				 	Neon[ GetPlayerVehicleID( playerid ) ] = 0;
				   	DestroyDynamicObject( NeonObject1[ GetPlayerVehicleID( playerid ) ] );
				   	DestroyDynamicObject( NeonObject2[ GetPlayerVehicleID( playerid ) ] );
				}

				if( autoid != INVALID_VEHICLE_ID ) {

					VehicleInfo[ autoid ][ vNeon ] = 0;

					mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_neon` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
														VehicleInfo[ autoid ][ vNeon ],
														VehicleInfo[ autoid ][ vSqlID ] );

					mysql_pquery( _dbConnector, sql_str, "", "" );
				}

			    SendInfoMessage( playerid, "Uspjesno ste skinuli Neonke sa auta i platili 300$ za usluge." );
				KGEyes_GivePlayerMoney( playerid, -300 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -300, "Skidanje neonki" );

				BussinesNeonMoney( 150 );
				return true;
			}
			else if( listitem < 6 ) {

			    if( PlayerInfo[ playerid ][ xNovac ] < 2000 ) return SendErrorMessage( playerid, "Nemas 2000$ kod sebe." );
				if( VehicleInfo[ autoid ][ vNeon ] != 0 ) return SendErrorMessage( playerid, "Na ovom vozilu je vec ugradjen neon!");
				if( VehicleInfo[ autoid ][ vUsage ] == PRIVATNO_VOZILO ) {

					if( VehicleInfo[ autoid ][ vOwner_sqlID ] == PlayerInfo[ playerid ][ xID ] ) {

					    switch( listitem ) {

						    case 0: {
						        VehicleInfo[ autoid ][ vNeon ] = 18648;
						    }
						    case 1: {
						        VehicleInfo[ autoid ][ vNeon ] = 18647;
						    }
						    case 2: {
						        VehicleInfo[ autoid ][ vNeon ] = 18649;
						    }
						    case 3: {
						        VehicleInfo[ autoid ][ vNeon ] = 18652;
						    }
						    case 4: {
						        VehicleInfo[ autoid ][ vNeon ] = 18651;
						    }
						    case 5: {
						        VehicleInfo[ autoid ][ vNeon ] = 18650;
						    }
						}
						NeonObject1[ GetPlayerVehicleID( playerid ) ] = CreateDynamicObject( VehicleInfo[ autoid ][ vNeon ], 0, 0, 1500, 0, 0, 0 );
						NeonObject2[ GetPlayerVehicleID( playerid ) ] = CreateDynamicObject( VehicleInfo[ autoid ][ vNeon ], 0, 0, 1500, 0, 0, 0 );
						AttachDynamicObjectToVehicle( NeonObject1[ GetPlayerVehicleID( playerid ) ], GetPlayerVehicleID( playerid ), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
						AttachDynamicObjectToVehicle( NeonObject2[ GetPlayerVehicleID( playerid ) ], GetPlayerVehicleID( playerid ), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
			   			Neon[ GetPlayerVehicleID( playerid ) ] = 1;

						mysql_format( _dbConnector, sql_str, sizeof(sql_str), "UPDATE `vehicles` SET `v_neon` = '%d' WHERE `veh_id` = '%d' LIMIT 1",
															VehicleInfo[ autoid ][ vNeon ],
															VehicleInfo[ autoid ][ vSqlID ] );

						mysql_pquery( _dbConnector, sql_str, "", "" );
					}
				}
				else {
				    new neonka;
					switch( listitem ) {

					    case 0: {
					        neonka = 18648;
					    }
					    case 1: {
					        neonka = 18647;
					    }
					    case 2: {
					        neonka = 18649;
					    }
					    case 3: {
					        neonka = 18652;
					    }
					    case 4: {
					        neonka = 18651;
					    }
					    case 5: {
					        neonka = 18650;
					    }

					}
					NeonObject1[ GetPlayerVehicleID( playerid ) ] = CreateDynamicObject( neonka, 0, 0, 1500, 0, 0, 0 );
					NeonObject2[ GetPlayerVehicleID( playerid ) ] = CreateDynamicObject( neonka, 0, 0, 1500, 0, 0, 0 );
					AttachDynamicObjectToVehicle( NeonObject1[ GetPlayerVehicleID( playerid ) ], GetPlayerVehicleID( playerid ), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
					AttachDynamicObjectToVehicle( NeonObject2[ GetPlayerVehicleID( playerid ) ], GetPlayerVehicleID( playerid ), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
		   			Neon[ GetPlayerVehicleID( playerid ) ] = 1;
				}

				SendInfoMessage( playerid, "Uspjesno ste ugradili Neonke na auto i platili 2000$." );
				KGEyes_GivePlayerMoney( playerid, -2000 ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -2000, "Ugradnja neonki" );
				BussinesNeonMoney( 1000 );
			}
		}
	}
	
	else if( dialogid == dialog_CLOTHESMENU ) {
        if( !response ) return 1;
	    if( response ) {

	        new slot = chosen_clothes_slot[ playerid ];
	        switch( listitem ) {

	            case 0: {

					if( object_on_player[ playerid ][ slot-1 ] ) return SendErrorMessage( playerid, "Vec imate postavljen objekt iz slota %d na sebe.", slot );
					switch( (slot-1) ) {

					    case 0: {
					        if( clothes_info[ playerid ][ x_slot_1_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 1." );
					        if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_1 ) ) return SendErrorMessage( playerid, "Vec imate objekt na sebi u tom slotu." );
					        SetPlayerAttachedObject( playerid, OBJECT_SLOT_1, clothes_info[ playerid ][ x_slot_1_model ], clothes_info[ playerid ][ x_slot_1_bodypart ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 0 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 1 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 2 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 3 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 4 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 5 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 6 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 7 ],
											clothes_info[ playerid ][ x_slot_1_pos ][ 8 ], 0, 0);
					    }
					    case 1: {
					        if( clothes_info[ playerid ][ x_slot_2_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 2." );
					        if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_2 ) ) return SendErrorMessage( playerid, "Vec imate objekt na sebi u tom slotu." );
					        SetPlayerAttachedObject( playerid, OBJECT_SLOT_2, clothes_info[ playerid ][ x_slot_2_model ], clothes_info[ playerid ][ x_slot_2_bodypart ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 0 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 1 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 2 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 3 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 4 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 5 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 6 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 7 ],
											clothes_info[ playerid ][ x_slot_2_pos ][ 8 ], 0, 0);
					    }
					    case 2: {
					        if( clothes_info[ playerid ][ x_slot_3_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 3." );
					        if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_3 ) ) return SendErrorMessage( playerid, "Vec imate objekt na sebi u tom slotu." );
					        SetPlayerAttachedObject( playerid, OBJECT_SLOT_3, clothes_info[ playerid ][ x_slot_3_model ], clothes_info[ playerid ][ x_slot_3_bodypart ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 0 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 1 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 2 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 3 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 4 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 5 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 6 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 7 ],
											clothes_info[ playerid ][ x_slot_3_pos ][ 8 ], 0, 0);
					    }
					    case 3: {
					        if( clothes_info[ playerid ][ x_slot_4_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 4." );
					        if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_4 ) ) return SendErrorMessage( playerid, "Vec imate objekt na sebi u tom slotu." );
					        SetPlayerAttachedObject( playerid, OBJECT_SLOT_4, clothes_info[ playerid ][ x_slot_4_model ], clothes_info[ playerid ][ x_slot_4_bodypart ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 0 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 1 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 2 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 3 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 4 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 5 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 6 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 7 ],
											clothes_info[ playerid ][ x_slot_4_pos ][ 8 ], 0, 0);
						}
					}
					SendInfoMessage( playerid, "Postavili ste objekt iz slota %d na sebe.", slot );
					object_on_player[ playerid ][ slot-1 ] = true;
	            }
	            case 1: {

	                if( !object_on_player[ playerid ][ slot-1 ] ) return SendErrorMessage( playerid, "Nemate postavljen objekt na sebe sa slota %d.", slot );
					RemovePlayerAttachedObject( playerid, slot-1 );
	                object_on_player[ playerid ][ slot-1 ] = false;
	                SendInfoMessage( playerid, "Skinuli ste objekat sa sebe iz slota %d.", slot );
	            }
	            case 2: {

	                switch( (slot-1) ) {
						case 0: { if( clothes_info[ playerid ][ x_slot_1_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 1." ); }
						case 1: { if( clothes_info[ playerid ][ x_slot_2_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 2." ); }
						case 2: { if( clothes_info[ playerid ][ x_slot_3_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 3." ); }
						case 3: { if( clothes_info[ playerid ][ x_slot_4_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 4." ); }
					}

			        if( !object_on_player[ playerid ][ slot-1 ] ) return SendErrorMessage( playerid, "Nemate postavljen objekt na sebe sa slota %d.", slot );
           	        EditAttachedObject( playerid, (slot-1) );
				 	EditingBody[ playerid ] = true;
				 	chosen_clothes_slot[ playerid ] = slot;
	            }
	            case 3: {

	            	switch( (slot-1) ) {
						case 0: { if( clothes_info[ playerid ][ x_slot_1_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 1." ); }
						case 1: { if( clothes_info[ playerid ][ x_slot_2_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 2." ); }
						case 2: { if( clothes_info[ playerid ][ x_slot_3_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 3." ); }
						case 3: { if( clothes_info[ playerid ][ x_slot_4_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 4." ); }
					}

	            	if( object_on_player[ playerid ][ slot-1 ] ) return SendErrorMessage( playerid, "Da bi ste nekom dali vas objekt, prvo morate da ga skinete sa sebe." );

	            	chosen_clothes_slot[ playerid ] = slot;
				    SPD( playerid, dialog_giveClothes, DSI, "Daj odjecu", "Unesite ime ili id igraca:", "Ok", "Izadji");
	            }
	            case 4: {

	                //if( GetNearestContainer( playerid ) == -1 ) return SendErrorMessage( playerid, "Moras biti blizu kontejnera." );

	                switch( (slot-1) ) {
						case 0: { if( clothes_info[ playerid ][ x_slot_1_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 1." ); }
						case 1: { if( clothes_info[ playerid ][ x_slot_2_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 2." ); }
						case 2: { if( clothes_info[ playerid ][ x_slot_3_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 3." ); }
						case 3: { if( clothes_info[ playerid ][ x_slot_4_model ] == -1 ) return SendErrorMessage( playerid, "Nemate objekat u slotu 4." ); }
					}

        			if( object_on_player[ playerid ][ slot-1 ] ) return SendErrorMessage( playerid, "Prvo moras da skines objekt sa sebe sa slota %d", slot );

        			switch( (slot-1) ) {
        			    case 0: {
		        			clothes_info[ playerid ][ x_slot_1_model ] = -1;
		        			clothes_info[ playerid ][ x_slot_1_bodypart ] = -1;
		        			for( new i = 0; i < 9; i ++ ) {
							    clothes_info[ playerid ][ x_slot_1_pos ][ i ] = 0;
							}
        			    }
        			    case 1: {
							clothes_info[ playerid ][ x_slot_2_model ] = -1;
							clothes_info[ playerid ][ x_slot_2_bodypart ] = -1;
							for( new i = 0; i < 9; i ++ ) {
							    clothes_info[ playerid ][ x_slot_2_pos ][ i ] = 0;
							}
						}
						case 2: {
							clothes_info[ playerid ][ x_slot_3_model ] = -1;
							clothes_info[ playerid ][ x_slot_3_bodypart ] = -1;
							for( new i = 0; i < 9; i ++ ) {
							    clothes_info[ playerid ][ x_slot_3_pos ][ i ] = 0;
							}
						}
						case 3: {
							clothes_info[ playerid ][ x_slot_4_model ] = -1;
							clothes_info[ playerid ][ x_slot_4_bodypart ] = -1;
							for( new i = 0; i < 9; i ++ ) {
							    clothes_info[ playerid ][ x_slot_4_pos ][ i ] = 0;
							}
        			    }
					}
					sql_user_update_clothes( playerid );
					SendInfoMessage( playerid, "Bacili ste objekt sa slota %d, nemate ga vise u ruksaku. ", slot );
	            }
	        }
	    }
	}
	else if( dialogid == dialog_ATTACHMENT_LIST ) {
        if( !response ) return 1;
	    if( response ) {
	        switch( listitem ) {

	            case 0: {
					ShowModelSelectionMenu( playerid, KapeList, "Kape");
	            }
	            case 1: {
					ShowModelSelectionMenu( playerid, MaskeList, "Maske");
	            }
	            case 2: {
					ShowModelSelectionMenu( playerid, NaocaleList, "Naocale");
	            }
	            case 3: {
					ShowModelSelectionMenu( playerid, SatList, "Sat");
	            }
	            case 4: {
	                ShowModelSelectionMenu( playerid, KosaList, "Kosa");
	            }
				case 5: {
	                ShowModelSelectionMenu( playerid, OstaloList, "Ostalo");
	            }
	        }
	    }
	}
	else if( dialogid == dialog_ATTACHMENT_BODYPART ) {
        if( !response ) return 1;
	    if( response ) {
			new slot = chosen_clothes_slot[ playerid ];
	        switch( listitem ) {
	            case 0 .. 17: {
					switch( (slot-1) ) {
						case 0:
						{
							SPD( playerid, dialog_ATTACHMENT_LIST, DSL, "Slot 1:", "Kape\nMaske\nNaocale\nSat\nKosa\nOstalo", "Odaberi", "Odustani");
							clothes_info[ playerid ][ x_slot_1_bodypart ] = listitem+1;
						}
						case 1:
						{
							SPD( playerid, dialog_ATTACHMENT_LIST, DSL, "Slot 2:", "Kape\nMaske\nNaocale\nSat\nKosa\nOstalo", "Odaberi", "Odustani");
							clothes_info[ playerid ][ x_slot_2_bodypart ] = listitem+1;
						}
						case 2:
						{
							SPD( playerid, dialog_ATTACHMENT_LIST, DSL, "Slot 3:", "Kape\nMaske\nNaocale\nSat\nKosa\nOstalo", "Odaberi", "Odustani");
							clothes_info[ playerid ][ x_slot_3_bodypart ] = listitem+1;
						}
						case 3:
						{
							SPD( playerid, dialog_ATTACHMENT_LIST, DSL, "Slot 4:", "Kape\nMaske\nNaocale\nSat\nKosa\nOstalo", "Odaberi", "Odustani");
							clothes_info[ playerid ][ x_slot_4_bodypart ] = listitem+1;
						}
					}
				}
	        }
	    }
	}
	else if( dialogid == dialog_armoredit ) {
	    if( !response ) return true;
        if( response ) {
            if( listitem ==  0 ) {
                if(pobjects_info[playerid][display])
				{
					pobjects_info[playerid][display] = 0;
					SendInfoMessage(playerid, "Iskljucili ste prikazivanje pancira!");
				}
				else
				{
					pobjects_info[playerid][display] = 1;
					SendInfoMessage(playerid, "Ukljucili ste prikazivanje pancira!");
				}
				/*new q[ 128 ];
				mysql_format( _dbConnector, q, sizeof(q), "UPDATE `player_objects` SET `display` = '%d' WHERE `user_id` = '%d' LIMIT 1", pobjects_info[playerid][display], PlayerInfo[playerid][xID]);
				mysql_pquery( _dbConnector, q, "", "" );*/
            }
            if( listitem ==  1 ) {
                SetPlayerAttachedObject(playerid, OBJECT_SLOT_PANCIR, 19515, 1, 0.070000, 0.049999, 0.000000, 0.000000, 0.000000, -2.799999, 1.005000, 1.189000, 1.097001);
				EditAttachedObject( playerid, OBJECT_SLOT_PANCIR );
				EditingPObject[ playerid ] = true;
            }
		}
	}
	else if( dialogid == dialog_chosegame ) {
		if( !response ) return 1;
	    if( response ) {
	        switch( listitem ) {
	            case 0: {


					new string[128], IgraciUIgraonici[2];
					foreach( Player, i ){
						if( uInterijeru[ i ] == interiorIgraonice ){
							if( GetPlayerVirtualWorld( i ) == 10 ) IgraciUIgraonici[0]++;
							else if( GetPlayerVirtualWorld( i ) == 20 ) IgraciUIgraonici[1]++;
						}
					}

					format( string, sizeof(string), "C-Bug onemogucen\tIgraci: %d\nC-Bug omogucen\tIgraci: %d", IgraciUIgraonici[0], IgraciUIgraonici[1] );
					SPD( playerid, dialog_DMTYPECHOOSE, DSL, "Izaberi mod igre", string, D_ODABERI, D_ODUSTANI );

				}
	            case 1: {
	                SPD( playerid, dialog_izazovinautrku, DSI, "Izazovite na trku", "Unesite ID igraca, zatim broj iz ponude i ulog.\n[Broj] 1. Sultan 2. Infernus 3. Bullet 4. Elegy 5. Turismo\n[Broj] 6. Quad 7. Sabre 8. Hotring Racer 9. NRG-500 10. Tractor\n[Ulog] Ukoliko je ulog 0, igracete bez uloga\n\nPrimer: 25 4 1320", "U redu", "Izadji" );
				}
	            case 2: {
	                SPD( playerid, dialog_izazovina1v1, DSI, "Izazovite na 1v1", "Unesite ID igraca, zatim broj iz ponude i ulog.\n[Broj] 1. Deagle 2. M4 3. MP5\n[Ulog] Ukoliko je ulog 0, igracete bez uloga\n\nPrimejr: 25 1 1320", "U redu", "Izadji" );
				}
	        }
	    }
	}
	else if( dialogid == dialog_off_sell_veh ) {

	    if( response ) {

	        new veh_id = VehicleOffSaleVehID[ playerid ];

			for( new c = 1; c < MAX_VEHICLES; c++ ) {

				if( c != INVALID_VEHICLE_ID && VehicleInfo[ c ][ vSqlID ] == veh_id ) {


					KGEyes_DestroyVehicle( c );
					sql_vehicles_delete( c );
					ResetVehicle( c );
					SetVehicleLabels( c );
					break;
				}
			}

	        new q[ 256 ];
			mysql_format( _dbConnector, q, sizeof(q), "UPDATE `vehicles` SET `owner_sqlID` = '0', `v_price` = '-1', `v_pos_x` = '-2112.0281', `v_pos_y` = '2729.6250', `v_pos_z` = '166.0840', `v_pos_a` = '202.9713', `v_virtualw` = '0', `v_interior` = '0' WHERE `veh_id` = '%d' LIMIT 1",
				veh_id );

			mysql_pquery( _dbConnector, q, "", "" );

			SendInfoMessage( playerid, "Uspjesno si prodao vozilo, da proveris kucaj(/vozilazaaukciju)." );
	    }
	    else if( !response ) {
			SendInfoMessage( playerid, "Odustali ste od skidanja vozila." );
	    }
	}
	else if( dialogid == dialog_izazovinautrku ) {
	    if( !response ) return 1;
	    if( response ) {

	        new id, broj, model, ulog;
		    if( sscanf( inputtext, "uii", id, broj, ulog ) ) {
		        SPD( playerid, dialog_izazovinautrku, DSI, "Izazovite na trku", "Unesite ID igraca, zatim broj iz ponude i ulog.\n[Broj] 1. Sultan 2. Infernus 3. Bullet 4. Elegy 5. Turismo\n[Broj] 6. Quad 7. Sabre 8. Hotring Racer 9. NRG-500 10. Tractor\n[Ulog] Ukoliko je ulog 0, igracete bez uloga\n\nPrimer: 25 4 1320", "U redu", "Izadji" );
		        return 1;
			}

			if( ( PlayerInfo[ playerid ][ xAdmin ] > 0 && PlayerInfo[ playerid ][ xAdmin ] < 4 ) || PlayerInfo[ playerid ][ xGameSage ] > 0 ) {
			    new hour, minute, second;
				gettimeEx( hour, minute, second );
				FixHour( hour );
				hour = shifthour;

				if( ( hour >= 0 ) && ( hour <= 8 ) ) { }
				else return SendErrorMessage( playerid, "Admin(1-3)/GameSage moze na trku samo od 00h do 08h." );
			}

			if( id == IPI ) return SendErrorMessage( playerid, "Pogresan id igraca." );
			if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe da izazoves." );
			if( uInterijeru[ playerid ] != interiorIgraonice ) return SendErrorMessage( playerid, "Moras biti u igraonici." );
			if( uInterijeru[ id ] != interiorIgraonice ) return SendErrorMessage( playerid, "Taj igrac mora biti u igraonici." );
			if( NaUtrci[ playerid ] ) return SendErrorMessage( playerid, "Vec si na trci." );
		    if( NaUtrci[ id ] ) return SendErrorMessage( playerid, "Igrac je vec na trci." );
		    if( PljackaNovac[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
		    if( PljackaNovac[ id ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da invite igraca koji je u toku pljacke." );
		    if( PljackaZlato[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
		    if( PljackaZlato[ id ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da invite igraca koji je u toku pljacke." );
			if( broj < 1 || broj > 10 ) return SendErrorMessage( playerid, "Broj moze ici od 1 do 10." );
			if( ulog < 0 || ulog > 100000) return SendErrorMessage( playerid, "Ulog ne moze biti manji od 0 ili veci od 100.000$." );
			//if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Ne mozes ako nisi level 5+." );
			//if( PlayerInfo[ id ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Ne mozes ako igrac nije level 5+." );
			if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si cuffovan." );
		    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si vezan." );
			if( IsPlayerInAnyVehicle( playerid )  ) return SendErrorMessage( playerid, "Morate biti van vozila da bi otisli na izazov." );
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti van vozila da bi otisli na izazov." );
			//if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
			//if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );
			if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok imate wanted.");
		    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok ste u zatvoru / ALKATRAZ.");
		    if( PlayerInfo[ playerid ][ xNovac ] < ulog ) return SendErrorMessage( playerid, "Nemate dovoljno novca za ulog." );
		    if( PlayerInfo[ id ][ xNovac ] < ulog ) return SendErrorMessage( playerid, "Taj igrac nema dovoljno novca." );
		    if( PlayerInfo[ id ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Taj igrac ima WL." );

			if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno otici na izazov, limit vozila na serveru je dosegnut.");

			switch( broj ) {
			    case 1: model = 560;
			    case 2: model = 411;
			    case 3: model = 541;
			    case 4: model = 562;
			    case 5: model = 451;
			    case 6: model = 471;
			    case 7: model = 475;
			    case 8: model = 502;
			    case 9: model = 522;
			    case 10: model = 531;
			}

			PonudioIgrac[ id ] = playerid;
			PonudioIgrac[ playerid ] = id;
			UlogTrke[ id ] = ulog;
			UlogTrke[ playerid ] = ulog;

		    ModelTrke[ id ] = model;

		    new string[ 192 ];
			format( string, sizeof( string ), "Igrac %s vas je izazvao na trku sa %s.\nUlog trke je %d$\nDa prihvatis pretisni na 'Prihvati'.\nDa odustanes pritisni na 'Odustani'", RPImeIgraca( playerid ), GetVehicleNameEx( model ), ulog );

		    SPD( id, dialog_IZAZOVITRKA, DSMSG, D_NASLOV, string, D_ODABERI, D_ODUSTANI );

		    SendInfoMessage( playerid, "Izazvali ste na trku %s.", RPImeIgraca( id ) );
	    }
	}
	else if( dialogid == dialog_izazovina1v1 ) {
	    if( !response ) return 1;
	    if( response ) {

	        new id, broj, model, ulog;
		    if( sscanf( inputtext, "uii", id, broj, ulog ) ) {
		        SPD( playerid, dialog_izazovina1v1, DSI, "Izazovite na 1v1", "Unesite ID igraca, zatim broj iz ponude i ulog.\n[Broj] 1. Deagle 2. M4 3. MP5\n[Ulog] Ukoliko je ulog 0, igracete bez uloga\n\nPrimejr: 25 1 1320", "U redu", "Izadji" );
		        return 1;
			}

			if( ( PlayerInfo[ playerid ][ xAdmin ] > 0 && PlayerInfo[ playerid ][ xAdmin ] < 4 ) || PlayerInfo[ playerid ][ xGameSage ] > 0 ) {
			    new hour, minute, second;
				gettimeEx( hour, minute, second );
				FixHour( hour );
				hour = shifthour;

				if( ( hour >= 0 ) && ( hour <= 8 ) ) { }
				else return SendErrorMessage( playerid, "Admin(1-3)/GameSage moze na trku samo od 00h do 08h." );
			}

			if( id == IPI ) return SendErrorMessage( playerid, "Pogresan id igraca." );
			if( id == playerid ) return SendErrorMessage( playerid, "Ne mozes sam sebe da izazoves." );
			if( uInterijeru[ playerid ] != interiorIgraonice ) return SendErrorMessage( playerid, "Moras biti u igraonici." );
			if( uInterijeru[ id ] != interiorIgraonice ) return SendErrorMessage( playerid, "Taj igrac mora biti u igraonici." );
			if( Na1v1[ playerid ] ) return SendErrorMessage( playerid, "Vec si na 1v1." );
		    if( Na1v1[ id ] ) return SendErrorMessage( playerid, "Igrac je vec na 1v1." );
		    if( PljackaNovac[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
		    if( PljackaNovac[ id ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da invite igraca koji je u toku pljacke." );
		    if( PljackaZlato[ playerid ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
		    if( PljackaZlato[ id ] > 0 ) return SendErrorMessage( playerid, "Ne mozes da invite igraca koji je u toku pljacke." );
			if( broj < 1 || broj > 3 ) return SendErrorMessage( playerid, "Broj moze ici od 1 do 3." );
			if( ulog < 0 || ulog > 100000) return SendErrorMessage( playerid, "Ulog ne moze biti manji od 0 ili veci od 100.000$." );
			//if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Ne mozes ako nisi level 5+." );
			//if( PlayerInfo[ id ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Ne mozes ako igrac nije level 5+." );
			if( PlayerCuffed[ playerid ] >= 1 ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si cuffovan." );
		    if( IgracZavezan[ playerid ] == true ) return SendErrorMessage( playerid, "Ne mozes na izazov dok si vezan." );
			if( IsPlayerInAnyVehicle( playerid )  ) return SendErrorMessage( playerid, "Morate biti van vozila da bi otisli na izazov." );
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return SendErrorMessage( playerid, "Morate biti van vozila da bi otisli na izazov." );
			//if( GetPlayerInterior( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru." );
			//if( GetPlayerVirtualWorld( playerid ) != 0 ) return SendErrorMessage( playerid, "Ne mozete koristiti u interijeru/vwu." );
			if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok imate wanted.");
		    if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return SendErrorMessage( playerid, "Ne mozete na izazov dok ste u zatvoru / ALKATRAZ.");
		    if( PlayerInfo[ playerid ][ xNovac ] < ulog ) return SendErrorMessage( playerid, "Nemate dovoljno novca za ulog." );
		    if( PlayerInfo[ id ][ xNovac ] < ulog ) return SendErrorMessage( playerid, "Taj igrac nema dovoljno novca." );
		    if( PlayerInfo[ id ][ xWanted ] >= 1 ) return SendErrorMessage( playerid, "Taj igrac ima WL." );

			switch( broj ) {
			    case 1: model = 24;
			    case 2: model = 31;
			    case 3: model = 29;
				default: return SendErrorMessage( playerid, "Broj moze ici od 1 do 3." );
			}

			PonudioIgrac[ id ] = playerid;
			PonudioIgrac[ playerid ] = id;
			Ulog1v1[ id ] = ulog;
			Ulog1v1[ playerid ] = ulog;

		    Model1v1oruzja[ id ] = model;
		    Model1v1oruzja[ playerid ] = model;

		    new string[ 192 ];
			format( string, sizeof( string ), "Igrac %s vas je izazvao na 1v1 sa %s.\nUlog 1v1 je %d$\nDa prihvatis pritisni na 'Prihvati'.\nDa odustanes pritisni na 'Odustani'", RPImeIgraca( playerid ), WeaponInfos[ model ][ wName ], ulog );

		    SPD( id, dialog_IZAZOVI1v1, DSMSG, D_NASLOV, string, D_ODABERI, D_ODUSTANI );

		    SendInfoMessage( playerid, "Izazvali ste na 1v1 %s.", RPImeIgraca( id ) );
	    }
	}
	else if( dialogid == dialog_uslovi_koriscenja ) {

	    if( response ) {
	        SetTimerEx( "Register_2", 200, false, "d", playerid );
	    }
	    else if( !response ) {
	        Kickovanje( playerid, ""col_white"Izbaceni ste sa servera jer se ne slazete sa nasim uslovima!");
	    }
	}
	else if( dialogid == dialog_org_pravila_1 ) {
		if( response ) {
			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

			strcat( DialogStrgEx, ""col_red"___________________________________________________PRAVILA POLICIJE_____________________________________________________\n");

			strcat( DialogStrgEx, ""col_red" PD/SWAT/FBI/VOJSKA "col_white" je "col_job"DOZVOLJENO"col_white" hapsiti i raditi sve bez /me komande jer izpisuje automatski /me radi lakseg gameplaya.\n");
			strcat( DialogStrgEx, ""col_red" PD/SWAT/FBI/VOJSKA "col_white" je "col_job"DOZVOLJENO"col_white" radit kontrole vozila i ljudi po gradovima te moze postaviti radar bilo gdje.\n");
			strcat( DialogStrgEx, ""col_red" PD/SWAT/FBI/VOJSKA "col_white" je "col_job"DOZVOLJENO"col_white" postavljanje barikada da bi sprijecili pljacku, bijeg od kontrole itd.\n");
			strcat( DialogStrgEx, ""col_red" PD/SWAT/FBI/VOJSKA "col_white" je "col_job"DOZVOLJENO"col_white" da bude korumpiran ako to zeli ( vazi i za lidera ).\n");
			strcat( DialogStrgEx, ""col_red" PD/SWAT/FBI/VOJSKA "col_white" je "col_job"DOZVOLJENO "col_white" /ozivi ozivjeti igraca da bi ga spasili i uhapsili ako igrac ima WL.\n");
			strcat( DialogStrgEx, ""col_red" PD/SWAT/FBI/VOJSKA "col_white" je "col_job"DOZVOLJENO "col_white"/vuci uhapsenog bez da cuci koliko god je potrebno da ga uhapsi.\n");
			strcat( DialogStrgEx, ""col_red" PD/SWAT/FBI/VOJSKA "col_white" je "col_job"DOZVOLJENO "col_white" odlazak u Hangar ili Bazu ukoliko jure igraca sa wantedom.\n");
			strcat( DialogStrgEx, ""col_red" PD/SWAT/FBI/VOJSKA "col_white" je "col_job"DOZVOLJENO"col_white" hapsiti igraca i pocetnika ako igrac ima WL bilo gdje i bilo kada.\n");
			strcat( DialogStrgEx, ""col_red" PD/SWAT/FBI/VOJSKA "col_white" je "col_red"ZABRANJENO"col_white" tazirati ili pucati po igracu koji nema WL te bez razloga davati nekome WL.\n");
			strcat( DialogStrgEx, ""col_red" PD/SWAT/FBI/VOJSKA "col_white" je "col_red"ZABRANJENO"col_white" odlazak na teritorije, oduzimati stvari bez razloga, pucati tazerom na gun.\n");
			SPD( playerid, dialog_org_pravila_2, DSMSG, "Pravila", DialogStrgEx, "Nazad", "Izlaz" );
		    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		}
	}
	else if( dialogid == dialog_org_pravila_2 ) {
		if( response ) {
			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

			strcat( DialogStrgEx, ""col_red"_________________________________________________________OSNOVNA PRAVILA SERVERA______________________________________________________________\n\n");

			strcat( DialogStrgEx, ""col_red"DM "col_white" je zabranjen ( Ubijanje igraca bez RP razloga ili pucanje ispred PD, SWAT, FBI i Vojske osim ako policija nije pocela prva pucati ).\n");
			strcat( DialogStrgEx, ""col_red"DB "col_white" je zabranjen ( Ubijanje pjesaka iz vozila sa mjesta vozaca, ostajanje na igracu sa vozilom te ubijanjem elisom helikoptera ).\n");
			strcat( DialogStrgEx, ""col_red"Non RP"col_white" je zabranjen ( Ometanja drugih igraca u RP radnji ).\n");
			strcat( DialogStrgEx, ""col_red"PG "col_white" je zabranjen ( Izvodnje radnje koja je nemoguca u stvarnom zivotu ).\n");
			strcat( DialogStrgEx, ""col_red"MG "col_white" je zabranjen ( Mijesanje IC i OOC chata ).\n");
			strcat( DialogStrgEx, ""col_red"LTA "col_white" je zabranjen ( Bjezanje offline da bi izbjegli neku RP situaciju ).\n");
			strcat( DialogStrgEx, ""col_red"SK "col_white" je zabranjen ( Ubijanje igraca na spawnu od bilo kojeg pickupa ).\n");
			strcat( DialogStrgEx, ""col_red"TK "col_white" je zabranjen ( Ubijanje igraca iz svoje organizacije ili iz saveznicke organizacije ).\n");
			strcat( DialogStrgEx, ""col_red"TERITORIJE "col_white" zabranjeno udruzivanje ( Primjer: Y je pokrenula zonu protiv LCN a vi niste u /savezi niti ste u jednoj od te dvije organizacije a pomazete i mijesate se u tt ).\n");
			strcat( DialogStrgEx, ""col_red"CITERI "col_white" zabranjeno je koristiti pomagala koja vam daju prednost nad drugim igracima primjer aim, spread, wall hack itd.\n");
			strcat( DialogStrgEx, ""col_red"MULTI ACC "col_white" zabranjeno je ulazenje i igranje na vise accauntova, zabranjeno je pravljenje novog acc ukoliko vam prvi acc nije banovan.\n");
			strcat( DialogStrgEx, ""col_red"VRIJEDANJE "col_white" vrijedanje obitelji, rase, vjere je strogo zabranjeno.\n");
			strcat( DialogStrgEx, ""col_red"ZLOUPOTREBA BUGOVA "col_white" je zabranjena, ukoliko uocite bug na serveru prijavite ga na croherze.com\n");
			strcat( DialogStrgEx, ""col_red"LAZNO PREDSTAVLJANJE "col_white" koristenje tudih imena i identiteta odnosno pretvaranje da ste netko drugi sa zajednice a niste.\n\n");

			SPD( playerid, dialog_org_pravila_1, DSMSG, ""col_white"Pravila", DialogStrgEx, "Dalje", "Izlaz" );
			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		}
	}
	else if( dialogid == dialog_statistika_igraca ) {
	    if( !response ) { playerStatsTargetID[ playerid ] = -1; return 1; }
	    if( response ) {
	        if( playerStatsPage[ playerid ] == 0 ) {
                playerStatsPage[ playerid ]++;

	            new targetid = playerStatsTargetID[ playerid ];

	            new str[ 1024 ];

	            strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	            format( globalstring, sizeof( globalstring ), ""col_server"%s - "col_white" event i igraonica - statistika\n\n", ImeIgraca( targetid ) );
				strcat( DialogStrgEx, globalstring );

				format( globalstring, sizeof( globalstring ), ""col_white"Osvojena 1 mjesta: "col_server"[%d]\n", PlayerInfo[ targetid ][ xEvent1Mesto ] );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), ""col_white"Osvojena 2 mjesta: "col_server"[%d]\n", PlayerInfo[ targetid ][ xEvent2Mesto ] );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), ""col_white"Osvojena 3 mjesta: "col_server"[%d]\n", PlayerInfo[ targetid ][ xEvent3Mesto ] );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), ""col_white"Ubistva u CS:DM: "col_server"[%d]\n", PlayerInfo[ targetid ][ xDMEventUbistva ] );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), ""col_white"Skor u CS:TDM: "col_server"[%d]\n\n\n", PlayerInfo[ targetid ][ xCSTDMScore ] );
				strcat( DialogStrgEx, globalstring );

				format( globalstring, sizeof( globalstring ), ""col_server"%s - "col_white" imovina u vlasnistvu igraca\n\n\n", ImeIgraca( targetid ) );
				strcat( DialogStrgEx, globalstring );

				format( globalstring, sizeof( globalstring ), ""col_server"Vozila( "col_white"slotovi: [%d/%d] "col_server")\n\n", PlayerInfo[ targetid ][ xSlotoviVozila ], MAX_VEH_SLOT );
				strcat( DialogStrgEx, globalstring );

				for( new j = 0; j < MAX_VEH_SLOT; j ++ ) {
				    if( (j+1) <= PlayerInfo[ targetid ][ xSlotoviVozila ] ) {
						if( player_veh[ targetid ][ vehicle_id ][ j ] != -1 ) {

							format( str, sizeof( str ), ""col_white"* Slot: "col_server"[%d]\n    "col_white"- "col_server"Ime vozila: "col_white"[%s]\n    - "col_server"Trenutni ID: "col_white"[%d]\n    - "col_server"ID u bazi: "col_white"[%d]\n",
								j+1,
								getVehicleName( player_veh[ targetid ][ vehicle_id ][ j ] ),
								player_veh[ targetid ][ vehicle_id ][ j ],
								VehicleInfo[ player_veh[ targetid ][ vehicle_id ][ j ] ][ vSqlID ] );

							strcat( DialogStrgEx, str );
						}
						else {
						    format( globalstring, sizeof( globalstring ), ""col_white"* Slot: "col_server"[%d] - "col_white"PRAZNO\n", j+1 );
					        strcat( DialogStrgEx, globalstring );
						}
					}
				}
				strcat( DialogStrgEx, "\n\n" );
				strcat( DialogStrgEx, ""col_server"Nepokretna imovina\n\n" );
				for( new j = 0; j < 3; j ++ ) {
				    if( PlayerInfo[ targetid ][ xProperty ][ j ] != -1 ) {

				        format( str, sizeof( str ), ""col_white"* Slot: "col_server"[%d]\n    "col_white"- "col_server"Vrsta: "col_white"[%s]\n    - "col_server"ID: "col_white"[%d]\n",
							j+1,
							GetPropertyAName( PlayerInfo[ targetid ][ xProperty ][ j ] ),
							PlayerInfo[ targetid ][ xProperty ][ j ] );

						strcat( DialogStrgEx, str );

				    }
				    else {
				        format( globalstring, sizeof( globalstring ), ""col_white"* Slot: "col_server"[%d] - "col_white"PRAZNO\n", j+1 );
				        strcat( DialogStrgEx, globalstring );
				    }
				}
				strcat( DialogStrgEx, "\n\n" );

				if( PlayerInfo[ targetid ][ xFirmaID ] == -1 ) {
					strcat( DialogStrgEx, ""col_server"Firma: "col_white"[Prazno]\n\n\n" );
				}
				else {
				    format( str, sizeof( str ), ""col_server"Firma: "col_white"[%s]	"col_server"ID: "col_white"[%d]\n\n\n",
					BussinesInfo[ PlayerInfo[ targetid ][ xFirmaID ] ][ bName ], PlayerInfo[ targetid ][ xFirmaID ] );
					strcat( DialogStrgEx, str );
				}

				format( globalstring, sizeof( globalstring ), ""col_server"Hotel ID: "col_white"[%d]\n\n\n", PlayerInfo[ targetid ][ xHotelID ] );
				strcat( DialogStrgEx, globalstring );

				new year, month,day, tmphour, tmpminute, tmpsecond;
				getdate( year, month, day );
				gettimeEx( tmphour, tmpminute, tmpsecond );
				FixHour( tmphour );
				tmphour = shifthour;
			   	format( str, sizeof( str ), "					%02d/%02d/%d - %s%d:%s%d:%s%d", day, month, year, (tmphour < 10) ? ("0") : (""), tmphour, (tmpminute < 10) ? ("0") : (""), tmpminute, (tmpsecond < 10) ? ("0") : (""), tmpsecond );
		        strcat( DialogStrgEx, str );


	            SPD( playerid, dialog_statistika_igraca, DSMSG, D_NASLOV, DialogStrgEx, "Nazad", "Zatvori" );
    			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
	        }
	        else ShowDialogStats( playerid, playerStatsTargetID[ playerid ] );
	    }
	}
	else if( dialogid == dialog_VEHMONEYBUY ) {

	    if( response ) {

	        new as = GetNearestSalon( playerid );
			if( as != -1 ) {
			    if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SCM( playerid, ANTICHEAT, "(anticheat)"col_white" Nemoguce je trenutno kupiti vozilo, limit vozila na serveru je dosegnut.");
			    if( PlayerInfo[ playerid ][ xNovac ] < VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 1 ] ) return SendErrorMessage( playerid, "Nemas dovoljno novca." );

                if( carspawntimer == 1 ) {
					SendClientMessageEx( playerid, ANTICHEAT, "(anticheat) "col_white"Neko je kupio/parkirao vozilo pre vas. Pokusajte za 3 sekunde. (Anticrash)");
					return 1;
				}

			    if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5+ da bi ste kupili vozilo." );

				if( AutoSalon[ as ][ aVehAmmount ][ ModelCar[ playerid ] ] == 0 ) return SendErrorMessage( playerid, "Nemamo vise ovih modela u prodaji." );

				new i = INVALID_VEHICLE_ID;

				new slot = -1;
	            for( new j = 0; j < MAX_VEH_SLOT; j ++ ) {
		        	if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] == -1  ) {
		            	slot = j;
						break;
					}
				}
				if( slot == -1 ) return SendErrorMessage( playerid, "Svi slotovi vozila su vam zauzeti." );

				i = KGEyes_CreateVehicle( AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ], AutoSalon[ as ][ aVehBuyedPos ][ 0 ],
																									AutoSalon[ as ][ aVehBuyedPos ][ 1 ],
																									AutoSalon[ as ][ aVehBuyedPos ][ 2 ]+1.0,
																									AutoSalon[ as ][ aVehBuyedPos ][ 3 ],
																									0, 0, 300000 );
				if( i != INVALID_VEHICLE_ID ) {

					VehicleInfo[ i ][ vSqlID ] = 0;
                    VehicleInfo[ i ][ vOwner_sqlID ] = PlayerInfo[ playerid ][ xID ];
					VehicleInfo[ i ][ vPrice ] = VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 1 ];
					strmid( VehicleInfo[ i ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32);
					VehicleInfo[ i ][ vUsage ] = PRIVATNO_VOZILO;
					VehicleInfo[ i ][ vOrganizationSQLID ] = 0;
					VehicleInfo[ i ][ vOrganization ] = -1;
					VehicleInfo[ i ][ vLock ] = 0;
					VehicleInfo[ i ][ vAlarm ] = 0;
					VehicleInfo[ i ][ vImobilizator ] = 0;

					for( new j = 0; j < MAX_VEH_SLOT; j ++ ) {
		                if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] && player_veh[ playerid ][ vehicle_id ][ j ] == -1 ) {
							player_veh[ playerid ][ vehicle_id ][ j ] = i;
							break;
						}
					}

			     	new string[ 128 ];
					format( string, sizeof( string ), "Igrac %s je kupio vozilo %s u salonu ID %d", ImeIgraca( playerid ), ImeVozila[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]-400 ], as );
					LogSave( "Ostalo/LogKupiVozilo.log", string );


					VehicleInfo[ i ][ vJob ] = -1;
					VehicleInfo[ i ][ vModel ] = AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ];
					VehicleInfo[ i ][ vReg ] = 0;
					VehicleInfo[ i ][ vRegVrijeme ] = 0;
					VehicleInfo[ i ][ vTeh ] = 0;
					VehicleInfo[ i ][ vGPS ] = 2;
					VehicleInfo[ i ][ vOsiguranje ] = 5;
					VehicleInfo[ i ][ vLocked ] = 0;
					VehicleInfo[ i ][ vLokacijaX ] = AutoSalon[ as ][ aVehBuyedPos ][ 0 ];
					VehicleInfo[ i ][ vLokacijaY ] = AutoSalon[ as ][ aVehBuyedPos ][ 1 ];
					VehicleInfo[ i ][ vLokacijaZ ] = AutoSalon[ as ][ aVehBuyedPos ][ 2 ];
					VehicleInfo[ i ][ vLokacijaA ] = AutoSalon[ as ][ aVehBuyedPos ][ 3 ];
					VehicleInfo[ i ][ vVirtualWorld ] = 0;
					VehicleInfo[ i ][ vInterior ] = 0;
					VehicleInfo[ i ][ vFuelStationSQLID ] = 0;
					VehicleInfo[ i ][ vFuelStation ] = -1;
					VehicleInfo[ i ][ vColor1 ] = 0;
					VehicleInfo[ i ][ vColor2 ] = 0;
					VehicleInfo[ i ][ vTuned ] = 0;
					VehicleInfo[ i ][ vNeon ] = 0;
					VehicleInfo[ i ][ vSpoiler ] = 0;
					VehicleInfo[ i ][ vHood ] = 0;
					VehicleInfo[ i ][ vRoof ] = 0;
					VehicleInfo[ i ][ vSkirt ] = 0;
					VehicleInfo[ i ][ vLamps ] = 0;
					VehicleInfo[ i ][ vNitro ] = 0;
					VehicleInfo[ i ][ vExhaust ] = 0;
					VehicleInfo[ i ][ vWheels ] = 0;
					VehicleInfo[ i ][ vStereo ] = 0;
					VehicleInfo[ i ][ vHydraulics ] = 0;
					VehicleInfo[ i ][ vFrontBumper ] = 0;
					VehicleInfo[ i ][ vRearBumper ] = 0;
					VehicleInfo[ i ][ vSellPrice ] = 0;
					VehicleInfo[ i ][ vVents ] = 0;
					VehicleInfo[ i ][ vPaintJob ] = 255;
					VehicleInfo[ i ][ vMaterijali ] = 0;
					VehicleInfo[ i ][ vDrugAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vDrugAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vDrugAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vDrugAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vDrugAmmount ][ 4 ] = 0; VehicleInfo[ i ][ vDrugAmmount ][ 5 ] = 0;
			        VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;

					LinkVehicleToInterior( i, VehicleInfo[ i ][ vInterior ] );
	                SetVehicleVirtualWorld( i, VehicleInfo[ i ][ vVirtualWorld ] );
					VehicleInfo[ i ][ vFuel ] = getAmountFuel( i ); vCanDrive[ i ] = 1; Fuel[ i ] = getAmountFuel( i );
					SetVehicleNumberPlate( i, "NEMA" );
					UnLockCar( i );

			        carspawntimer = 1; ResetVehicleStatistics( i );
			     	SetTimer("AntiSpawnCrash", 3000, 0);

					new query[ 512 ];
				    mysql_format( _dbConnector, query, sizeof( query ), "INSERT INTO `vehicles` (owner_sqlID, v_price, v_pos_x, v_pos_y, v_pos_z, v_pos_a, v_virtualw, v_interior, v_usage, v_organization, v_job, v_fuel_station, v_color_1, v_color_2, v_model, v_gps) \
				  		VALUES( '%d', '%d', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%d' )",

					    VehicleInfo[ i ][ vOwner_sqlID ], VehicleInfo[ i ][ vPrice ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ],
						VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vVirtualWorld ], VehicleInfo[ i ][ vInterior ],
						VehicleInfo[ i ][ vUsage ], VehicleInfo[ i ][ vOrganizationSQLID ], VehicleInfo[ i ][ vJob ], VehicleInfo[ i ][ vFuelStationSQLID ],
						VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vGPS ] );

					mysql_pquery( _dbConnector, query, "OnVehicleCreate", "i", i);

					if( Diesel( i ) ) VehicleInfo[ i ][ vFuelType ] = 1;
				    else if( Gasoline( i ) ) VehicleInfo[ i ][ vFuelType ] = 2;

					SetVehicleParamsEx( i, 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
			        if( IsVehicleBajs( i ) ) {
						SetVehicleParamsEx( i, 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					}

					KGEyes_GivePlayerMoney( playerid, -VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 1 ] ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 1 ] , "Autosalon kupovina" );
					new bussinesID = -1;
					for( new j = 1; j < MAX_BUSSINES; j++ ) {
						if( BussinesInfo[ j ][ b_ID ] == AutoSalon[ as ][ aBussinesID ] ) {

							bussinesID = j;
							break;
						}
					}
					if(bussinesID != -1)
						BussinesMoney( bussinesID , VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 1 ]/40 );

		   			//BussinesMoney( AutoSalon[ as ][ aBussinesID ] , VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 1 ]/10 );
		   			//ovdje ti stoji da je to 10 posto od cijene vozila ako hoces manje mozes i manje kuzim e sad otvori bazu da ti pokazem nes

		            AutoSalon[ as ][ aVehAmmount ][ ModelCar[ playerid ] ]--;
				  	AutoSalon[ as ][ AlreadyBuying ] = false;

				   	new q[ 256 ];
					mysql_format( _dbConnector, q, sizeof(q), "UPDATE `vehicle_salon` SET `veh_amount_%d` = '%d' WHERE `salon_id` = '%d' LIMIT 1",
						(ModelCar[ playerid ]+1),
						AutoSalon[ as ][ aVehAmmount ][ ModelCar[ playerid ] ],
						AutoSalon[ as ][ aSalon_ID ] );
					mysql_pquery( _dbConnector, q, "", "" );

				  	PlayerBuyingAS[ playerid ] = -1;
					ModelCar[ playerid ] = 0;
					ModelPage[ playerid ] = 0;
                    BuyingVehForOrg[ playerid ] = false;
					BuyCarTDControl( playerid, false );
					TogPlayerHud( playerid );
					KGEyes_TogglePlayerControllable( playerid, true );

					SetCameraBehindPlayer( playerid );
				   	SendInfoMessage( playerid, "Uspjesno ste kupili vozilo, oznaceno vam je na raderu markerom." );
				   	//SCM( playerid, NARACRVENA, "NAPOMENA: UKOLIKO NE REGISTRUJETE VOZILO A PRODJE 100 SATI, AUTOMATSKI SE PRODAJE.");

				   	KGEyes_SetPlayerCheckpoint( playerid, VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ], 5.0 );
					CheckpointStatus[ playerid ] = 15;
				}
			}
	    }
	    else if( !response ) {

	        new as = GetNearestSalon( playerid );
			if( as != -1 ) {
				AutoSalon[ as ][ AlreadyBuying ] = false;

	    		PlayerBuyingAS[ playerid ] = -1;
				ModelCar[ playerid ] = 0;
				ModelPage[ playerid ] = 0;
                BuyingVehForOrg[ playerid ] = false;
				BuyCarTDControl( playerid, false );
				TogPlayerHud( playerid );
				KGEyes_TogglePlayerControllable( playerid, true );

				SetCameraBehindPlayer( playerid );
				CancelSelectTextDraw( playerid );
			}

	    }
	}
	else if( dialogid == dialog_PORT ){
	    if( !response ) return 1;
		if( response ) {
	        switch( listitem ) {
	            case 0: {

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_APORTS; i++ ) {
						if( aportInfo[ i ][ aportCreated ] == 1 ) {
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, aportInfo[ i ][ aportName ] );
						}
					}
					SPD( playerid, dialog_PORT_2, DSL, "Izaberi lokaciju", DialogStrgEx, D_ODABERI, "Nazad" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
	            }
	            case 1: {

	                strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				    for( new i = 0; i < MAX_JOBS; i++ ) {
				        format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, i+1, jobsInfos[ i ][ jName ] );
					}

					SPD( playerid, dialog_PORT_3, DSL, "Izaberi posao", DialogStrgEx, D_ODABERI, "Nazad" );
				    strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

	            }
			}
		}
	}
	else if( dialogid == dialog_PORT_2 ) {
		if( !response ) if( !response ) {
	    	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) return SPD( playerid, dialog_PORT, DSL, D_NASLOV, "Vazne lokacije\nPoslovi", D_ODABERI, D_ODUSTANI );
	    }
		if( response ) {
			new tmpcar = GetPlayerVehicleID( PortingPlayer[ playerid ] );
			if( GetPlayerState( PortingPlayer[ playerid ] ) == 2 ) {
		 		KGEyes_SetVehiclePos( tmpcar, aportInfo[ listitem ][ aportPos_X ], aportInfo[ listitem ][ aportPos_Y ], aportInfo[ listitem ][ aportPos_Z ] );
		 	}
			else {
				KGEyes_SetPlayerPos( PortingPlayer[ playerid ], aportInfo[ listitem ][ aportPos_X ], aportInfo[ listitem ][ aportPos_Y ], aportInfo[ listitem ][ aportPos_Z ] );
			}
			ResetInt( PortingPlayer[ playerid ] );
			SetPlayerInterior( PortingPlayer[ playerid ], 0 );
			SetPlayerVirtualWorld( PortingPlayer[ playerid ], 0 );
			SetPlayerTime( PortingPlayer[ playerid ], ServerInfo[ VrijemeInGame ], 0 );
			SendInfoMessage( PortingPlayer[ playerid ], "Teleportovani ste do: %s od admina %s", aportInfo[ listitem ][ aportName ], ImeIgraca( playerid ) );
			SendInfoMessage( playerid, "Portali ste igraca %s do %s", ImeIgraca( PortingPlayer[ playerid ] ), aportInfo[ listitem ][ aportName ] );
			format( globalstring, sizeof( globalstring ), ""col_warcrna"PORT | %s je portao igraca %s na lokaciju: %s", ImeIgraca( playerid ), ImeIgraca( PortingPlayer[ playerid ] ),
				aportInfo[ listitem ][ aportName ] );
			RPTChat( BELA, globalstring );

		}
	}
	else if( dialogid == dialog_PORT_3 ){
		if( !response ) {
	    	if( PlayerInfo[ playerid ][ xAdmin ] >= 1 ) return SPD( playerid, dialog_PORT, DSL, D_NASLOV, "Vazne lokacije\nPoslovi", D_ODABERI, D_ODUSTANI );
	    }
		if( response ) {

		    new tmpcar = GetPlayerVehicleID( PortingPlayer[ playerid ]);
			if( GetPlayerState( PortingPlayer[ playerid ] ) == 2 ) {
		 		KGEyes_SetVehiclePos( tmpcar, jobsInfos[ listitem ][ jPos ][ 0 ], jobsInfos[ listitem ][ jPos ][ 1 ], jobsInfos[ listitem ][ jPos ][ 2 ] );
		 	}
			else {
				KGEyes_SetPlayerPos( PortingPlayer[ playerid ], jobsInfos[ listitem ][ jPos ][ 0 ], jobsInfos[ listitem ][ jPos ][ 1 ], jobsInfos[ listitem ][ jPos ][ 2 ] );
			}
			ResetInt( PortingPlayer[ playerid ] );
			SetPlayerInterior( PortingPlayer[ playerid ], 0 );
			SetPlayerVirtualWorld( PortingPlayer[ playerid ], 0 );
			SetPlayerTime( PortingPlayer[ playerid ], ServerInfo[ VrijemeInGame ], 0 );
			SendInfoMessage( PortingPlayer[ playerid ], "Teleportovani ste do: %s od admina %s", aportInfo[ listitem ][ aportName ], ImeIgraca( playerid ) );
			SendInfoMessage( playerid, "Portali ste igraca %s do %s", ImeIgraca( PortingPlayer[ playerid ] ), aportInfo[ listitem ][ aportName ] );
			format( globalstring, sizeof( globalstring ), ""col_warcrna"PORT | %s je portao igraca %s na lokaciju: %s", ImeIgraca( playerid ), ImeIgraca( PortingPlayer[ playerid ] ),
				aportInfo[ listitem ][ aportName ] );
			RPTChat( BELA, globalstring );
		}
	}
	else if( dialogid == dialog_UPDATE ){
		if( !response ) return true;
		if( response ){
			new DialogStrgEx2[ 4000 ];
			switch( listitem ){
                
                case 0: {
					strdel( DialogStrgEx2, 0, sizeof( DialogStrgEx2 ));
    				strcat( DialogStrgEx, ""col_white" Update "col_server"v5.0 "col_white"made by CH:RP Team\n\n" );

					strcat( DialogStrgEx, ""col_server" 1)"col_white" - Nova Spawn lokacija -> Kolodvor.\n");
					strcat( DialogStrgEx, ""col_server" 2)"col_white" - Izbacene organizacije Vojska, FBI, CIA.\n");
					strcat( DialogStrgEx, ""col_server" 3)"col_white" - Novi sistem Notoriety -> vise na forumu.\n");
					strcat( DialogStrgEx, ""col_server" 4)"col_white" - Novi sistem pravljenja droge Kokain -> vise na forumu.\n");
					strcat( DialogStrgEx, ""col_server" 5)"col_white" - Novi sistem pravljenja droge Marihuana -> vise na forumu.\n");
					strcat( DialogStrgEx, ""col_server" 6)"col_white" - Novi znacaj teritorija -> vise na forumu.\n");
					strcat( DialogStrgEx, ""col_server" 7)"col_white" - Novi sistem pravljenja oruzja -> vise na forumu.\n");
					strcat( DialogStrgEx, ""col_server" 8)"col_white" - Uskoro.\n");
					strcat( DialogStrgEx, ""col_server" 9)"col_white" - Uskoro.\n");
					strcat( DialogStrgEx, ""col_server" 10)"col_white" - Uskoro.\n");
					strcat( DialogStrgEx, ""col_server" 11)"col_white" - Uskoro.\n");
					strcat( DialogStrgEx, ""col_server" 12)"col_white" - Uskoro.\n");
					strcat( DialogStrgEx, ""col_server" 13)"col_white" - Uskoro.\n");
					strcat( DialogStrgEx, ""col_server" 14)"col_white" - Uskoro.\n");
					strcat( DialogStrgEx, ""col_server" 15)"col_white" - Uskoro.\n");
					strcat( DialogStrgEx, ""col_server" 16)"col_white" - Uskoro.\n");
					strcat( DialogStrgEx, ""col_server" 17)"col_white" - Uskoro.\n");
					strcat( DialogStrgEx, ""col_server" 18)"col_white" - Uskoro.\n");
					strcat( DialogStrgEx, ""col_server" 19)"col_white" - Uskoro.\n");
					strcat( DialogStrgEx, ""col_server" 20)"col_white" - Uskoro.\n");
					strcat( DialogStrgEx, ""col_server" 21)"col_white" - Uskoro.\n");

					SPD( playerid, 0, DSMSG, "Datum updatea: 01.09.2025.", DialogStrgEx, "Ok", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
			}
		}
	}
	else if( dialogid == dialog_GATEEDIT ){
		if( !response ) return 1;
		if( response ) {
			new imeigraca[24], query[128], gateid = NearestGate( playerid );
			if( gateid != -1 ){
				if( sscanf( inputtext, "s[24]", imeigraca ) ) return SPD( playerid, dialog_GATEEDIT, DSI, "Promjena vlasnika kapije", "Unesi tocno ime novog vlasnika kapije", D_ODABERI, D_ODUSTANI );
				strmid( GateData[gateid][gateOwner], imeigraca, 0, strlen(imeigraca), MAX_PLAYER_NAME );
				mysql_format( _dbConnector, query, sizeof(query), "UPDATE `gates` SET `gateowner` = '%s' WHERE `gateid` = '%d'", imeigraca, gateid );
				mysql_pquery( _dbConnector, query, "", "" );
				SendInfoMessage( playerid, "Uspjesno ste dali vlasnistvo kapije ID: %d igracu %s", gateid, imeigraca );
				format( globalstring, sizeof( globalstring ), "| KAPIJA | %s je postavio vlasnistvo kapije igracu %s | ID Kapije: %d", ImeIgraca( playerid ), imeigraca, gateid );
				LogSave( "Ostalo/LogEdit.log", globalstring );
			}
			else return SendErrorMessage( playerid, "Niste pored kapije." );
		}
	}
	else if( dialogid == dialog_SPAWNMARRIEDSET ){
		if( !response ) return 1;
		if( response ) {
			new idimovine;

			if( sscanf( inputtext, "i", idimovine ) ) return SPD( playerid, dialog_SPAWNMARRIEDSET, DSI, "Promjena spawna", "Unesite ID imovine u vlasnistvu vaseg bracnog partnera u kojem se zelite spawnati.", D_ODABERI, D_ODUSTANI );
			if( idimovine > MAX_IMOVINA || idimovine < 1 ) return SPD( playerid, dialog_SPAWNMARRIEDSET, DSI, "Promjena spawna", "Unesite ID imovine u vlasnistvu vaseg bracnog partnera u kojem se zelite spawnati.\nError: Pogresan unos", D_ODABERI, D_ODUSTANI );
			if( strcmp( II[ idimovine ][ iOwner ], PlayerInfo[ playerid ][ xMarriedTo ], true ) != 0 ) return SendErrorMessage( playerid, "Ta imovina nije u vlasnistvu vaseg bracnog partnera!" );

			PlayerInfo[ playerid ][ xSpawn ] = II[ idimovine ][ ibaseID ]+10000;
			sql_user_update_integer( playerid, "spawn", PlayerInfo[ playerid ][ xSpawn ] );
			SendInfoMessage( playerid, "Od sad ce te se spawnati u imovini vaseg bracnog partnera." );
		}
	}
	else if( dialogid == dialog_DMTYPECHOOSE ){
		if( !response ) return SPD( playerid, dialog_chosegame, DSL, "Izaberite igricu", "Deathmatch\nUtrka 1 v 1\nDeagle 1 v 1", "U redu", "Izadji" );
		if( response ){
			switch( listitem ){
				case 0: { //Sa C-Bug zabranom
					IgraonicaVW[ playerid ] = 10;
				}
				case 1: { //Bez C-Bug zabrane
					IgraonicaVW[ playerid ] = 20;
				}
			}
			//if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return SendErrorMessage( playerid, "Ne mozes ako nisi level 3+." );
			if( PlayerInfo[ playerid ][ xWanted ] > 0 ) return SendErrorMessage( playerid, "Ne mozes na DM sa WLom." );
			if( PoliceDuty[ playerid ] ) return SendErrorMessage( playerid, "Ne mozes sa PD duty na DM server." );
			if( uInterijeru[ playerid ] != interiorIgraonice ) return SendErrorMessage( playerid, "Moras biti u igraonici." );

			if( ( PlayerInfo[ playerid ][ xAdmin ] > 0 && PlayerInfo[ playerid ][ xAdmin ] < 4 ) || PlayerInfo[ playerid ][ xGameSage ] > 0 ) {
				new hour, minute, second;
				gettimeEx( hour, minute, second );
				FixHour( hour );
				hour = shifthour;

				if( ( hour >= 0 ) && ( hour <= 8 ) ) { }
				else return SendErrorMessage( playerid, "Admin(1-3)/GameSage moze na DM server samo od 00h do 08h." );
			}

			GetPlayerPos( playerid, PozicijaWAR[ playerid ][ 0 ], PozicijaWAR[ playerid ][ 1 ], PozicijaWAR[ playerid ][ 2 ] );
			VirtualWWAR[ playerid ] = GetPlayerVirtualWorld( playerid );
			InteriorWAR[ playerid ] = GetPlayerInterior( playerid );

			NaDmEventu[ playerid ] = true;
			new rand = random( sizeof( RandomDMPos ) );
			KGEyes_SetPlayerPos( playerid, RandomDMPos[ rand ][ 0 ], RandomDMPos[ rand ][ 1 ], RandomDMPos[ rand ][ 2 ] );
			SetPlayerFacingAngle( playerid, 360.000 );
			SetCameraBehindPlayer( playerid );
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, IgraonicaVW[ playerid ] );
			SetPlayerWeather( playerid, DEFAULT_WEATHER );  // Dynamic Weather System

			CSUbistvazaredom[ playerid ] = 0;
			CSUbistva[ playerid ] = 0;

			SetPlayerHealth( playerid, 100 );
			KGEyes_SetPlayerArmour( playerid, 100 );

			if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4500 ) {
				SendInfoMessage( playerid, "Usao si na DM sa rankom 10." );
				GiveWeaponToPlayer( playerid, 24, 150 );
				GiveWeaponToPlayer( playerid, 25, 150 );
				GiveWeaponToPlayer( playerid, 29, 800 );
				GiveWeaponToPlayer( playerid, 31, 400 );

			}
			else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 4000 ) {
				SendInfoMessage( playerid, "Usao si na DM sa rankom 9." );
				GiveWeaponToPlayer( playerid, 24, 150 );
				GiveWeaponToPlayer( playerid, 25, 150 );
				GiveWeaponToPlayer( playerid, 29, 800 );
				GiveWeaponToPlayer( playerid, 31, 400 );

			}
			else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3500 ) {
				SendInfoMessage( playerid, "Usao si na DM sa rankom 8." );
				GiveWeaponToPlayer( playerid, 24, 150 );
				GiveWeaponToPlayer( playerid, 27, 150 );
				GiveWeaponToPlayer( playerid, 28, 800 );
				GiveWeaponToPlayer( playerid, 31, 400 );

			}
			else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 3000 ) {
				SendInfoMessage( playerid, "Usao si na DM sa rankom 7." );
				GiveWeaponToPlayer( playerid, 24, 150 );
				GiveWeaponToPlayer( playerid, 25, 150 );
				GiveWeaponToPlayer( playerid, 29, 800 );
				GiveWeaponToPlayer( playerid, 31, 400 );
			}
			else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2500 ) {
				SendInfoMessage( playerid, "Usao si na DM sa rankom 6." );
				GiveWeaponToPlayer( playerid, 24, 150 );
				GiveWeaponToPlayer( playerid, 25, 150 );
				GiveWeaponToPlayer( playerid, 29, 800 );
				GiveWeaponToPlayer( playerid, 31, 400 );
			}
			else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 2000 ) {
				SendInfoMessage( playerid, "Usao si na DM sa rankom 5." );
				GiveWeaponToPlayer( playerid, 24, 150 );
				GiveWeaponToPlayer( playerid, 25, 150 );
				GiveWeaponToPlayer( playerid, 29, 800 );
				GiveWeaponToPlayer( playerid, 31, 400 );
			}
			else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 1500 ) {
				SendInfoMessage( playerid, "Usao si na DM sa rankom 4." );
				GiveWeaponToPlayer( playerid, 24, 150 );
				GiveWeaponToPlayer( playerid, 25, 150 );
				GiveWeaponToPlayer( playerid, 29, 800 );
				GiveWeaponToPlayer( playerid, 31, 400 );
			}
			else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 1000 ) {
				SendInfoMessage( playerid, "Usao si na DM sa rankom 3." );
				GiveWeaponToPlayer( playerid, 24, 150 );
				GiveWeaponToPlayer( playerid, 25, 150 );
				GiveWeaponToPlayer( playerid, 29, 800 );
				GiveWeaponToPlayer( playerid, 31, 400 );
			}
			else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 500 ) {
				SendInfoMessage( playerid, "Usao si na DM sa rankom 2." );
				GiveWeaponToPlayer( playerid, 24, 150 );
				GiveWeaponToPlayer( playerid, 25, 150 );
				GiveWeaponToPlayer( playerid, 29, 800 );
				GiveWeaponToPlayer( playerid, 31, 400 );
			}
			else if( PlayerInfo[ playerid ][ xDMEventUbistva ] >= 0 ) {
				SendInfoMessage( playerid, "Usao si na DM sa rankom 1." );
				GiveWeaponToPlayer( playerid, 24, 150 );
				GiveWeaponToPlayer( playerid, 25, 150 );
				GiveWeaponToPlayer( playerid, 29, 800 );
				GiveWeaponToPlayer( playerid, 31, 400 );
			}

			SendClientMessage( playerid, ZUTA, "DA BI VAM SE SACUVALA STATISTIKA SA DM SERVERA, NA KRAJU MORATE IZACI SA NJEGA." );
			SendClientMessage( playerid, ZUTA, "Da izadjes sa DM servera kucaj /izadjisadm." );

			//tdmTDControl( playerid, false );
			return true;
		}
	}
	else if( dialogid == dialog_GOVVEHORDER ){ // Narudzba org vozila
		if( !response ) return 1;
		if( response ){
			new cijena = GetVehiclePrice( GovOrderCar[ playerid ] )/4, orga = PlayerInfo[ playerid ][ xLider ];

			if( PlayerInfo[ playerid ][ xBRacun ] < cijena ) return SendErrorMessage( playerid, "Nemate dovoljno novaca na bankovnom racunu" );
			PlayerInfo[ playerid ][ xBRacun ] -= cijena;
			PlayerMoneyTrackSave( playerid, MONEY_BANK, -cijena, "Narudzba org vozila" );
			sql_user_update_integer( playerid, "bank_money", PlayerInfo[ playerid ][ xBRacun ] );
			UpdateBankTD( playerid );

			new bool:found = false;
			switch(  GovOrderCar[ playerid ] ) {
				// Provjera za brodove
				case 472,473,493,595,484,430,453,452,446,454: {
					sql_create_vehicle( GovOrderCar[ playerid ], ORGANIZACIJSKO_VOZILO, orga, -1, -1, 2315.3201, -2411.1357, 0.1004, 134.5015, org_info[ orga ][ oVehColor ][ 0 ], org_info[ orga ][ oVehColor ][ 1 ] );
					KGEyes_SetPlayerCheckpoint( playerid, 2315.3201, -2411.1357, 0.1004, 7.0 );
					CheckpointStatus[ playerid ] = 109;
					found = true;
				}
				// Provjera za letjelice
				case 417,425,447,460,469,476,487,488,497,511,512,513,519,520,548,553,563,577,592,593: {
					sql_create_vehicle( GovOrderCar[ playerid ], ORGANIZACIJSKO_VOZILO, orga, -1, -1, 1131.2583, -1231.2355, 25.3020, 174.7093, org_info[ orga ][ oVehColor ][ 0 ], org_info[ orga ][ oVehColor ][ 1 ] );
					KGEyes_SetPlayerCheckpoint( playerid, 1131.2583, -1231.2355, 25.3020, 7.0 );
					CheckpointStatus[ playerid ] = 109;
					found = true;
				}
			}
			/*if( GovOrderCar[ playerid ] == 472 || 473 || 493 || 595 || 484 || 430 || 453 || 452 || 446 || 454 ) {
				sql_create_vehicle( GovOrderCar[ playerid ], ORGANIZACIJSKO_VOZILO, orga, -1, -1, 2315.3201, -2411.1357, 0.1004, 134.5015, org_info[ orga ][ oVehColor ][ 0 ], org_info[ orga ][ oVehColor ][ 1 ] );
				KGEyes_SetPlayerCheckpoint( playerid, 2315.3201, -2411.1357, 0.1004, 7.0 );
				CheckpointStatus[ playerid ] = 109;
			}
			else if ( GovOrderCar[ playerid ] == 417 || 425 || 447 || 460 || 469 || 476 || 487 || 488 || 497 || 511 || 512 || 513 || 519 || 520 || 548 || 553 || 563 || 577 || 592 || 593 ){
				sql_create_vehicle( GovOrderCar[ playerid ], ORGANIZACIJSKO_VOZILO, orga, -1, -1, 1131.2583, -1231.2355, 25.3020, 174.7093, org_info[ orga ][ oVehColor ][ 0 ], org_info[ orga ][ oVehColor ][ 1 ] );
				KGEyes_SetPlayerCheckpoint( playerid, 1131.2583, -1231.2355, 25.3020, 7.0 );
				CheckpointStatus[ playerid ] = 109;
			}*/
			if( !found ){
				sql_create_vehicle( GovOrderCar[ playerid ], ORGANIZACIJSKO_VOZILO, orga, -1, -1, 1151.6428, -1205.8744, 18.9648, 181.0159, org_info[ orga ][ oVehColor ][ 0 ], org_info[ orga ][ oVehColor ][ 1 ] );
				KGEyes_SetPlayerCheckpoint( playerid, 1151.6428, -1205.8744, 18.9648, 5.0 );
				CheckpointStatus[ playerid ] = 109;
			}

			format( globalstring, sizeof(globalstring), "* %s potpisuje papire i odobrava bankovni transfer novca.", ImeIgraca(playerid) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
			SendInfoMessage( playerid, "Uspjesno ste narucili vozilo za organizaciju. Pokupite u servisu za nabavu vozila ( marker )." );
		}
	}
	else if( dialogid == dialog_POZIV ){
		if( !response ) return 1;
		if( response ){
			new broj;
			if( SmartphoneInfo[ playerid ][ Tarifa ] != T_NONE ){
				new imeigraca[ MAX_PLAYER_NAME ] ;
				if( !sscanf( inputtext, "i", broj ) ) cmd_zovi( playerid, inputtext );
				else if( !sscanf( inputtext, "s[24]", imeigraca ) ) {
					new id = GetPlayerIdFromName( imeigraca );
					if( id == IPI ) return SPD( playerid, dialog_POZIV, DSI, "Biranje broja", ""col_siva"Unesi broj ili nick osobe koju zelis nazvati.\n"col_red"Error: "col_siva"Igrac nije online!", "Nazovi", "Odustani" );
					format( globalstring, sizeof( globalstring ), "%d", PlayerInfo[ id ][ xBrojTelefona ] );
					cmd_zovi( playerid, globalstring );
				}
				else return SPD( playerid, dialog_POZIV, DSI, "Biranje broja", ""col_siva"Unesi broj ili nick osobe koju zelis nazvati.\n"col_red"Error: "col_siva"Nepravilan unos!", "Nazovi", "Odustani" );
			}
			else{
				if( sscanf( inputtext, "i", broj ) ) return SPD( playerid, dialog_POZIV, DSI, "Biranje broja", ""col_siva"Unesi broj osobe koju zelis nazvati.\n"col_red"Error: "col_siva"Nepravilan unos!", "Nazovi", "Odustani" );
				cmd_zovi( playerid, inputtext );
			}
		}
	}
	else if( dialogid == dialog_SMS ){
		if( !response ) return 1;
		else if( response ){
			new number, string[128], imeigraca[MAX_PLAYER_NAME];

			if( SmartphoneInfo[ playerid ][ Tarifa ] != T_NONE ){
				if( !sscanf( inputtext, "is[128]", number, string ) ) SmartphoneSms( playerid, number, string );
				else if( !sscanf( inputtext, "s[24]s[128]", imeigraca, string ) ){
					new id = GetPlayerIdFromName( imeigraca );
					if( id == IPI ) return SPD( playerid, dialog_SMS, DSI, ""col_siva"Slanje poruke", ""col_siva"Unesi broj telefona i text poruke.\n\
					"col_red"Error: Navedeni igrac nije online.", "Posalji", "Odustani" );
					SmartphoneSms( playerid, PlayerInfo[ id ][ xBrojTelefona ], string );
				}
				else return SPD( playerid, dialog_SMS, DSI, ""col_siva"Slanje poruke", ""col_siva"Unesi broj telefona i text poruke.\n\
				"col_red"Error: "col_siva"Nepravilan unos.\nPrimjer: 456123 Bok, kako si?", "Posalji", "Odustani" );
			}
			else {
				if( sscanf( inputtext, "is[128]", number, string ) ) return SPD( playerid, dialog_SMS, DSI, ""col_siva"Slanje poruke", ""col_siva"Unesi broj telefona i text poruke.\n\
				"col_red"Error: "col_siva"Nepravilan unos.\nPrimjer: 456123 Bok, kako si?", "Posalji", "Odustani" );
				SmartphoneSms( playerid, number, string );
			}
		}
	}
	else if( dialogid == dialog_MOBTRANSFER ){
		if( !response ) return 1;
		else if( response ){
			new id, kolicina;
			if( sscanf( inputtext, "ui", id, kolicina ) ) return SPD( playerid, dialog_MOBTRANSFER, DSI, ""col_siva"Transfer Novca", ""col_siva"Unesite ID igraca i kolicinu novca koji zelite poslati.\n\n\
			"col_red"Error: Pogresan unos\n"col_siva"Primjer: 10 10000", "Posalji", "Odustani" );

			if( kolicina > PlayerInfo[ playerid ][ xBRacun ] || kolicina < 1 ) return SendErrorMessage( playerid, "Nemate toliko novaca" );
			if( id == IPI ) return SendErrorMessage( playerid, "Pogresan ID igraca." );
			if( !PlayerInfo[ id ][ xImaBRacun ] ) return SendErrorMessage( playerid, "Igrac nema racun u banci." );
			if( PlayerInfo[ playerid ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Morate biti level 5+." );
			if( PlayerInfo[ playerid ][ xAdmin ] < 1 && PlayerInfo[ id ][ xLevel ] < 5 ) return SendErrorMessage( playerid, "Igrac mora biti level 5+." );
			if( kolicina > 100000 ) return SendErrorMessage( playerid, "Svota novca ne smije ici preko 100.000$. Vece transfere obavljajte iskljucivo u banci!" );

			PlayerInfo[ playerid ][ xBRacun ] -= kolicina;
			PlayerInfo[ id ][ xBRacun ] += kolicina;
			PlayerMoneyTrackSave( playerid, MONEY_BANK, -kolicina, "Mob bank transfer" );
			PlayerMoneyTrackSave( id, MONEY_BANK, kolicina, "Mob bank transfer" );
			PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);

			sql_user_update_integer( playerid, "bank_money", PlayerInfo[ playerid ][ xBRacun ] );
			sql_user_update_integer( id, "bank_money", PlayerInfo[ id ][ xBRacun ] );

			SendMobileMessage( playerid, "Transfer uspjesan! Poslali ste %s: $%d", ImeIgraca( id ), kolicina );
			SendMobileMessage( id, "{00ffff}Banka: {AFAFAF}%s vam je poslao $%d", ImeIgraca( playerid ), kolicina );

			format( globalstring , sizeof( globalstring ), ""col_transfer"MOB TRANSFER | %s > %s [ %d$ ]", ImeIgraca( playerid ), ImeIgraca( id ), kolicina );
			AdminPoruka( 0xFFFFFFFF, globalstring );

			UpdateBankTD( playerid ); UpdateBankTD( id );
			new moneystr[16];

			format( moneystr, sizeof( moneystr ), "$%s", AddCommasToInt( PlayerInfo[ playerid ][ xBRacun ] ) );
			PlayerTextDrawSetString( playerid, ScreenBankP[ playerid ][0], moneystr );
			PlayerTextDrawShow( playerid, ScreenBankP[ playerid ][0] );

			if( SmartphoneShown[ id ] && WhatsOnScreen[ id ] == BANK ){
				format( moneystr, sizeof( moneystr ), "$%s", AddCommasToInt( PlayerInfo[ id ][ xBRacun ] ) );
				PlayerTextDrawSetString( id, ScreenBankP[ id ][0], moneystr );
				PlayerTextDrawShow( id, ScreenBankP[ id ][0] );
			}

			new string[ 128 ];
			format( string, sizeof( string ), "Mobtransfer | Igrac %s -> Igrac: %s | Novac: %d", ImeIgraca( playerid ), ImeIgraca( id ), kolicina );
			LogSave( "Ostalo/LogTransfer.log", string );
		}
	}
	else if( dialogid == dialog_VIEWSMS ){
		if( !response ) return 1;
		else if( response ){
			new string[ MAX_SMS_CHAR ];
			if( sscanf( inputtext, "s[128]", string ) ) return OpenMessage( playerid, GledaPorukuIgraca[ playerid ][ 1 ] );
			SmartphoneSms( playerid, PlayerInfo[ GledaPorukuIgraca[ playerid ][ 0 ] ][ xBrojTelefona ], string );
		}
	}
	else if( dialogid == dialog_RENTANJE2 ){
		if( !response ) return 1;
		if( response ) {
			new time;
			if( sscanf( inputtext, "i", time ) ) return Rentanje( playerid, 0, RentModel[ playerid ] );
			Rentanje( playerid, 3, RentModel[ playerid ], time );
		}
	}
	else if( dialogid == dialog_LOSTPW ){
		if( !response ) return Login( playerid );
		else if( response ){
			new mailstring = strfind( inputtext, "@", true), tackastring = strfind( inputtext, ".", true );
			if( mailstring == -1 || tackastring == -1) return SPD( playerid, dialog_LOSTPW, DSI, ""col_server"Izgubljena Lozinka", ""col_white"Unesite e-mail na kojem je registriran vas account.\n\n\
			"col_red"Ukoliko ste zaboravili e-mail ili nemate pristup istom zatrazite vracanje lozinke na forumu.\n\
			"col_white"Adresa naseg foruma je: "col_server"croherze.com/forum\n\n\
			"col_red"Error: "col_white"Nepravilan unos.", "Potvrdi", "Odustani" );

			if( !strcmp( inputtext, PlayerInfo[ playerid ][ xEmail ], false ) && !isnull( inputtext ) ) {

				new novalozinka[ 32 ];
				new randombroj = 100000 + random(899999);
				format( novalozinka, sizeof( novalozinka ), "%d", randombroj );

				#if MAILER_ENABLED == 1
				SendMail( playerid, TYPE_RECOVERY, MAILER_SENDER, inputtext, "CH:RP - Lozinka", randombroj );
				#endif

				new hash_pass[ 65 ];
				SHA256_PassHash( novalozinka, ImeIgraca( playerid ), hash_pass, sizeof hash_pass );

				strmid( PlayerInfo[ playerid ][ xLozinka ], hash_pass, 0, strlen( hash_pass ), 255 );
				sql_user_update_string( playerid, "password", PlayerInfo[ playerid ][ xLozinka ] );

				new playersip[ 128 ];
       			GetPlayerIp( playerid, playersip, sizeof( playersip ) );

				new string[240];
				format( string, sizeof( string ), "IP: %s | Igrac %s je zatrazio promjenu lozinke. Mail: %s Lozinka: %s", playersip, ImeIgraca( playerid ), inputtext, hash_pass );
				LogSave( "Ostalo/LogPromjenaLozinke.log", string );

				SPD( playerid, 0, DSMSG, D_NASLOV, ""col_white"Nova lozinka poslana je na vas e-mail!\nProvjerite ga i ponovo se ulogirajte s novom lozinkom!", "Ok", "" );
				KGEyes_Kick( playerid );
			}
			else return SPD( playerid, dialog_LOSTPW, DSI, ""col_server"Izgubljena Lozinka", ""col_white"Unesite e-mail na kojem je registriran vas account.\n\n\
			"col_red"Ukoliko ste zaboravili e-mail ili nemate pristup istom zatrazite vracanje lozinke na forumu.\n\
			"col_white"Adresa naseg foruma je: "col_server"croherze.com/forum\n\n\
			"col_red"Error: "col_white"Uneseni e-mail se ne podudara sa registriranim.", "Potvrdi", "Odustani" );
		}
	}
	else if( dialogid == dialog_EVENTLIST ){
		if( !response ) return 1;
		else if( response ) {
			switch( listitem ) {
				case 0: { // Race
				 	strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					EventStranica[ playerid ] = 10;
					for( new i = 1; i <= 10; i++ ) {
						format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, Event[ i ][ Name ] );
					}
					format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->", DialogStrgEx );
					SPD( playerid, dialog_EVENTSTART, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 1: { // Crash
					EventInfo[ ec_Started ] = 1;
					EventInfo[ edr_Started ] = 0;
					EventInfo[ Drivers ] = 0;
					EventInfo[ eID ] = 0;
					EventInfo[ EventCrash ] = MAX_TIME;

					SCMA( -1, ""col_event"| CRASH EVENT | "col_white"je poceo, imate "col_event"20"col_white" sekundi da se pridruzite "col_event"[ /join ]." );
					format( globalstring, sizeof( globalstring ), ""col_unload"[Ucitavanje eventa] %s | Crash", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
				}
				case 2: { // Shooter
					EventInfo[ ec_Started ] = 0;
					EventInfo[ es_Started ] = 1;
					EventInfo[ edr_Started ] = 0;
					EventInfo[ et_Started ] = 0;
					EventInfo[ Drivers ] = 0;
					EventInfo[ eID ] = 0;
					EventInfo[ EventShooter ] = MAX_TIME;

					SCMA( -1, ""col_event"| SHOOTER EVENT | "col_white"je poceo, imate "col_event"20"col_white" sekundi da se pridruzite "col_event"[ /join ]." );
					format( globalstring, sizeof( globalstring ), ""col_unload"[Ucitavanje eventa] %s | Shooter", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
				}
				case 3: { // PUBG
					if( LiveEventInfo[ le_id ] != 0 ) return SendErrorMessage( playerid, "Jedan live event je vec u toku." );
					LoadingEvent[ playerid ][ eChoose ] = EVENT_PUBG;
					SPD( playerid, dialog_EVENTSTART_PLAYERS, DSI, D_NASLOV, ""col_server"Broj igraca\n\n"col_white"Unesite broj igraca koji ce biti limit ljudi na eventu", "Potvrdi", "Odustani" );
				}
				case 4: { // VS Turnir
					//return SendErrorMessage( playerid, "Trenutno onemoguceno." );
					if( LiveEventInfo[ le_id ] != 0 ) return SendErrorMessage( playerid, "Jedan live event je vec u toku." );
					LoadingEvent[ playerid ][ eChoose ] = EVENT_VS;
					SPD( playerid, dialog_EVENTSTART_PLAYERS, DSI, D_NASLOV, ""col_server"Broj igraca\n\n"col_white"Unesite paran broj igraca koji ce biti limit ljudi na eventu", "Potvrdi", "Odustani" );
				}
				case 5: { // Team Deathmatch
					if( LiveEventInfo[ le_id ] != 0 ) return SendErrorMessage( playerid, "Jedan live event je vec u toku." );
					LoadingEvent[ playerid ][ eChoose ] = EVENT_TDM;
					SPD( playerid, dialog_EVENTSTART_PLAYERS, DSI, D_NASLOV, ""col_server"Broj igraca\n\n"col_white"Unesite paran broj igraca koji ce biti limit ljudi na eventu", "Potvrdi", "Odustani" );
				}
				case 6: { // Custom Event
					if( LiveEventInfo[ le_id ] != 0 ) return SendErrorMessage( playerid, "Jedan live event je vec u toku." );
					LoadingEvent[ playerid ][ eCustom ] = true;
					SPD( playerid, dialog_EVENTSTART_NAME, DSI, D_NASLOV, ""col_server"Ime eventa\n\n"col_white"Unesite ime eventa koji organizirate", "Potvrdi", "Odustani" );
				}
				case 7: { // Tank
					EventInfo[ ec_Started ] = 0;
					EventInfo[ es_Started ] = 0;
					EventInfo[ et_Started ] = 1;
					EventInfo[ edr_Started ] = 0;
					EventInfo[ Drivers ] = 0;
					EventInfo[ eID ] = 0;
					EventInfo[ EventTank ] = MAX_TIME;

					SCMA( -1, ""col_event"| TANK EVENT | "col_white"je poceo, imate "col_event"20"col_white" sekundi da se pridruzite "col_event"[ /join ]." );
					format( globalstring, sizeof( globalstring ), ""col_unload"[Ucitavanje eventa] %s | Tank", ImeIgraca( playerid ) );
					AdminPoruka( 0xFFFFFFFF, globalstring );
				}
				
			}
		}
	}
	else if( dialogid == dialog_EVENTSTART_PLAYERS ){
		if( !response ) return cmd_eucitaj( playerid );
		else if( response ){

			if( LiveEventInfo[ le_id ] != 0 ) return SendErrorMessage( playerid, "Jedan live event je vec ucitan!" );

			new playerlimit;
			if( sscanf( inputtext, "i", playerlimit ) ) return SPD( playerid, dialog_EVENTSTART_PLAYERS, DSI, D_NASLOV,
			""col_server"Broj igraca\n\n"col_white"Unesite broj igraca koji ce biti limit ljudi na eventu\n"col_red"Error: Nepravilan unos!", "Potvrdi", "Odustani" );
			if( playerlimit < 2 || playerlimit > MAX_EVENT_PLAYERS ) return SPD( playerid, dialog_EVENTSTART_PLAYERS, DSI, D_NASLOV,
			""col_server"Broj igraca\n\n"col_white"Unesite broj igraca koji ce biti limit ljudi na eventu\n"col_red"Error: Broj igraca ne moze biti manji od 2 ili veci od 50!", "Potvrdi", "Odustani" );

			if( LoadingEvent[ playerid ][ eCustom ] ){
				LoadingEvent[ playerid ][ ePlayers ] = playerlimit;
				SendClientMessageEx( playerid, BELA, ""col_event"[LIVE EVENT] Limit igraca je postavljen na %d", playerlimit );
				SendClientMessageEx( playerid, BELA, ""col_event"[LIVE EVENT] Sad spremi mjesto gdje ce se igraci portati komandom /lesave" );
			}

			switch( LoadingEvent[ playerid ][ eChoose ] ){
				case EVENT_VS, EVENT_FOOTBALL: {
					if( playerlimit % 2 != 0 ) return SPD( playerid, dialog_EVENTSTART_PLAYERS, DSI, D_NASLOV,
					""col_server"Broj igraca\n\n"col_white"Unesite paran broj igraca koji ce biti limit ljudi na eventu\n"col_red"Error: Uneseni broj nije paran!", "Potvrdi", "Odustani" );

					LoadLiveEvent( LoadingEvent[ playerid ][ eChoose ], playerid, playerlimit );
				}
				case EVENT_TDM: {
					//LoadingEvent[ playerid ][ ePlayers ] = playerlimit;
					LoadLiveEvent( LoadingEvent[ playerid ][ eChoose ], playerid, playerlimit );
					//SPD( playerid, dialog_EVENTSTART_MAP, DSL, "Izaberi mapu", "Mapa 1 - Abandoned\nMapa 2 - RC Battlefield\nMapa 3 - Skladiste\nMapa 4 - United\nMapa 5 - Farma\nMapa 6 - Farma 2", "Odaberi", "Ponisti");
				}
				case EVENT_PUBG: {
					LoadLiveEvent( LoadingEvent[ playerid ][ eChoose ], playerid, playerlimit );
				}
			}
		}
	}
	else if( dialogid == dialog_EVENTSTART_MAP ) {
		if( !response ) return 1;
		else if( response ){

			if( LiveEventInfo[ le_id ] != 0 ) return SendErrorMessage( playerid, "Jedan live event je vec ucitan!" );

			Event_TDM_info[ TDM_map ] = listitem + 1;
			LoadLiveEvent( LoadingEvent[ playerid ][ eChoose ], playerid, LoadingEvent[ playerid ][ ePlayers ] );
		}
	}
	else if( dialogid == dialog_EVENTSTART_NAME ){
		if( !response ) return 1;
		else if( response ){
			if( sscanf( inputtext, "s[24]", LoadingEvent[ playerid ][ eName ] ) ) {
				return SPD( playerid, dialog_EVENTSTART_NAME, DSI, D_NASLOV, ""col_server"Ime eventa\n\n"col_white"Unesite ime eventa koji organizirate\n"col_red"Error: Nepravilan unos!", "Potvrdi", "Odustani" );
			}
			SPD( playerid, dialog_EVENTSTART_PLAYERS, DSI, D_NASLOV, ""col_server"Broj igraca\n\n"col_white"Unesite broj igraca koji ce biti limit ljudi na eventu", "Potvrdi", "Odustani" );
		}
	}
	else if( dialogid == dialog_ODABIR_TARIFE ){
		if( !response ) cmd_tarife( playerid );
		else if( response ){
			SmartphoneInfo[ playerid ][ Tarifa ] = TempDialogValue[ playerid ];
			sql_update_smartphone( playerid, "tarifa", SmartphoneInfo[ playerid ][ Tarifa ] );
			SendInfoMessage( playerid, "Uspjesno ste aktivirali tarifu '%s'!", TarifeInfo[ TempDialogValue[ playerid ] ][ t_name ] );
			TempDialogValue[ playerid ] = 0;
		}
	}
	else if( dialogid == dialog_INTERACTIVE_PICKUP ) {
		if( !response ) return 1;
		else if( response ){
			new pickupid = IsPlayerNearInteractivePickup( playerid );
			if( pickupid == -1 ) return 1;

			switch( InteractivePickup[ pickupid ][ IP_namjena ] ){
				case BILBORD: {
					new bilbordtext[128];
					if( sscanf( inputtext, "s[128]", bilbordtext ) ) return SPD( playerid, dialog_INTERACTIVE_PICKUP, DSI, D_NASLOV, ""col_white"Unesite text bilborda.\n"col_red"Error: Nepravilan unos!", "Potvrdi", D_ODUSTANI );
					cmd_bilbord( playerid, bilbordtext );
				}
				case PRODAJZLATO: {
					new kolicina, kolicinastr[12];
					if( sscanf( inputtext, "i", kolicina ) ) {
						new string[156];
						format( string, sizeof( string ), ""col_white"Unesite kolicinu zlata koju zelite prodati.\nTrenutna cijena zlata je "col_zenolo"%d$ "col_white"za 1g zlata.\n"col_red"Erorr: Nepravilan unos!", ServerInfo[ PCZlata ] );
						SPD( playerid, dialog_INTERACTIVE_PICKUP, DSI, D_NASLOV, string, "Potvrdi", D_ODUSTANI );
						return 1;
					}
					format( kolicinastr, sizeof( kolicinastr ), "%d", kolicina );
					cmd_prodajzlato( playerid, kolicinastr );
				}
				case MECHANIC: {
					switch( listitem ){
						case 0: cmd_mechanic( playerid, "alarm" );
						case 1: cmd_mechanic( playerid, "immob" );
						case 2: cmd_mechanic( playerid, "brava" );
						case 3: cmd_mechanic( playerid, "kljuc" );
						case 4: cmd_mechanic( playerid, "mot" );
					}
				}
				case AUTOSKOLA: {
					switch( listitem ){
						case 0: cmd_kupidozvolu( playerid, "A" );
						case 1: cmd_kupidozvolu( playerid, "B" );
						case 2: cmd_kupidozvolu( playerid, "C1" );
						case 3: cmd_kupidozvolu( playerid, "C2" );
						case 4: cmd_kupidozvolu( playerid, "C3" );
						case 5: cmd_kupidozvolu( playerid, "brod" );
						case 6: cmd_kupidozvolu( playerid, "avion" );
					}
				}
				case TELEKOM_TARIFE: {

					if( listitem < 5 ) {
						if( SmartphoneInfo[ playerid ][ Tarifa ] > 0 ) return SendErrorMessage( playerid, "Vi vec imate aktiviranu tarifu. Prvo raskinite ugovor prethodne." );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
						new tempstring[280];

						format( tempstring, sizeof( tempstring ),
							""col_server"Tarifa '%s' - %dG\n\n\
							"col_white"Aktivacijom ove tarife dobivate uslugu 'Imenik2Go' kojom vise ne morate brinuti o brojevima nego pri\n\
							primitku poruka i poziva vidite ime, te isto tako mozete kontaktirati osobu koju zelite samo putem imena.\n\n", TarifeInfo[ listitem+1 ][ t_name ], TarifeInfo[ listitem+1 ][ t_generation ] );
						strcat( DialogStrgEx, tempstring );

						switch( listitem ){
							case 0, 1, 2, 3: {
								format( tempstring, sizeof( tempstring ), "Cijena poziva: $%d po minuti\nCijena poruke: $%d\n", TarifeInfo[ listitem+1 ][ t_call_price ], TarifeInfo[ listitem+1 ][ t_sms_price ] );
								strcat( DialogStrgEx, tempstring );
								if( listitem == 2 || listitem == 3 ) {
									format( tempstring, sizeof( tempstring ), "Dobivate %d besplatnih minuta poziva i %d besplatnih poruka\n", TarifeInfo[ listitem+1 ][ t_free_call ]/60, TarifeInfo[ listitem+1 ][ t_free_sms ] );
									strcat( DialogStrgEx, tempstring );
								}
							}
							case 4: {
								strcat( DialogStrgEx, "Pozivi i poruke su u potpunosti besplatni.\n" );
							}

						}
						format( tempstring, sizeof( tempstring ), "Cijena tarife je $%d i naplacuje se automatski po primitku plate!", TarifeInfo[ listitem+1 ][ t_price ] );
						strcat( DialogStrgEx, tempstring );

						TempDialogValue[ playerid ] = listitem+1;

						SPD( playerid, dialog_ODABIR_TARIFE, DSMSG, "Ugovor o koristenju usluge", DialogStrgEx, "Potpisujem", D_ODUSTANI );
					}
					else { // Raskid ugovora
						if( SmartphoneInfo[ playerid ][ Tarifa ] > 0 ) {

							SmartphoneInfo[ playerid ][ Tarifa ] = 0;
							new price = GetPlayerSmsTrafficCharge( playerid ) + GetPlayerCallTrafficCharge( playerid );
							KGEyes_GivePlayerMoney( playerid, -price ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, -price, "Raskid telekom ugovora" );

							SmartphoneStats[ playerid ][ sent_sms ] = 0;
							SmartphoneStats[ playerid ][ call_seconds ] = 0;

							sql_update_smartphone( playerid, "sent_sms", SmartphoneStats[ playerid ][ sent_sms ] );
							sql_update_smartphone( playerid, "call_seconds", SmartphoneStats[ playerid ][ call_seconds ] );
							sql_update_smartphone( playerid, "tarifa", SmartphoneInfo[ playerid ][ Tarifa ] );

							SendInfoMessage( playerid, "Raskinuli ste ugovor i platili preostale troskove koristenja usluge u iznosu od $%d", price );

						}
						else return SendErrorMessage( playerid, "Vi nemate aktivnu tarifu." );

					}
				}
			}
		}
	}
	else if( dialogid == dialog_TRADE_TYPES ){
		if( !response ) return 1;
		else if( response ){
			new slot = TempDialogValue[ playerid ];
			Trade_Slots[ playerid ][ slot ][ Item_Type ] = listitem+1;

			if( Trade_Slots[ playerid ][ slot ][ Item_Type ] == TRADE_TYPE_MONEY ) {
				if( Trade_IsItemSet( playerid, TRADE_TYPE_MONEY ) ) return SendErrorMessage( playerid, "Vec ste stavili novac u trade!" );
				SPD( playerid, dialog_TRADE_ID, DSI, "Trade - Novac", ""col_white"Unesite kolicinu novca koju zelite staviti u trade.", "Potvrdi", D_ODUSTANI );
			}
			else if( Trade_Slots[ playerid ][ slot ][ Item_Type ] == TRADE_TYPE_CHC ) {
				if( Trade_IsItemSet( playerid, TRADE_TYPE_CHC ) ) return SendErrorMessage( playerid, "Vec ste stavili CHC u trade!" );
				SPD( playerid, dialog_TRADE_ID, DSI, "Trade - CH Coins", ""col_white"Unesite kolicinu CH Coinsa koju zelite staviti u trade.", "Potvrdi", D_ODUSTANI );
			}
			else if( Trade_Slots[ playerid ][ slot ][ Item_Type ] == TRADE_TYPE_VEH ) {

				new string[ 240 ], bool:found = false;
				format( string, sizeof( string ), "Slot\tIme vozila\tID Vozila" );

				for( new j = 0; j < MAX_VEH_SLOT; j ++ ) {
					if( (j+1) <= PlayerInfo[ playerid ][ xSlotoviVozila ] ) {

						if( player_veh[ playerid ][ vehicle_id ][ j ] != -1  ) {

							format( string, sizeof( string ), "%s\n%d\t%s\t%d", string, j+1, getVehicleName( player_veh[ playerid ][ vehicle_id ][ j ] ), player_veh[ playerid ][ vehicle_id ][ j ] );
							found = true;
						}
						else format( string, sizeof( string ), "%s\n%d\tPRAZAN\t-1", string, j+1 );
					}
				}
				if( found ) SPD( playerid, dialog_TRADE_ID, DIALOG_STYLE_TABLIST_HEADERS, "Trade - Vozila | Odaberi vozilo", string, D_ODABERI, D_ODUSTANI );
				else return SendErrorMessage( playerid, "Vi nemate nijedno vozilo!" );
			}
			else if( Trade_Slots[ playerid ][ slot ][ Item_Type ] == TRADE_TYPE_PROPERTY ){

				if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 && PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 && PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) return SendErrorMessage( playerid, "Vi nemate imovine!" );

				new string[ 192 ];
				format( string, sizeof( string ), "Slot\tIme imovine\tID\n" );
				format( string, sizeof( string ), "%s1\t%s\t%d\n", string, GetPropertyAName( PlayerInfo[ playerid ][ xProperty ][ 0 ] ), PlayerInfo[ playerid ][ xProperty ][ 0 ] );
				format( string, sizeof( string ), "%s2\t%s\t%d\n", string, GetPropertyAName( PlayerInfo[ playerid ][ xProperty ][ 1 ] ), PlayerInfo[ playerid ][ xProperty ][ 1 ] );
				format( string, sizeof( string ), "%s3\t%s\t%d\n", string, GetPropertyAName( PlayerInfo[ playerid ][ xProperty ][ 2 ] ), PlayerInfo[ playerid ][ xProperty ][ 2 ] );

				SPD( playerid, dialog_TRADE_ID, DIALOG_STYLE_TABLIST_HEADERS, "Trade - Imovina | Odaberi imovinu", string, D_ODABERI, D_ODUSTANI );
			}
			else if( Trade_Slots[ playerid ][ slot ][ Item_Type ] == TRADE_TYPE_BUSSINES ){
				if( PlayerInfo[ playerid ][ xFirmaID ] == -1 ) return SendErrorMessage( playerid, "Vi nemate firmu!" );
				if( Trade_IsItemSet( playerid, TRADE_TYPE_BUSSINES, PlayerInfo[ playerid ][ xFirmaID ] ) ) return SendErrorMessage( playerid, "Vec ste stavili firmu u trade!" );
				else {
					Trade_Slots[ playerid ][ slot ][ Item_ID ] = PlayerInfo[ playerid ][ xFirmaID ];
					Trade_SetItem( playerid, slot, TRADE_TYPE_BUSSINES, Trade_Slots[ playerid ][ slot ][ Item_ID ] );
				}
			}
			else if( Trade_Slots[ playerid ][ slot ][ Item_Type ] == TRADE_TYPE_GARAGE ){
				if( PlayerInfo[ playerid ][ xGarageID ] == -1 ) return SendErrorMessage( playerid, "Vi nemate garazu!" );
				if( Trade_IsItemSet( playerid, TRADE_TYPE_GARAGE, PlayerInfo[ playerid ][ xGarageID ] ) ) return SendErrorMessage( playerid, "Vec ste stavili garazu u trade!" );
				else {
					Trade_Slots[ playerid ][ slot ][ Item_ID ] = PlayerInfo[ playerid ][ xGarageID ];
					Trade_SetItem( playerid, slot, TRADE_TYPE_GARAGE, Trade_Slots[ playerid ][ slot ][ Item_ID ] );
				}
			}
			else if( Trade_Slots[ playerid ][ slot ][ Item_Type ] == TRADE_TYPE_STREET ){
				if( PlayerInfo[ playerid ][ xStreetID ] == -1 ) return SendErrorMessage( playerid, "Vi nemate ulicu!" );
				if( Trade_IsItemSet( playerid, TRADE_TYPE_STREET, PlayerInfo[ playerid ][ xStreetID ] ) ) return SendErrorMessage( playerid, "Vec ste stavili ulicu u trade!" );
				else {
					Trade_Slots[ playerid ][ slot ][ Item_ID ] = PlayerInfo[ playerid ][ xStreetID ];
					Trade_SetItem( playerid, slot, TRADE_TYPE_STREET, Trade_Slots[ playerid ][ slot ][ Item_ID ] );
				}
			}
			else if( Trade_Slots[ playerid ][ slot ][ Item_Type ] == TRADE_TYPE_HOTEL ){
				if( PlayerInfo[ playerid ][ xHotelID ] == -1 ) return SendErrorMessage( playerid, "Vi nemate hotel!" );
				if( Trade_IsItemSet( playerid, TRADE_TYPE_HOTEL, PlayerInfo[ playerid ][ xHotelID ] ) ) return SendErrorMessage( playerid, "Vec ste stavili hotel u trade!" );
				else {
					Trade_Slots[ playerid ][ slot ][ Item_ID ] = PlayerInfo[ playerid ][ xHotelID ];
					Trade_SetItem( playerid, slot, TRADE_TYPE_HOTEL, Trade_Slots[ playerid ][ slot ][ Item_ID ] );
				}
			}
		}
	}
	else if( dialogid == dialog_TRADE_ID ){
		if( !response ) return 1;
		else if( response ){
			new slot = TempDialogValue[ playerid ];

			if( Trade_Slots[ playerid ][ slot ][ Item_Type ] == TRADE_TYPE_MONEY ) {
				new novac;
				if( sscanf( inputtext, "i", novac ) ) return SPD( playerid, dialog_TRADE_ID, DSI, "Trade - Novac", "Unesite kolicinu novca koju zelite staviti u trade.\n"col_red"Error: Nepravilan unos!", "Potvrdi", D_ODUSTANI );
				if( novac < 1 || novac > 10000000 ) return SendErrorMessage( playerid, "Ne mozes staviti manje od $1 ili vise od $10.000.000 u trade!" );
				if( novac > PlayerInfo[ playerid ][ xNovac ] ) return SendErrorMessage( playerid, "Nemate toliko novca!" );
				Trade_SetItem( playerid, slot, TRADE_TYPE_MONEY, novac );
			}
			else if( Trade_Slots[ playerid ][ slot ][ Item_Type ] == TRADE_TYPE_CHC ){
				new chc;
				if( sscanf( inputtext, "i", chc ) ) return SPD( playerid, dialog_TRADE_ID, DSI, "Trade - CH Coins", "Unesite kolicinu CH Coinsa koju zelite staviti u trade.\n"col_red"Error: Nepravilan unos!", "Potvrdi", D_ODUSTANI );
				if( chc < 1 || chc > 100000 ) return SendErrorMessage( playerid, "Ne mozes staviti manje od 1 ili vise od 100000 CHC u trade!" );
				if( chc > PlayerInfo[ playerid ][ xCHCoins ] ) return SendErrorMessage( playerid, "Nemate toliko CH Coinsa!" );
				Trade_SetItem( playerid, slot, TRADE_TYPE_CHC, chc );
			}
			else if( Trade_Slots[ playerid ][ slot ][ Item_Type ] == TRADE_TYPE_VEH ){
				if( Trade_IsItemSet( playerid, TRADE_TYPE_VEH, player_veh[ playerid ][ vehicle_id ][ listitem ] ) ) return SendErrorMessage( playerid, "Vec ste stavili ovo vozilo u trade!" );
				if( player_veh[ playerid ][ vehicle_id ][ listitem ] != -1 ) Trade_SetItem( playerid, slot, TRADE_TYPE_VEH, player_veh[ playerid ][ vehicle_id ][ listitem ] );
			}
			else if( Trade_Slots[ playerid ][ slot ][ Item_Type ] == TRADE_TYPE_PROPERTY ){
				if( Trade_IsItemSet( playerid, TRADE_TYPE_PROPERTY, PlayerInfo[ playerid ][ xProperty ][ listitem ] ) ) return SendErrorMessage( playerid, "Vec ste stavili ovu imovinu u trade!" );
				if( PlayerInfo[ playerid ][ xProperty ][ listitem ] > 0 ) Trade_SetItem( playerid, slot, TRADE_TYPE_PROPERTY, PlayerInfo[ playerid ][ xProperty ][ listitem ] );
			}
		}
	}
	else if( dialogid == dialog_LOCATENEAREST ){
		if( !response ) return SPD( playerid, dialog_GPS_FIND, DSL, "GPS", "Poslovi\nVazne Lokacije\nOrganizacije\nFirme\nKuce\nNajbliza lokacija", D_ODABERI, D_ODUSTANI );
		else if( response ){
			LocateNearestItem( playerid, listitem );
		}
	}
	else if( dialogid == dialog_BLOCKLIST ){
		if( !response ) return 1;
		else if( response ){
			if( listitem == 0 ) SPD( playerid, dialog_ADDTOBL, DSI, ""col_siva"Dodavanje na block listu", ""col_white"Unesite broj koji zelite blokirati.", D_ODABERI, D_ODUSTANI );
			else if( SmartphoneInfo[ playerid ][ Blocked ][ listitem-1 ] != 0 ) {
				TempDialogValue[ playerid ] = listitem;
				format( globalstring, sizeof( globalstring ), ""col_white"Zelite li maknuti broj %d sa block liste?", SmartphoneInfo[ playerid ][ Blocked ][ listitem-1 ] );
				SPD( playerid, dialog_REMOVEFROMBL, DSMSG, ""col_siva"Uklanjanje sa block liste", globalstring, "Potvrdi", D_ODUSTANI );
			}
		}
	}
	else if( dialogid == dialog_ADDTOBL ){
		if( !response ) return OnPlayerClickPlayerTextDraw( playerid, ScreenSettingsP[playerid][2] );
		else if( response ){
			new broj, found = -1;
			if( sscanf( inputtext, "i", broj ) ) return SPD( playerid, dialog_ADDTOBL, DSI, ""col_siva"Dodavanje na block listu", ""col_white"Unesite broj koji zelite blokirati.\n"col_red"Error: Nepravilan unos", D_ODABERI, D_ODUSTANI );
			if( broj == PlayerInfo[ playerid ][ xBrojTelefona ] ) return SendErrorMessage( playerid, "Ne mozes blokirati svoj broj!" );
			for( new i=0; i < 10; i++ ){
				if( SmartphoneInfo[ playerid ][ Blocked ][ i ] == broj ) return SendErrorMessage( playerid, "Broj je vec blokiran!" );
				else if( SmartphoneInfo[ playerid ][ Blocked ][ i ] == 0 && found == -1 ){
					found = i;
				}
			}
			if( found >= 0 ){
				SmartphoneInfo[ playerid ][ Blocked ][ found ] = broj;
				new string[ 128 ];
				format( string, sizeof( string ), "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d",
					SmartphoneInfo[ playerid ][ Blocked ][ 0 ],
					SmartphoneInfo[ playerid ][ Blocked ][ 1 ],
					SmartphoneInfo[ playerid ][ Blocked ][ 2 ],
					SmartphoneInfo[ playerid ][ Blocked ][ 3 ],
					SmartphoneInfo[ playerid ][ Blocked ][ 4 ],
					SmartphoneInfo[ playerid ][ Blocked ][ 5 ],
					SmartphoneInfo[ playerid ][ Blocked ][ 6 ],
					SmartphoneInfo[ playerid ][ Blocked ][ 7 ],
					SmartphoneInfo[ playerid ][ Blocked ][ 8 ],
					SmartphoneInfo[ playerid ][ Blocked ][ 9 ] );

				new query[ 192 ];
				mysql_format( _dbConnector, query, sizeof( query ), "UPDATE `smartphones` SET `blocklist` = '%s' WHERE `user_id` = '%d'", string, PlayerInfo[ playerid ][ xID ] );
				mysql_pquery( _dbConnector, query, "", "" );

				SendMobileMessage( playerid, "Broj %d dodan na block listu i vise vas nece moci kontaktirati!", broj );
			}
			else if( found == -1 ) return SendErrorMessage( playerid, "Svi slotovi block liste su zauzeti!" );
		}
	}
	else if( dialogid == dialog_REMOVEFROMBL ){
		if( !response ) return OnPlayerClickPlayerTextDraw( playerid, ScreenSettingsP[playerid][2] );
		else if( response ){
			SendMobileMessage( playerid, "Broj %d uklonjen sa block liste!", SmartphoneInfo[ playerid ][ Blocked ][ TempDialogValue[ playerid ]-1 ] );
			SmartphoneInfo[ playerid ][ Blocked ][ TempDialogValue[ playerid ]-1 ] = 0;
			new string[ 128 ];
			format( string, sizeof( string ), "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d",
				SmartphoneInfo[ playerid ][ Blocked ][ 0 ],
				SmartphoneInfo[ playerid ][ Blocked ][ 1 ],
				SmartphoneInfo[ playerid ][ Blocked ][ 2 ],
				SmartphoneInfo[ playerid ][ Blocked ][ 3 ],
				SmartphoneInfo[ playerid ][ Blocked ][ 4 ],
				SmartphoneInfo[ playerid ][ Blocked ][ 5 ],
				SmartphoneInfo[ playerid ][ Blocked ][ 6 ],
				SmartphoneInfo[ playerid ][ Blocked ][ 7 ],
				SmartphoneInfo[ playerid ][ Blocked ][ 8 ],
				SmartphoneInfo[ playerid ][ Blocked ][ 9 ] );

			new query[ 192 ];
			mysql_format( _dbConnector, query, sizeof( query ), "UPDATE `smartphones` SET `blocklist` = '%s' WHERE `user_id` = '%d'", string, PlayerInfo[ playerid ][ xID ] );
			mysql_pquery( _dbConnector, query, "", "" );
		}
	}
	else if( dialogid == dialog_FIRMEFAQ ){
		if( !response ) return 1;
		else if( response ){
			new DialogStrgEx2[ 4000 ], vrstafirme[24];
			switch( listitem ){
				case 0: {
					vrstafirme = "Poslovna firma";
					strcat( DialogStrgEx2, ""col_white"Svaki put kad netko odradi turu posla u firmu ide zarada.\n" );
					strcat( DialogStrgEx2, "Tu spadaju: Voz Skljunka, Komunalac, Pilot, Farmer, Bus Vozac, Rudar, Voz Drveca, Pepsi Dostavljac, Kosac Trave,\n" );
					strcat( DialogStrgEx2, "Voz Goriva, Gradevinar, Wallmart dostava, Vatrogasac, Vlakovoda, Grobar, Elektricar, Mehanicar i Sumar" );
					strcat( DialogStrgEx2, "\n\nZarada: $500 po turi" );
				}
				case 1: {
					vrstafirme = "Ducani";
					strcat( DialogStrgEx2, ""col_white"Kad netko kupi nesto iz trgovine 80 posto tog iznosa ide u sef firme.\n\
					Postoje svega 6 ducana u cijeloj drzavi, mozete ih pronaci komandom /gps." );
					strcat( DialogStrgEx2, "\n\nZarada: 80% od kupljenog." );
				}
				case 2: {
					vrstafirme = "Burg";
					strcat( DialogStrgEx2, ""col_white"Kad netko uradi posao pizza boy u sve firme u drzavi koje su burgovi i chickenbellovi ide u sef 500$ bez obzira gdje se ona nalazila.\n\
					Postoji svega 3 burga u drzavi, mozete ih pronaci komandom /gps." );
					strcat( DialogStrgEx2, "\n\nZarada: 500$." );
				}
				case 3: {
					vrstafirme = "Bar";
					strcat( DialogStrgEx2, ""col_white"Kad netko kupi nesto iz bara 80 posto tog iznosa ide u sef firme.\n\
					Postoje svega 6 barova u drzavi.\n\
					INFO: uskoro posao dostavljac alkohola uz kojeg ce svi barovi, nocni klubovi, disco i javna kuca imati dodatnu zaradu od 500$ po svakoj odradenoj turi posla." );
					strcat( DialogStrgEx2, "\n\nZarada: 80% od kupljenog." );
				}
				case 4: {
					vrstafirme = "Gym";
					strcat( DialogStrgEx2, ""col_white"Kad netko plati gymu da bi naucio neku od ponudenih borilackih vjestina, 80 posto tog iznosa ide u sef firme.\n\
					Postoji 1 gym u drzavi, mozete ga pronaci komandom /gps." );
					strcat( DialogStrgEx2, "\n\nZarada: 80% od placenog." );
				}
				case 5: {
					vrstafirme = "Gun Shop";
					strcat( DialogStrgEx2, ""col_white"Kad netko kupi oruzje 50 posto iznosa cijene ide u sef firme.\n\
					Postoji svega 6 gun shopova u drzavi, mozete ga pronaci komandom /gps." );
					strcat( DialogStrgEx2, "\n\nZarada: 50% od kupljenog." );
				}
				case 6: {
					vrstafirme = "Nocni klub";
					strcat( DialogStrgEx2, ""col_white"Kad netko koristi usluge kluba 80 posto iznosa cijene ide u sef firme.\n\
					Postoji 1 nocni klub u drzavi, mozete ga pronaci komandom /gps.\n\
					INFO: uskoro posao dostavljac alkohola uz kojeg ce svi barovi, nocni klubovi, disco i javna kuca imati dodatnu zaradu od 500$ po svakoj odradenoj turi posla." );
					strcat( DialogStrgEx2, "\n\nZarada: 80% od kupljenog." );
				}
				case 7: {
					vrstafirme = "Disco";
					strcat( DialogStrgEx2, ""col_white"Kad netko koristi usluge disca 80 posto iznosa cijene ide u sef firme.\n\
					Postoji 1 disco u drzavi, mozete ga pronaci komandom /gps.\n\
					INFO: uskoro posao dostavljac alkohola uz kojeg ce svi barovi, nocni klubovi, disco i javna kuca imati dodatnu zaradu od 500$ po svakoj odradenoj turi posla." );
					strcat( DialogStrgEx2, "\n\nZarada: 80% od kupljenog." );
				}
				case 8: {
					vrstafirme = "Javna kuca";
					strcat( DialogStrgEx2, ""col_white"Kad netko koristi usluge javne kuce 80 posto iznosa cijene ide u sef firme.\n\
					Postoji 1 javna kuca u drzavi, mozete ju pronaci komandom /gps.\n\
					INFO: uskoro posao dostavljac alkohola uz kojeg ce svi barovi, nocni klubovi, disco i javna kuca imati dodatnu zaradu od 500$ po svakoj odradenoj turi posla." );
					strcat( DialogStrgEx2, "\n\nZarada: 80% od kupljenog." );
				}
				case 9: {
					vrstafirme = "Kladionica";
					strcat( DialogStrgEx2, ""col_white"Kad netko odigra tiket 80 posto iznosa cijene ide u sef firme.\n\
					Postoji 1 kladionica u drzavi, mozete ju pronaci komandom /gps.\n\
					INFO: uskoro sistem kladionice povezan sa pravom rl kladionicom." );
					strcat( DialogStrgEx2, "\n\nZarada: 80% od kupljenog." );
				}
				case 10: {
					vrstafirme = "PayNSpray";
					strcat( DialogStrgEx2, ""col_white"Kad netko koristi usluge paynspraya 80 posto iznosa cijene ide u sef firme.\n\
					Postoji 6 paynsprayeva u drzavi, mozete ih pronaci komandom /gps.");
					strcat( DialogStrgEx2, "\n\nZarada: 80% od kupljenog." );
				}
				case 11: {
					vrstafirme = "Neon Shop";
					strcat( DialogStrgEx2, ""col_white"Kad netko koristi usluge neon shopa 80 posto iznosa cijene ide u sef firme.\n\
					Postoji 1 neon shop u drzavi, mozete ga pronaci komandom /gps.");
					strcat( DialogStrgEx2, "\n\nZarada: 80% od kupljenog." );
				}
				case 12: {
					vrstafirme = "Sex Shop";
					strcat( DialogStrgEx2, ""col_white"Kad netko kupi nesto iz shopa 80 posto iznosa cijene ide u sef firme.\n\
					Postoji 1 Sex shop u drzavi, mozete ga pronaci komandom /gps.");
					strcat( DialogStrgEx2, "\n\nZarada: 80% od kupljenog." );
				}
				case 13: {
					vrstafirme = "Komunalije";
					strcat( DialogStrgEx2, ""col_white"Na paydayu svih igraca za svaku kucu i firmu koju igrac ima u firmu dodaje se 150$.");
					strcat( DialogStrgEx2, ""col_white"Ukupan zbroj troskova s obzirom na broj imovine dijeli se sa 10 i mnozi sa 3.");
					strcat( DialogStrgEx2, "\n\nZarada: Ukupan iznos podijeljen sa 10 i pomnozen sa 3." );
				}
				case 14: {
					vrstafirme = "Toplana";
					strcat( DialogStrgEx2, ""col_white"Na paydayu svih igraca za svaku kucu koju igrac ima u firmu dodaje se 250$.");
					strcat( DialogStrgEx2, ""col_white"Ukupan zbroj troskova s obzirom na broj imovine dijeli se sa 10 i mnozi sa 3.");
					strcat( DialogStrgEx2, "\n\nZarada: Ukupan iznos podijeljen sa 10 i pomnozen sa 3." );
				}
				case 15: {
					vrstafirme = "Vodovod";
					strcat( DialogStrgEx2, ""col_white"Na paydayu svih igraca za svaku kucu i firmu koju igrac ima u firmu dodaje se 150$.");
					strcat( DialogStrgEx2, ""col_white"Ukupan zbroj troskova s obzirom na broj imovine dijeli se sa 10 i mnozi sa 3.");
					strcat( DialogStrgEx2, "\n\nZarada: Ukupan iznos podijeljen sa 10 i pomnozen sa 3." );
				}
				case 16: {
					vrstafirme = "Elektrana";
					strcat( DialogStrgEx2, ""col_white"Na paydayu svih igraca za svaku kucu i firmu koju igrac ima u firmu dodaje se 250$.");
					strcat( DialogStrgEx2, ""col_white"Ukupan zbroj troskova s obzirom na broj imovine dijeli se sa 10 i mnozi sa 3.");
					strcat( DialogStrgEx2, "\n\nZarada: Ukupan iznos podijeljen sa 10 i pomnozen sa 3." );
				}
				case 17: {
					vrstafirme = "Telekom";
					strcat( DialogStrgEx2, ""col_white"Kod slanja poruke izvan tarife dobiva se 10$, svaka minuta poziva je 8$.");
					strcat( DialogStrgEx2, "\n\nZarada: 10$ po poruci, 8$ po minuti poziva." );
				}
			}
			format( globalstring, sizeof( globalstring ), "Opis firme - "col_server"%s", vrstafirme );
			SPD( playerid, 0, DSMSG, globalstring, DialogStrgEx2, "Ok", "" );
		}
	}
	else if( dialogid == dialog_REPORT_TYPE ){
		if( !response ) return cmd_report( playerid, Reporting[ playerid ] );
		else if( response ){
			new string[256];
			if( Reporting[ playerid ] == IPI ) return SendErrorMessage( playerid, "Igrac kojeg ste krenuli prijaviti vise nije online!" );
			switch( listitem ){
				case 0: { // RP Pravila
					for( new i=0; i < MAX_RRULES; i++ ){
						format( string, sizeof( string ), "%s%s (%s)\n", string, ReportRules[0][i][rulename], ReportRules[0][i][ruleshort] );
					}
					/*SPD( playerid, dialog_REPORT_RULE, DSL, "Odaberite pravilo",
					"Deathmatch (DM)\n\
					Power gaming (PG)\n\
					Drive-by (DB)\n\
					Meta-Gaming (MG)\n\
					NonRP (NonRP)\n\
					Logging to avoid (LTA)\n\
					Spawn kill (SK)\n\
					Team kill (TK)\n",
					D_ODABERI, D_ODUSTANI );*/
				}
				case 1: { // Opca pravila
					for( new i=0; i < MAX_RRULES; i++ ){
						format( string, sizeof( string ), "%s%s\n", string, ReportRules[1][i][rulename] );
					}
				}
				case 2: { // Pravila orgi
					for( new i=0; i < MAX_RRULES; i++ ){
						format( string, sizeof( string ), "%s%s\n", string, ReportRules[2][i][rulename] );
					}
				}
				case 3: { // Abuse
					for( new i=0; i < MAX_RRULES; i++ ){
						format( string, sizeof( string ), "%s%s\n", string, ReportRules[3][i][rulename] );
					}
				}
				case 4: { // Cheating
					for( new i=0; i < MAX_RRULES; i++ ){
						format( string, sizeof( string ), "%s%s\n", string, ReportRules[4][i][rulename] );
					}
				}
			}
			TempDialogValue[ playerid ] = listitem;
			SPD( playerid, dialog_REPORT_RULE, DSL, "Odaberite pravilo", string, D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_REPORT_RULE ){
		if( !response ) return 1;
		else if( response ){

			new stringic[128];
			new rep = -1;
			for( new id = 1; id < MAX_REPORT; id++ ) {
				if( repList[ id ][ repSend ] == false ) {
					rep = id;
					break;
				}
			}

			if( rep == -1 ) return SendErrorMessage( playerid, "Vec ima maksimalan broj poslatih reportova." );

			repList[ rep ][ repSend ] = true;
			repList[ rep ][ repID ] = playerid;

			repInfo[ playerid ][ repSended ] = true;
			repInfo[ playerid ][ repAnswered ] = false;

			strmid( repList[ rep ][ repOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32 );
			format( stringic, sizeof( stringic ), ""col_server"%s[%d] -> %s[%d]\n"col_white"%s",
			ImeIgraca( playerid ), playerid, ImeIgraca( Reporting[ playerid ] ), Reporting[ playerid ], ReportRules[ TempDialogValue[ playerid ] ][ listitem ][ rulename ] );
			strmid( repList[ rep ][ repQuestion ], stringic, 0, strlen( stringic ), 128 );

			SendInfoMessage( playerid, "Prijavio si igraca %s za %s.", ImeIgraca( Reporting[ playerid ] ), ReportRules[ TempDialogValue[ playerid ] ][ listitem ][ rulename ] );

			format( stringic, sizeof( stringic ), ""col_ljub"[!] REPORT | %s [%d] -> %s[%d]:"col_white" %s. (/rlp)",
			ImeIgraca( playerid ), playerid, ImeIgraca( Reporting[ playerid ] ), Reporting[ playerid ], ReportRules[ TempDialogValue[ playerid ] ][ listitem ][ rulename ] );
			NoviReport( 0xFFFFFFFF, stringic );
			ReportTajmer[ playerid ] = 300;
		}
	}
	else if( dialogid == dialog_FURNITURE_BUY ){
		if( !response ) return 1;
		else if( response ) Furniture_AddToCart( playerid, TempDialogValue[ playerid ] );
	}
	else if( dialogid == dialog_FURNITURE_CART ){
		if( !response ) return 1;
		else if( response ) {
			if( listitem == 0 ){
				new string[128];
				format( string, sizeof( string ),
				""col_server"Model: "col_white"%d\n\
				"col_server"Naziv: "col_white"%s\n\
				"col_server"Cijena: "col_white"$%s\n\n",
				TempDialogValue[ playerid ], Furniture_GetModelName( TempDialogValue[ playerid ] ), AddCommasToInt( Furniture_GetModelPrice( TempDialogValue[ playerid ] ) ) );

				SPD( playerid, 0, DSMSG, "Info o namjestaju", string, "Ok", "" );
			}
			else if( listitem == 1 ){
				Furniture_RemoveFromCart( playerid, TempDialogValue[ playerid ] );
			}
		}
	}
	else if( dialogid == dialog_FURNITURE_CHECKOUT ){
		if( !response ) return cmd_kupinamjestaj( playerid );
		else if( response ){
			new id, finalprice, found;
			if( sscanf( inputtext, "i", id ) ) {
				SendErrorMessage( playerid, "Nepravilan unos!" );
				return cmd_kupinamjestaj( playerid );
			}
			if( id > MAX_IMOVINA || id < 1 ) {
				SendErrorMessage( playerid, "Nepravilan ID imovine!" );
				return cmd_kupinamjestaj( playerid );
			}
			if( II[ id ][ iOwnerbaseID ] != PlayerInfo[ playerid ][ xID ] ) return SendErrorMessage( playerid, "Imovina ID %d nije u vasem vlasnistvu!", id );

			for( new i=0; i < MAX_CART; i++ ){
				if( Furniture_Cart[ playerid ][ i ][ FC_ModelID ] != INVALID_OBJECT_ID ){
					finalprice += Furniture_GetModelPrice( Furniture_Cart[ playerid ][ i ][ FC_ModelID ] )*Furniture_Cart[ playerid ][ i ][ FC_Quantity ];
					found++;
				}
			}
			if( found > 0 && PlayerInfo[ playerid ][ xNovac ] < finalprice ) return SendErrorMessage( playerid, "Nemate dovoljno novca da platite namjestaj! ( $%d )", finalprice );
			if( found > 0 && Furniture_GetCount( id )+found > MAX_FSLOTS ) return SendErrorMessage( playerid, "U imovini ne mozete imati vise od %d komada namjestaja!", MAX_FSLOTS );
			if( found > 0 && found+ServerInfo[ furnitureCounter ] >= MAX_FURNITURE ) return SendErrorMessage( playerid, "Kreiran je maksimalan broj namjestaja na serveru. Kontaktirajte voditelja!" );
			Furniture_Buy( playerid, id );
		}
	}
	else if( dialogid == dialog_FURNITURE_PLACE ){
		if( !response ) return 1;
		else if( response ){
			switch( listitem ){
				case 0: {
					new string[128];
					format( string, sizeof( string ),
					""col_server"Model: "col_white"%d\n\
					"col_server"Naziv: "col_white"%s\n",
					TempDialogValue[ playerid ], Furniture_GetModelName( TempDialogValue[ playerid ] ) );

					SPD( playerid, 0, DSMSG, "Info o namjestaju", string, "Ok", "" );
				}
				case 1: {
					Furniture_Place( playerid, TempDialogValue[ playerid ] );
					SendInfoMessage( playerid, "Kada pozicionirate namjestaj spremite ga. | Kameru okrecete drzeci tipku SHIFT" );
				}
				case 2: {
					new bool:found;
					for( new i=0; i < MAX_FURNITURE; i++ ){
						if( Furniture[ i ][ F_ModelID ] == TempDialogValue[ playerid ] && Furniture[ i ][ F_PropertyBaseID ] == II[ ChosenProperty[ playerid ] ][ ibaseID ] && Furniture[ i ][ F_Placed ] == 0 ){
							Furniture_Delete( i );
							found = true;
						}
					}
					if( !found ) return SendErrorMessage( playerid, "Namjestaj modelid: %d nije kreiran!", TempDialogValue[ playerid ] );
				}
			}
		}
	}
	else if( dialogid == dialog_FURNITURE_CONTROL ){
		if( !response ) return 1;
		else if( response ){
			if( inProperty[ playerid ] != PlayerInfo[ playerid ][ xProperty ][ 0 ] &&
						inProperty[ playerid ] != PlayerInfo[ playerid ][ xProperty ][ 1 ] &&
						inProperty[ playerid ] != PlayerInfo[ playerid ][ xProperty ][ 2 ] ) return SendErrorMessage( playerid, "Niste u svojoj imovini!" );
			switch( listitem ){
				case 0: {
					Furniture_Info( playerid, 2, -1, inProperty[ playerid ] );
				}
				case 1: {
					Furniture_OpenList( playerid, inProperty[ playerid ] );
				}
				case 2: {
					new found, header[24];
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
					for( new i=0; i < MAX_FURNITURE; i++ ){
						if( Furniture[ i ][ F_PropertyBaseID ] == II[ inProperty[ playerid ] ][ ibaseID ] ){
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, found+1, Furniture_GetModelName( Furniture[ i ][ F_ModelID ] ) );
							found++;
						}
					}
					if( found > 0 ) {
						format( header, sizeof( header ), "Namjestaj u vasoj kuci - %d", found );
						SPD( playerid, dialog_FURNITURE_SELL, DSL, header, DialogStrgEx, "Prodaj", "Odustani" );
					}
					else return SendErrorMessage( playerid, "Vi nemate namjestaj u kuci!" );
				}
			}
		}
	}
	else if( dialogid == dialog_FURNITURE_SELL ){
		if( !response ) return 1;
		else if( response ){
			new found;
			for( new i=0; i < MAX_FURNITURE; i++ ){
				if( Furniture[ i ][ F_PropertyBaseID ] == II[ inProperty[ playerid ] ][ ibaseID ] ){
					found++;
					if( found == listitem+1 ){
						new sellprice = Furniture_GetModelPrice( Furniture[ i ][ F_ModelID ] )/3;
						KGEyes_GivePlayerMoney( playerid, sellprice ), PlayerMoneyTrackSave( playerid, MONEY_HANDS, sellprice, "Prodaja namjestaja" );
						Furniture_Delete( i );

						SendInfoMessage( playerid, "Prodali ste namjestaj i dobili $%d", sellprice );
					}
				}
			}
		}
	}
	else if( dialogid == dialog_EVENTVOTE ){
		if( !response ) return 1;
		else if( response ){

			if( LiveEventInfo[ vote_r_or_l ] == 0 ){
				if( EventVote[ playerid ] > 0 ) return SendErrorMessage( playerid, "Vi ste vec glasali za sljedeci event!" );
				new Event_id = listitem+1;

				EventVote[ playerid ] = Event_id;
				LiveEventInfo[ le_votes ][ Event_id ]++;

				SendInfoMessage( playerid, "Glasali ste za %s da bude sljedeci event. Glasovi: %d", GetLiveEventName( Event_id ), LiveEventInfo[ le_votes ][ Event_id ] );
			}
			else if( LiveEventInfo[ vote_r_or_l ] == 1 ){
				if( EventVote[ playerid ] > 0 ) return SendErrorMessage( playerid, "Vi ste vec glasali za sljedeci event!" );
				if( listitem < 10 ) {

					new ideventa = (listitem+1) + (EventStranica[ playerid ]-10);
					if( Event[ ideventa ][ VehID ] == 0 ) return SendErrorMessage( playerid, "Izabrali ste event koji nepostoji." );

					EventVote[ playerid ] = ideventa;
					Event[ ideventa ][ Votes ]++;

					SendInfoMessage( playerid, "Glasali ste za event '%s'.",  Event[ ideventa ][ Name ] );

				}
				else if( listitem == 10 ) {

					if( EventStranica[ playerid ] == 100 ) return SendErrorMessage( playerid, "Ne moze dalje." );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					EventStranica[ playerid ] += 10;
					for( new i = (EventStranica[ playerid ]-9); i <= EventStranica[ playerid ]; i++ ) {
						format( DialogStrgEx, sizeof( DialogStrgEx ), "%s"col_event"%s\t"col_white"%d\n", DialogStrgEx, Event[ i ][ Name ], Event[ i ][ Votes ] );
					}

					format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->\n", DialogStrgEx );
					format( DialogStrgEx, sizeof( DialogStrgEx ), "%s<- Prethodna stranica", DialogStrgEx );


					SPD( playerid, dialog_EVENTVOTE, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				}
				else if( listitem == 11 ) {

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					EventStranica[ playerid ] -= 10;

					for( new i = (EventStranica[ playerid ]-9); i <= EventStranica[ playerid ]; i++ ) {
						format( DialogStrgEx, sizeof( DialogStrgEx ), "%s"col_event"%s\t"col_white"%d\n", DialogStrgEx, Event[ i ][ Name ], Event[ i ][ Votes ] );
					}

					if( EventStranica[ playerid ] > 10 ) {
						format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->\n", DialogStrgEx );
						format( DialogStrgEx, sizeof( DialogStrgEx ), "%s<- Prethodna stranica", DialogStrgEx );
					}
					else if( EventStranica[ playerid ] <= 10 ) {
						format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSledeca stranica ->", DialogStrgEx );
					}

					SPD( playerid, dialog_EVENTVOTE, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				}
			}


		}
	}
	// Dialozi kraj
	return true;
}
